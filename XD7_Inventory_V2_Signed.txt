#Requires -Version 3.0
#This File is in Unicode format. Do not edit in an ASCII editor. Notepad++ UTF-8-BOM

#region help text

<#
.SYNOPSIS
	Creates an inventory of a Citrix XenDesktop 7.8 through CVAD 2006 Site.
.DESCRIPTION
	Creates an inventory of a Citrix XenDesktop 7.8 through CVAD 2006 Site using Microsoft 
	PowerShell, Word, plain text, or HTML.
	
	This script requires at least PowerShell version 3 but runs best in version 5.

	Word is NOT needed to run the script. This script outputs in Text and HTML.
	
	You do NOT have to run this script on a Controller. This script was developed and run 
	from a Windows 10 VM.
	
	You can run this script remotely using the –AdminAddress (AA) parameter.
	
	This script supports versions of XenApp/XenDesktop starting with 7.8 through CVAD 2006.
	
	If you are running XA/XD 7.0 through 7.7, please use: 
	https://carlwebster.com/downloads/download-info/xenappxendesktop-7-x-documentation-script/

	If you are running CVAD 2006 and later, please use:
	https://carlwebster.com/downloads/download-info/citrix-virtual-apps-and-desktops-v3-script/

	If you are running Citrix Cloud, please use:
	https://carlwebster.com/downloads/download-info/citrix-cloud-citrix-virtual-apps-and-desktops-service/
	
	NOTE: The account used to run this script must have at least Read access to the SQL 
	Server(s) that hold(s) the Citrix Site, Monitoring, and Logging databases.
	
	By default, only gives summary information for:
		Administrators
		App-V Publishing
		AppDisks
		AppDNA
		Application Groups
		Applications
		Controllers
		Delivery Groups
		Hosting
		Logging
		Machine Catalogs
		Policies
		StoreFront
		Zones

	The Summary information is what is shown in the top half of Citrix Studio for:
		Machine Catalogs
		AppDisks
		Delivery Groups
		Applications
		Policies
		Logging
		Controllers
		Administrators
		Hosting
		StoreFront

	Using the MachineCatalogs parameter can cause the report to take a very long time to 
	complete and can generate an extremely long report.
	
	Using the DeliveryGroups parameter can cause the report to take a very long time to 
	complete and can generate an extremely long report.

	Using both the MachineCatalogs and DeliveryGroups parameters can cause the report to 
	take an extremely long time to complete and generate an exceptionally long report.
	
	Using BrokerRegistryKeys requires the script runs elevated.

	Creates an output file named after the XenDesktop 7.8 through CVAD 2006 Site.
	
	Word and PDF Document includes a Cover Page, Table of Contents, and Footer.
	Includes support for the following language versions of Microsoft Word:
		Catalan
		Chinese
		Danish
		Dutch
		English
		Finnish
		French
		German
		Norwegian
		Portuguese
		Spanish
		Swedish
		
.PARAMETER HTML
	Creates an HTML file with an .html extension.
	This parameter is disabled by default.
.PARAMETER Text
	Creates a formatted text file with a .txt extension.
	This parameter is disabled by default.
.PARAMETER AdminAddress
	Specifies the address of a XenDesktop controller the PowerShell snapins will connect 
	to. 
	This can be provided as a hostname or an IP address. 
	This parameter defaults to Localhost.
	This parameter has an alias of AA.
.PARAMETER Administrators
	Give detailed information for Administrator Scopes and Roles.
	This parameter is disabled by default.
	This parameter has an alias of Admins.
.PARAMETER AppDisks
	Gives detailed information for all AppDisks.
	
	This parameter is disabled by default.
	This parameter has an alias of AD.
.PARAMETER Applications
	Gives detailed information for all applications.
	This parameter is disabled by default.
	This parameter has an alias of Apps.
.PARAMETER BrokerRegistryKeys
	Adds information on 417 registry keys to the Controller section.
	
	*****Requires the script runs elevated*****

	For Word and PDF output, this adds eights pages, per Controller, to the report.
	For Text and HTML, this adds 315 lines, per Controller, to the report.

	This parameter is disabled by default.
	This parameter has an alias of BRK.
.PARAMETER Controllers
	As of version 2.22, adds the following information to the Controllers section:
		List of installed Microsoft Hotfixes and Updates
		List of Citrix installed components
		List of Windows installed Roles and Features
		Appendix C List of installed Microsoft Hotfixes and Updates for all 
		Controllers
		Appendix D List of Citrix installed components for all Controllers
		Appendix E List of Windows installed Roles and Features for all Controllers
	
	This parameter is disabled by default.
	This parameter has an alias of DDC.
.PARAMETER Hardware
	Use WMI to gather hardware information on Computer System, Disks, Processor, and 
	Network Interface Cards

	This parameter may require the script be run from an elevated PowerShell session 
	using an account with permission to retrieve hardware information (i.e. Domain Admin 
	or Local Administrator).

	Selecting this parameter will add to both the time it takes to run the script and 
	size of the report.

	This parameter is disabled by default.
	This parameter has an alias of HW.
.PARAMETER DeliveryGroups
	Gives detailed information on all desktops in all Desktop (Delivery) Groups.
	
	Using the DeliveryGroups parameter can cause the report to take a very long 
	time to complete and can generate an extremely long report.
	
	Using both the MachineCatalogs and DeliveryGroups parameters can cause the 
	report to take an extremely long time to complete and generate an exceptionally 
	long report.
	
	This parameter is disabled by default.
	This parameter has an alias of DG.
.PARAMETER DeliveryGroupsUtilization
	Gives a chart with the delivery group utilization for the last 7 days 
	depending on the information in the database.
	
	This option is only available when the report is generated in Word and requires 
	Microsoft Excel to be locally installed.
	
	Using the DeliveryGroupsUtilization parameter causes the report to take a longer 
	time to complete and generates a longer report.
	
	This parameter is disabled by default.
	This parameter has an alias of DGU.
.PARAMETER Hosting
	Give detailed information for Hosts, Host Connections, and Resources.
	This parameter is disabled by default.
	This parameter has an alias of Host.
.PARAMETER Logging
	Give the Configuration Logging report with, by default, details for the previous 
	seven days.
	This parameter is disabled by default.
.PARAMETER StartDate
	The start date for the Configuration Logging report.
	
	The format for date only is MM/DD/YYYY.
	
	Format to include a specific time range is "MM/DD/YYYY HH:MM:SS" in 24-hour format.
	The double quotes are needed.
	
	The default is today's date minus seven days.
	This parameter has an alias of SD.
.PARAMETER EndDate
	The end date for the Configuration Logging report.
	
	The format for date only is MM/DD/YYYY.
	
	Format to include a specific time range is "MM/DD/YYYY HH:MM:SS" in 24-hour format.
	The double quotes are needed.
	
	The default is today's date.
	This parameter has an alias of ED.
.PARAMETER MachineCatalogs
	Gives detailed information for all machines in all Machine Catalogs.
	
	Using the MachineCatalogs parameter can cause the report to take a very long 
	time to complete and can generate an extremely long report.
	
	Using both the MachineCatalogs and DeliveryGroups parameters can cause the 
	report to take an extremely long time to complete and generate an exceptionally 
	long report.
	
	This parameter is disabled by default.
	This parameter has an alias of MC.
.PARAMETER NoADPolicies
	Excludes all Citrix AD-based policy information from the output document.
	Includes only Site policies created in Studio.
	
	This switch is useful in large AD environments, where there may be thousands
	of policies, to keep SYSVOL from being searched.
	
	This parameter is disabled by default.
	This parameter has an alias of NoAD.
.PARAMETER NoPolicies
	Excludes all Site and Citrix AD-based policy information from the output document.
	
	Using the NoPolicies parameter will cause the Policies parameter to be set to False.
	
	This parameter is disabled by default.
	This parameter has an alias of NP.
.PARAMETER NoSessions
	Excludes Machine Catalog, Application and Hosting session data from the report.
	
	Using the MaxDetails parameter does not change this setting.
	
	This parameter is disabled by default.
	This parameter has an alias of NS.
.PARAMETER Policies
	Give detailed information for both Site and Citrix AD-based Policies.
	
	Using the Policies parameter can cause the report to take a very long time 
	to complete and can generate an extremely long report.
	
	There are three related parameters: Policies, NoPolicies, and NoADPolicies.
	
	Policies and NoPolicies are mutually exclusive and priority is given to NoPolicies.
	
	This parameter is disabled by default.
	This parameter has an alias of Pol.
.PARAMETER StoreFront
	Give detailed information for StoreFront.
	This parameter is disabled by default.
	This parameter has an alias of SF.
.PARAMETER VDARegistryKeys
	Adds information on registry keys to the Machine Details section.
	
	If this parameter is used, MachineCatalogs is set to True.
	
	This parameter is disabled by default.
	This parameter has an alias of VRK.
.PARAMETER MaxDetails
	Adds maximum detail to the report.
	
	This is the same as using the following parameters:
		Administrators
		AppDisks
		Applications
		BrokerRegistryKeys
		Controllers
		DeliveryGroups
		HardWare
		Hosting
		Logging
		MachineCatalogs
		Policies
		StoreFront
		VDARegistryKeys

	*****Requires the script runs elevated*****

	Does not change the value of NoADPolicies.
	Does not change the value of NoSessions.
	
	WARNING: Using this parameter can create an extremely large report and 
	can take a very long time to run.

	This parameter has an alias of MAX.
.PARAMETER Section
	Processes one or more sections of the report.
	Valid options are:
		Admins (Administrators)
		AppDisks
		AppDNA
		Apps (Applications and Application Group Details)
		AppV
		Catalogs (Machine Catalogs)
		Config (Configuration)
		Controllers
		Groups (Delivery Groups)
		Hosting
		Licensing
		Logging
		Policies
		StoreFront
		Zones
		All

	This parameter defaults to All sections.
	
	Multiple sections are separated by a comma. -Section catalogs, groups
	
	Notes:
	Using Logging will force the Logging switch to True.
	Using Policies will force the Policies switch to True.
	If Policies is selected and the NoPolicies switch is used, the script will terminate.
.PARAMETER AddDateTime
	Adds a date timestamp to the end of the file name.
	The timestamp is in the format of yyyy-MM-dd_HHmm.
	June 1, 2022, at 6PM is 2022-06-01_1800.
	The output filename will be ReportName_2022-06-01_1800.docx (or .pdf).
	This parameter is disabled by default.
	This parameter has an alias of ADT.
.PARAMETER CSV
	Will create a CSV file for each Appendix.
	The default value is False.
	
	Output CSV filename is in the format:
	
	CVADSiteName_Documentation_Appendix#_NameOfAppendix.csv
	
	For example:
		CVADSiteName_Documentation_AppendixA_VDARegistryItems.csv
		CVADSiteName_Documentation_AppendixB_ControllerRegistryItems.csv
		CVADSiteName_Documentation_AppendixC_MicrosoftHotfixesandUpdates.csv
		CVADSiteName_Documentation_AppendixD_CitrixInstalledComponents.csv
		CVADSiteName_Documentation_AppendixE_WindowsInstalledComponents.csv	
.PARAMETER Dev
	Clears errors at the beginning of the script.
	Outputs all errors to a text file at the end of the script.
	
	This is used when the script developer requests more troubleshooting data.
	The text file is placed in the same folder from where the script runs.
	
	This parameter is disabled by default.
.PARAMETER Folder
	Specifies the optional output folder to save the output report. 
.PARAMETER Log
	Generates a log file for troubleshooting.
.PARAMETER ScriptInfo
	Outputs information about the script to a text file.
	The text file is placed in the same folder from where the script runs.
	
	This parameter is disabled by default.
	This parameter has an alias of SI.
.PARAMETER ReportFooter
	Outputs a footer section at the end of the report.

	This parameter has an alias of RF.
	
	Report Footer
		Report information:
			Created with: <Script Name> - Release Date: <Script Release Date>
			Script version: <Script Version>
			Started on <Date Time in Local Format>
			Elapsed time: nn days, nn hours, nn minutes, nn.nn seconds
			Ran from domain <Domain Name> by user <Username>
			Ran from the folder <Folder Name>

	Script Name and Script Release date are script-specific variables.
	Start Date Time in Local Format is a script variable.
	Elapsed time is a calculated value.
	Domain Name is $env:USERDNSDOMAIN.
	Username is $env:USERNAME.
	Folder Name is a script variable.
.PARAMETER MSWord
	SaveAs DOCX file
	This parameter is set True if no other output format is selected.
.PARAMETER PDF
	SaveAs PDF file instead of DOCX file.
	This parameter is disabled by default.
	The PDF file is roughly 5X to 10X larger than the DOCX file.
	This parameter requires Microsoft Word to be installed.
	This parameter uses the Word SaveAs PDF capability.
.PARAMETER CompanyAddress
	Company Address to use for the Cover Page, if the Cover Page has the Address field.
	
	The following Cover Pages have an Address field:
		Banded (Word 2013/2016)
		Contrast (Word 2010)
		Exposure (Word 2010)
		Filigree (Word 2013/2016)
		Ion (Dark) (Word 2013/2016)
		Retrospect (Word 2013/2016)
		Semaphore (Word 2013/2016)
		Tiles (Word 2010)
		ViewMaster (Word 2013/2016)
		
	This parameter is only valid with the MSWORD and PDF output parameters.
	This parameter has an alias of CA.
.PARAMETER CompanyEmail
	Company Email to use for the Cover Page, if the Cover Page has the Email field. 
	
	The following Cover Pages have an Email field:
		Facet (Word 2013/2016)
	
	This parameter is only valid with the MSWORD and PDF output parameters.
	This parameter has an alias of CE.
.PARAMETER CompanyFax
	Company Fax to use for the Cover Page, if the Cover Page has the Fax field. 
	
	The following Cover Pages have a Fax field:
		Contrast (Word 2010)
		Exposure (Word 2010)
	
	This parameter is only valid with the MSWORD and PDF output parameters.
	This parameter has an alias of CF.
.PARAMETER CompanyName
	Company Name to use for the Cover Page. 
	The default value is contained in 
	HKCU:\Software\Microsoft\Office\Common\UserInfo\CompanyName or
	HKCU:\Software\Microsoft\Office\Common\UserInfo\Company, whichever is populated 
	on the computer running the script.

	This parameter is only valid with the MSWORD and PDF output parameters.
	This parameter has an alias of CN.
.PARAMETER CompanyPhone
	Company Phone to use for the Cover Page if the Cover Page has the Phone field. 
	
	The following Cover Pages have a Phone field:
		Contrast (Word 2010)
		Exposure (Word 2010)
	
	This parameter is only valid with the MSWORD and PDF output parameters.
	This parameter has an alias of CPh.
.PARAMETER CoverPage
	What Microsoft Word Cover Page to use.
	Only Word 2010, 2013 and 2016 are supported.
	(default cover pages in Word en-US)

	Valid input is:
		Alphabet (Word 2010. Works)
		Annual (Word 2010. Doesn't work well for this report)
		Austere (Word 2010. Works)
		Austin (Word 2010/2013/2016. Doesn't work in 2013 or 2016, mostly
		works in 2010, but Subtitle/Subject & Author fields need moving
		after the title box is moved up)
		Banded (Word 2013/2016. Works)
		Conservative (Word 2010. Works)
		Contrast (Word 2010. Works)
		Cubicles (Word 2010. Works)
		Exposure (Word 2010. Works if you like looking sideways)
		Facet (Word 2013/2016. Works)
		Filigree (Word 2013/2016. Works)
		Grid (Word 2010/2013/2016. Works in 2010)
		Integral (Word 2013/2016. Works)
		Ion (Dark) (Word 2013/2016. Top date doesn't fit; box needs to be 
		manually resized or font changed to 8 point)
		Ion (Light) (Word 2013/2016. Top date doesn't fit; box needs to be 
		manually resized or font changed to 8 point)
		Mod (Word 2010. Works)
		Motion (Word 2010/2013/2016. Works if top date is manually changed to 
		36 point)
		Newsprint (Word 2010. Works but date is not populated)
		Perspective (Word 2010. Works)
		Pinstripes (Word 2010. Works)
		Puzzle (Word 2010. Top date doesn't fit; box needs to be manually 
		resized or font changed to 14 point)
		Retrospect (Word 2013/2016. Works)
		Semaphore (Word 2013/2016. Works)
		Sideline (Word 2010/2013/2016. Doesn't work in 2013 or 2016, works in 
		2010)
		Slice (Dark) (Word 2013/2016. Doesn't work)
		Slice (Light) (Word 2013/2016. Doesn't work)
		Stacks (Word 2010. Works)
		Tiles (Word 2010. Date doesn't fit unless changed to 26 point)
		Transcend (Word 2010. Works)
		ViewMaster (Word 2013/2016. Works)
		Whisp (Word 2013/2016. Works)

	The default value is Sideline.
	This parameter has an alias of CP.
	This parameter is only valid with the MSWORD and PDF output parameters.
.PARAMETER UserName
	Username to use for the Cover Page and Footer.
	The default value is contained in $env:username
	This parameter has an alias of UN.
	This parameter is only valid with the MSWORD and PDF output parameters.
.PARAMETER SmtpServer
	Specifies the optional email server to send the output report. 
.PARAMETER SmtpPort
	Specifies the SMTP port. 
	The default is 25.
.PARAMETER UseSSL
	Specifies whether to use SSL for the SmtpServer.
	The default is False.
.PARAMETER From
	Specifies the username for the From email address.
	If SmtpServer is used, this is a required parameter.
.PARAMETER To
	Specifies the username for the To email address.
	If SmtpServer is used, this is a required parameter.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1
	
	Uses all default values.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.
	The computer running the script for the AdminAddress.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -AdminAddress DDC01
	
	Uses all default values.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.
	DDC01 for the AdminAddress.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -PDF
	
	Uses all default values and saves the document as a PDF file.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.
	The computer running the script for the AdminAddress.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -TEXT

	Uses all default values and saves the document as a formatted text file.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -HTML

	Uses all default values and saves the document as an HTML file.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -MachineCatalogs
	
	Creates a report with full details for all machines in all Machine Catalogs.
	Uses all Default values.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -DeliveryGroups
	
	Creates a report with full details for all desktops in all Desktop (Delivery) Groups.
	Uses all Default values.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -DeliveryGroupsUtilization
	
	Creates a report with utilization details for all Desktop (Delivery) Groups.
	Uses all Default values.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -DeliveryGroups -MachineCatalogs
	
	Creates a report with full details for all machines in all Machine Catalogs and 
	all desktops in all Delivery Groups.
	Uses all Default values.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -Applications
	
	Creates a report with full details for all applications.
	Uses all Default values.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -Policies
	
	Creates a report with full details for Policies.
	Uses all Default values.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -NoPolicies
	
	Creates a report with no Policy information.
	Uses all Default values.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -NoADPolicies
	
	Creates a report with no Citrix AD-based Policy information.
	Uses all Default values.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -Policies -NoADPolicies
	
	Creates a report with full details on Site policies created in Studio but 
	no Citrix AD-based Policy information.
	
	Uses all Default values.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -Administrators
	
	Creates a report with full details on Administrator Scopes and Roles.
	
	Uses all Default values.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -Logging -StartDate 06/01/2022 -EndDate 
	06/31/2022	
	
	Creates a report with Configuration Logging details for the dates 06/01/2022 through 
	06/31/2022.
	
	Uses all Default values.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -Logging -StartDate "06/01/2022 10:00:00" 
	-EndDate "06/01/2022 14:00:00"	
	
	Creates a report with Configuration Logging details for the time range 
	06/01/2022 10:00:00AM through 06/01/2022 02:00:00PM.
	
	Narrowing the report down to seconds does not work. Seconds must be either 00 or 59.
	
	Uses all Default values.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -Hosting
	
	Creates a report with full details for Hosts, Host Connections, and Resources.
	Uses all Default values.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -StoreFront
	
	Creates a report with full details for StoreFront.
	Uses all Default values.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -MachineCatalogs -DeliveryGroups -Applications 
	-Policies -Hosting -StoreFront	
	
	Creates a report with full details for all:
		Machines in all Machine Catalogs
		Desktops in all Delivery Groups
		Applications
		Policies
		Hosts, Host Connections, and Resources
		StoreFront
		
	Uses all Default values.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -MC -DG -Apps -Policies -Hosting
	
	Creates a report with full details for all:
		Machines in all Machine Catalogs
		Desktops in all Delivery Groups
		Applications
		Policies
		Hosts, Host Connections, and Resources
		
	Uses all Default values.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.
.EXAMPLE
	PS C:\PSScript .\XD7_Inventory_V2.ps1 -CompanyName "Carl Webster Consulting" 
	-CoverPage "Mod" -UserName "Carl Webster" -AdminAddress DDC01
	
	Uses:
		Carl Webster Consulting for the Company Name.
		Mod for the Cover Page format.
		Carl Webster for the Username.
		Controller named DDC01 for the AdminAddress.
.EXAMPLE
	PS C:\PSScript .\XD7_Inventory_V2.ps1 -CN "Carl Webster Consulting" -CP "Mod" 
	-UN "Carl Webster"
	
	Uses:
		Carl Webster Consulting for the Company Name (alias CN).
		Mod for the Cover Page format (alias CP).
		Carl Webster for the Username (alias UN).
		The computer running the script for the AdminAddress.
.EXAMPLE
	PS C:\PSScript .\XD7_Inventory_V2.ps1 -CompanyName "Sherlock Holmes Consulting" 
	-CoverPage Exposure -UserName "Dr. Watson" -CompanyAddress "221B Baker Street, London, 
	England" -CompanyFax "+44 1753 276600" -CompanyPhone "+44 1753 276200"
	
	Uses:
		Sherlock Holmes Consulting for the Company Name.
		Exposure for the Cover Page format.
		Dr. Watson for the Username.
		221B Baker Street, London, England for the Company Address.
		+44 1753 276600 for the Company Fax.
		+44 1753 276200 for the Company Phone.
.EXAMPLE
	PS C:\PSScript .\XD7_Inventory_V2.ps1 -CompanyName "Sherlock Holmes Consulting" 
	-CoverPage Facet -UserName "Dr. Watson" -CompanyEmail SuperSleuth@SherlockHolmes.com

	Uses:
		Sherlock Holmes Consulting for the Company Name.
		Facet for the Cover Page format.
		Dr. Watson for the Username.
		SuperSleuth@SherlockHolmes.com for the Company Email.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -AddDateTime
	
	Uses all Default values.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.

	Adds a date time stamp to the end of the file name.
	The timestamp is in the format of yyyy-MM-dd_HHmm.
	June 1, 2022, at 6PM is 2022-06-01_1800.
	The output filename will be XD7SiteName_2022-06-01_1800.docx
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -PDF -AddDateTime
	
	Uses all Default values and saves the document as a PDF file.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.

	Adds a date time stamp to the end of the file name.
	The timestamp is in the format of yyyy-MM-dd_HHmm.
	June 1, 2022, at 6PM is 2022-06-01_1800.
	The output filename will be XD7SiteName_2022-06-01_1800.pdf
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -Hardware
	
	Uses all default values.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -Folder \\FileServer\ShareName
	
	Uses all default values.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.
	
	The output file is saved in the path \\FileServer\ShareName
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -Section Policies
	
	Uses all Default values.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.
	Processes only the Policies section of the report.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -Section Groups -DG
	
	Uses all Default values.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.
	Processes only the Delivery Groups section of the report with Delivery Group details.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -Section Config, Licensing -HTML 

	Creates an HTML report.

	The report includes only the Configuration and Licensing sections.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -Section Groups
	
	Uses all Default values.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.
	Processes only the Delivery Groups section of the report with no Delivery Group details.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -BrokerRegistryKeys
	
	*****Requires the script runs elevated*****

	Uses all Default values.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.
	Adds the information on over 300 Broker registry keys to the Controllers section.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -VDARegistryKeys
	
	Uses all Default values.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.
	Adds the information on VDA registry keys to Appendix A.
	Forces the MachineCatalogs parameter to $True
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -MaxDetails
	
	Uses all Default values.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.
	
	Set the following parameter values:
		Administrators      = True
		AppDisks            = True
		Applications        = True
		BrokerRegistryKeys  = True
		Controllers         = True
		DeliveryGroups      = True
		HardWare            = True
		Hosting             = True
		Logging             = True
		MachineCatalogs     = True
		Policies            = True
		StoreFront          = True
		VDARegistryKeys     = True
		
		NoPolicies          = False
		Section             = "All"

	*****Requires the script runs elevated*****
		
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -Dev -ScriptInfo -Log
	
	Uses all Default values.
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\CompanyName="Carl 
	Webster" or 
	HKEY_CURRENT_USER\Software\Microsoft\Office\Common\UserInfo\Company="Carl Webster"
	$env:username = Administrator

	Carl Webster for the Company Name.
	Sideline for the Cover Page format.
	Administrator for the Username.
	
	Creates a text file named XAXDV2InventoryScriptErrors_yyyyMMddTHHmmssffff.txt that 
	contains up to the last 250 errors reported by the script.
	
	Creates a text file named XAXDV2InventoryScriptInfo_yyyy-MM-dd_HHmm.txt that contains 
	all the script parameters and other basic information.
	
	Creates a text file for transcript logging named 
	XDV2DocScriptTranscript_yyyyMMddTHHmmssffff.txt.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -CSV
	
	Uses all Default values.
	LocalHost for AdminAddress.
	Creates a CSV file for each Appendix.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -SmtpServer mail.domain.tld -From 
	XDAdmin@domain.tld -To ITGroup@domain.tld	

	The script uses the email server mail.domain.tld, sending from XDAdmin@domain.tld and 
	sending to ITGroup@domain.tld.

	The script Uses the default SMTP port 25 and does not use SSL.

	If the current user's credentials are not valid to send an email, the script prompts 
	the user to enter valid credentials.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -SmtpServer mailrelay.domain.tld -From 
	Anonymous@domain.tld -To ITGroup@domain.tld	

	***SENDING UNAUTHENTICATED EMAIL***

	The script uses the email server mailrelay.domain.tld, sending from 
	anonymous@domain.tld and sending to ITGroup@domain.tld.

	To send an unauthenticated email using an email relay server requires the From email 
	account to use the name Anonymous.

	The script uses the default SMTP port 25 and does not use SSL.
	
	***GMAIL/G SUITE SMTP RELAY***
	https://support.google.com/a/answer/2956491?hl=en
	https://support.google.com/a/answer/176600?hl=en

	To send an email using a Gmail or g-suite account, you may have to turn ON the "Less 
	secure app access" option on your account.
	***GMAIL/G SUITE SMTP RELAY***

	The script generates an anonymous, secure password for anonymous@domain.tld 
	account.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -SmtpServer 
	labaddomain-com.mail.protection.outlook.com -UseSSL -From 
	SomeEmailAddress@labaddomain.com -To ITGroupDL@labaddomain.com	

	***OFFICE 365 Example***

	https://docs.microsoft.com/en-us/exchange/mail-flow-best-practices/how-to-set-up-a-multifunction-device-or-application-to-send-email-using-office-3
	
	This uses Option 2 from the above link.
	
	***OFFICE 365 Example***

	The script uses the email server labaddomain-com.mail.protection.outlook.com, sending 
	from SomeEmailAddress@labaddomain.com and sending to ITGroupDL@labaddomain.com.

	The script uses the default SMTP port 25 and SSL.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -SmtpServer smtp.office365.com -SmtpPort 587 
	-UseSSL -From Webster@CarlWebster.com -To ITGroup@CarlWebster.com	

	The script uses the email server smtp.office365.com on port 587 using SSL, sending from 
	webster@carlwebster.com and sending to ITGroup@carlwebster.com.

	If the current user's credentials are not valid to send an email, the script prompts 
	the user to enter valid credentials.
.EXAMPLE
	PS C:\PSScript > .\XD7_Inventory_V2.ps1 -SmtpServer smtp.gmail.com -SmtpPort 587 
	-UseSSL -From Webster@CarlWebster.com -To ITGroup@CarlWebster.com	

	*** NOTE ***
	To send an email using a Gmail or g-suite account, you may have to turn ON the "Less 
	secure app access" option on your account.
	*** NOTE ***
	
	The script uses the email server smtp.gmail.com on port 587 using SSL, sending from 
	webster@gmail.com and sending to ITGroup@carlwebster.com.

	If the current user's credentials are not valid to send an email, the script prompts 
	the user to enter valid credentials.
.INPUTS
	None. You cannot pipe objects to this script.
.OUTPUTS
	No objects are output from this script. 
	This script creates a Word, PDF, plain text, or HTML document.
.NOTES
	NAME: XD7_Inventory_V2.ps1
	VERSION: 2.52
	AUTHOR: Carl Webster
	LASTEDIT: March 24, 2023
#>

#endregion

#region script parameters
#thanks to @jeffwouters and Michael B. Smith for helping me with these parameters
[CmdletBinding(SupportsShouldProcess = $False, ConfirmImpact = "None", DefaultParameterSetName = "Word") ]

Param(
	[parameter(ParameterSetName="HTML",Mandatory=$False)] 
	[Switch]$HTML=$False,

	[parameter(ParameterSetName="Text",Mandatory=$False)] 
	[Switch]$Text=$False,

	[parameter(Mandatory=$False)] 
	[ValidateNotNullOrEmpty()]
	[Alias("AA")]
	[string]$AdminAddress="Localhost",

	[parameter(Mandatory=$False)] 
	[Alias("Admins")]
	[Switch]$Administrators=$False,	
	
	[parameter(Mandatory=$False)] 
	[Alias("AD")]
	[Switch]$AppDisks=$False,	
	
	[parameter(Mandatory=$False)] 
	[Alias("Apps")]
	[Switch]$Applications=$False,	
	
	[parameter(Mandatory=$False)] 
	[Alias("BRK")]
	[Switch]$BrokerRegistryKeys=$False,

	[parameter(Mandatory=$False)] 
	[Alias("DDC")]
	[Switch]$Controllers=$False,	
	
	[parameter(Mandatory=$False)] 
	[Alias("HW")]
	[Switch]$Hardware=$False,

	[parameter(Mandatory=$False)] 
	[Alias("DG")]
	[Switch]$DeliveryGroups=$False,	

	[parameter(Mandatory=$False)] 
	[Alias("DGU")]
	[Switch]$DeliveryGroupsUtilization=$False,	
	
	[parameter(Mandatory=$False)] 
	[Alias("Host")]
	[Switch]$Hosting=$False,	
	
	[parameter(Mandatory=$False)] 
	[Switch]$Logging=$False,	
	
	[parameter(Mandatory=$False)] 
	[Alias("SD")]
	[Datetime]$StartDate = ((Get-Date -displayhint date).AddDays(-7)),

	[parameter(Mandatory=$False)] 
	[Alias("ED")]
	[Datetime]$EndDate = (Get-Date -displayhint date),
	
	[parameter(Mandatory=$False)] 
	[Alias("MC")]
	[Switch]$MachineCatalogs=$False,	
	
	[parameter(Mandatory=$False)] 
	[Alias("NoAD")]
	[Switch]$NoADPolicies=$False,	
	
	[parameter(Mandatory=$False)] 
	[Alias("NP")]
	[Switch]$NoPolicies=$False,	
	
	[parameter(Mandatory=$False)] 
	[Alias("NS")]
	[Switch]$NoSessions=$False,	
	
	[parameter(Mandatory=$False)] 
	[Alias("Pol")]
	[Switch]$Policies=$False,	
	
	[parameter(Mandatory=$False)] 
	[Alias("SF")]
	[Switch]$StoreFront=$False,	
	
	[parameter(Mandatory=$False)] 
	[Alias("VRK")]
	[Switch]$VDARegistryKeys=$False,

	[parameter(Mandatory=$False)] 
	[Alias("MAX")]
	[Switch]$MaxDetails=$False,

	[ValidateSet('All', 'Admins', 'AppDisks', 'AppDNA', 'Apps', 'AppV', 'Catalogs', 'Config', 
	'Controllers', 'Groups', 'Hosting', 'Licensing', 'Logging', 'Policies', 'StoreFront', 'Zones')]
	[parameter(Mandatory=$False)] 
	[String[]] $Section = 'All',
	
	[parameter(Mandatory=$False)] 
	[Alias("ADT")]
	[Switch]$AddDateTime=$False,
	
	[parameter(Mandatory=$False)] 
	[switch]$CSV=$False,

	[parameter(Mandatory=$False)] 
	[Switch]$Dev=$False,
	
	[parameter(Mandatory=$False)] 
	[string]$Folder="",
	
	[parameter(Mandatory=$False)] 
	[Switch]$Log=$False,
	
	[parameter(Mandatory=$False)] 
	[Alias("SI")]
	[Switch]$ScriptInfo=$False,
	
	[parameter(Mandatory=$False)] 
	[Alias("RF")]
	[Switch]$ReportFooter=$False,

	[parameter(ParameterSetName="Word",Mandatory=$False)] 
	[Switch]$MSWord=$False,

	[parameter(ParameterSetName="PDF",Mandatory=$False)] 
	[Switch]$PDF=$False,

	[parameter(ParameterSetName="Word",Mandatory=$False)] 
	[parameter(ParameterSetName="PDF",Mandatory=$False)] 
	[Alias("CA")]
	[ValidateNotNullOrEmpty()]
	[string]$CompanyAddress="",
    
	[parameter(ParameterSetName="Word",Mandatory=$False)] 
	[parameter(ParameterSetName="PDF",Mandatory=$False)] 
	[Alias("CE")]
	[ValidateNotNullOrEmpty()]
	[string]$CompanyEmail="",
    
	[parameter(ParameterSetName="Word",Mandatory=$False)] 
	[parameter(ParameterSetName="PDF",Mandatory=$False)] 
	[Alias("CF")]
	[ValidateNotNullOrEmpty()]
	[string]$CompanyFax="",
    
	[parameter(ParameterSetName="Word",Mandatory=$False)] 
	[parameter(ParameterSetName="PDF",Mandatory=$False)] 
	[Alias("CN")]
	[ValidateNotNullOrEmpty()]
	[string]$CompanyName="",
    
	[parameter(ParameterSetName="Word",Mandatory=$False)] 
	[parameter(ParameterSetName="PDF",Mandatory=$False)] 
	[Alias("CPh")]
	[ValidateNotNullOrEmpty()]
	[string]$CompanyPhone="",
    
	[parameter(ParameterSetName="Word",Mandatory=$False)] 
	[parameter(ParameterSetName="PDF",Mandatory=$False)] 
	[Alias("CP")]
	[ValidateNotNullOrEmpty()]
	[string]$CoverPage="Sideline", 

	[parameter(ParameterSetName="Word",Mandatory=$False)] 
	[parameter(ParameterSetName="PDF",Mandatory=$False)] 
	[Alias("UN")]
	[ValidateNotNullOrEmpty()]
	[string]$UserName=$env:username,

	[parameter(Mandatory=$False)] 
	[string]$SmtpServer="",

	[parameter(Mandatory=$False)] 
	[int]$SmtpPort=25,

	[parameter(Mandatory=$False)] 
	[switch]$UseSSL=$False,

	[parameter(Mandatory=$False)] 
	[string]$From="",

	[parameter(Mandatory=$False)] 
	[string]$To=""

	)
#endregion

#region script change log	
#webster@carlwebster.com
#@carlwebster on Twitter
#http://www.CarlWebster.com
#Created on October 20, 2013
#started updating for version 7.8+ on April 17, 2016

# This script is based on the 1.20 script

#Version 2.52 24-Mar-2023
#	In Function OutputDesktopOSMachine:
#		test if there is a Desktop.DNSName
#		If not, test Desktop.MachineName
#		If not, test Desktop.HostedMachineName
#		If not, use error message "error, there was no name found for the Desktop"
#	In Function OutputHosting:
#		for Word output:
#			if there are no single-session OS or multi-session OS or sessions, output a message and don't waste a page
#			add a page break after outputting Session data
#	In Function OutputServerOSMachine:
#		test if there is a Server.DNSName
#		If not, test Server.MachineName
#		If not, test Server.HostedMachineName
#		If not, use error message "error, there was no name found for the Server"
#	Updated for CVAD 2206/2209/2212/2303/7.34/7.35/7.36/7.37
#
#Version 2.51 2-Oct-2022
#	Added Computer policy
#		Profile Management\Advanced settings\Maximum number of VHDX disks for storing Outlook OST files
#		Profile Management\Citrix Virtual Apps Optimization settings\Enable Citrix Virtual Apps Optimization
#		Profile Management\Citrix Virtual Apps Optimization settings\Path to Citrix Virtual Apps optimization definitions:
#		Profile Management\File deduplication\Files to exclude from the shared store
#		Profile Management\File deduplication\Files to include from the shared store
#
#Version 2.50 22-Sep-2022
#	Updated Function ProcessScriptSetup to support multiple Section items
#	Updated the script to allow the Section parameter to support multiple items
#	Updated the help text
#	Updated the ReadMe file
#
#Version 2.49 16-Jul-2022
#	Fixed bug reported by James Rankin where in Function OutputDatastores I didn't check for SQLServerName,TCPPortNumber
#		https://support.citrix.com/article/CTX234610/how-to-configure-xendesktop-to-use-custom-sql-port
#		For example, to to [sic] add custom port to the connection strings, then set the $ServerName variable to "DBServername\Instance,CustomPortNumber".
#		Also fixed a bug where if unable to connect to the SQL server, that error was not handled and many variables were then not defined
#	Updated Function GetDBCompatibilityLevel to support SQL Server 2022
#	Updated the help text
#	Updated the ReadMe file
#
#Version 2.48 26-Apr-2022
#	Fixed text output for hardware inventory
#	General code cleanup
#	In Function OutputNicItem, fixed several issues with DHCP data
#
#Version 2.47 26-Mar-2022
#	Replaced all Get-WmiObject with Get-CimInstance
#	Updated for CVAD 2203/7.33 and CVAD 2206/7.34
#	Updated the Policies setting table to match the V3 and Citrix Cloud scripts
#
#Version 2.46 15-Feb-2022
#	Changed the date format for the transcript and error log files from yyyy-MM-dd_HHmm format to the FileDateTime format
#		The format is yyyyMMddTHHmmssffff (case-sensitive, using a 4-digit year, 2-digit month, 2-digit day, 
#		the letter T as a time separator, 2-digit hour, 2-digit minute, 2-digit second, and 4-digit millisecond). 
#		For example: 20221225T0840107271.
#	Fixed the German Table of Contents (Thanks to Rene Bigler)
#		From 
#			'de-'	{ 'Automatische Tabelle 2'; Break }
#		To
#			'de-'	{ 'Automatisches Verzeichnis 2'; Break }
#	In Function AbortScript, add test for the winword process and terminate it if it is running
#		Added stopping the transcript log if the log was enabled and started
#	In Functions AbortScript and SaveandCloseDocumentandShutdownWord, add code from Guy Leech to test for the "Id" property before using it
#	Replaced most script Exit calls with AbortScript to stop the transcript log if the log was enabled and started
#	Updated the help text
#	Updated the ReadMe file
#
#Version 2.45 24-Nov-2021
#	Added Function OutputReportFooter
#	Added Parameter ReportFooter
#		Outputs a footer section at the end of the report.
#		Report Footer
#			Report information:
#				Created with: <Script Name> - Release Date: <Script Release Date>
#				Script version: <Script Version>
#				Started on <Date Time in Local Format>
#				Elapsed time: nn days, nn hours, nn minutes, nn.nn seconds
#				Ran from domain <Domain Name> by user <Username>
#				Ran from the folder <Folder Name>
#	Fixed a logic error in Function ProcessPolicySummary
#		Instead of getting both Computer and User policies at one time, get them separately
#	In Function AbortScript, add test for the winword process and terminate it if it is running
#	In Functions AbortScript and SaveandCloseDocumentandShutdownWord, add code from Guy Leech to test for the "Id" property before using it
#	Removed the requirement for the Citrix.GroupPolicy.Commands.psm1 module file (Thanks to Guy Leech for the help)
#		Added the following functions from the module to the script and cleaned up the Citrix code
#			CreateDictionary
#			CreateObject
#			FilterString
#			Get-CitrixGroupPolicy
#			Get-CitrixGroupPolicyConfiguration
#			Get-CitrixGroupPolicyFilter
#	Reworked the use of LocalFarmGPO PSDrive to prevent multiple creations and deletions
#	Updated for CVAD 2109/7.31 and CVAD 2112/7.32
#	Updated Functions SaveandCloseTextDocument and SaveandCloseHTMLDocument to add a "Report Complete" line
#	Updated Functions ShowScriptOptions and ProcessScriptEnd to add $ReportFooter
#	Updated the help text
#	Updated the ReadMe file

#Version 2.44 22-Oct-2021
#	Added Broker Registry Keys:
#		HKLM:\Software\Policies\Citrix\DesktopServer\AppProtectionAuthorizationCheckPeriodMin
#		HKLM:\Software\Policies\Citrix\DesktopServer\AutoTagRuleIntervalsTimeSecs
#		HKLM:\Software\Policies\Citrix\DesktopServer\DisconnectOperationTimeOutSecs
#		HKLM:\Software\Policies\Citrix\DesktopServer\DynamicSequenceStirIntervalMins
#		HKLM:\Software\Policies\Citrix\DesktopServer\FirstHeartbeatDistributionWidthSecs
#		HKLM:\Software\Policies\Citrix\DesktopServer\LaunchDelayedRetryPeriodSec
#		HKLM:\Software\Policies\Citrix\DesktopServer\MaxTotalConcurrentMachineCommands
#		HKLM:\Software\Policies\Citrix\DesktopServer\RoTPublicKeysUpdateMaxDelayHours
#		HKLM:\Software\Policies\Citrix\DesktopServer\UseLegacyLaunchZoneLogic
#		HKLM:\Software\Policies\Citrix\DesktopServer\UserDrivenResetDebounceTimeSecs
#		HKLM:\Software\Policies\Citrix\DesktopServer\UserDrivenShutDownTimeoutMs
#		HKLM:\Software\Policies\Citrix\DesktopServer\UserNotify2SigningKeyLifetimeHours
#		HKLM:\Software\Citrix\DesktopServer\AppProtectionAuthorizationCheckPeriodMin
#		HKLM:\Software\Citrix\DesktopServer\AutoTagRuleIntervalsTimeSecs
#		HKLM:\Software\Citrix\DesktopServer\DisconnectOperationTimeOutSecs
#		HKLM:\Software\Citrix\DesktopServer\DynamicSequenceStirIntervalMins
#		HKLM:\Software\Citrix\DesktopServer\FirstHeartbeatDistributionWidthSecs
#		HKLM:\Software\Citrix\DesktopServer\LaunchDelayedRetryPeriodSec
#		HKLM:\Software\Citrix\DesktopServer\LogoffOperationTimeOutSecs
#		HKLM:\Software\Citrix\DesktopServer\MaxTotalConcurrentMachineCommands
#		HKLM:\Software\Citrix\DesktopServer\RoTPublicKeysUpdateMaxDelayHours
#		HKLM:\Software\Citrix\DesktopServer\UseLegacyLaunchZoneLogic
#		HKLM:\Software\Citrix\DesktopServer\UserDrivenResetDebounceTimeSecs
#		HKLM:\Software\Citrix\DesktopServer\UserDrivenShutDownTimeoutMs
#		HKLM:\Software\Citrix\DesktopServer\UserNotify2SigningKeyLifetimeHours
#		HKLM:\Software\Policies\Citrix\DesktopServer\AutoscalePowerActionQueuingPeriodSeconds
#		HKLM:\Software\Policies\Citrix\DesktopServer\BulkPowerActionBusyBufferSecs
#		HKLM:\Software\Policies\Citrix\DesktopServer\HclConnectionStateCachePeriodSecs
#		HKLM:\Software\Policies\Citrix\DesktopServer\HypervisorConnectionMaxPollFailures
#		HKLM:\Software\Policies\Citrix\DesktopServer\HypervisorConnectionPollMaxPeriodSecs
#		HKLM:\Software\Policies\Citrix\DesktopServer\MaxNotificationThreads
#		HKLM:\Software\Policies\Citrix\DesktopServer\ParallelDesktopGroupScalingMaxThreads
#		HKLM:\Software\Policies\Citrix\DesktopServer\SimplePowerActionTimeoutSecs
#		HKLM:\Software\Citrix\DesktopServer\AutoscalePowerActionQueuingPeriodSeconds
#		HKLM:\Software\Citrix\DesktopServer\BulkPowerActionBusyBufferSecs
#		HKLM:\Software\Citrix\DesktopServer\HclConnectionStateCachePeriodSecs
#		HKLM:\Software\Citrix\DesktopServer\HypervisorConnectionMaxPollFailures
#		HKLM:\Software\Citrix\DesktopServer\HypervisorConnectionPollMaxPeriodSecs
#		HKLM:\Software\Citrix\DesktopServer\MaxNotificationThreads
#		HKLM:\Software\Citrix\DesktopServer\ParallelDesktopGroupScalingMaxThreads
#		HKLM:\Software\Citrix\DesktopServer\ParallelPowerStateReadMaxThreads
#		HKLM:\Software\Policies\Citrix\DesktopServer\IdleSessions\AutoSessionDisconnectGracePeriodSecs
#		HKLM:\Software\Citrix\DesktopServer\IdleSessions\AutoSessionDisconnectGracePeriodSecs
#		HKLM:\Software\Citrix\DesktopServer\LHC\ConfigSyncIntervalSeconds
#		HKLM:\Software\Citrix\DesktopServer\LHC\HypervisorConnectionSyncIntervalSeconds
#		HKLM:\Software\Citrix\DesktopServer\LHC\MissedMessagesLimitBeforeBecomingLeader
#		HKLM:\Software\Citrix\DesktopServer\LHC\StaRecentActivityTimespanMinutes
#		HKLM:\Software\Citrix\DesktopServer\LHC\StoreFrontRecentActivityTimespanMinutes
#		HKLM:\Software\Citrix\DesktopServer\LHC\TimeToWaitForAllPeerOutageStateInfoSeconds
#		HKLM:\Software\Citrix\Broker\Service\State\LHC\IsElected
#		HKLM:\Software\Citrix\Broker\Service\State\LHC\IsOnPremStoreFrontPresent
#		HKLM:\Software\Citrix\Broker\Service\State\LHC\IsStaRequestReceived
#		HKLM:\Software\Citrix\Broker\Service\State\LHC\LeaderConnectorId
#		HKLM:\Software\Citrix\Broker\Service\State\LHC\LeaderFqdn
#		HKLM:\Software\Citrix\Broker\Service\State\LHC\OutageModeThresholdReached
#		HKLM:\Software\Citrix\Broker\Service\State\LHC\ResourceLocationId
#		HKLM:\Software\Citrix\Broker\Service\State\LHC\ResourceLocationName
#		HKLM:\Software\Citrix\Broker\Service\State\LHC\ZoneUid
#		HKLM:\Software\Policies\Citrix\DesktopServer\Logging\HypervisorSummaryReportIntervalSecs
#		HKLM:\Software\Policies\Citrix\DesktopServer\Logging\SlowDBAccessLogThresholdMs
#		HKLM:\Software\Policies\Citrix\DesktopServer\Logging\SlowSdkDBAccessLogThresholdMs
#		HKLM:\Software\Policies\Citrix\DesktopServer\Logging\TraceWcfBindings
#		HKLM:\Software\Citrix\DesktopServer\Logging\HypervisorSummaryReportIntervalSecs
#		HKLM:\Software\Citrix\DesktopServer\Logging\SlowDBAccessLogThresholdMs
#		HKLM:\Software\Citrix\DesktopServer\Logging\SlowSdkDBAccessLogThresholdMs
#		HKLM:\Software\Citrix\DesktopServer\Logging\TraceWcfBindings
#		HKLM:\Software\Policies\Citrix\DesktopServer\MachineCommandQueues\VdaCommandBufferExpiryTime
#		HKLM:\Software\Policies\Citrix\DesktopServer\MachineCommandQueues\VdaCommandBufferSizeLimitKB
#		HKLM:\Software\Citrix\DesktopServer\MachineCommandQueues\VdaCommandBufferExpiryTime
#		HKLM:\Software\Citrix\DesktopServer\MachineCommandQueues\VdaCommandBufferSizeLimitKB
#		HKLM:\Software\Policies\Citrix\DesktopServer\NameCache\NameRefreshExponentialBackoffMaximumMins
#		HKLM:\Software\Policies\Citrix\DesktopServer\NameCache\NameRefreshMaximumPeriodSecs
#		HKLM:\Software\Citrix\DesktopServer\NameCache\NameRefreshExponentialBackoffMaximumMins
#		HKLM:\Software\Citrix\DesktopServer\NameCache\NameRefreshMaximumPeriodSecs
#		HKLM:\Software\Citrix\Broker\Service\State\XmlServiceKeyAuth\RequireXmlServiceKeyForNFuse
#		HKLM:\Software\Citrix\Broker\Service\State\XmlServiceKeyAuth\RequireXmlServiceKeyForSta
#		HKLM:\Software\Citrix\Broker\Service\State\XmlServiceKeyAuth\XmlServiceKey1
#		HKLM:\Software\Citrix\Broker\Service\State\XmlServiceKeyAuth\XmlServiceKey2
#		HKLM:\Software\Policies\Citrix\DesktopServer\DisableGetPasswordExpiryInfo
#		HKLM:\Software\Policies\Citrix\DesktopServer\LocalXmlAuthHeaderAllowedDelaySecs
#		HKLM:\Software\Policies\Citrix\DesktopServer\StableServerFarmDataCachePeriodSecs
#		HKLM:\Software\Policies\Citrix\DesktopServer\UnstableServerFarmDataCachePeriodSecs
#		HKLM:\Software\Policies\Citrix\DesktopServer\UseForwardedHeaderForSFAddress
#		HKLM:\Software\Policies\Citrix\DesktopServer\XmlAuthHeaderTimeoutMs
#		HKLM:\Software\Policies\Citrix\DesktopServer\XmlUserLookupTimeoutMs
#		HKLM:\Software\Citrix\DesktopServer\DisableGetPasswordExpiryInfo
#		HKLM:\Software\Citrix\DesktopServer\LocalXmlAuthHeaderAllowedDelaySecs
#		HKLM:\Software\Citrix\DesktopServer\StableServerFarmDataCachePeriodSecs
#		HKLM:\Software\Citrix\DesktopServer\UnstableServerFarmDataCachePeriodSecs
#		HKLM:\Software\Citrix\DesktopServer\UseForwardedHeaderForSFAddress
#		HKLM:\Software\Citrix\DesktopServer\XmlAuthHeaderTimeoutMs
#		HKLM:\Software\Citrix\DesktopServer\XmlUserLookupTimeoutMs
#	Added CVAD 2109/7.31 to version list
#	Added User policy
#		ICA\Audio\Adaptive audio
#	In Function GetControllerRegistryKeys, put the registry keys in the order supplied by Citrix
#	In Function GetVDARegistryKeys, sorted the VDA registry key paths in alpha order
#	Updated Function ProcessScriptSetup to have better error handling
#	Updated the help text
#	Updated the ReadMe file

#Version 2.43 29-Jul-2021
#	Added Computer Policy
#		ICA\Graphics\Dynamic windows preview
#		Profile Management\Enable profile streaming for folders
#		Profile Management\Advanced settings\Enable credential-based access to user stores
#		Profile Management\Advanced settings\Replicate user stores - Paths to replicate a user store
#		Profile Management\File system\Large File Handling List - Files to be created as symbolic links
#		Profile Management\Profile container settings\Enable local caching for profile containers
#		Profile Management\Profile container settings\Folders to exclude in profile container
#		Profile Management\Profile container settings\Folders to include in profile container
#		Workspace Environment Management\Citrix Cloud Connectors
#	Added CVAD 2106/7.30 to version list
#	Changed the array built for the User policy setting ICA\Printing\Universal Printing\Universal printing optimization defaults
#		from splitting on "," to splitting on ";"
#	Changed the processing for the following policy settings. When they are Disabled in the console, the State value is still Enabled.
#		If the State property is Enabled and the Value property is "", then show the policy setting as disabled.
#			Profile Management\Basic settings\Migrate user store
#			Profile Management\Basic settings\Path to user store
#			Profile Management\Cross-Platform settings\Path to cross-platform definitions
#			Profile Management\Cross-Platform settings\Path to cross-platform settings store
#			Profile Management\Log settings\Path to log file
#			Profile Management\Profile handling\Path to the template profile
#			Profile Management\Citrix Virtual Apps Optimization settings\Path to Citrix Virtual Apps optimization definitions:
#			ICA\Multimedia\Browser Content Redirection Proxy Configuration
#			Profile Management\Folder Redirection\AppData(Roaming)\AppData(Roaming) path
#			Profile Management\Folder Redirection\Contacts\Contacts path
#			Profile Management\Folder Redirection\Desktop\Desktop path
#			Profile Management\Folder Redirection\Documents\Documents path
#			Profile Management\Folder Redirection\Downloads\Downloads path
#			Profile Management\Folder Redirection\Favorites\Favorites path
#			Profile Management\Folder Redirection\Links\Links path
#			Profile Management\Folder Redirection\Music\Music path
#			Profile Management\Folder Redirection\Pictures\Pictures path
#			Profile Management\Folder Redirection\Saved Games\Saved Games path
#			Profile Management\Folder Redirection\Searches\Searches path
#			Profile Management\Folder Redirection\Start Menu\Start Menu path
#			Profile Management\Folder Redirection\Videos\Videos path
#	Changed the way the array was built and processed for ICA\Multi-Stream Connections\Multi-Port Policy\CGP default port and CGP default port priority
#	Cleaned up text output for policy settings
#	Fixed numerous typos in Switch statements for policy settings
#	Fixed wrong variable name used to create array for Virtual Delivery Agent Settings\Monitoring\List of applications excluded from failure monitoring
#	For Computer policy setting ICA\Keyboard and IME\Client keyboard layout synchronization and IME improvement, 
#		add Disabled option to Switch statement
#	Renamed Computer policy
#		ICA\Virtual channel white list to ICA\Virtual channel allow list
#		ICA\WebSockets\WebSocket connections to ICA\WebSockets\WebSockets connections
#	Update the Site version Switch statement for version 7.30/2106
#
#Version 2.42 12-Apr-2021
#	Changed how the Session Recording Status was obtained
#	Fixed four typos of "Unabled" to "Unable"
#	For the following three Delivery Group properties, if there is no data or value, use "-" to match all the other empty values
#		All connections not through NetScaler Gateway
#		Connections through NetScaler Gateway
#		Restrict to tag
#	In Machine details added 
#		Draining Until Shutdown (Multi-session only)
#		Last Connection Failure reason
#			"None"                = "None"
#			"SessionPreparation"  = "Session preparation"
#			"RegistrationTimeout" = "Registration timeout"
#			"ConnectionTimeout"   = "Connection Timeout"
#			"Licensing"           = "Licensing"
#			"Ticketing"           = "Ticketing"
#			"Other"               = "Other"
#		Maintenance Mode reason
#			"Administrator"          = "Machine was manually placed in maintenance mode by an administrator"
#			"MaxFailedRegistrations" = "Machine was automatically placed in maintenance mode due to reaching the maximum failed registration limit"
#			"None"                   = "Machine is not in maintenance mode"
#		Will Shutdown After Use reason
#			"None"                   = "Machine will not shutdown after use"
#			"ResetDiskImage"         = "Machine will shutdown after use to reset its disk image"
#			"ScheduledNaturalReboot" = "Machine will shutdown after use as part of the scheduled natural reboot process"
#			"OnDemandNaturalReboot"  = "Machine will shutdown after use as part of an on-demand natural reboot process"
#	In Machine Details, for MCS catalogs, if the Provisioning Scheme doesn't exist, set the $MasterVM variable to "Unable to retrieve details"
#	To get the Master VM for an Azure Catalog, add searching for ".manageddisk"
#		Also added ".snapshot" which was found in customer data
#	Updated the text explanations for:
#		Machine Fault State
#			"None"          = "No fault; machine is healthy"
#			"FailedToStart" = "Last power-on operation for machine failed"
#			"StuckOnBoot"   = "Machine does not seem to have booted following power on"
#			"Unregistered"  = "Machine has failed to register within expected period, or its registration has been rejected"
#			"MaxCapacity"   = "Machine is reporting itself at maximum capacity"
#		Machine Scheduled Reboot
#			"None"       = "No reboot is scheduled"
#			"Pending"    = "Machine is awaiting reboot but is available for us"
#			"Draining"   = "Machine is awaiting reboot and is unavailable for new sessions; reconnections to existing connections are still allowed, however"
#			"InProgress" = "Machine is actively undergoing a scheduled reboot"
#			"Natural"    = "Natural reboot in progress. Machine is awaiting a restart"
#	When testing a session for Session Recording status, add a test for $null -ne $results
#
#Version 2.41 2-Apr-2021
#	Added CVAD 2103/7.29 to version list
#	Thanks to M. Foster for finding the following bugs:
#	Update functions OutputConfigLogPreferences and OutputDatastores to handle configuration strings that contain "Data Source" instead of "Server"
#	Update Function OutputDatastores to look for SQL Server names that contain "TCP://" and ":nnnn (port number)"
#		Fixed several copy and paste errors that have been in the code for years
#
#Version 2.40 30-Jan-2021
#	Added getting hardware information for the license server when -Hardware is used
#	Added getting hardware information for the SQL Server(s) when -Hardware is used
#	Fixed duplicate item in the HTML output for Machine Catalogs
#	Fixed wrong variable name when getting the Monitoring database mirroring information
#	Updated the WMI query code for getting the Power Plan to handle the case where the Power Plan data is missing in the WMI repository
#	
#Version 2.39 25-Jan-2021
#	Added error checking in Function Check-NeededPSSnapins (Requested by Guy Leech)
#	Updated Function ProcessScriptSetup to have standard error checking between the four XA/XD/CVAD/CC doc scripts
#	Updated the help text
#	Updated the ReadMe file
#
#Version 2.38 18-Jan-2021
#	Added to the Computer Hardware section, the server's Power Plan
#	Updated help text
#	Updated ReadMe file
#
#Version 2.37 5-Dec-2020
#	Added a ValidateSet to the Sections parameter. You can use -Section, press tab, and tab through all the section options. (Credit to Guy Leech)
#	Added new VDA registry key for 1912 CU2 VDAs
#		HKLM:\SOFTWARE\Citrix\Graphics\CursorShapeChangeMinInterval
#		HKLM:\SOFTWARE\Citrix\Audio\KeepAliveTimer
#		HKLM:\SOFTWARE\WOW6432Node\Citrix\Audio\KeepAliveTimer
#		HKLM:\Software\Policies\Citrix\VirtualDesktopAgent\SupportMultipleForestDdcLookup
#	Added to Hosting Connection section:
#	Thanks to fellow CTPs Neil Spellings, Kees Baggerman, and Trond Eirik Haavarstein for getting this info for me
#		Amazon EC2                                      
#		CloudPlatform                                   
#		Microsoft Azure
#		Microsoft Azure Classic
#		Microsoft Configuration Manager Wake on LAN    
#		Nutanix AHV
#	Added to the Site Settings section, Site Provisioning Settings based on CTX241288 (Thanks to Per Lorentzen)
#		https://support.citrix.com/article/CTX241288
#	Changed how the SQL Server Assembly is loaded because 1912 LTSR CU2 broke it
#	Fixed bug reported by David Prows in the Hosting section. First, check to see if the hosting connection's 
#		AdditionalStorage.StorageLocations is valid
#	Fixed some alignment issues in the text output
#	For all calls to Get-AdminAdministrator, remove the -SortBy Name. Sorting by Name is the default behavior.
#	For HTML and MSWord/PDF output, changed the formatting for the Application setting "How do you want to control the use of this application?"
#	For MCS Machine Catalogs:
#		Check that the catalog's ProvisioningSchemeId is not $Null before retrieving the Provision Scheme's machine data
#		Check that $MachneData is not $Null before checking for HostingUnitName
#	For the Hosting section, for High Availability Servers and Power Actions, handle empty arrays
#	In Function GetAdmins, for Hosting Connections, handle the error "The property 'ScopeId' cannot be found on this object. Verify that the property exists."
#		Also, add some white space to make the function easier for me to read
#	In Function OutputAdminsForDetails, add "No Admins found" to replace blank tables and text output
#	In Function OutputDeliveryGroupCatalogs, handle the case where a Delivery Group has no Machine Catalog(s) assigned
#	In Function OutputMachineDetails, when using Test-NetConnection, add Resolve-DnsName first to see if the machine name is resolvable. 
#		This prevents every call to Test-NetConnection from failing with "<MachineName> was not found in DNS". Add error message:
#		<MachineName> was not found in DNS. VDA Registry Key data cannot be gathered.
#		Otherwise, every machine was reported as offline, which may not be true.
#	In Function OutputPerZoneView, add "There are no zone members for Zone <ZoneName>" to replace blank tables and text output
#	In Function OutputXenDesktopLicenses, if there are no licenses installed, output the text "Citrix Virtual Desktops 7 Premium (30-day trial)"
#	Reformatted a lot of the HTML output
#	Reordered the parameters in an order recommended by Guy Leech
#	Updated the ReadMe file

#Version 2.36 15-Aug-2020
#	Added the following missing Administrator Role permissions:
#		Administrators
#			Manage Administrator Custom Roles
#			Manage Administrator Scopes
#			Manage ServiceSettings
#		AppDisks
#			Add AppDisk to Scope
#			Allow AppDisk to be added to a Delivery Group
#			Create a new Version of AppDisk
#			Create AppDisk
#			Delete AppDisk
#			Edit AppDisk properties
#			Install Applications
#			Prepare AppDisk for use
#			Remove AppDisk from Scope
#			View AppDisks
#		AppDNA
#			Manage AppDNA connections
#			View AppDNA connections
#		Application Groups
#			Add Application Group to Scope
#			Add Application to Application Group
#			Add Delivery Group to Application Group
#			Change Tags on Application Group
#			Change users assigned to an application (Application Group)
#			Create Application (Application Group)
#			Create Application Folder (Application Group)
#			Create Application Group
#			Delete Application (Application Group)
#			Delete Application Group
#			Edit Application Folder (Application Group)
#			Edit Application Group Properties
#			Edit Application Properties (Application Group)
#			Edit Application tags (Application Group)
#			Edit User Assignment on Application Group
#			Move Application Folder (Application Group)
#			Remove Application Folder (Application Group)
#			Remove Application from Application Group
#			Remove Application Group from Scope
#			Remove Delivery Group from Application Group
#			View Application Groups
#			View Applications (Application Group)
#		App-V
#			Add App-V Application Libraries and Packages
#			Create App-V Isolation Group
#			Read App-V Application Libraries and Packages
#			Remove App-V Application Libraries and Packages
#			Remove App-V Isolation Groups
#		Controllers
#			Edit Controller
#		Delivery Groups
#			Add Application Group to Delivery Group
#			Add Webhooks to Delivery Group
#			Edit Delivery Group machine tags
#			Edit machine tags
#			Remove Application Group from Delivery Group
#		Director
#			Create\Edit\Delete Alert Policies
#			Create\Edit\Remove Alert Email Server Configuration
#			Create\Edit\Remove Cloud Analytics Configurations
#			Create\Edit\Remove Probe Configurations
#			Dismiss Alerts
#			Edit Disk metrics related Broker machine command properties
#			Edit GPO Data related Broker machine command properties
#			Edit Gpu metrics related Broker machine command properties
#			Edit HDX Protocol related Broker machine command properties
#			Edit Profile Load Data related Broker machine command properties
#			Edit Startup related Broker machine command properties
#			View Alert Policies
#			View Alerts
#			View Applications page
#			View Configurations page
#		Machine Catalogs
#			Capture AppDNA OS snapshot
#			Edit Catalog tags
#			Edit Catalog machine tags
#		Other Permissions
#			Create Tags
#			Delete Tags
#			Edit Tags
#			Manage Orchestration Service REST API
#			Manage Trust Service Keys
#			Read Tags
#		Zones
#			Create Zone
#			Delete Zone
#			Edit Zone
#			Manage Citrix Cloud Connector
#	Add a switch statement for the appdisk/machine/desktop/server Power State
#	Change all Write-Verbose $(Get-Date) to add -Format G to put the dates in the user's locale
#	Change Policy Filter from Citrix CloudBridge to NetScaler SD-WAN
#	Change checking some String variables from just $Null to [String]::IsNullOrEmpty.
#		Some cmdlet's string properties are sometimes Null and sometimes an empty string
#	Change checking the way a machine is online or offline.
#	Change some cmdlets to sort on the left of the pipeline using the cmdlet's -SortBy option
#	Change some Write-Error to Write-Warning and changed some Write-Warning to Write-Host
#		Added Function OutputNotice
#	Changed testing for existing PSDrives from Get-PSDrive to Test-Path
#	Fix bugs found while working on the V3 script
#	Fix formatting issues found with Text and HTML code
#	Fix issue with Word tables with 8 or 9 point font having a black background 
#		This is an issue with the latest versions of PowerShell 5.1.x
#	Fix totals for the Summary Page
#	Fix loading the SQL Server Assembly
#	Fix missing L_25 VDA Version checking for CVAD 2003
#	Fixed an issue with "Connections meeting any of the following (Access Gateway) filters".
#		If you selected HTML and any other output format in the same run, only the HTML output had any Access Gateway data.
#	Fixed an issue for RemotePC machine catalogs based on OUs. (Thanks to Rene Bigler)
#		Added all OUs defined
#		Added Allow SubOUs by each defined OU
#		Added machines excluded from the catalog
#		Added machines included in the catalog
#	Fixed issue with PowerShell 5.1.x and empty Hashtables for Ian Brighton's Word Table functions
#		PoSH 3, 4, and 5.0 had no problem with an empty hashtable and would create a blank Word table with only column headings
#		For many tables, before passing the hashtable to Ian's function, test if the hashtable is empty
#		If it is, create a dummy row of data for the hashtable
#		For example, a RemotePC catalog based on OU that contains no machines, or Applications with no administrators. 
#		Instead of having a missing table, the table will now have a row that says "None found"
#	Fixed output issues with Power Management settings
#	Fixed several more array out of bounds issues when accessing element 0 when the array was empty
#	For Appendix A, Text output, change the column heading "DDC Name" to "Computer Name" to match the HTML and MSWord/PDF output
#	For checking the registry on a Delivery Controller for installed Citrix components, test the RemoteRegistry service for its status.
#		If the service is not running, set $GotCtxComponents to $False
#	For the three datastore databases, check if the various variable are null or empty and if so, change the value to "Unable to determine"
#	For Zones, add MemType into the Sort-Object for Site View and Zone View
#	If BrokerRegistryKeys is True, test for elevation
#		Update help text to show elevation is required when using BrokerRegistryKeys
#	If PDF is selected for Output and Microsoft Word is not installed, update the error message to state that PDF uses Word's SaveAs PDF function
#	Remove the block on not processing Policies if running from an elevated session.
#		Citrix and I did a remote session to test this and we can't get it to fail.
#	Since the RegistrationState property is an enum, add .ToString() to the machine/desktop/server variable so HTML output is correct
#	When getting the Master VM for an MCS based machine catalog, also check for images ending in .template for Nutanix
#	When getting the provisioning scheme data for a machine, only process machines with a provisioning type of MCS
#		There is no provisioning scheme data for manually or PVS provisioned machines
#	When VDARegistryKeys is used, now test the RemoteRegistry service for its status.
#		If the service is not running, add that information into the AllVDARegistryItems array
#
#Version 2.35 1-JUL-2020
#	THIS IS THE FINAL UPDATE FOR THE V2 SCRIPT, except for bug fixes
#	Added new Computer policy settings for CVAD 2006
#		ICA\Virtual channel white list
#	Added new User policy settings for CVAD 2006
#		ICA\Keyboard and IME\Client keyboard layout synchronization and IME improvement
#		ICA\Keyboard and IME\Enable Unicode keyboard layout mapping
#		ICA\Keyboard and IME\Hide keyboard layout switch pop-up message box
#	Added version 7.26 equals 2006

#Version 2.34 8-May-2020
#	Add checking for a Word version of 0, which indicates the Office installation needs repairing
#	Add Receive Side Scaling setting to Function OutputNICItem
#	Change color variables $wdColorGray15 and $wdColorGray05 from [long] to [int]
#	Change location of the -Dev, -Log, and -ScriptInfo output files from the script folder to the -Folder location (Thanks to Guy Leech for the "suggestion")
#	Reformatted the terminating Write-Error messages to make them more visible and readable in the console
#	Remove the SMTP parameterset and manually verify the parameters
#		Remove the code to manually test for conflicting output parameters
#	Update Function SendEmail to handle anonymous unauthenticated email
#	Update Function SetWordCellFormat to change parameter $BackgroundColor to [int]
#	Update Function ShowScriptOptions to add the missing Dev parameter
#	Update Functions GetComputerWMIInfo and OutputNicInfo to fix two bugs in NIC Power Management settings
#	Update Help Text

#Version 2.33 30-Mar-2020
#	Added new Computer policy settings for CVAD 2003
#		ICA\Multi-Stream Connections\Multi-Stream virtual channel assignment
#		Profile Management\Advanced settings\Enable multi-session write-back for FSLogix Profile Container
#	Added new User policy settings for CVAD 2003
#		ICA\Loss Tolerant Mode
#		ICA\Session Interactivity\Loss Tolerant Mode Thresholds
#	Added new VDA registry key for 2003 VDAs
#		HKLM:\Software\Citrix\Graphics\BTLLossyThreshold
#		HKLM:\SYSTEM\CurrentControlSet\Services\CtxDNDSvc\Enabled
#	Added version 7.25 equals 2003
#	In the Policies section, for AD policies, add the AD GPO name to the section title line
#	In the Policies section removed a superfluous line for "Site Policies" and "Active Directory Policies"

#Version 2.32 20-Mar-2020
#	Added to Delivery Group details, App Protection keyboard and screen capture settings
#		App protection is an add-on feature that provides enhanced security when using 
#		Citrix Workspace app. Two policies provide anti-keylogging and anti-screen-capturing 
#		capabilities in a session. The policies along with Citrix Workspace app 2001 or later 
#		for Mac can help protect data from keyloggers and screen scrapers.
#	Note:
#		If you connect from an older version of Citrix Workspace app, or from Citrix Receiver, 
#			these policies are not enabled.
#		Only workstation operating systems support app protection.
#	Thanks to fellow CTP Ryan Revord for testing this update
#
#Version 2.31 28-Dec-2019
#	Added new Computer policy settings for CVAD 1912 (also applies to 1906 and 1909)
#		User Personalization Layer\User Layer Repository Path
#		User Personalization Layer\User Layer Size in GB
#
#Version 2.30 19-Dec-2019
#	Added additional VDA registry key data to Machine details for VDA 1912 (Known Issues for ADM hardware encoding)
#		HKLM:\SOFTWARE\Wow6432Node\Citrix\ICAClient\Engine\Configuration\Advanced\Modules\GfxRender\MaxNumRefFrames
#	Fixed - FINALLY - the issue of detecting the Site Version for comparison.
#		CVAD 1909 and above show Multi-session OS and Single-session OS
#		CVAD 1906 and below show Server OS and Desktop OS
#	Tested with CVAD 1912
#	
#Version 2.29 17-Dec-2019
#	Fix Swedish Table of Contents (Thanks to Johan Kallio)
#		From 
#			'sv-'	{ 'Automatisk innehållsförteckning2'; Break }
#		To
#			'sv-'	{ 'Automatisk innehållsförteckn2'; Break }
#	Updated help text
#
#Version 2.28 25-Sep-2019
#	Added "Multi-session OS" and "Single-session OS" where appropriate for CVAD versions greater than or equal to 1909
#		Unlike Citrix, I use the correct form of "Single-session OS" and not "Single session OS". Thanks to Melissa Case
#	Added new Broker registry keys for 1909
#		HKLM:\Software\Policies\Citrix\DesktopServer\LegacyPeakTransitionDisconnectedbehavior
#		HKLM:\Software\Citrix\DesktopServer\LegacyPeakTransitionDisconnectedbehavior
#	Added new VDA registry key for 1909
#		HKLM:\SOFTWARE\Citrix\AppV\Features
#	Added new VDA registry key https://support.citrix.com/article/CTX212610
#		HKLM:\Software\Citrix\Reconnect\DisableGPCalculation
#	Added new VDA registry key https://support.citrix.com/article/CTX256900
#		HKLM:\Software\Citrix\Reconnect\FastReconnect
#	Added new Computer policy settings for CVAD 1909
#		Profile Management\Advanced settings\Outlook search index database - backup and restore
#		Profile Management\Basic settings\Migrate user store
#		Profile Management\Profile handling\Automatic migration of existing application profiles
#	Rework how to get the Site's version information to remove remote registry access
#	Rework text output to allow for the longer Machine Catalog and Delivery Group type names
#	Updated for CVAD 1909
#	
#Version 2.27 4-Sep-2019
#	Add a NoSessions parameter to exclude Machine Catalog, Application and Hosting session data from the report
#
#Version 2.26 27-Jun-2019
#	Added to Session details for Applications and Hosting, session Recording Status
#	Fixed incorrect variable names in Function OutputMachineDetails
#	Fixed numerous boolean and numeric values in the HTML output that needed ToString()
#
#Version 2.25 17-Jun-2019
#	Added new Computer policy settings missed in earlier versions
#		Profile Management\File system\Synchronization\Profile container - List of folders to be contained in profile disk
#	Added new User policy settings for CVAD 1906
#		ICA\Time Zone Control\Restore Desktop OS time zone on session disconnect or logoff
#		ICA\Multimedia\Microsoft Teams redirection
#	Renamed Profile Management\XenApp Optimization settings\Enable XenApp Optimization to 
#		Profile Management\Citrix Virtual Apps Optimization settings\Enable Citrix Virtual Apps Optimization
#	Renamed Profile Management\XenApp Optimization settings\Path to XenApp optimization definitions: to 
#		Profile Management\Citrix Virtual Apps Optimization settings\Path to Citrix Virtual Apps optimization definitions:
#	Updated for CVAD 1906
#
#Version 2.24 18-Apr-2019
#	If Policies parameter is used, check to see if PowerShell session is elevated. If it is,
#		abort the script. This is the #2 support email. From an earlier update, which apparently no one saw:
#			Version 2.16 16-May-2018
#				Added a Note to the Help Text and ReadMe file about the Citrix.GroupPolicy.Commands module:
#				Note: The Citrix Group Policy PowerShell module will not load from an elevated PowerShell session. 
#				If the module is manually imported, the module is not detected from an elevated PowerShell session.
#
#Version 2.23 15-Apr-2019
#	Added -CSV parameter
#		Updated each function that outputs each appendix to output a CSV file if -CSV is used
#			Output CSV filename is in the format:
#			CVADSiteName_Documentation_Appendix#_NameOfAppendix.csv
#			For example:
#				CVADSiteName_Documentation_AppendixA_VDARegistryItems.csv
#				CVADSiteName_Documentation_AppendixB_ControllerRegistryItems.csv
#				CVADSiteName_Documentation_AppendixC_MicrosoftHotfixesandUpdates.csv
#				CVADSiteName_Documentation_AppendixD_CitrixInstalledComponents.csv
#				CVADSiteName_Documentation_AppendixE_WindowsInstalledComponents.csv	
#	Added tests for SQL Server 2019 and Azure SQL
#	Added to the Hosting Connection output, IntelliCache setting
#	Added new Computer policy settings for CVAD 1903
#		ICA\Printing\Universal Print Server\SSL Cipher Suite
#		ICA\Printing\Universal Print Server\SSL Compliance Mode
#		ICA\Printing\Universal Print Server\SSL Enabled
#		ICA\Printing\Universal Print Server\SSL FIPS Mode
#		ICA\Printing\Universal Print Server\SSL Protocol Version
#		ICA\Printing\Universal Print Server\SSL Universal Print Server encrypted print data stream (CGP) port
#		ICA\Printing\Universal Print Server\SSL Universal Print Server encrypted web service (HTTPS/SOAP) port
#	Added new VDA registry keys for CVAD VDA 1903
#		HKLM:\SOFTWARE\Citrix\UniversalPrintDrivers\PDF\EnablePostscriptSimulation
#		HKLM:\SOFTWARE\Citrix\UniversalPrintDrivers\PDF\EnableFullFontEmbedding
#	Fixed all WriteHTMLLine lines that were supposed to be in bold. Wrong parameters were used.
#	If both -MachineCatalogs and -DeliveryGroups parameters are used, only output the machine details for catalogs, not delivery groups
#		This will help keep the report length shorter
#	In Function OutputNicItem, change how $powerMgmt is retrieved
#		Will now show "Not Supported" instead of "N/A" if the NIC driver does not support Power Management (i.e. XenServer)
#	In the Summary Page, change Word/PDF and HTML output to use tables for better formatting
#	Removed from report output, the individual listings for:
#		Citrix Installed Components
#		Controller Registry keys
#		Microsoft Hotfixes
#		VDA Registry Keys
#		Windows Installed Roles and Features
#
#		These will now only show in the Appendixes to keep the report length shorter
#		Removed Function OutputControllerRegistryKeys
#		Removed Function OutputVDARegistryKeys
#	Rewrote AddHTMLTable, FormatHTMLTable, and WriteHTMLLine for speed and accuracy (MBS)
#	Rewrote Line to use StringBuilder for speed (MBS)
#	Rewrote the Text output for the following sections:
#		Machine Catalog Summary
#		Delivery Group Summary
#		Appendix A
#		Appendix B
#		Appendix C
#		Appendix D
#		Appendix E
#	Sort Appendix E data by Display Name, Name, and DDCName, and change output to match
#	Stop using a switch statement for HTML colors, and use a pre-calculated HTML array for speed (MBS)
#	Updated expired ShareFile links in error messages
#	Updated Function OutputNicItem with a $ComputerName parameter
#		Updated Function GetComputerWMIInfo to pass the computer name parameter to the OutputNicItem function
#	Updated Function SendEmail with corrections made by MBS
#	Updated help text
#	Went to Set-StrictMode -Version Latest, from Version 2 and cleaned up all related errors (MBS)

#Version 2.22 28-Mar-2019
#	Add new parameter -Controllers
#	In the functions ProcessControllers and OutputControllers, change function variable $Controllers 
#		to $DDCs for the new $Controllers parameter
#	For Delivery Controllers, add the following when -Controllers is used:
#		List of installed Microsoft Hotfixes and Updates
#		List of Citrix installed components
#		List of Windows installed Roles and Features
#		Added Appendix C List of installed Microsoft Hotfixes and Updates for all Controllers
#		Added Appendix D List of Citrix installed components for all Controllers
#		Added Appendix E List of Windows installed Roles and Features for all Controllers
#	In the Controllers section added the following:
#		Controller State
#		Warning if there is only one Controller
#	Updated Help Text
#	Updated the version checking process.
#		If the script ran from a computer with a different Studio version than the delivery controller 
#		version, the Studio version was reported as the Site version. If the $AdminAddress parameter 
#		is used, get the version info from that delivery controller.

#Version 2.21 1-Feb-2019
#	Added additional VDA registry key data to Machine details for Local Text Echo added back in VDA 1811
#		HKLM:\SOFTWARE\Wow6432Node\Citrix\ICAClient\Engine\Configuration\Advanced\Modules\GfxRender\UseDirect3D
#		HKLM:\SOFTWARE\Wow6432Node\Citrix\ICAClient\Engine\Configuration\Advanced\Modules\GfxRender\PresentDevice
#	Added License Server version
#	Added missing data in the hosting section for Networks, Standard Storage, Personal vDisk Storage, and Temporary Storage
#	Added test to catch multiple output parameters used
#	Added the restart schedule "Frequency notification" to Delivery Group details
#	Changed in Function Get-IPAddress, the Catch value from $Null to "Unable to resolve IP address"
#	Fixed, in Functions OutputDesktopOSMachine and OutputServerOSMachine, the output of users
#	Fixed bug in Function ProcessHosting where the comparison for $Hypervisor.Name was done incorrectly
#	Fixed in Delivery Groups details to handle multiple Desktop Entitlements and multiple Restart Schedules
#	Fixed in Function OutputControllerRegistryKeys, added a blank line after the Word table
#	For Application details changed "Description" to "Description and keywords"
#	In the Delivery Controllers section added a blank line after the Word and HTML tables

#Version 2.20.2 26-Dec-2018
#	Fixed Function OutputAppendixA to fix duplicate VDA registry lines

#Version 2.20.1 20-Dec-2018
#	Added variable $Script:AllControllerRegistryItems
#	Reworked the variable $Script:ControllerRegistryItems
#	Fixed Function OutputAppendixB to use $Script:AllControllerRegistryItems

#Version 2.20 20-Dec-2018
#	Updated for XenApp/XenDesktop 1811
#	Added new MinimumFunctionalLevel L7_20 (1811 or newer) - (Thanks to Carl Stalhood)
#	Added VDA registry key data to Machine details (Linux VDAs are ignored. Thanks to Rene Bigler for testing this.)
#		HKLM:\SOFTWARE\Citrix\CtxKlMap
#		HKLM:\SOFTWARE\Citrix\Audio\CleanMappingWhenDisconnect
#		HKLM:\SOFTWARE\Citrix\Citrix Virtual Desktop Agent\DisableLogonUISuppression
#		HKLM:\SOFTWARE\Citrix\Citrix Virtual Desktop Agent\DisableLogonUISuppressionForSmartCardPublishedApps
#		HKLM:\SOFTWARE\Citrix\CtxHook\ExcludedImageNames
#		HKLM:\SOFTWARE\Citrix\CtxHook\AppInit_Dlls\SHAppBarHook\FilePathName
#		HKLM:\SOFTWARE\Citrix\CtxHook\AppInit_Dlls\SHAppBarHook\Flag
#		HKLM:\SOFTWARE\Citrix\CtxHook\AppInit_Dlls\SHAppBarHook\Settings
#		HKLM:\Software\Citrix\DesktopServer\AllowMultipleRemotePCAssignments
#		HKLM:\SOFTWARE\Citrix\HDX3D\BitmapRemotingConfig\EnableDDAPICursor
#		HKLM:\SOFTWARE\Citrix\HDX3D\BitmapRemotingConfig\#HKLM_DisableMontereyFBCOnInit
#		HKLM:\SOFTWARE\Citrix\ICA\DisableAppendMouse
#		HKLM:\SOFTWARE\Citrix\Ica\Thinwire\EnableDrvTw2NotifyMonitorOrigin
#		HKLM:\SOFTWARE\Citrix\ICAClient\Engine\Configuration\Advanced\Modules\ClientAudio\EchoCancellation
#		HKLM:\SOFTWARE\Citrix\ICAClient\GenericUSB\EnableBloombergHID
#		HKLM:\SOFTWARE\Citrix\PortICA\DisableRemotePCSleepPreventer
#		HKLM:\SOFTWARE\Citrix\PortICA\RemotePC\RpcaMode
#		HKLM:\SOFTWARE\Citrix\PortICA\RemotePC\RpcaTimeout
#		HKLM:\SOFTWARE\Citrix\SmartCard\EnableSCardHookVcResponseTimeout
#		HKLM:\SOFTWARE\Citrix\StreamingHook\EnableReadImageFileExecOptionsExclusionList
#		HKLM:\Software\Citrix\VirtualDesktopAgent\ListOfSIDs
#		HKLM:\Software\Citrix\VirtualDesktopAgent\SupportMultipleForest
#		HKLM:\SOFTWARE\Wow6432Node\Citrix\CtxHook\ExcludedImageNames
#		HKLM:\SOFTWARE\Wow6432Node\Citrix\ICAClient\Engine\Configuration\Advanced\Modules\ClientAudio\EchoCancellation
#		HKLM:\SOFTWARE\Wow6432Node\Citrix\StreamingHook\EnableReadImageFileExecOptionsExclusionList
#		HKLM:\SYSTEM\CurrentControlSet\Control\Citrix\EnableVisualEffect
#		HKLM:\SYSTEM\CurrentControlSet\Control\Citrix\wfshell\TWI\AAHookFlags
#		HKLM:\SYSTEM\CurrentControlSet\Control\Citrix\wfshell\TWI\ApplicationLaunchWaitTimeoutMS
#		HKLM:\SYSTEM\CurrentControlSet\Control\Citrix\wfshell\TWI\LogoffCheckerStartupDelayInSeconds
#		HKLM:\SYSTEM\CurrentControlSet\Control\Citrix\wfshell\TWI\LogoffCheckSysModules
#		HKLM:\SYSTEM\CurrentControlSet\Control\Citrix\wfshell\TWI\SeamlessFlags
#		HKLM:\SYSTEM\CurrentControlSet\Control\Citrix\wfshell\TWI\WorkerWaitInterval
#		HKLM:\SYSTEM\CurrentControlSet\Control\Citrix\wfshell\TWI\WorkerFullCheckInterval
#		HKLM:\SYSTEM\CurrentControlSet\Control\SCMConfig\EnableSvchostMitigationPolicy
#		HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\ica-tcp\AudioConfig\MaxPolicyAge
#		HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\ica-tcp\AudioConfig\PolicyTimeout
#		HKLM:\SYSTEM\CurrentControlSet\Control\TerminalServer\fSingleSessionPerUser
#		HKLM:\SYSTEM\CurrentControlSet\Services\CtxUvi\UviEnabled
#		HKLM:\SYSTEM\CurrentControlSet\services\CtxUvi\UviProcessExcludes
#		HKLM:\System\Currentcontrolset\services\picadm\Parameters\DisableFullStreamWrite
#	Added Functions GetVDARegistryKeys, Get-VDARegKeyToObject, and OutputVDARegistryKeys
#	Added new Parameter VDARegistryKeys
#	Added VDARegistryKeys to MaxDetails
#	If VDARegistryKeys is used, force MachineCatalogs to True
#	Updated funcions ShowScriptOptions and ProcessScriptEnd for the new VDARegistryKeys parameter
#	Added functions OutputAppendixA and OutputAppendixB
#		Appendix A is a list of all VDA registry keys sorted by key name, key value, VDA type, and computer name
#		Appendix B is a list of all Controller registry keys sorted by key name, key value, and Controller name
#	Added processing the MetaDataMap properties for Machine Catalogs.
#		Sample possible Keys and Values:
#			Citrix_DesktopStudio_PreviousImageVdaFunctionalLevel_Is_L7_9 True 
#			Citrix_DesktopStudio_RdsCatalogLicenseCheck_Warning NoPoweredOnVm 
#				[Studio warning: The Microsoft Remote Desktop licensing check could not be run...]
#				[There is no value provided to tell if the warning was removed from Studio or
#					was successful during catalog creation]
#			Citrix_DesktopStudio_Upgraded True 
#		Keys that start with "Task" are ignored.
#		The Citrix_DesktopStudio_IdentityPoolUid Key is ignored
#	Comment out unused Word variables
#	Fixed missing Disabled value for policy setting ICA\Printing\Universal Print Server\Universal Print Server enable
#	Fixed several $Var -ne $null to $Null -ne $Var and on two Get-Process lines for WinWord and Excel (thanks to MBS)
#	In Function OutputHostingSession, remove all the Desktop code as desktops are not used in that function
#	Removed unused variables
#	Reorganize the list of parameters in the help text and parameter sets
#	Update help text

#Version 2.19 2-Oct-2018
#	Added new broker entitlement properties from Get-BrokerEntitlementPolicyRule (Thanks to Sacha Thomet and Carl Stalhood)
#		Leasing behavior (LeasingBehavior)
#		Maximum concurrent instances (MaxPerEntitlementInstances)
#		SecureICA required (SecureIcaRequired)
#		Session reconnection (SessionReconnection)
#	Added new broker registry keys
#		HeartbeatDistributionWidthSecs
#		SiteDynamicDataRefreshMaxShutdownMs
#		BulkPowerCheckingCoolOffActivePowerActionsSecs
#		BulkPowerCheckingCoolOffSecs
#		ExportConfigurationChunkSize
#		MaxLocalDBMemorySizeMB
#		LastOutageModeEnteredTime
#	Changed the wording of the Delivery options in Application details to match the text in Studio
#		For 1808, add the new MaxPerMachineInstances property (PowerShell only)
#	Updated version checking at beginning of script to handle 1808 and hopefully later versions
#	Tested with 1808.2

#Version 2.18 5-Jun-2018
#	Added new Computer policy settings
#		ICA\Rendezvous Protocol (XA/XD 7.18)
#			To enhance the scalability of the Cloud Connector, use the Rendezvous protocol for the VDA to connect directly 
#			to the NetScaler Gateway Service. This new policy setting allows the VDA to establish an outbound connection 
#			to a Rendezvous point (Flow Redirector, a component on the NetScaler Gateway Service cloud), bypassing the 
#			Cloud Connector on a resource location for HDX traffic once the session is launched. Rendezvous Protocol is 
#			enabled by default and applies only to Citrix Cloud.
#		Profile Management\Advanced settings\Enable search index roaming for Outlook
#	Added new User policy setting
#		ICA\Multimedia\Browser Content Redirection Authentication Sites (XA/XD 7.18)
#	Tested with XenApp/XenDesktop 7.18

#Version 2.17 4-Jun-2018
#	Fixed a blank line in HTML output for Groom Retention Settings in Days (Found by Ken Avram)
#	Fixed HTML Hosting output for "Simultaneous actions..." where output showed System.Object[] (Found by Ken Avram)
#	In Function OutputAdministrators, fix for when $Admin.Rights.ScopeName and $Admin.Rights.RoleName are arrays (Found by Ken Avram)
#	In Function OutputDatastores, if the Principal, Mirror, Mirror Partner, or Mirror Witness contains a "\", 
#		then get the IP address for the server name before the "\" (Found by Ken Avram)
#		This should mean the database runsning on SQL Server Express or has an Instance name
#	In Function OutputXenDesktopLicenses, fix for when the property LicenseExpirationDate is $Null which means 
#		the license Expiration Date is "Permanent" (Found by Ken Avram)
#	In Machine Catalog details, check if MetadataMap contains data, if so add it to output. For example:
#		ImageManagementPrep_DoImagePreparation True 
#		ImageManagementPrep_Excluded_Steps Not set 
#		ImageManagementPrep_NoAutoShutdown False
#
#		For more information, see:
#			https://support.citrix.com/article/CTX140734
#			https://support.citrix.com/article/CTX217456
#			https://support.citrix.com/article/CTX223245
#			https://www.citrix.com/blogs/2016/04/04/machine-creation-service-image-preparation-overview-and-fault-finding/
#	
#	In Machine Catalog Details, for MCS catalogs, add Account Identity Pool data:
#		Account naming scheme
#		Naming scheme type
#		AD Domain
#		AD location (OU distinquished name)
#	Optimize Function ProcessCitrixPolicies by removing unneeded variable $WordTableRowHash. This removed almost 500
#		lines of code and almost 500 unneeded variable initializations
#
#Version 2.16 16-May-2018
#	Added a Note to the Help Text and ReadMe file about the Citrix.GroupPolicy.Commands module:
#		Note: The Citrix Group Policy PowerShell module will not load from an elevated PowerShell session. 
#		If the module is manually imported, the module is not detected from an elevated PowerShell session.
#	Changed a few arrays from "@() +=" to "New-Object System.Collections.ArrayList .Add()"
#	Changed the code where I checked for Singletons and -is [array] to use @() around the cmdlets so the result
#		is always an array. Thanks to fellow CTP Sam Jacobs for the tip. This reduced the code by almost 500 lines.
#	Remove Function GetComputerServices  as it is not used
#	Rollback changes made to the Policies region from Visual Studio Code as the changes broke policy output.
#		I spent days trying to debug what broke the output but realized it was just better to roll the code back 
#		to a working version.
#	Updated all Dropbox links to ShareFile links.
#
#Version 2.15 16-Apr-2018
#	Added Function Get-IPAddress
#	Added in Function OutputDatastores getting the IP address for each SQL server name
#	Added in Function OutputLicensingOverview getting the IP address for the license server
#	Changed from the deprecated Get-BrokerDesktop to Get-BrokerMachine
#	Fixed many alignment issues with Text output
#	In the Desktop Entitlement section, Excluded Users, the wrong variable name was used. Fixed.
#	When building the array of all Machine Catalogs that are used by a Delivery Group,
#		Only the first item in the array was being returned. Adding -Property CatalogName 
#		to Sort-Object was needed to get the full unique array returned.
#		Sort-Object -Property CatalogName -Unique

#Version 2.14 11-Apr-2018
#	Added the following properties to Application Details
#		Application Type
#		CPU Priority Level
#		Home Zone Name
#		Home Zone Only
#		Ignore User Home Zone
#		Icon from Client
#		Local Launch Disabled
#		Secure Command Line Arguments Enabled
#		Add shortcut to user's desktop
#		Add shortcut to user's Start Menu
#		Start Menu Folder
#		Wait for Printer Creation
#	Added the following property to Delivery Group Details
#		Reuse Machines Without Shutdown in Outage 
#			With a note if the setting doesn't match the Site setting
#	Added the following properties to Site Settings Details
#		Base OU
#		Color Depth
#		Connection Leasing Enabled
#		Default Minimum Functional Level
#		DNS Resolution Enabled
#		Is Secondary Broker
#		Local Host Cache Enabled
#		Reuse Machines Without Shutdown in Outage Allowed
#		Secure ICA Required
#		Trust Managed Anonymous XML Service Requests
#		Trust Requests Sent to the XML Service Port
#	Change several calls from Get-ConfigServiceAddedCapability -contains "ZonesSupport" to validObject
#	Fixed missing variable set for Default Switch statement for $Group.MinimumFunctionalLevel in Function OutputDeliveryGroupDetails 
#	Fixed missing variable set for Default Switch statement for $Catalog.MinimumFunctionalLevel in Function OutputMachines 
#	Fixed missing variable set for Default Switch statement for $AppDisk.State in Function OutputAppDiskTable 
#	Fixed missing variable set for Default Switch statement for $Application.CpuPriorityLevel in Function OutputApplicationDetails 
#	Fixed missing variable set for Default Switch statement for $Application.ApplicationType in Function OutputApplicationDetails 
#	Fixed all misspellings of unathenticated to unauthenticated

#Version 2.13 7-Apr-2018
#	Added Operating System information to Functions GetComputerWMIInfo and OutputComputerItem
#	Code clean-up for most recommendations made by Visual Studio Code
#	During the code clean-up, I came across some "unused" variables. I had just
#		forgotten to add them to the output. OOPS! They are now added.
#			Off Peak Buffer Size Percent
#			Off Peak Disconnect Timeout (Minutes)
#			Off Peak Extended Disconnect Timeout (Minutes)
#			Off Peak LogOff Timeout (Minutes)
#			Peak Buffer Size Percent
#			Peak Disconnect Timeout (Minutes)
#			Peak Extended Disconnect Timeout (Minutes)
#			Peak LogOff Timeout (Minutes)
#			Settlement Period Before Auto Shutdown (HH:MM:SS)
#			Settlement Period Before Use (HH:MM:SS)
#		Code clean-up also found a copy and paste error with Session Linger
#			The "end session linger" value was still using the "end session prelaunch" variable
#			OOPS, sorry about that. Fixed.

#Version 2.12 10-Mar-2018
#	Fix $SQLVersion for SQL 2008 R2. Minor version is 50, not 5.
#	In application details, change from "Folder (for user)" to "Application category (optional)". 
#		This changed in XA/X 7.8 and I never noticed it and no one reported it.
#		Thanks to lbates for bringing it to my attention.

#Version 2.11 2-Mar-2018
#	Added additional SQL database information to the Configuration section
#	Added new function GetDBCompatibilityLevel
#	Added new User policy settings
#		ICA\Multimedia\Browser Content Redirection Blacklist Configuration
#		ICA\Session Watermark\Enable session watermark
#		ICA\Session Watermark\Watermark Content\Include client IP address
#		ICA\Session Watermark\Watermark Content\Include connection time
#		ICA\Session Watermark\Watermark Content\Include logon user name
#		ICA\Session Watermark\Watermark Content\Include VDA host name
#		ICA\Session Watermark\Watermark Content\Include VDA IP address
#		ICA\Session Watermark\Watermark Content\Watermark custom text
#		ICA\Session Watermark\Watermark Style\Session watermark style
#	Change the Broker Registry Keys to sort by RegKey and then RegValue and change output to match
#	Change the Broker Registry Keys heading from "2" to "3"
#	Move section headings for Machine Catalogs, AppDisks, Delivery Groups, and Applications to their respective "Process" functions.
#		This allows the "There are no Machine Catalogs/AppDisks/Delivery Groups/Applications" messages to appear in their own sections, 
#		and for Word/PDF output, not directly under the Table of Contents
#	Updated function GetSQLVersion to add support for SQL Server 2017
#	Updated function OutputDatastores for the additional SQL Server and Database information
#		Changed Word/PDF and HTML output from a horizontal table to three vertical tables
#	Updated the "Default" message in function GetSQLVersion
#	When there are no Machine Catalogs, change the message from "There are no Machines" to "There are no Machine Catalogs"
#
#Version 2.10 10-Feb-2018
#	Added Log switch to create a transcript log
#		Added function TranscriptLogging
#		Citrix.GroupPolicy.Commands and New-PSDrive break transcript logging so restart logging after each New-PSDrive call
#		Removed the Log Alias from the Logging parameter
#	Added variable $xLastConnectionTime in Function OutputMachineDetails to handle the Nullable DateTime property LastConnectionTime
#	Fixed HTML output for Administrative Scopes
#	In Function OutputAppendixD, adjust the Text output to handle longer component names
#	In Function OutputCEIPSetting, initialize the $CEIP variable in case of error with Get-AnalyticsSite
#	In the OutputMachines functions, don't process manually provisioned catalogs
#		There is no $Catalog.ProvisioningSchemeId for manually provisioned catalogs
#	In the OutputMachineDetails function, change the variable used for the Write-Verbose "Output Machine" line
#		RemotePC and machines not registered have a $Null HostMachineName property
#		Use the first part of the DNSName property value
#	In the Policies Word output, if there are no policy settings, add line stating that and skip the Word table functions
#	In the Summary page, Policies section, added a space before "(AD Policies can contain multiple Citrix policies)"
#	Most of the calls to Get-Broker* were changed from @XDParams1 to @XDParams2 to add the MaxRecordCount switch
#		This is to handle entities with more than 250 items (Machine Catalogs, Delivery Groups, Machines/Desktops, Sessions, etc.)
#	Update functions ShowScriptOutput and ProcessScriptEnd for new Log parameter
#	Updated help text
# 
#Version 2.09 8-Dec-2017
#	Updated Function WriteHTMLLine with fixes from the script template
#
#Version 2.08 28-Nov-2017
#	Added the following new Computer policy setting:
#		Browser Content Redirection
#		Enable XenApp Optimization
#		Path to XenApp optimization definitions
#	Added the following new User policy settings:
#		Browser Content Redirection ACL Configuration
#		Browser Content Redirection Proxy Configuration
#		Display lossless indicator
#		Optimize for 3D graphics workload
#		Tablet Mode Toggle
#	Tested with XenApp/XenDesktop 7.16
#	Update help text

#Version 2.07 5-Sep-2017
#	Added the following new Computer policy setting:
#		Logon Exclusion Check
#	Tested with XenApp/XenDesktop 7.15

#Version 2.06 30-Jun-2017
#	Added all properties from Get-MonitorConfiguration to Datastore section
#		For the Monitoring Database Details:
#			CollectHotfixDataEnabled
#			DataCollectionEnabled
#			DetailedSqlOutputEnabled
#			EnableDayLevelGranularityProcessUtilization
#			EnableHourLevelGranularityProcessUtilization
#			EnableMinLevelGranularityProcessUtilization
#			FullPollStartHour
#			MonitorQueryTimeoutSeconds
#			ResolutionPollTimeHours
#			SyncPollTimeHours
#		For the Groom Retention Settings in Days:
#			GroomApplicationErrorsRetentionDays
#			GroomApplicationFaultsRetentionDays
#			GroomApplicationInstanceRetentionDays
#			GroomDeletedRetentionDays
#			GroomFailuresRetentionDays
#			GroomHourlyRetentionDays
#			GroomLoadIndexesRetentionDays
#			GroomMachineHotfixLogRetentionDays
#			GroomMachineMetricDataRetentionDays
#			GroomMachineMetricDaySummaryDataRetentionDays
#			GroomMinuteRetentionDays
#			GroomNotificationLogRetentionDays
#			GroomProcessUsageDayDataRetentionDays
#			GroomProcessUsageHourDataRetentionDays
#			GroomProcessUsageMinuteDataRetentionDays
#			GroomProcessUsageRawDataRetentionDays
#			GroomResourceUsageDayDataRetentionDays
#			GroomResourceUsageHourDataRetentionDays
#			GroomResourceUsageMinuteDataRetentionDays
#			GroomResourceUsageRawDataRetentionDays
#			GroomSessionMetricsDataRetentionDays
#			GroomSessionsRetentionDays
#			GroomSummariesRetentionDays
#	Added Function GetSQLVersion
#	Added Read-Committed Snapshot and SQL Server version data to Datastore table
#	If any of the databases are configured for mirroring and the database size is null,
#		use the mirror server's name to calculate the size
#		if the size is still null, report "Unable to determine"
#	If SQL Server mirroring is not configured, in the Datastore table use "Not Configured" for the Mirror Server Address
#
#Version 2.05 26-Jun-2017
#	Added additional error checking for Site version information
#		If "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Citrix Desktop Delivery Controller" 
#		is not found on the computer running the script, then look on the computer specified for -AdminAddress
#		If still not found on that computer, abort the script
#	Added back the WorkerGroup policy filter for XenApp 6.x
#	Added Broker registry keys that can be set on Broker servers
#		Added Function GetControllerRegistryKeys
#		Added Function Get-RegistryValue2
#		Added Function Get-RegKeyToObject
#		Added Function OutputControllerRegistryKeys
#		Added new parameter BrokerRegistryKeys
#		There are 315 registry keys and values that are checked and listed
#		Updated Function OutputControllers
#	Added Controller version information to the Controllers section
#	Added "Database Size" to the Datastores output
#	Added folder name to Function OutputApplication (Thanks to Brandon Mitchell)
#	Added four new Cover Page properties
#		Company Address
#		Company Email
#		Company Fax
#		Company Phone
#	Added loading the SQL Server assembly so the database size calculations work consistently (thanks to Michael B. Smith)
#	Added missing function validObject
#	Added new parameter MaxDetails:
#		This is the same as using the following parameters:
#			Administrators
#			AppDisks
#			Applications
#			BrokerRegistryKeys
#			DeliveryGroups
#			HardWare
#			Hosting
#			Logging
#			MachineCatalogs
#			Policies
#			StoreFront
#	Added sort applications by AdminFolderName and ApplicationName to Function ProcessApplications (Thanks to Brandon Mitchell)
#	Added support for version 7.14
#	Added the following new Computer policy settings:
#		Application Launch Wait Timeout
#		Enable monitoring of application failures
#		Enable monitoring of application failures on Desktop OS VDAs
#		List of applications excluded from failure monitoring
#		Logoff Checker Startup Delay (seconds)
#		Profile Streaming Exclusion list - directories
#	Added to Delivery Group, LicenseModel and ProductCode
#	Added Version information to Controllers
#	Fixed bug when retrieving Filters for a Policy that "applies to all objects in the Site"
#	Fixed Function Check-LoadedModule
#	Fixed function OutputPolicySetting
#	Fixed functions ProcessAppV and OutputAppv to handle multiple AppV servers (Thanks to Brandon Mitchell)
#	Fixed numerous issues in the Policies section
#	Fixed the "CPU Usage", "Disk Usage", and "Memory Usage" policy settings
#		When those settings are Disabled, they are stored as Enabled with a Value of -1
#	Fixed two calls to Get-BrokerApplication that were retrieving the default of 250 records (Thanks to Brandon Mitchell)
#	Removed code (240 lines) that made sure all Parameters were set to default values if for some reason they did exist or values were $Null
#	Reordered the parameters in the help text and parameter list so they match and are grouped better
#	Replaced _SetDocumentProperty function with Jim Moyle's Set-DocumentProperty function
#	Updated Function OutputDatastores to:
#		Add database size
#		Fix output for mirrored databases
#		Check if SQL Server assembly is loaded before calculating database size
#	Updated Function ProcessScriptEnd for the new Cover Page properties and Parameters
#	Updated Function ShowScriptOptions for the new Cover Page properties and Parameters
#	Updated Function UpdateDocumentProperties for the new Cover Page properties and Parameters
#	Updated help text
#	When -NoPolicies is specified, the Citrix.GroupPolicy.Commands module is no longer searched for

#Version 2.04 6-Mar-2017
#	Fixed wording of more policy names that changed from 7.13 prerelease to RTM
#		URL Redirection -> Bidirectional Content Redirection
#		Allow URL Redirection -> Allow Bidirectional Content Redirection
#		Allow Client URLs -> Allowed URLs to be redirected to Client
#		Allow VDA URLs -> Allowed URLs to be redirected to VDA
#		UPM - Enable Default Exclusion List - directories -> Enable Default Exclusion List - directories
#		UPM - !ctx_localappdata!\Microsoft\Application Shortcuts -> UPM - !ctx_localappdata!\Microsoft\Windows\Application Shortcuts
#		UPM - !ctx_localappdata!\Microsoft\Burn -> UPM - !ctx_localappdata!\Microsoft\Windows\Burn

#Version 2.03 3-Mar-2017
#	Fixed bug reported by P. Ewing in Functions ConfigLogPreferences and OutputDatastores
#	Fixed wording of policy setting (thanks to Esther Barthel):
#		"Profile Management\File system\Default Exclusions\UPM - !ctx_localappdata!\Microsoft\CD Burning" to 
#		"Profile Management\File system\Default Exclusions\UPM - !ctx_localappdata!\Microsoft\Windows\CD Burning"

#Version 2.02 released 1-Mar-2017
#	Added Application Group details
#	Added Application Group "SingleAppPerSession" property
#	Updated help text

#Version 2.01 released 28-Feb-2017
#	Added -Dev and -ScriptInfo parameters
#	Fixed several undefined variables
#	Updated help text

# Version 2.0 released on 21-Feb-2017
#	Added "Launch in user's home zone" to Delivery Group details
#	Added AppDisks
#	Added AppDNA and the ability to process just the AppDNA section
#	Added Break statements to most of the Switch statements
#	Added Chinese language support
#	Added Configuration Logging Preferences
#		Show correct database size, not the wrong size reported in Studio
#	Added Description to Machine Catalog details
#	Added Desktop Entitlement settings to Delivery Groups that are configured to deliver desktops
#	Added new policies
#	Added RemotePC OU and Subfolder properties to RemotePC Machine Catalog details
#	Added "Restrict launches to machines with tag" to Random/Desktops only and RemotePC Delivery Groups
#	Added Summary Report page
#	Added support for VDA versions 7.8 and 7.9 (which includes 7.11/7.12/7.13)
#	Added support for XenApp/XenDesktop 7.8, 7.9, 7.11, 7.12, 7.13
#	Added to machine catalog information for RemotePC, "No. of Machines" and "Allocated Machines"
#	Brought core functions up-to-date with the other scripts
#	Fix numerous typos
#	Fixed formatting issues with HTML headings output
#	Fixed French wording for Table of Contents 2 (Thanks to David Rouquier)
#	Fixed the “No. of machines” for Machine Catalogs so it is now accurate
#	Fixed the Machine Catalog details to match what is shown in Studio
#	For Machine Catalog details, for PVS provisioned catalogs, add the PVS Server address
#	For Persistent machines with changes stored on the local disk, added the “VM copy mode”
#	For Personal vDisk catalogs, added PvD size and drive letter
#	For Random catalog types (SingleSession and MultiSession), added "Temporary memory cache size (MB)" and "Temporary disk cache size (GB)"
#	Removed unnecessary blank lines in policy value output
#	Removed snapin citrix.common.commands as it is removed in 7.13 and no cmdlets are used from that snapin
#	Updated error message for missing snapins to state requires a 7.8 or later Controller
#	Updated help text
#	Updated Machine/Desktop details to match what is shown in Studio
#	Updated the Delivery Group details section with the changes to how "Delivering" is determined for XenApp Delivery Groups
#	Updated the Delivery Group "Restart Schedule" wording to match the changes in Studio
#	Updated the Delivery Group "Restart Schedule" to include the PowerShell only setting of "Restrict to tag" for 7.12 and later
#	Updated the Delivery Group section to match all the changes made in Studio
#	Updated version checking
#		Now display running version in error messages
#	Updated version checking registry access to allow 32-bit PowerShell access to 64-bit registry
#
#endregion


Function AbortScript
{
	If($MSWord -or $PDF)
	{
		Write-Verbose "$(Get-Date -Format G): System Cleanup"
		If(Test-Path variable:global:word)
		{
			$Script:Word.quit()
			[System.Runtime.Interopservices.Marshal]::ReleaseComObject($Script:Word) | Out-Null
			Remove-Variable -Name word -Scope Global 4>$Null
		}
	}
	[gc]::collect() 
	[gc]::WaitForPendingFinalizers()

	If($MSWord -or $PDF)
	{
		#is the winword Process still running? kill it

		#find out our session (usually "1" except on TS/RDC or Citrix)
		$SessionID = (Get-Process -PID $PID).SessionId

		#Find out if winword running in our session
		$wordprocess = ((Get-Process 'WinWord' -ea 0) | Where-Object {$_.SessionId -eq $SessionID}) | Select-Object -Property Id 
		If( $wordprocess -and $wordprocess.Id -gt 0)
		{
			Write-Verbose "$(Get-Date -Format G): WinWord Process is still running. Attempting to stop WinWord Process # $($wordprocess.Id)"
			Stop-Process $wordprocess.Id -EA 0
		}
	}
	
	Write-Verbose "$(Get-Date -Format G): Script has been aborted"
	#stop transcript logging
	If($Log -eq $True) 
	{
		If($Script:StartLog -eq $True) 
		{
			try 
			{
				Stop-Transcript | Out-Null
				Write-Verbose "$(Get-Date -Format G): $Script:LogPath is ready for use"
			} 
			catch 
			{
				Write-Verbose "$(Get-Date -Format G): Transcript/log stop failed"
			}
		}
	}
	$ErrorActionPreference = $SaveEAPreference
	Exit
}

#region initial variable testing and setup
Set-StrictMode -Version Latest

#force  on
$PSDefaultParameterValues = @{"*:Verbose"=$True}
$SaveEAPreference         = $ErrorActionPreference
$ErrorActionPreference    = 'SilentlyContinue'

$script:MyVersion   = '2.52'
$Script:ScriptName  = "XD7_Inventory_V2.ps1"
$tmpdate            = [datetime] "03/24/2023"
$Script:ReleaseDate = $tmpdate.ToUniversalTime().ToShortDateString()

If($Null -eq $MSWord)
{
	If($Text -or $HTML -or $PDF)
	{
		$MSWord = $False
	}
	Else
	{
		$MSWord = $True
	}
}

If($MSWord -eq $False -and $PDF -eq $False -and $Text -eq $False -and $HTML -eq $False)
{
	$MSWord = $True
}

Write-Verbose "$(Get-Date -Format G): Testing output parameters"

If($MSWord)
{
	Write-Verbose "$(Get-Date -Format G): MSWord is set"
}
ElseIf($PDF)
{
	Write-Verbose "$(Get-Date -Format G): PDF is set"
}
ElseIf($Text)
{
	Write-Verbose "$(Get-Date -Format G): Text is set"
}
ElseIf($HTML)
{
	Write-Verbose "$(Get-Date -Format G): HTML is set"
}
Else
{
	$ErrorActionPreference = $SaveEAPreference
	Write-Verbose "$(Get-Date -Format G): Unable to determine output parameter"
	If($Null -eq $MSWord)
	{
		Write-Verbose "$(Get-Date -Format G): MSWord is Null"
	}
	ElseIf($Null -eq $PDF)
	{
		Write-Verbose "$(Get-Date -Format G): PDF is Null"
	}
	ElseIf($Null -eq $Text)
	{
		Write-Verbose "$(Get-Date -Format G): Text is Null"
	}
	ElseIf($Null -eq $HTML)
	{
		Write-Verbose "$(Get-Date -Format G): HTML is Null"
	}
	Else
	{
		Write-Verbose "$(Get-Date -Format G): MSWord is $($MSWord)"
		Write-Verbose "$(Get-Date -Format G): PDF is $($PDF)"
		Write-Verbose "$(Get-Date -Format G): Text is $($Text)"
		Write-Verbose "$(Get-Date -Format G): HTML is $($HTML)"
	}
	Write-Error "
	`n`n
	`t`t
	Unable to determine output parameter.
	`n`n
	`t`t
	Script cannot continue.
	`n`n
	"
	AbortScript
}

If(![String]::IsNullOrEmpty($SmtpServer) -and [String]::IsNullOrEmpty($From) -and [String]::IsNullOrEmpty($To))
{
	Write-Error "
	`n`n
	`t`t
	You specified an SmtpServer but did not include a From or To email address.
	`n`n
	`t`t
	Script cannot continue.
	`n`n"
	AbortScript
}
If(![String]::IsNullOrEmpty($SmtpServer) -and [String]::IsNullOrEmpty($From) -and ![String]::IsNullOrEmpty($To))
{
	Write-Error "
	`n`n
	`t`t
	You specified an SmtpServer and a To email address but did not include a From email address.
	`n`n
	`t`t
	Script cannot continue.
	`n`n"
	AbortScript
}
If(![String]::IsNullOrEmpty($SmtpServer) -and [String]::IsNullOrEmpty($To) -and ![String]::IsNullOrEmpty($From))
{
	Write-Error "
	`n`n
	`t`t
	You specified an SmtpServer and a From email address but did not include a To email address.
	`n`n
	`t`t
	Script cannot continue.
	`n`n"
	AbortScript
}
If(![String]::IsNullOrEmpty($From) -and ![String]::IsNullOrEmpty($To) -and [String]::IsNullOrEmpty($SmtpServer))
{
	Write-Error "
	`n`n
	`t`t
	You specified From and To email addresses but did not include the SmtpServer.
	`n`n
	`t`t
	Script cannot continue.
	`n`n"
	AbortScript
}
If(![String]::IsNullOrEmpty($From) -and [String]::IsNullOrEmpty($SmtpServer))
{
	Write-Error "
	`n`n
	`t`t
	You specified a From email address but did not include the SmtpServer.
	`n`n
	`t`t
	Script cannot continue.
	`n`n"
	AbortScript
}
If(![String]::IsNullOrEmpty($To) -and [String]::IsNullOrEmpty($SmtpServer))
{
	Write-Error "
	`n`n
	`t`t
	You specified a To email address but did not include the SmtpServer.
	`n`n
	`t`t
	Script cannot continue.
	`n`n"
	AbortScript
}

#If the MaxDetails parameter is used, set a bunch of stuff true and some stuff false
If($MaxDetails)
{
	$Administrators		= $True
	$AppDisks			= $True
	$Applications		= $True
	$BrokerRegistryKeys	= $True
	$Controllers		= $True
	$DeliveryGroups		= $True
	$HardWare			= $True
	$Hosting			= $True
	$Logging			= $True
	$MachineCatalogs	= $True
	$Policies			= $True
	$StoreFront			= $True
	$VDARegistryKeys	= $True
	
	$NoPolicies			= $False
	$Section			= "All"
}

#added 30-Sep-2020, if BrokerRegistryKeys is True, test for elevation

If($BrokerRegistryKeys -eq $True)
{
	$currentPrincipal = New-Object Security.Principal.WindowsPrincipal( [Security.Principal.WindowsIdentity]::GetCurrent() )

	If($currentPrincipal.IsInRole( [Security.Principal.WindowsBuiltInRole]::Administrator ))
	{
		Write-Host "This is an elevated PowerShell session" -ForegroundColor White
	}
	Else
	{
		Write-Error "
		`n
		BrokerRegistryKeys was specified and this is NOT an elevated PowerShell session.
		`n
		Script will exit.
		`n"
		AbortScript
	}
}

If($NoPolicies)
{
	$Policies = $False
}

If($NoPolicies -and $Section -eq "Policies")
{
	#conflict
	$ErrorActionPreference = $SaveEAPreference
	Write-Error -Message "
	`n`n
	`t`t
	You specified conflicting parameters.
	`n`n
	`t`t
	You specified the Policies section but also selected NoPolicies.
	`n`n
	`t`t
	Please change one of these options and rerun the script.
	`n`n
	`t`t
	Script cannot continue.
	`n`n"
	AbortScript
}

$ValidSection = $False
#2.50 remove the Break statements since there can now be multiple sections entered
Switch ($Section)
{
	"Admins"		{$ValidSection = $True}
	"AppDisks"		{$ValidSection = $True}
	"AppDNA"		{$ValidSection = $True}
	"Apps"			{$ValidSection = $True}
	"AppV"			{$ValidSection = $True}
	"Catalogs"		{$ValidSection = $True}
	"Config"		{$ValidSection = $True}
	"Controllers"	{$ValidSection = $True}
	"Groups"		{$ValidSection = $True}
	"Hosting"		{$ValidSection = $True}
	"Licensing"		{$ValidSection = $True}
	"Logging"		{$ValidSection = $True; $Logging = $True}	#force $logging true if the config logging section is specified
	"Policies"		{$ValidSection = $True; $Policies = $True} #force $policies true if the policies section is specified
	"StoreFront"	{$ValidSection = $True}
	"Zones"			{$ValidSection = $True}
	"All"			{$ValidSection = $True}
}

If($ValidSection -eq $False)
{
	$ErrorActionPreference = $SaveEAPreference
	Write-Error -Message "
	`n`n
	`t`t
	The Section parameter specified, $Section, is an invalid Section option.
	`n`n
	`t`t
	Valid options are:
	
	`tAdmins
	`tAppDisks
	`tAppDNA
	`tApps
	`tAppV
	`tCatalogs
	`tConfig
	`tControllers
	`tGroups
	`tHosting
	`tLicensing
	`tLogging
	`tPolicies
	`tStoreFront
	`tZones
	`tAll
	
	`t`t
	Script cannot continue.
	`n`n
	"
	AbortScript
}

If($Folder -ne "")
{
	Write-Verbose "$(Get-Date -Format G): Testing folder path"
	#does it exist
	If(Test-Path $Folder -EA 0)
	{
		#it exists, now check to see if it is a folder and not a file
		If(Test-Path $Folder -pathType Container -EA 0)
		{
			#it exists and it is a folder
			Write-Verbose "$(Get-Date -Format G): Folder path $Folder exists and is a folder"
		}
		Else
		{
			#it exists but it is a file not a folder
#Do not indent the following write-error lines. Doing so will mess up the console formatting of the error message.
			Write-Error "
			`n`n
	Folder $Folder is a file, not a folder.
			`n`n
	Script cannot continue.
			`n`n"
			AbortScript
		}
	}
	Else
	{
		#does not exist
		Write-Error "
		`n`n
	Folder $Folder does not exist.
		`n`n
	Script cannot continue.
		`n`n
		"
		AbortScript
	}
}

If($Folder -eq "")
{
	$Script:pwdpath = $pwd.Path
}
Else
{
	$Script:pwdpath = $Folder
}

If($Script:pwdpath.EndsWith("\"))
{
	#remove the trailing \
	$Script:pwdpath = $Script:pwdpath.SubString(0, ($Script:pwdpath.Length - 1))
}

#V2.10 added
If($Log) 
{
	#start transcript logging
	$Script:LogPath = "$Script:pwdpath\XDV2DocScriptTranscript_$(Get-Date -f FileDateTime).txt"
	
	try 
	{
		Start-Transcript -Path $Script:LogPath -Force -Verbose:$false | Out-Null
		Write-Verbose "$(Get-Date -Format G): Transcript/log started at $Script:LogPath"
		$Script:StartLog = $true
	} 
	catch 
	{
		Write-Verbose "$(Get-Date -Format G): Transcript/log failed at $Script:LogPath"
		$Script:StartLog = $false
	}
}

If($Dev)
{
	$Error.Clear()
	$Script:DevErrorFile = "$Script:pwdpath\XAXDV2InventoryScriptErrors_$(Get-Date -f FileDateTime).txt"
}

If($VDARegistryKeys)
{	
	#Force $MachineCatalogs to True
	Write-Verbose "$(Get-Date -Format G): VDARegistryKeys switch is set. Forcing MachineCatalogs to True."
	$MachineCatalogs = $True
}

$Script:TotalServerOSCatalogs = 0
$Script:TotalDesktopOSCatalogs = 0
$Script:TotalRemotePCCatalogs = 0
$Script:TotalAppDisks = 0
$Script:TotalApplicationGroups = 0
$Script:TotalDesktopGroups = 0
$Script:TotalAppsAndDesktopGroups = 0
$Script:TotalPublishedApplications = 0
$Script:TotalAppvApplications = 0
$Script:TotalComputerPolicies = 0
$Script:TotalUserPolicies = 0
$Script:TotalSitePolicies = 0
$Script:TotalADPolicies = 0
$Script:TotalADPoliciesNotProcessed = 0
$Script:TotalPolicies = 0
$Script:TotalDeliveryGroupAdmins = 0
$Script:TotalFullAdmins = 0
$Script:TotalHelpDeskAdmins = 0
$Script:TotalHostAdmins = 0
$Script:TotalMachineCatalogAdmins = 0
$Script:TotalReadOnlyAdmins = 0
$Script:TotalCustomAdmins = 0
$Script:TotalControllers = 0
$Script:TotalHostingConnections = 0
$Script:TotalStoreFrontServers = 0
$Script:TotalZones = 0
#V2.20
$Script:VDARegistryItems = New-Object System.Collections.ArrayList
$Script:ALLVDARegistryItems = New-Object System.Collections.ArrayList
#Fix V2.20.1
$Script:ControllerRegistryItems = New-Object System.Collections.ArrayList
$Script:AllControllerRegistryItems = New-Object System.Collections.ArrayList	
[string]$Script:RunningOS = (Get-CIMInstance -ClassName Win32_OperatingSystem -EA 0 -Verbose:$False).Caption

#endregion

#region initialize variables for Word, HTML, and text

If($MSWord -or $PDF)
{
	#try and fix the issue with the $CompanyName variable
	$Script:CoName = $CompanyName
	Write-Verbose "$(Get-Date -Format G): CoName is $($Script:CoName)"
	
	#the following values were attained from 
	#http://groovy.codehaus.org/modules/scriptom/1.6.0/scriptom-office-2K3-tlb/apidocs/
	#http://msdn.microsoft.com/en-us/library/office/aa211923(v=office.11).aspx
	[int]$wdAlignPageNumberRight  = 2
	[int]$wdMove                  = 0
	[int]$wdSeekMainDocument      = 0
	[int]$wdSeekPrimaryFooter     = 4
	[int]$wdStory                 = 6
	#[int]$wdColorBlack            = 0
	#[int]$wdColorGray05           = 15987699 
	[int]$wdColorGray15           = 14277081
	#[int]$wdColorRed              = 255
	[int]$wdColorWhite            = 16777215
	#[int]$wdColorYellow           = 65535
	[int]$wdWord2007              = 12
	[int]$wdWord2010              = 14
	[int]$wdWord2013              = 15
	[int]$wdWord2016              = 16
	[int]$wdFormatDocumentDefault = 16
	[int]$wdFormatPDF             = 17
	#http://blogs.technet.com/b/heyscriptingguy/archive/2006/03/01/how-can-i-right-align-a-single-column-in-a-word-table.aspx
	#http://msdn.microsoft.com/en-us/library/office/ff835817%28v=office.15%29.aspx
	#[int]$wdAlignParagraphLeft   = 0
	#[int]$wdAlignParagraphCenter = 1
	#[int]$wdAlignParagraphRight  = 2
	#http://msdn.microsoft.com/en-us/library/office/ff193345%28v=office.15%29.aspx
	#[int]$wdCellAlignVerticalTop    = 0
	#[int]$wdCellAlignVerticalCenter = 1
	#[int]$wdCellAlignVerticalBottom = 2
	#http://msdn.microsoft.com/en-us/library/office/ff844856%28v=office.15%29.aspx
	[int]$wdAutoFitFixed   = 0
	[int]$wdAutoFitContent = 1
	#[int]$wdAutoFitWindow = 2
	#http://msdn.microsoft.com/en-us/library/office/ff821928%28v=office.15%29.aspx
	[int]$wdAdjustNone         = 0
	[int]$wdAdjustProportional = 1
	#[int]$wdAdjustFirstColumn = 2
	#[int]$wdAdjustSameWidth   = 3

	[int]$PointsPerTabStop = 36
	[int]$Indent0TabStops  = 0 * $PointsPerTabStop
	#[int]$Indent1TabStops = 1 * $PointsPerTabStop
	#[int]$Indent2TabStops = 2 * $PointsPerTabStop
	#[int]$Indent3TabStops = 3 * $PointsPerTabStop
	#[int]$Indent4TabStops = 4 * $PointsPerTabStop

	# http://www.thedoctools.com/index.php?show=wt_style_names_english_danish_german_french
	[int]$wdStyleHeading1         = -2
	[int]$wdStyleHeading2         = -3
	[int]$wdStyleHeading3         = -4
	[int]$wdStyleHeading4         = -5
	[int]$wdStyleNoSpacing        = -158
	[int]$wdTableGrid             = -155
	#[int]$wdTableLightListAccent3 = -206

	#http://groovy.codehaus.org/modules/scriptom/1.6.0/scriptom-office-2K3-tlb/apidocs/org/codehaus/groovy/scriptom/tlb/office/word/WdLineStyle.html
	[int]$wdLineStyleNone       = 0
	[int]$wdLineStyleSingle     = 1
	[int]$wdHeadingFormatTrue   = -1
	#[int]$wdHeadingFormatFalse = 0 
}
Else
{
	$Script:CoName = ""
}

If($HTML)
{
	#V2.23 Prior versions used Set-Variable. That hid the variables
	#from @code. So MBS switched to using $global:

    $global:htmlredmask       = "#FF0000" 4>$Null
    $global:htmlcyanmask      = "#00FFFF" 4>$Null
    $global:htmlbluemask      = "#0000FF" 4>$Null
    $global:htmldarkbluemask  = "#0000A0" 4>$Null
    $global:htmllightbluemask = "#ADD8E6" 4>$Null
    $global:htmlpurplemask    = "#800080" 4>$Null
    $global:htmlyellowmask    = "#FFFF00" 4>$Null
    $global:htmllimemask      = "#00FF00" 4>$Null
    $global:htmlmagentamask   = "#FF00FF" 4>$Null
    $global:htmlwhitemask     = "#FFFFFF" 4>$Null
    $global:htmlsilvermask    = "#C0C0C0" 4>$Null
    $global:htmlgraymask      = "#808080" 4>$Null
    $global:htmlblackmask     = "#000000" 4>$Null
    $global:htmlorangemask    = "#FFA500" 4>$Null
    $global:htmlmaroonmask    = "#800000" 4>$Null
    $global:htmlgreenmask     = "#008000" 4>$Null
    $global:htmlolivemask     = "#808000" 4>$Null

    $global:htmlbold        = 1 4>$Null
    $global:htmlitalics     = 2 4>$Null
    $global:htmlred         = 4 4>$Null
    $global:htmlcyan        = 8 4>$Null
    $global:htmlblue        = 16 4>$Null
    $global:htmldarkblue    = 32 4>$Null
    $global:htmllightblue   = 64 4>$Null
    $global:htmlpurple      = 128 4>$Null
    $global:htmlyellow      = 256 4>$Null
    $global:htmllime        = 512 4>$Null
    $global:htmlmagenta     = 1024 4>$Null
    $global:htmlwhite       = 2048 4>$Null
    $global:htmlsilver      = 4096 4>$Null
    $global:htmlgray        = 8192 4>$Null
    $global:htmlolive       = 16384 4>$Null
    $global:htmlorange      = 32768 4>$Null
    $global:htmlmaroon      = 65536 4>$Null
    $global:htmlgreen       = 131072 4>$Null
	$global:htmlblack       = 262144 4>$Null

	$global:htmlsb          = ( $htmlsilver -bor $htmlBold ) ## point optimization

	$global:htmlColor = 
	@{
		$htmlred       = $htmlredmask
		$htmlcyan      = $htmlcyanmask
		$htmlblue      = $htmlbluemask
		$htmldarkblue  = $htmldarkbluemask
		$htmllightblue = $htmllightbluemask
		$htmlpurple    = $htmlpurplemask
		$htmlyellow    = $htmlyellowmask
		$htmllime      = $htmllimemask
		$htmlmagenta   = $htmlmagentamask
		$htmlwhite     = $htmlwhitemask
		$htmlsilver    = $htmlsilvermask
		$htmlgray      = $htmlgraymask
		$htmlolive     = $htmlolivemask
		$htmlorange    = $htmlorangemask
		$htmlmaroon    = $htmlmaroonmask
		$htmlgreen     = $htmlgreenmask
		$htmlblack     = $htmlblackmask
	}
}

If($TEXT)
{
	#V2.23 - switch to using a StringBuilder for $global:Output
	[System.Text.StringBuilder] $global:Output = New-Object System.Text.StringBuilder( 16384 )
}
#endregion

#region code for hardware data
Function GetComputerWMIInfo
{
	Param([string]$RemoteComputerName)
	
	# original work by Kees Baggerman, 
	# Senior Technical Consultant @ Inter Access
	# k.baggerman@myvirtualvision.com
	# @kbaggerman on Twitter
	# http://blog.myvirtualvision.com
	# modified 1-May-2014 to work in trusted AD Forests and using different domain admin credentials	
	# modified 17-Aug-2016 to fix a few issues with Text and HTML output
	# modified 29-Apr-2018 to change from Arrays to New-Object System.Collections.ArrayList
	# modified 11-Mar-2022 changed from using Get-WmiObject to Get-CimInstance

	#Get Computer info
	Write-Verbose "$(Get-Date -Format G): `t`tProcessing WMI Computer information"
	Write-Verbose "$(Get-Date -Format G): `t`t`tHardware information"
	If($MSWord -or $PDF)
	{
		WriteWordLine 3 0 "Computer Information: $($RemoteComputerName)"
		WriteWordLine 4 0 "General Computer"
	}
	If($Text)
	{
		Line 1 "Computer Information: $($RemoteComputerName)"
		Line 2 "General Computer"
	}
	If($HTML)
	{
		WriteHTMLLine 3 0 "Computer Information: $($RemoteComputerName)"
		WriteHTMLLine 4 0 "General Computer"
	}
	
	Try
	{
		If($RemoteComputerName -eq $env:computername)
		{
			$Results = Get-CimInstance -ClassName win32_computersystem -Verbose:$False
		}
		Else
		{
			$Results = Get-CimInstance -computername $RemoteComputerName -ClassName win32_computersystem -Verbose:$False
		}
	}
	
	Catch
	{
		$Results = $Null
	}
	
	If($? -and $Null -ne $Results)
	{
		$ComputerItems = $Results | Select-Object Manufacturer, Model, Domain, `
		@{N="TotalPhysicalRam"; E={[math]::round(($_.TotalPhysicalMemory / 1GB),0)}}, `
		NumberOfProcessors, NumberOfLogicalProcessors
		$Results = $Null
		If($RemoteComputerName -eq $env:computername)
		{
			[string]$ComputerOS = (Get-CimInstance -ClassName Win32_OperatingSystem -EA 0 -Verbose:$False).Caption
		}
		Else
		{
			[string]$ComputerOS = (Get-CimInstance -ClassName Win32_OperatingSystem -CimSession $RemoteComputerName -EA 0 -Verbose:$False).Caption
		}

		ForEach($Item in $ComputerItems)
		{
			OutputComputerItem $Item $ComputerOS $RemoteComputerName
		}
	}
	ElseIf(!$?)
	{
		Write-Verbose "$(Get-Date -Format G): Get-CimInstance win32_computersystem failed for $($RemoteComputerName)"
		Write-Warning "Get-CimInstance win32_computersystem failed for $($RemoteComputerName)"
		If($MSWORD -or $PDF)
		{
			WriteWordLine 0 2 "Get-CimInstance win32_computersystem failed for $($RemoteComputerName)" "" $Null 0 $False $True
		}
		If($Text)
		{
			Line 1 "Get-CimInstance win32_computersystem failed for $($RemoteComputerName)"
			Line 1 ""
		}
		If($HTML)
		{
			WriteHTMLLine 0 2 "Get-CimInstance win32_computersystem failed for $($RemoteComputerName)" -option $htmlBold
		}
	}
	Else
	{
		Write-Verbose "$(Get-Date -Format G): No results Returned for Computer information"
		If($MSWORD -or $PDF)
		{
			WriteWordLine 0 2 "No results Returned for Computer information" "" $Null 0 $False $True
		}
		If($Text)
		{
			Line 1 "No results Returned for Computer information"
		}
		If($HTML)
		{
			WriteHTMLLine 0 2 "No results Returned for Computer information" -Option $htmlBold
		}
	}
	
	#Get Disk info
	Write-Verbose "$(Get-Date -Format G): `t`t`tDrive information"

	If($MSWord -or $PDF)
	{
		WriteWordLine 4 0 "Drive(s)"
	}
	If($Text)
	{
		Line 2 "Drive(s)"
	}
	If($HTML)
	{
		WriteHTMLLine 4 0 "Drive(s)"
	}

	Try
	{
		If($RemoteComputerName -eq $env:computername)
		{
			$Results = Get-CimInstance -ClassName Win32_LogicalDisk -Verbose:$False
		}
		Else
		{
			$Results = Get-CimInstance -CimSession $RemoteComputerName -ClassName Win32_LogicalDisk -Verbose:$False
		}
	}
	
	Catch
	{
		$Results = $Null
	}

	If($? -and $Null -ne $Results)
	{
		$drives = $Results | Select-Object caption, @{N="drivesize"; E={[math]::round(($_.size / 1GB),0)}}, 
		filesystem, @{N="drivefreespace"; E={[math]::round(($_.freespace / 1GB),0)}}, 
		volumename, drivetype, volumedirty, volumeserialnumber
		$Results = $Null
		ForEach($drive in $drives)
		{
			If($drive.caption -ne "A:" -and $drive.caption -ne "B:")
			{
				OutputDriveItem $drive
			}
		}
	}
	ElseIf(!$?)
	{
		Write-Verbose "$(Get-Date -Format G): Get-CimInstance Win32_LogicalDisk failed for $($RemoteComputerName)"
		Write-Warning "Get-CimInstance Win32_LogicalDisk failed for $($RemoteComputerName)"
		If($MSWORD -or $PDF)
		{
			WriteWordLine 0 2 "Get-CimInstance Win32_LogicalDisk failed for $($RemoteComputerName)" "" $Null 0 $False $True
		}
		If($Text)
		{
			Line 1 "Get-CimInstance Win32_LogicalDisk failed for $($RemoteComputerName)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 2 "Get-CimInstance Win32_LogicalDisk failed for $($RemoteComputerName)" -Option $htmlBold
		}
	}
	Else
	{
		Write-Verbose "$(Get-Date -Format G): No results Returned for Drive information"
		If($MSWORD -or $PDF)
		{
			WriteWordLine 0 2 "No results Returned for Drive information" "" $Null 0 $False $True
		}
		If($Text)
		{
			Line 1 "No results Returned for Drive information"
		}
		If($HTML)
		{
			WriteHTMLLine 0 2 "No results Returned for Drive information" -Option $htmlBold
		}
	}
	
	#Get CPU's and stepping
	Write-Verbose "$(Get-Date -Format G): `t`t`tProcessor information"

	If($MSWord -or $PDF)
	{
		WriteWordLine 4 0 "Processor(s)"
	}
	If($Text)
	{
		Line 2 "Processor(s)"
	}
	If($HTML)
	{
		WriteHTMLLine 4 0 "Processor(s)"
	}

	Try
	{
		If($RemoteComputerName -eq $env:computername)
		{
			$Results = Get-CimInstance -ClassName win32_Processor -Verbose:$False
		}
		Else
		{
			$Results = Get-CimInstance -computername $RemoteComputerName -ClassName win32_Processor -Verbose:$False
		}
	}
	
	Catch
	{
		$Results = $Null
	}

	If($? -and $Null -ne $Results)
	{
		$Processors = $Results | Select-Object availability, name, description, maxclockspeed, 
		l2cachesize, l3cachesize, numberofcores, numberoflogicalprocessors
		$Results = $Null
		ForEach($processor in $processors)
		{
			OutputProcessorItem $processor
		}
	}
	ElseIf(!$?)
	{
		Write-Verbose "$(Get-Date -Format G): Get-CimInstance win32_Processor failed for $($RemoteComputerName)"
		Write-Warning "Get-CimInstance win32_Processor failed for $($RemoteComputerName)"
		If($MSWORD -or $PDF)
		{
			WriteWordLine 0 2 "Get-CimInstance win32_Processor failed for $($RemoteComputerName)" "" $Null 0 $False $True
		}
		If($Text)
		{
			Line 1 "Get-CimInstance win32_Processor failed for $($RemoteComputerName)"
		}
		If($HTML)
		{
			WriteHTMLLine 0 2 "Get-CimInstance win32_Processor failed for $($RemoteComputerName)" -Option $htmlBold
		}
	}
	Else
	{
		Write-Verbose "$(Get-Date -Format G): No results Returned for Processor information"
		If($MSWORD -or $PDF)
		{
			WriteWordLine 0 2 "No results Returned for Processor information" "" $Null 0 $False $True
		}
		If($Text)
		{
			Line 1 "No results Returned for Processor information"
		}
		If($HTML)
		{
			WriteHTMLLine 0 2 "No results Returned for Processor information" -Option $htmlBold
		}
	}

	#Get Nics
	Write-Verbose "$(Get-Date -Format G): `t`t`tNIC information"

	If($MSWord -or $PDF)
	{
		WriteWordLine 4 0 "Network Interface(s)"
	}
	If($Text)
	{
		Line 2 "Network Interface(s)"
	}
	If($HTML)
	{
		WriteHTMLLine 4 0 "Network Interface(s)"
	}

	[bool]$GotNics = $True
	
	Try
	{
		If($RemoteComputerName -eq $env:computername)
		{
			$Results = Get-CimInstance -ClassName win32_networkadapterconfiguration -Verbose:$False
		}
		Else
		{
			$Results = Get-CimInstance -computername $RemoteComputerName -ClassName win32_networkadapterconfiguration -Verbose:$False
		}
	}
	
	Catch
	{
		$Results = $Null
	}

	If($? -and $Null -ne $Results)
	{
		$Nics = $Results | Where-Object {$Null -ne $_.ipaddress}
		$Results = $Null

		If($Null -eq $Nics) 
		{ 
			$GotNics = $False 
		} 
		Else 
		{ 
			$GotNics = $True 
		} 
	
		If($GotNics)
		{
			ForEach($nic in $nics)
			{
				Try
				{
					If($RemoteComputerName -eq $env:computername)
					{
						$ThisNic = Get-CimInstance -ClassName win32_networkadapter -Verbose:$False | Where-Object {$_.index -eq $nic.index}
					}
					Else
					{
						$ThisNic = Get-CimInstance -computername $RemoteComputerName -ClassName win32_networkadapter -Verbose:$False | Where-Object {$_.index -eq $nic.index}
					}
				}
				
				Catch 
				{
					$ThisNic = $Null
				}
				
				If($? -and $Null -ne $ThisNic)
				{
					OutputNicItem $Nic $ThisNic $RemoteComputerName
				}
				ElseIf(!$?)
				{
					Write-Warning "$(Get-Date): Error retrieving NIC information"
					Write-Verbose "$(Get-Date -Format G): Get-CimInstance win32_networkadapterconfiguration failed for $($RemoteComputerName)"
					Write-Warning "Get-CimInstance win32_networkadapterconfiguration failed for $($RemoteComputerName)"
					If($MSWORD -or $PDF)
					{
						WriteWordLine 0 2 "Error retrieving NIC information" "" $Null 0 $False $True
					}
					If($Text)
					{
						Line 1 "Error retrieving NIC information"
					}
					If($HTML)
					{
						WriteHTMLLine 0 2 "Error retrieving NIC information" -Option $htmlBold
					}
				}
				Else
				{
					Write-Verbose "$(Get-Date -Format G): No results Returned for NIC information"
					If($MSWORD -or $PDF)
					{
						WriteWordLine 0 2 "No results Returned for NIC information" "" $Null 0 $False $True
					}
					If($Text)
					{
						Line 1 "No results Returned for NIC information"
					}
					If($HTML)
					{
						WriteHTMLLine 0 2 "No results Returned for NIC information" -Option $htmlBold
					}
				}
			}
		}	
	}
	ElseIf(!$?)
	{
		Write-Warning "$(Get-Date): Error retrieving NIC configuration information"
		Write-Verbose "$(Get-Date -Format G): Get-CimInstance win32_networkadapterconfiguration failed for $($RemoteComputerName)"
		Write-Warning "Get-CimInstance win32_networkadapterconfiguration failed for $($RemoteComputerName)"
		If($MSWORD -or $PDF)
		{
			WriteWordLine 0 2 "Error retrieving NIC configuration information" "" $Null 0 $False $True
		}
		If($Text)
		{
			Line 1 "Error retrieving NIC configuration information"
		}
		If($HTML)
		{
			WriteHTMLLine 0 2 "Error retrieving NIC configuration information" -Option $htmlBold
		}
	}
	Else
	{
		Write-Verbose "$(Get-Date -Format G): No results Returned for NIC configuration information"
		If($MSWORD -or $PDF)
		{
			WriteWordLine 0 2 "No results Returned for NIC configuration information" "" $Null 0 $False $True
		}
		If($Text)
		{
			Line 1 "No results Returned for NIC configuration information"
		}
		If($HTML)
		{
			WriteHTMLLine 0 2 "No results Returned for NIC configuration information" -Option $htmlBold
		}
	}
	
	If($MSWORD -or $PDF)
	{
		WriteWordLine 0 0 ""
	}
	If($Text)
	{
		Line 0 ""
	}
	If($HTML)
	{
		WriteHTMLLine 0 0 ""
	}
}

Function OutputComputerItem
{
	Param([object]$Item, [string]$OS, [string]$RemoteComputerName)
	
	#get computer's power plan
	#https://techcommunity.microsoft.com/t5/core-infrastructure-and-security/get-the-active-power-plan-of-multiple-servers-with-powershell/ba-p/370429
	
	try 
	{

		If($RemoteComputerName -eq $env:computername)
		{
			$PowerPlan = (Get-CimInstance -ClassName Win32_PowerPlan -Namespace "root\cimv2\power" -Verbose:$False |
				Where-Object {$_.IsActive -eq $true} |
				Select-Object @{Name = "PowerPlan"; Expression = {$_.ElementName}}).PowerPlan
		}
		Else
		{
			$PowerPlan = (Get-CimInstance -CimSession $RemoteComputerName -ClassName Win32_PowerPlan -Namespace "root\cimv2\power" -Verbose:$False |
				Where-Object {$_.IsActive -eq $true} |
				Select-Object @{Name = "PowerPlan"; Expression = {$_.ElementName}}).PowerPlan
		}
	}

	catch 
	{

		$PowerPlan = $_.Exception

	}	
	
	If($MSWord -or $PDF)
	{
		$ItemInformation = New-Object System.Collections.ArrayList
		$ItemInformation.Add(@{ Data = "Manufacturer"; Value = $Item.manufacturer; }) > $Null
		$ItemInformation.Add(@{ Data = "Model"; Value = $Item.model; }) > $Null
		$ItemInformation.Add(@{ Data = "Domain"; Value = $Item.domain; }) > $Null
		$ItemInformation.Add(@{ Data = "Operating System"; Value = $OS; }) > $Null
		$ItemInformation.Add(@{ Data = "Power Plan"; Value = $PowerPlan; }) > $Null
		$ItemInformation.Add(@{ Data = "Total Ram"; Value = "$($Item.totalphysicalram) GB"; }) > $Null
		$ItemInformation.Add(@{ Data = "Physical Processors (sockets)"; Value = $Item.NumberOfProcessors; }) > $Null
		$ItemInformation.Add(@{ Data = "Logical Processors (cores w/HT)"; Value = $Item.NumberOfLogicalProcessors; }) > $Null
		$Table = AddWordTable -Hashtable $ItemInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		## Set first column format
		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		## IB - set column widths without recursion
		$Table.Columns.Item(1).Width = 150;
		$Table.Columns.Item(2).Width = 200;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustNone)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	If($Text)
	{
		Line 3 "Manufacturer`t`t`t: " $Item.manufacturer
		Line 3 "Model`t`t`t`t: " $Item.model
		Line 3 "Domain`t`t`t`t: " $Item.domain
		Line 3 "Operating System`t`t: " $OS
		Line 3 "Power Plan`t`t`t: " $PowerPlan
		Line 3 "Total Ram`t`t`t: $($Item.totalphysicalram) GB"
		Line 3 "Physical Processors (sockets)`t: " $Item.NumberOfProcessors
		Line 3 "Logical Processors (cores w/HT)`t: " $Item.NumberOfLogicalProcessors
		Line 3 ""
	}
	If($HTML)
	{
		$rowdata = @()
		$columnHeaders = @("Manufacturer",($global:htmlsb),$Item.manufacturer,$htmlwhite)
		$rowdata += @(,('Model',($global:htmlsb),$Item.model,$htmlwhite))
		$rowdata += @(,('Domain',($global:htmlsb),$Item.domain,$htmlwhite))
		$rowdata += @(,('Operating System',($global:htmlsb),$OS,$htmlwhite))
		$rowdata += @(,('Power Plan',($global:htmlsb),$PowerPlan,$htmlwhite))
		$rowdata += @(,('Total Ram',($global:htmlsb),"$($Item.totalphysicalram) GB",$htmlwhite))
		$rowdata += @(,('Physical Processors (sockets)',($global:htmlsb),$Item.NumberOfProcessors,$htmlwhite))
		$rowdata += @(,('Logical Processors (cores w/HT)',($global:htmlsb),$Item.NumberOfLogicalProcessors,$htmlwhite))

		$msg = ""
		$columnWidths = @("150px","200px")
		FormatHTMLTable $msg -rowarray $rowdata -columnArray $columnheaders -fixedWidth $columnWidths -tablewidth "350"
	}
}

Function OutputDriveItem
{
	Param([object]$Drive)
	
	$xDriveType = ""
	Switch ($drive.drivetype)
	{
		0		{$xDriveType = "Unknown"; Break}
		1		{$xDriveType = "No Root Directory"; Break}
		2		{$xDriveType = "Removable Disk"; Break}
		3		{$xDriveType = "Local Disk"; Break}
		4		{$xDriveType = "Network Drive"; Break}
		5		{$xDriveType = "Compact Disc"; Break}
		6		{$xDriveType = "RAM Disk"; Break}
		Default {$xDriveType = "Unknown"; Break}
	}
	
	$xVolumeDirty = ""
	If(![String]::IsNullOrEmpty($drive.volumedirty))
	{
		If($drive.volumedirty)
		{
			$xVolumeDirty = "Yes"
		}
		Else
		{
			$xVolumeDirty = "No"
		}
	}

	If($MSWORD -or $PDF)
	{
		$DriveInformation = New-Object System.Collections.ArrayList
		$DriveInformation.Add(@{ Data = "Caption"; Value = $Drive.caption; }) > $Null
		$DriveInformation.Add(@{ Data = "Size"; Value = "$($drive.drivesize) GB"; }) > $Null
		If(![String]::IsNullOrEmpty($drive.filesystem))
		{
			$DriveInformation.Add(@{ Data = "File System"; Value = $Drive.filesystem; }) > $Null
		}
		$DriveInformation.Add(@{ Data = "Free Space"; Value = "$($drive.drivefreespace) GB"; }) > $Null
		If(![String]::IsNullOrEmpty($drive.volumename))
		{
			$DriveInformation.Add(@{ Data = "Volume Name"; Value = $Drive.volumename; }) > $Null
		}
		If(![String]::IsNullOrEmpty($drive.volumedirty))
		{
			$DriveInformation.Add(@{ Data = "Volume is Dirty"; Value = $xVolumeDirty; }) > $Null
		}
		If(![String]::IsNullOrEmpty($drive.volumeserialnumber))
		{
			$DriveInformation.Add(@{ Data = "Volume Serial Number"; Value = $Drive.volumeserialnumber; }) > $Null
		}
		$DriveInformation.Add(@{ Data = "Drive Type"; Value = $xDriveType; }) > $Null
		$Table = AddWordTable -Hashtable $DriveInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		## Set first column format
		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells `
		-Bold `
		-BackgroundColor $wdColorGray15;

		## IB - set column widths without recursion
		$Table.Columns.Item(1).Width = 150;
		$Table.Columns.Item(2).Width = 200;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 2 ""
	}
	If($Text)
	{
		Line 3 "Caption`t`t: " $drive.caption
		Line 3 "Size`t`t: $($drive.drivesize) GB"
		If(![String]::IsNullOrEmpty($drive.filesystem))
		{
			Line 3 "File System`t: " $drive.filesystem
		}
		Line 3 "Free Space`t: $($drive.drivefreespace) GB"
		If(![String]::IsNullOrEmpty($drive.volumename))
		{
			Line 3 "Volume Name`t: " $drive.volumename
		}
		If(![String]::IsNullOrEmpty($drive.volumedirty))
		{
			Line 3 "Volume is Dirty`t: " $xVolumeDirty
		}
		If(![String]::IsNullOrEmpty($drive.volumeserialnumber))
		{
			Line 3 "Volume Serial #`t: " $drive.volumeserialnumber
		}
		Line 3 "Drive Type`t: " $xDriveType
		Line 3 ""
	}
	If($HTML)
	{
		$rowdata = @()
		$columnHeaders = @("Caption",($global:htmlsb),$Drive.caption,$htmlwhite)
		$rowdata += @(,('Size',($global:htmlsb),"$($drive.drivesize) GB",$htmlwhite))

		If(![String]::IsNullOrEmpty($drive.filesystem))
		{
			$rowdata += @(,('File System',($global:htmlsb),$Drive.filesystem,$htmlwhite))
		}
		$rowdata += @(,('Free Space',($global:htmlsb),"$($drive.drivefreespace) GB",$htmlwhite))
		If(![String]::IsNullOrEmpty($drive.volumename))
		{
			$rowdata += @(,('Volume Name',($global:htmlsb),$Drive.volumename,$htmlwhite))
		}
		If(![String]::IsNullOrEmpty($drive.volumedirty))
		{
			$rowdata += @(,('Volume is Dirty',($global:htmlsb),$xVolumeDirty,$htmlwhite))
		}
		If(![String]::IsNullOrEmpty($drive.volumeserialnumber))
		{
			$rowdata += @(,('Volume Serial Number',($global:htmlsb),$Drive.volumeserialnumber,$htmlwhite))
		}
		$rowdata += @(,('Drive Type',($global:htmlsb),$xDriveType,$htmlwhite))

		$msg = ""
		$columnWidths = @("150px","200px")
		FormatHTMLTable $msg -rowarray $rowdata -columnArray $columnheaders -fixedWidth $columnWidths -tablewidth "350"
		WriteHTMLLine 0 0 " "
	}
}

Function OutputProcessorItem
{
	Param([object]$Processor)
	
	$xAvailability = ""
	Switch ($processor.availability)
	{
		1		{$xAvailability = "Other"; Break}
		2		{$xAvailability = "Unknown"; Break}
		3		{$xAvailability = "Running or Full Power"; Break}
		4		{$xAvailability = "Warning"; Break}
		5		{$xAvailability = "In Test"; Break}
		6		{$xAvailability = "Not Applicable"; Break}
		7		{$xAvailability = "Power Off"; Break}
		8		{$xAvailability = "Off Line"; Break}
		9		{$xAvailability = "Off Duty"; Break}
		10		{$xAvailability = "Degraded"; Break}
		11		{$xAvailability = "Not Installed"; Break}
		12		{$xAvailability = "Install Error"; Break}
		13		{$xAvailability = "Power Save - Unknown"; Break}
		14		{$xAvailability = "Power Save - Low Power Mode"; Break}
		15		{$xAvailability = "Power Save - Standby"; Break}
		16		{$xAvailability = "Power Cycle"; Break}
		17		{$xAvailability = "Power Save - Warning"; Break}
		Default	{$xAvailability = "Unknown"; Break}
	}

	If($MSWORD -or $PDF)
	{
		$ProcessorInformation = New-Object System.Collections.ArrayList
		$ProcessorInformation.Add(@{ Data = "Name"; Value = $Processor.name; }) > $Null
		$ProcessorInformation.Add(@{ Data = "Description"; Value = $Processor.description; }) > $Null
		$ProcessorInformation.Add(@{ Data = "Max Clock Speed"; Value = "$($processor.maxclockspeed) MHz"; }) > $Null
		If($processor.l2cachesize -gt 0)
		{
			$ProcessorInformation.Add(@{ Data = "L2 Cache Size"; Value = "$($processor.l2cachesize) KB"; }) > $Null
		}
		If($processor.l3cachesize -gt 0)
		{
			$ProcessorInformation.Add(@{ Data = "L3 Cache Size"; Value = "$($processor.l3cachesize) KB"; }) > $Null
		}
		If($processor.numberofcores -gt 0)
		{
			$ProcessorInformation.Add(@{ Data = "Number of Cores"; Value = $Processor.numberofcores; }) > $Null
		}
		If($processor.numberoflogicalprocessors -gt 0)
		{
			$ProcessorInformation.Add(@{ Data = "Number of Logical Processors (cores w/HT)"; Value = $Processor.numberoflogicalprocessors; }) > $Null
		}
		$ProcessorInformation.Add(@{ Data = "Availability"; Value = $xAvailability; }) > $Null
		$Table = AddWordTable -Hashtable $ProcessorInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		## Set first column format
		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		## IB - set column widths without recursion
		$Table.Columns.Item(1).Width = 150;
		$Table.Columns.Item(2).Width = 200;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	If($Text)
	{
		Line 3 "Name`t`t`t`t: " $processor.name
		Line 3 "Description`t`t`t: " $processor.description
		Line 3 "Max Clock Speed`t`t`t: $($processor.maxclockspeed) MHz"
		If($processor.l2cachesize -gt 0)
		{
			Line 3 "L2 Cache Size`t`t`t: $($processor.l2cachesize) KB"
		}
		If($processor.l3cachesize -gt 0)
		{
			Line 3 "L3 Cache Size`t`t`t: $($processor.l3cachesize) KB"
		}
		If($processor.numberofcores -gt 0)
		{
			Line 3 "# of Cores`t`t`t: " $processor.numberofcores
		}
		If($processor.numberoflogicalprocessors -gt 0)
		{
			Line 3 "# of Logical Procs (cores w/HT)`t: " $processor.numberoflogicalprocessors
		}
		Line 3 "Availability`t`t`t: " $xAvailability
		Line 3 ""
	}
	If($HTML)
	{
		$rowdata = @()
		$columnHeaders = @("Name",($global:htmlsb),$Processor.name,$htmlwhite)
		$rowdata += @(,('Description',($global:htmlsb),$Processor.description,$htmlwhite))

		$rowdata += @(,('Max Clock Speed',($global:htmlsb),"$($processor.maxclockspeed) MHz",$htmlwhite))
		If($processor.l2cachesize -gt 0)
		{
			$rowdata += @(,('L2 Cache Size',($global:htmlsb),"$($processor.l2cachesize) KB",$htmlwhite))
		}
		If($processor.l3cachesize -gt 0)
		{
			$rowdata += @(,('L3 Cache Size',($global:htmlsb),"$($processor.l3cachesize) KB",$htmlwhite))
		}
		If($processor.numberofcores -gt 0)
		{
			$rowdata += @(,('Number of Cores',($global:htmlsb),$Processor.numberofcores,$htmlwhite))
		}
		If($processor.numberoflogicalprocessors -gt 0)
		{
			$rowdata += @(,('Number of Logical Processors (cores w/HT)',($global:htmlsb),$Processor.numberoflogicalprocessors,$htmlwhite))
		}
		$rowdata += @(,('Availability',($global:htmlsb),$xAvailability,$htmlwhite))

		$msg = ""
		$columnWidths = @("150px","200px")
		FormatHTMLTable $msg -rowarray $rowdata -columnArray $columnheaders -fixedWidth $columnWidths -tablewidth "350"
		WriteHTMLLine 0 0 " "
	}
}

Function OutputNicItem
{
	Param([object]$Nic, [object]$ThisNic, [string]$RemoteComputerName)
	
	If($RemoteComputerName -eq $env:computername)
	{
		$powerMgmt = Get-CimInstance -ClassName MSPower_DeviceEnable -Namespace "root\wmi" -Verbose:$False |
			Where-Object{$_.InstanceName -match [regex]::Escape($ThisNic.PNPDeviceID)}
	}
	Else
	{
		$powerMgmt = Get-CimInstance -CimSession $RemoteComputerName -ClassName MSPower_DeviceEnable -Namespace "root\wmi" -Verbose:$False |
			Where-Object{$_.InstanceName -match [regex]::Escape($ThisNic.PNPDeviceID)}
	}

	If($? -and $Null -ne $powerMgmt)
	{
		If($powerMgmt.Enable -eq $True)
		{
			$PowerSaving = "Enabled"
		}
		Else	
		{
			$PowerSaving = "Disabled"
		}
	}
	Else
	{
        $PowerSaving = "N/A"
	}
	
	$xAvailability = ""
	Switch ($ThisNic.availability)
	{
		1		{$xAvailability = "Other"; Break}
		2		{$xAvailability = "Unknown"; Break}
		3		{$xAvailability = "Running or Full Power"; Break}
		4		{$xAvailability = "Warning"; Break}
		5		{$xAvailability = "In Test"; Break}
		6		{$xAvailability = "Not Applicable"; Break}
		7		{$xAvailability = "Power Off"; Break}
		8		{$xAvailability = "Off Line"; Break}
		9		{$xAvailability = "Off Duty"; Break}
		10		{$xAvailability = "Degraded"; Break}
		11		{$xAvailability = "Not Installed"; Break}
		12		{$xAvailability = "Install Error"; Break}
		13		{$xAvailability = "Power Save - Unknown"; Break}
		14		{$xAvailability = "Power Save - Low Power Mode"; Break}
		15		{$xAvailability = "Power Save - Standby"; Break}
		16		{$xAvailability = "Power Cycle"; Break}
		17		{$xAvailability = "Power Save - Warning"; Break}
		Default	{$xAvailability = "Unknown"; Break}
	}

	#attempt to get Receive Side Scaling setting
	$RSSEnabled = "N/A"
	Try
	{
		#https://ios.developreference.com/article/10085450/How+do+I+enable+VRSS+(Virtual+Receive+Side+Scaling)+for+a+Windows+VM+without+relying+on+Enable-NetAdapterRSS%3F
		If($RemoteComputerName -eq $env:computername)
		{
			$RSSEnabled = (Get-CimInstance -ClassName MSFT_NetAdapterRssSettingData -Namespace "root\StandardCimV2" -ea 0 -Verbose:$False).Enabled
		}
		Else
		{
			$RSSEnabled = (Get-CimInstance -CimSession $RemoteComputerName -ClassName MSFT_NetAdapterRssSettingData -Namespace "root\StandardCimV2" -ea 0 -Verbose:$False).Enabled
		}

		If($RSSEnabled)
		{
			$RSSEnabled = "Enabled"
		}
		Else
		{
			$RSSEnabled = "Disabled"
		}
	}
	
	Catch
	{
		$RSSEnabled = "Unable to determine for $RemoteComputerName"
	}

	$xIPAddress = New-Object System.Collections.ArrayList
	ForEach($IPAddress in $Nic.ipaddress)
	{
		$xIPAddress.Add("$($IPAddress)") > $Null
	}

	$xIPSubnet = New-Object System.Collections.ArrayList
	ForEach($IPSubnet in $Nic.ipsubnet)
	{
		$xIPSubnet.Add("$($IPSubnet)") > $Null
	}

	If($Null -ne $nic.dnsdomainsuffixsearchorder -and $nic.dnsdomainsuffixsearchorder.length -gt 0)
	{
		$nicdnsdomainsuffixsearchorder = $nic.dnsdomainsuffixsearchorder
		$xnicdnsdomainsuffixsearchorder = New-Object System.Collections.ArrayList
		ForEach($DNSDomain in $nicdnsdomainsuffixsearchorder)
		{
			$xnicdnsdomainsuffixsearchorder.Add("$($DNSDomain)") > $Null
		}
	}
	
	If($Null -ne $nic.dnsserversearchorder -and $nic.dnsserversearchorder.length -gt 0)
	{
		$nicdnsserversearchorder = $nic.dnsserversearchorder
		$xnicdnsserversearchorder = New-Object System.Collections.ArrayList
		ForEach($DNSServer in $nicdnsserversearchorder)
		{
			$xnicdnsserversearchorder.Add("$($DNSServer)") > $Null
		}
	}

	$xdnsenabledforwinsresolution = ""
	If($nic.dnsenabledforwinsresolution)
	{
		$xdnsenabledforwinsresolution = "Yes"
	}
	Else
	{
		$xdnsenabledforwinsresolution = "No"
	}
	
	$xTcpipNetbiosOptions = ""
	Switch ($nic.TcpipNetbiosOptions)
	{
		0		{$xTcpipNetbiosOptions = "Use NetBIOS setting from DHCP Server"; Break}
		1		{$xTcpipNetbiosOptions = "Enable NetBIOS"; Break}
		2		{$xTcpipNetbiosOptions = "Disable NetBIOS"; Break}
		Default	{$xTcpipNetbiosOptions = "Unknown"; Break}
	}
	
	$xwinsenablelmhostslookup = ""
	If($nic.winsenablelmhostslookup)
	{
		$xwinsenablelmhostslookup = "Yes"
	}
	Else
	{
		$xwinsenablelmhostslookup = "No"
	}

	If($nic.dhcpenabled)
	{
		$DHCPLeaseObtainedDate = $nic.dhcpleaseobtained.ToLocalTime()
		If($nic.DHCPLeaseExpires -lt $nic.DHCPLeaseObtained)
		{
			#Could be an Azure DHCP Lease
			$DHCPLeaseExpiresDate = (Get-Date).AddSeconds([UInt32]::MaxValue).ToLocalTime()
		}
		Else
		{
			$DHCPLeaseExpiresDate = $nic.DHCPLeaseExpires.ToLocalTime()
		}
	}
		
	If($MSWORD -or $PDF)
	{
		$NicInformation = New-Object System.Collections.ArrayList
		$NicInformation.Add(@{ Data = "Name"; Value = $ThisNic.Name; }) > $Null
		If($ThisNic.Name -ne $nic.description)
		{
			$NicInformation.Add(@{ Data = "Description"; Value = $Nic.description; }) > $Null
		}
		$NicInformation.Add(@{ Data = "Connection ID"; Value = $ThisNic.NetConnectionID; }) > $Null
		If(validObject $Nic Manufacturer)
		{
			$NicInformation.Add(@{ Data = "Manufacturer"; Value = $Nic.manufacturer; }) > $Null
		}
		$NicInformation.Add(@{ Data = "Availability"; Value = $xAvailability; }) > $Null
		$NicInformation.Add(@{ Data = "Allow the computer to turn off this device to save power"; Value = $PowerSaving; }) > $Null
		$NicInformation.Add(@{ Data = "Receive Side Scaling"; Value = $RSSEnabled; }) > $Null
		$NicInformation.Add(@{ Data = "Physical Address"; Value = $Nic.macaddress; }) > $Null
		If($xIPAddress.Count -gt 1)
		{
			$NicInformation.Add(@{ Data = "IP Address"; Value = $xIPAddress[0]; }) > $Null
			$NicInformation.Add(@{ Data = "Default Gateway"; Value = $Nic.Defaultipgateway; }) > $Null
			$NicInformation.Add(@{ Data = "Subnet Mask"; Value = $xIPSubnet[0]; }) > $Null
			$cnt = -1
			ForEach($tmp in $xIPAddress)
			{
				$cnt++
				If($cnt -gt 0)
				{
					$NicInformation.Add(@{ Data = "IP Address"; Value = $tmp; }) > $Null
					$NicInformation.Add(@{ Data = "Subnet Mask"; Value = $xIPSubnet[$cnt]; }) > $Null
				}
			}
		}
		Else
		{
			$NicInformation.Add(@{ Data = "IP Address"; Value = $xIPAddress; }) > $Null
			$NicInformation.Add(@{ Data = "Default Gateway"; Value = $Nic.Defaultipgateway; }) > $Null
			$NicInformation.Add(@{ Data = "Subnet Mask"; Value = $xIPSubnet; }) > $Null
		}
		If($nic.dhcpenabled)
		{
			$NicInformation.Add(@{ Data = "DHCP Enabled"; Value = $Nic.dhcpenabled.ToString(); }) > $Null
			$NicInformation.Add(@{ Data = "DHCP Lease Obtained"; Value = $dhcpleaseobtaineddate; }) > $Null
			$NicInformation.Add(@{ Data = "DHCP Lease Expires"; Value = $dhcpleaseexpiresdate; }) > $Null
			$NicInformation.Add(@{ Data = "DHCP Server"; Value = $Nic.dhcpserver; }) > $Null
		}
		Else
		{
			$NicInformation.Add(@{ Data = "DHCP Enabled"; Value = $Nic.dhcpenabled.ToString(); }) > $Null
		}
		If(![String]::IsNullOrEmpty($nic.dnsdomain))
		{
			$NicInformation.Add(@{ Data = "DNS Domain"; Value = $Nic.dnsdomain; }) > $Null
		}
		If($Null -ne $nic.dnsdomainsuffixsearchorder -and $nic.dnsdomainsuffixsearchorder.length -gt 0)
		{
			$NicInformation.Add(@{ Data = "DNS Search Suffixes"; Value = $xnicdnsdomainsuffixsearchorder[0]; }) > $Null
			$cnt = -1
			ForEach($tmp in $xnicdnsdomainsuffixsearchorder)
			{
				$cnt++
				If($cnt -gt 0)
				{
					$NicInformation.Add(@{ Data = ""; Value = $tmp; }) > $Null
				}
			}
		}
		$NicInformation.Add(@{ Data = "DNS WINS Enabled"; Value = $xdnsenabledforwinsresolution; }) > $Null
		If($Null -ne $nic.dnsserversearchorder -and $nic.dnsserversearchorder.length -gt 0)
		{
			$NicInformation.Add(@{ Data = "DNS Servers"; Value = $xnicdnsserversearchorder[0]; }) > $Null
			$cnt = -1
			ForEach($tmp in $xnicdnsserversearchorder)
			{
				$cnt++
				If($cnt -gt 0)
				{
					$NicInformation.Add(@{ Data = ""; Value = $tmp; }) > $Null
				}
			}
		}
		$NicInformation.Add(@{ Data = "NetBIOS Setting"; Value = $xTcpipNetbiosOptions; }) > $Null
		$NicInformation.Add(@{ Data = "WINS: Enabled LMHosts"; Value = $xwinsenablelmhostslookup; }) > $Null
		If(![String]::IsNullOrEmpty($nic.winshostlookupfile))
		{
			$NicInformation.Add(@{ Data = "Host Lookup File"; Value = $Nic.winshostlookupfile; }) > $Null
		}
		If(![String]::IsNullOrEmpty($nic.winsprimaryserver))
		{
			$NicInformation.Add(@{ Data = "Primary Server"; Value = $Nic.winsprimaryserver; }) > $Null
		}
		If(![String]::IsNullOrEmpty($nic.winssecondaryserver))
		{
			$NicInformation.Add(@{ Data = "Secondary Server"; Value = $Nic.winssecondaryserver; }) > $Null
		}
		If(![String]::IsNullOrEmpty($nic.winsscopeid))
		{
			$NicInformation.Add(@{ Data = "Scope ID"; Value = $Nic.winsscopeid; }) > $Null
		}
		$Table = AddWordTable -Hashtable $NicInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		## Set first column format
		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		## IB - set column widths without recursion
		$Table.Columns.Item(1).Width = 150;
		$Table.Columns.Item(2).Width = 200;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	If($Text)
	{
		Line 3 "Name`t`t`t: " $ThisNic.Name
		If($ThisNic.Name -ne $nic.description)
		{
			Line 3 "Description`t`t: " $nic.description
		}
		Line 3 "Connection ID`t`t: " $ThisNic.NetConnectionID
		If(validObject $Nic Manufacturer)
		{
			Line 3 "Manufacturer`t`t: " $Nic.manufacturer
		}
		Line 3 "Availability`t`t: " $xAvailability
		Line 3 "Allow computer to turn "
		Line 3 "off device to save power: " $PowerSaving
		Line 3 "Physical Address`t: " $nic.macaddress
		Line 3 "Receive Side Scaling`t: " $RSSEnabled
		Line 3 "IP Address`t`t: " $xIPAddress[0]
		$cnt = -1
		ForEach($tmp in $xIPAddress)
		{
			$cnt++
			If($cnt -gt 0)
			{
				Line 6 "  " $tmp
			}
		}
		Line 3 "Default Gateway`t`t: " $Nic.Defaultipgateway
		Line 3 "Subnet Mask`t`t: " $xIPSubnet[0]
		$cnt = -1
		ForEach($tmp in $xIPSubnet)
		{
			$cnt++
			If($cnt -gt 0)
			{
				Line 6 "  " $tmp
			}
		}
		If($nic.dhcpenabled)
		{
			Line 3 "DHCP Enabled`t`t: " $nic.dhcpenabled.ToString()
			Line 3 "DHCP Lease Obtained`t: " $dhcpleaseobtaineddate
			Line 3 "DHCP Lease Expires`t: " $dhcpleaseexpiresdate
			Line 3 "DHCP Server`t`t:" $nic.dhcpserver
		}
		Else
		{
			Line 3 "DHCP Enabled`t`t: " $nic.dhcpenabled.ToString()
		}
		If($Null -ne $nic.dnsdomainsuffixsearchorder -and $nic.dnsdomainsuffixsearchorder.length -gt 0)
		{
			[int]$x = 1
			Line 3 "DNS Search Suffixes`t: " $xnicdnsdomainsuffixsearchorder[0]
			$cnt = -1
			ForEach($tmp in $xnicdnsdomainsuffixsearchorder)
			{
				$cnt++
				If($cnt -gt 0)
				{
					Line 6 "  " $tmp
				}
			}
		}
		Line 3 "DNS WINS Enabled`t: " $xdnsenabledforwinsresolution
		If($Null -ne $nic.dnsserversearchorder -and $nic.dnsserversearchorder.length -gt 0)
		{
			[int]$x = 1
			Line 3 "DNS Servers`t`t: " $xnicdnsserversearchorder[0]
			$cnt = -1
			ForEach($tmp in $xnicdnsserversearchorder)
			{
				$cnt++
				If($cnt -gt 0)
				{
					Line 6 "  " $tmp
				}
			}
		}
		Line 3 "NetBIOS Setting`t`t: " $xTcpipNetbiosOptions
		Line 3 "WINS:"
		Line 4 "Enabled LMHosts`t: " $xwinsenablelmhostslookup
		If(![String]::IsNullOrEmpty($nic.winshostlookupfile))
		{
			Line 4 "Host Lookup File`t: " $nic.winshostlookupfile
		}
		If(![String]::IsNullOrEmpty($nic.winsprimaryserver))
		{
			Line 4 "Primary Server`t: " $nic.winsprimaryserver
		}
		If(![String]::IsNullOrEmpty($nic.winssecondaryserver))
		{
			Line 4 "Secondary Server`t: " $nic.winssecondaryserver
		}
		If(![String]::IsNullOrEmpty($nic.winsscopeid))
		{
			Line 4 "Scope ID`t`t: " $nic.winsscopeid
		}
		Line 0 ""
	}
	If($HTML)
	{
		$rowdata = @()
		$columnHeaders = @("Name",($global:htmlsb),$ThisNic.Name,$htmlwhite)
		If($ThisNic.Name -ne $nic.description)
		{
			$rowdata += @(,('Description',($global:htmlsb),$Nic.description,$htmlwhite))
		}
		$rowdata += @(,('Connection ID',($global:htmlsb),$ThisNic.NetConnectionID,$htmlwhite))
		If(validObject $Nic Manufacturer)
		{
			$rowdata += @(,('Manufacturer',($global:htmlsb),$Nic.manufacturer,$htmlwhite))
		}
		$rowdata += @(,('Availability',($global:htmlsb),$xAvailability,$htmlwhite))
		$rowdata += @(,('Allow the computer to turn off this device to save power',($global:htmlsb),$PowerSaving,$htmlwhite))
		$rowdata += @(,('Physical Address',($global:htmlsb),$Nic.macaddress,$htmlwhite))
		$rowdata += @(,('Receive Side Scaling',($global:htmlsb),$RSSEnabled,$htmlwhite))
		$rowdata += @(,('IP Address',($global:htmlsb),$xIPAddress[0],$htmlwhite))
		$cnt = -1
		ForEach($tmp in $xIPAddress)
		{
			$cnt++
			If($cnt -gt 0)
			{
				$rowdata += @(,('IP Address',($global:htmlsb),$tmp,$htmlwhite))
			}
		}
		$rowdata += @(,('Default Gateway',($global:htmlsb),$Nic.Defaultipgateway[0],$htmlwhite))
		$rowdata += @(,('Subnet Mask',($global:htmlsb),$xIPSubnet[0],$htmlwhite))
		$cnt = -1
		ForEach($tmp in $xIPSubnet)
		{
			$cnt++
			If($cnt -gt 0)
			{
				$rowdata += @(,('Subnet Mask',($global:htmlsb),$tmp,$htmlwhite))
			}
		}
		If($nic.dhcpenabled)
		{
			$rowdata += @(,('DHCP Enabled',($global:htmlsb),$Nic.dhcpenabled.ToString(),$htmlwhite))
			$rowdata += @(,('DHCP Lease Obtained',($global:htmlsb),$dhcpleaseobtaineddate,$htmlwhite))
			$rowdata += @(,('DHCP Lease Expires',($global:htmlsb),$dhcpleaseexpiresdate,$htmlwhite))
			$rowdata += @(,('DHCP Server',($global:htmlsb),$Nic.dhcpserver,$htmlwhite))
		}
		Else
		{
			$rowdata += @(,('DHCP Enabled',($global:htmlsb),$Nic.dhcpenabled.ToString(),$htmlwhite))
		}
		If(![String]::IsNullOrEmpty($nic.dnsdomain))
		{
			$rowdata += @(,('DNS Domain',($global:htmlsb),$Nic.dnsdomain,$htmlwhite))
		}
		If($Null -ne $nic.dnsdomainsuffixsearchorder -and $nic.dnsdomainsuffixsearchorder.length -gt 0)
		{
			$rowdata += @(,('DNS Search Suffixes',($global:htmlsb),$xnicdnsdomainsuffixsearchorder[0],$htmlwhite))
			$cnt = -1
			ForEach($tmp in $xnicdnsdomainsuffixsearchorder)
			{
				$cnt++
				If($cnt -gt 0)
				{
					$rowdata += @(,('',($global:htmlsb),$tmp,$htmlwhite))
				}
			}
		}
		$rowdata += @(,('DNS WINS Enabled',($global:htmlsb),$xdnsenabledforwinsresolution,$htmlwhite))
		If($Null -ne $nic.dnsserversearchorder -and $nic.dnsserversearchorder.length -gt 0)
		{
			$rowdata += @(,('DNS Servers',($global:htmlsb),$xnicdnsserversearchorder[0],$htmlwhite))
			$cnt = -1
			ForEach($tmp in $xnicdnsserversearchorder)
			{
				$cnt++
				If($cnt -gt 0)
				{
					$rowdata += @(,('',($global:htmlsb),$tmp,$htmlwhite))
				}
			}
		}
		$rowdata += @(,('NetBIOS Setting',($global:htmlsb),$xTcpipNetbiosOptions,$htmlwhite))
		$rowdata += @(,('WINS: Enabled LMHosts',($global:htmlsb),$xwinsenablelmhostslookup,$htmlwhite))
		If(![String]::IsNullOrEmpty($nic.winshostlookupfile))
		{
			$rowdata += @(,('Host Lookup File',($global:htmlsb),$Nic.winshostlookupfile,$htmlwhite))
		}
		If(![String]::IsNullOrEmpty($nic.winsprimaryserver))
		{
			$rowdata += @(,('Primary Server',($global:htmlsb),$Nic.winsprimaryserver,$htmlwhite))
		}
		If(![String]::IsNullOrEmpty($nic.winssecondaryserver))
		{
			$rowdata += @(,('Secondary Server',($global:htmlsb),$Nic.winssecondaryserver,$htmlwhite))
		}
		If(![String]::IsNullOrEmpty($nic.winsscopeid))
		{
			$rowdata += @(,('Scope ID',($global:htmlsb),$Nic.winsscopeid,$htmlwhite))
		}

		$msg = ""
		$columnWidths = @("150px","200px")
		FormatHTMLTable $msg -rowarray $rowdata -columnArray $columnheaders -fixedWidth $columnWidths -tablewidth "350"
		WriteHTMLLine 0 0 " "
	}
}
#endregion

#region word specific functions
Function SetWordHashTable
{
	Param([string]$CultureCode)

	#optimized by Michael B. Smith
	
	# DE and FR translations for Word 2010 by Vladimir Radojevic
	# Vladimir.Radojevic@Commerzreal.com

	# DA translations for Word 2010 by Thomas Daugaard
	# Citrix Infrastructure Specialist at edgemo A/S

	# CA translations by Javier Sanchez 
	# CEO & Founder 101 Consulting

	#ca - Catalan
	#da - Danish
	#de - German
	#en - English
	#es - Spanish
	#fi - Finnish
	#fr - French
	#nb - Norwegian
	#nl - Dutch
	#pt - Portuguese
	#sv - Swedish
	#zh - Chinese
	
	[string]$toc = $(
		Switch ($CultureCode)
		{
			'ca-'	{ 'Taula automática 2'; Break }
			'da-'	{ 'Automatisk tabel 2'; Break }
			#'de-'	{ 'Automatische Tabelle 2'; Break }
			'de-'	{ 'Automatisches Verzeichnis 2'; Break } #changed 15-feb-2022 rene bigler
			'en-'	{ 'Automatic Table 2'; Break }
			'es-'	{ 'Tabla automática 2'; Break }
			'fi-'	{ 'Automaattinen taulukko 2'; Break }
#			'fr-'	{ 'Sommaire Automatique 2'; Break }
			'fr-'	{ 'Table automatique 2'; Break } #changed 10-feb-2017 david roquier and samuel legrand
			'nb-'	{ 'Automatisk tabell 2'; Break }
			'nl-'	{ 'Automatische inhoudsopgave 2'; Break }
			'pt-'	{ 'Sumário Automático 2'; Break }
			# fix in 2.29 thanks to Johan Kallio 'sv-'	{ 'Automatisk innehållsförteckning2'; Break }
			'sv-'	{ 'Automatisk innehållsförteckn2'; Break }
			'zh-'	{ '自动目录 2'; Break }
		}
	)

	$Script:myHash                      = @{}
	$Script:myHash.Word_TableOfContents = $toc
	$Script:myHash.Word_NoSpacing       = $wdStyleNoSpacing
	$Script:myHash.Word_Heading1        = $wdStyleheading1
	$Script:myHash.Word_Heading2        = $wdStyleheading2
	$Script:myHash.Word_Heading3        = $wdStyleheading3
	$Script:myHash.Word_Heading4        = $wdStyleheading4
	$Script:myHash.Word_TableGrid       = $wdTableGrid
}

Function GetCulture
{
	Param([int]$WordValue)
	
	#codes obtained from http://support.microsoft.com/kb/221435
	#http://msdn.microsoft.com/en-us/library/bb213877(v=office.12).aspx
	$CatalanArray = 1027
	$ChineseArray = 2052,3076,5124,4100
	$DanishArray = 1030
	$DutchArray = 2067, 1043
	$EnglishArray = 3081, 10249, 4105, 9225, 6153, 8201, 5129, 13321, 7177, 11273, 2057, 1033, 12297
	$FinnishArray = 1035
	$FrenchArray = 2060, 1036, 11276, 3084, 12300, 5132, 13324, 6156, 8204, 10252, 7180, 9228, 4108
	$GermanArray = 1031, 3079, 5127, 4103, 2055
	$NorwegianArray = 1044, 2068
	$PortugueseArray = 1046, 2070
	$SpanishArray = 1034, 11274, 16394, 13322, 9226, 5130, 7178, 12298, 17418, 4106, 18442, 19466, 6154, 15370, 10250, 20490, 3082, 14346, 8202
	$SwedishArray = 1053, 2077

	#ca - Catalan
	#da - Danish
	#de - German
	#en - English
	#es - Spanish
	#fi - Finnish
	#fr - French
	#nb - Norwegian
	#nl - Dutch
	#pt - Portuguese
	#sv - Swedish
	#zh - Chinese

	Switch ($WordValue)
	{
		{$CatalanArray -contains $_}	{$CultureCode = "ca-"}
		{$ChineseArray -contains $_}	{$CultureCode = "zh-"}
		{$DanishArray -contains $_}		{$CultureCode = "da-"}
		{$DutchArray -contains $_}		{$CultureCode = "nl-"}
		{$EnglishArray -contains $_}	{$CultureCode = "en-"}
		{$FinnishArray -contains $_}	{$CultureCode = "fi-"}
		{$FrenchArray -contains $_}		{$CultureCode = "fr-"}
		{$GermanArray -contains $_}		{$CultureCode = "de-"}
		{$NorwegianArray -contains $_}	{$CultureCode = "nb-"}
		{$PortugueseArray -contains $_}	{$CultureCode = "pt-"}
		{$SpanishArray -contains $_}	{$CultureCode = "es-"}
		{$SwedishArray -contains $_}	{$CultureCode = "sv-"}
		Default {$CultureCode = "en-"}
	}
	
	Return $CultureCode
}

Function ValidateCoverPage
{
	Param([int]$xWordVersion, [string]$xCP, [string]$CultureCode)
	
	$xArray = ""
	
	Switch ($CultureCode)
	{
		'ca-'	{
				If($xWordVersion -eq $wdWord2016)
				{
					$xArray = ("Austin", "En bandes", "Faceta", "Filigrana",
					"Integral", "Ió (clar)", "Ió (fosc)", "Línia lateral",
					"Moviment", "Quadrícula", "Retrospectiu", "Sector (clar)",
					"Sector (fosc)", "Semàfor", "Visualització principal", "Whisp")
				}
				ElseIf($xWordVersion -eq $wdWord2013)
				{
					$xArray = ("Austin", "En bandes", "Faceta", "Filigrana",
					"Integral", "Ió (clar)", "Ió (fosc)", "Línia lateral",
					"Moviment", "Quadrícula", "Retrospectiu", "Sector (clar)",
					"Sector (fosc)", "Semàfor", "Visualització", "Whisp")
				}
				ElseIf($xWordVersion -eq $wdWord2010)
				{
					$xArray = ("Alfabet", "Anual", "Austin", "Conservador",
					"Contrast", "Cubicles", "Diplomàtic", "Exposició",
					"Línia lateral", "Mod", "Mosiac", "Moviment", "Paper de diari",
					"Perspectiva", "Piles", "Quadrícula", "Sobri",
					"Transcendir", "Trencaclosques")
				}
			}

		'da-'	{
				If($xWordVersion -eq $wdWord2016)
				{
					$xArray = ("Austin", "BevægElse", "Brusen", "Facet", "Filigran", 
					"Gitter", "Integral", "Ion (lys)", "Ion (mørk)", 
					"Retro", "Semafor", "Sidelinje", "Stribet", 
					"Udsnit (lys)", "Udsnit (mørk)", "Visningsmaster")
				}
				ElseIf($xWordVersion -eq $wdWord2013)
				{
					$xArray = ("BevægElse", "Brusen", "Ion (lys)", "Filigran",
					"Retro", "Semafor", "Visningsmaster", "Integral",
					"Facet", "Gitter", "Stribet", "Sidelinje", "Udsnit (lys)",
					"Udsnit (mørk)", "Ion (mørk)", "Austin")
				}
				ElseIf($xWordVersion -eq $wdWord2010)
				{
					$xArray = ("BevægElse", "Moderat", "Perspektiv", "Firkanter",
					"Overskrid", "Alfabet", "Kontrast", "Stakke", "Fliser", "Gåde",
					"Gitter", "Austin", "Eksponering", "Sidelinje", "Enkel",
					"Nålestribet", "Årlig", "Avispapir", "Tradionel")
				}
			}

		'de-'	{
				If($xWordVersion -eq $wdWord2016)
				{
					$xArray = ("Austin", "Bewegung", "Facette", "Filigran", 
					"Gebändert", "Integral", "Ion (dunkel)", "Ion (hell)", 
					"Pfiff", "Randlinie", "Raster", "Rückblick", 
					"Segment (dunkel)", "Segment (hell)", "Semaphor", 
					"ViewMaster")
				}
				ElseIf($xWordVersion -eq $wdWord2013)
				{
					$xArray = ("Semaphor", "Segment (hell)", "Ion (hell)",
					"Raster", "Ion (dunkel)", "Filigran", "Rückblick", "Pfiff",
					"ViewMaster", "Segment (dunkel)", "Verbunden", "Bewegung",
					"Randlinie", "Austin", "Integral", "Facette")
				}
				ElseIf($xWordVersion -eq $wdWord2010)
				{
					$xArray = ("Alphabet", "Austin", "Bewegung", "Durchscheinend",
					"Herausgestellt", "Jährlich", "Kacheln", "Kontrast", "Kubistisch",
					"Modern", "Nadelstreifen", "Perspektive", "Puzzle", "Randlinie",
					"Raster", "Schlicht", "Stapel", "Traditionell", "Zeitungspapier")
				}
			}

		'en-'	{
				If($xWordVersion -eq $wdWord2013 -or $xWordVersion -eq $wdWord2016)
				{
					$xArray = ("Austin", "Banded", "Facet", "Filigree", "Grid",
					"Integral", "Ion (Dark)", "Ion (Light)", "Motion", "Retrospect",
					"Semaphore", "Sideline", "Slice (Dark)", "Slice (Light)", "ViewMaster",
					"Whisp")
				}
				ElseIf($xWordVersion -eq $wdWord2010)
				{
					$xArray = ("Alphabet", "Annual", "Austere", "Austin", "Conservative",
					"Contrast", "Cubicles", "Exposure", "Grid", "Mod", "Motion", "Newsprint",
					"Perspective", "Pinstripes", "Puzzle", "Sideline", "Stacks", "Tiles", "Transcend")
				}
			}

		'es-'	{
				If($xWordVersion -eq $wdWord2016)
				{
					$xArray = ("Austin", "Con bandas", "Cortar (oscuro)", "Cuadrícula", 
					"Whisp", "Faceta", "Filigrana", "Integral", "Ion (claro)", 
					"Ion (oscuro)", "Línea lateral", "Movimiento", "Retrospectiva", 
					"Semáforo", "Slice (luz)", "Vista principal", "Whisp")
				}
				ElseIf($xWordVersion -eq $wdWord2013)
				{
					$xArray = ("Whisp", "Vista principal", "Filigrana", "Austin",
					"Slice (luz)", "Faceta", "Semáforo", "Retrospectiva", "Cuadrícula",
					"Movimiento", "Cortar (oscuro)", "Línea lateral", "Ion (oscuro)",
					"Ion (claro)", "Integral", "Con bandas")
				}
				ElseIf($xWordVersion -eq $wdWord2010)
				{
					$xArray = ("Alfabeto", "Anual", "Austero", "Austin", "Conservador",
					"Contraste", "Cuadrícula", "Cubículos", "Exposición", "Línea lateral",
					"Moderno", "Mosaicos", "Movimiento", "Papel periódico",
					"Perspectiva", "Pilas", "Puzzle", "Rayas", "Sobrepasar")
				}
			}

		'fi-'	{
				If($xWordVersion -eq $wdWord2016)
				{
					$xArray = ("Filigraani", "Integraali", "Ioni (tumma)",
					"Ioni (vaalea)", "Opastin", "Pinta", "Retro", "Sektori (tumma)",
					"Sektori (vaalea)", "Vaihtuvavärinen", "ViewMaster", "Austin",
					"Kuiskaus", "Liike", "Ruudukko", "Sivussa")
				}
				ElseIf($xWordVersion -eq $wdWord2013)
				{
					$xArray = ("Filigraani", "Integraali", "Ioni (tumma)",
					"Ioni (vaalea)", "Opastin", "Pinta", "Retro", "Sektori (tumma)",
					"Sektori (vaalea)", "Vaihtuvavärinen", "ViewMaster", "Austin",
					"Kiehkura", "Liike", "Ruudukko", "Sivussa")
				}
				ElseIf($xWordVersion -eq $wdWord2010)
				{
					$xArray = ("Aakkoset", "Askeettinen", "Austin", "Kontrasti",
					"Laatikot", "Liike", "Liituraita", "Mod", "Osittain peitossa",
					"Palapeli", "Perinteinen", "Perspektiivi", "Pinot", "Ruudukko",
					"Ruudut", "Sanomalehtipaperi", "Sivussa", "Vuotuinen", "Ylitys")
				}
			}

		'fr-'	{
				If($xWordVersion -eq $wdWord2013 -or $xWordVersion -eq $wdWord2016)
				{
					$xArray = ("À bandes", "Austin", "Facette", "Filigrane", 
					"Guide", "Intégrale", "Ion (clair)", "Ion (foncé)", 
					"Lignes latérales", "Quadrillage", "Rétrospective", "Secteur (clair)", 
					"Secteur (foncé)", "Sémaphore", "ViewMaster", "Whisp")
				}
				ElseIf($xWordVersion -eq $wdWord2010)
				{
					$xArray = ("Alphabet", "Annuel", "Austère", "Austin", 
					"Blocs empilés", "Classique", "Contraste", "Emplacements de bureau", 
					"Exposition", "Guide", "Ligne latérale", "Moderne", 
					"Mosaïques", "Mots croisés", "Papier journal", "Perspective",
					"Quadrillage", "Rayures fines", "Transcendant")
				}
			}

		'nb-'	{
				If($xWordVersion -eq $wdWord2013 -or $xWordVersion -eq $wdWord2016)
				{
					$xArray = ("Austin", "BevegElse", "Dempet", "Fasett", "Filigran",
					"Integral", "Ion (lys)", "Ion (mørk)", "Retrospekt", "Rutenett",
					"Sektor (lys)", "Sektor (mørk)", "Semafor", "Sidelinje", "Stripet",
					"ViewMaster")
				}
				ElseIf($xWordVersion -eq $wdWord2010)
				{
					$xArray = ("Alfabet", "Årlig", "Avistrykk", "Austin", "Avlukker",
					"BevegElse", "Engasjement", "Enkel", "Fliser", "Konservativ",
					"Kontrast", "Mod", "Perspektiv", "Puslespill", "Rutenett", "Sidelinje",
					"Smale striper", "Stabler", "Transcenderende")
				}
			}

		'nl-'	{
				If($xWordVersion -eq $wdWord2013 -or $xWordVersion -eq $wdWord2016)
				{
					$xArray = ("Austin", "Beweging", "Facet", "Filigraan", "Gestreept",
					"Integraal", "Ion (donker)", "Ion (licht)", "Raster",
					"Segment (Light)", "Semafoor", "Slice (donker)", "Spriet",
					"Terugblik", "Terzijde", "ViewMaster")
				}
				ElseIf($xWordVersion -eq $wdWord2010)
				{
					$xArray = ("Aantrekkelijk", "Alfabet", "Austin", "Bescheiden",
					"Beweging", "Blikvanger", "Contrast", "Eenvoudig", "Jaarlijks",
					"Krantenpapier", "Krijtstreep", "Kubussen", "Mod", "Perspectief",
					"Puzzel", "Raster", "Stapels",
					"Tegels", "Terzijde")
				}
			}

		'pt-'	{
				If($xWordVersion -eq $wdWord2013 -or $xWordVersion -eq $wdWord2016)
				{
					$xArray = ("Animação", "Austin", "Em Tiras", "Exibição Mestra",
					"Faceta", "Fatia (Clara)", "Fatia (Escura)", "Filete", "Filigrana", 
					"Grade", "Integral", "Íon (Claro)", "Íon (Escuro)", "Linha Lateral",
					"Retrospectiva", "Semáforo")
				}
				ElseIf($xWordVersion -eq $wdWord2010)
				{
					$xArray = ("Alfabeto", "Animação", "Anual", "Austero", "Austin", "Baias",
					"Conservador", "Contraste", "Exposição", "Grade", "Ladrilhos",
					"Linha Lateral", "Listras", "Mod", "Papel Jornal", "Perspectiva", "Pilhas",
					"Quebra-cabeça", "Transcend")
				}
			}

		'sv-'	{
				If($xWordVersion -eq $wdWord2013 -or $xWordVersion -eq $wdWord2016)
				{
					$xArray = ("Austin", "Band", "Fasett", "Filigran", "Integrerad", "Jon (ljust)",
					"Jon (mörkt)", "Knippe", "Rutnät", "RörElse", "Sektor (ljus)", "Sektor (mörk)",
					"Semafor", "Sidlinje", "VisaHuvudsida", "Återblick")
				}
				ElseIf($xWordVersion -eq $wdWord2010)
				{
					$xArray = ("Alfabetmönster", "Austin", "Enkelt", "Exponering", "Konservativt",
					"Kontrast", "Kritstreck", "Kuber", "Perspektiv", "Plattor", "Pussel", "Rutnät",
					"RörElse", "Sidlinje", "Sobert", "Staplat", "Tidningspapper", "Årligt",
					"Övergående")
				}
			}

		'zh-'	{
				If($xWordVersion -eq $wdWord2010 -or $xWordVersion -eq $wdWord2013 -or $xWordVersion -eq $wdWord2016)
				{
					$xArray = ('奥斯汀', '边线型', '花丝', '怀旧', '积分',
					'离子(浅色)', '离子(深色)', '母版型', '平面', '切片(浅色)',
					'切片(深色)', '丝状', '网格', '镶边', '信号灯',
					'运动型')
				}
			}

		Default	{
					If($xWordVersion -eq $wdWord2013 -or $xWordVersion -eq $wdWord2016)
					{
						$xArray = ("Austin", "Banded", "Facet", "Filigree", "Grid",
						"Integral", "Ion (Dark)", "Ion (Light)", "Motion", "Retrospect",
						"Semaphore", "Sideline", "Slice (Dark)", "Slice (Light)", "ViewMaster",
						"Whisp")
					}
					ElseIf($xWordVersion -eq $wdWord2010)
					{
						$xArray = ("Alphabet", "Annual", "Austere", "Austin", "Conservative",
						"Contrast", "Cubicles", "Exposure", "Grid", "Mod", "Motion", "Newsprint",
						"Perspective", "Pinstripes", "Puzzle", "Sideline", "Stacks", "Tiles", "Transcend")
					}
				}
	}
	
	If($xArray -contains $xCP)
	{
		$xArray = $Null
		Return $True
	}
	Else
	{
		$xArray = $Null
		Return $False
	}
}

Function CheckWordPrereq
{
	If((Test-Path  REGISTRY::HKEY_CLASSES_ROOT\Word.Application) -eq $False)
	{
		$ErrorActionPreference = $SaveEAPreference
		
		If(($MSWord -eq $False) -and ($PDF -eq $True))
		{
			Write-Host "`n`n`t`tThis script uses Microsoft Word's SaveAs PDF function, please install Microsoft Word`n`n"
			AbortScript
		}
		Else
		{
			Write-Host "`n`n`t`tThis script directly outputs to Microsoft Word, please install Microsoft Word`n`n"
			AbortScript
		}
	}

	#find out our session (usually "1" except on TS/RDC or Citrix)
	$SessionID = (Get-Process -PID $PID).SessionId
	
	#Find out if winword runsning in our session
	[bool]$wordrunning = $null –ne ((Get-Process 'WinWord' -ea 0) | Where-Object {$_.SessionId -eq $SessionID})
	If($wordrunning)
	{
		$ErrorActionPreference = $SaveEAPreference
		Write-Host "`n`n`tPlease close all instances of Microsoft Word before running this report.`n`n"
		AbortScript
	}
}

Function ValidateCompanyName
{
	[bool]$xResult = Test-RegistryValue "HKCU:\Software\Microsoft\Office\Common\UserInfo" "CompanyName"
	If($xResult)
	{
		Return Get-RegistryValue "HKCU:\Software\Microsoft\Office\Common\UserInfo" "CompanyName"
	}
	Else
	{
		$xResult = Test-RegistryValue "HKCU:\Software\Microsoft\Office\Common\UserInfo" "Company"
		If($xResult)
		{
			Return Get-RegistryValue "HKCU:\Software\Microsoft\Office\Common\UserInfo" "Company"
		}
		Else
		{
			Return ""
		}
	}
}

Function Set-DocumentProperty {
    <#
	.SYNOPSIS
	Function to set the Title Page document properties in MS Word
	.DESCRIPTION
	Long description
	.PARAMETER Document
	Current Document Object
	.PARAMETER DocProperty
	Parameter description
	.PARAMETER Value
	Parameter description
	.EXAMPLE
	Set-DocumentProperty -Document $Script:Doc -DocProperty Title -Value 'MyTitle'
	.EXAMPLE
	Set-DocumentProperty -Document $Script:Doc -DocProperty Company -Value 'MyCompany'
	.EXAMPLE
	Set-DocumentProperty -Document $Script:Doc -DocProperty Author -Value 'Jim Moyle'
	.EXAMPLE
	Set-DocumentProperty -Document $Script:Doc -DocProperty Subject -Value 'MySubjectTitle'
	.NOTES
	Function Created by Jim Moyle June 2017
	Twitter : @JimMoyle
	#>
    param (
        [object]$Document,
        [String]$DocProperty,
        [string]$Value
    )
    try {
        $binding = "System.Reflection.BindingFlags" -as [type]
        $builtInProperties = $Document.BuiltInDocumentProperties
        $property = [System.__ComObject].invokemember("item", $binding::GetProperty, $null, $BuiltinProperties, $DocProperty)
        [System.__ComObject].invokemember("value", $binding::SetProperty, $null, $property, $Value)
    }
    catch {
        Write-Warning "Failed to set $DocProperty to $Value"
    }
}

Function FindWordDocumentEnd
{
	#Return focus to main document    
	$Script:Doc.ActiveWindow.ActivePane.view.SeekView = $wdSeekMainDocument
	#move to the end of the current document
	$Script:Selection.EndKey($wdStory,$wdMove) | Out-Null
}

Function SetupWord
{
	Write-Verbose "$(Get-Date -Format G): Setting up Word"
    
	If(!$AddDateTime)
	{
		[string]$Script:WordFileName = "$($Script:pwdpath)\$($OutputFileName).docx"
		If($PDF)
		{
			[string]$Script:PDFFileName = "$($Script:pwdpath)\$($OutputFileName).pdf"
		}
	}
	ElseIf($AddDateTime)
	{
		[string]$Script:WordFileName = "$($Script:pwdpath)\$($OutputFileName)_$(Get-Date -f yyyy-MM-dd_HHmm).docx"
		If($PDF)
		{
			[string]$Script:PDFFileName = "$($Script:pwdpath)\$($OutputFileName)_$(Get-Date -f yyyy-MM-dd_HHmm).pdf"
		}
	}

	# Setup word for output
	Write-Verbose "$(Get-Date -Format G): Create Word comObject."
	$Script:Word = New-Object -comobject "Word.Application" -EA 0 4>$Null

#Do not indent the following write-error lines. Doing so will mess up the console formatting of the error message.
	If(!$? -or $Null -eq $Script:Word)
	{
		Write-Warning "The Word object could not be created. You may need to repair your Word installation."
		$ErrorActionPreference = $SaveEAPreference
		Write-Error "
		`n`n
	The Word object could not be created. You may need to repair your Word installation.
		`n`n
	Script cannot Continue.
		`n`n"
		AbortScript
	}

	Write-Verbose "$(Get-Date -Format G): Determine Word language value"
	If( ( validStateProp $Script:Word Language Value__ ) )
	{
		[int]$Script:WordLanguageValue = [int]$Script:Word.Language.Value__
	}
	Else
	{
		[int]$Script:WordLanguageValue = [int]$Script:Word.Language
	}

	If(!($Script:WordLanguageValue -gt -1))
	{
		$ErrorActionPreference = $SaveEAPreference
		Write-Error "
		`n`n
	Unable to determine the Word language value. You may need to repair your Word installation.
		`n`n
	Script cannot Continue.
		`n`n
		"
		AbortScript
	}
	Write-Verbose "$(Get-Date -Format G): Word language value is $($Script:WordLanguageValue)"
	
	$Script:WordCultureCode = GetCulture $Script:WordLanguageValue
	
	SetWordHashTable $Script:WordCultureCode
	
	[int]$Script:WordVersion = [int]$Script:Word.Version
	If($Script:WordVersion -eq $wdWord2016)
	{
		$Script:WordProduct = "Word 2016"
	}
	ElseIf($Script:WordVersion -eq $wdWord2013)
	{
		$Script:WordProduct = "Word 2013"
	}
	ElseIf($Script:WordVersion -eq $wdWord2010)
	{
		$Script:WordProduct = "Word 2010"
	}
	ElseIf($Script:WordVersion -eq $wdWord2007)
	{
		$ErrorActionPreference = $SaveEAPreference
		Write-Error "
		`n`n
	Microsoft Word 2007 is no longer supported.`n`n`t`tScript will end.
		`n`n
		"
		AbortScript
	}
	ElseIf($Script:WordVersion -eq 0)
	{
		Write-Error "
		`n`n
	The Word Version is 0. You should run a full online repair of your Office installation.
		`n`n
	Script cannot Continue.
		`n`n
		"
		AbortScript
	}
	Else
	{
		$ErrorActionPreference = $SaveEAPreference
		Write-Error "
		`n`n
	You are running an untested or unsupported version of Microsoft Word.
		`n`n
	Script will end.
		`n`n
	Please send info on your version of Word to webster@carlwebster.com
		`n`n
		"
		AbortScript
	}

	#only validate CompanyName if the field is blank
	If([String]::IsNullOrEmpty($CompanyName))
	{
		Write-Verbose "$(Get-Date -Format G): Company name is blank. Retrieve company name from registry."
		$TmpName = ValidateCompanyName
		
		If([String]::IsNullOrEmpty($TmpName))
		{
			Write-Host "
		Company Name is blank so Cover Page will not show a Company Name.
		Check HKCU:\Software\Microsoft\Office\Common\UserInfo for Company or CompanyName value.
		You may want to use the -CompanyName parameter if you need a Company Name on the cover page.
			" -Foreground White
			$Script:CoName = $TmpName
		}
		Else
		{
			$Script:CoName = $TmpName
			Write-Verbose "$(Get-Date -Format G): Updated company name to $($Script:CoName)"
		}
	}
	Else
	{
		$Script:CoName = $CompanyName
	}

	If($Script:WordCultureCode -ne "en-")
	{
		Write-Verbose "$(Get-Date -Format G): Check Default Cover Page for $($WordCultureCode)"
		[bool]$CPChanged = $False
		Switch ($Script:WordCultureCode)
		{
			'ca-'	{
					If($CoverPage -eq "Sideline")
					{
						$CoverPage = "Línia lateral"
						$CPChanged = $True
					}
				}

			'da-'	{
					If($CoverPage -eq "Sideline")
					{
						$CoverPage = "Sidelinje"
						$CPChanged = $True
					}
				}

			'de-'	{
					If($CoverPage -eq "Sideline")
					{
						$CoverPage = "Randlinie"
						$CPChanged = $True
					}
				}

			'es-'	{
					If($CoverPage -eq "Sideline")
					{
						$CoverPage = "Línea lateral"
						$CPChanged = $True
					}
				}

			'fi-'	{
					If($CoverPage -eq "Sideline")
					{
						$CoverPage = "Sivussa"
						$CPChanged = $True
					}
				}

			'fr-'	{
					If($CoverPage -eq "Sideline")
					{
						If($Script:WordVersion -eq $wdWord2013 -or $Script:WordVersion -eq $wdWord2016)
						{
							$CoverPage = "Lignes latérales"
							$CPChanged = $True
						}
						Else
						{
							$CoverPage = "Ligne latérale"
							$CPChanged = $True
						}
					}
				}

			'nb-'	{
					If($CoverPage -eq "Sideline")
					{
						$CoverPage = "Sidelinje"
						$CPChanged = $True
					}
				}

			'nl-'	{
					If($CoverPage -eq "Sideline")
					{
						$CoverPage = "Terzijde"
						$CPChanged = $True
					}
				}

			'pt-'	{
					If($CoverPage -eq "Sideline")
					{
						$CoverPage = "Linha Lateral"
						$CPChanged = $True
					}
				}

			'sv-'	{
					If($CoverPage -eq "Sideline")
					{
						$CoverPage = "Sidlinje"
						$CPChanged = $True
					}
				}

			'zh-'	{
					If($CoverPage -eq "Sideline")
					{
						$CoverPage = "边线型"
						$CPChanged = $True
					}
				}
		}

		If($CPChanged)
		{
			Write-Verbose "$(Get-Date -Format G): Changed Default Cover Page from Sideline to $($CoverPage)"
		}
	}

	Write-Verbose "$(Get-Date -Format G): Validate cover page $($CoverPage) for culture code $($Script:WordCultureCode)"
	[bool]$ValidCP = $False
	
	$ValidCP = ValidateCoverPage $Script:WordVersion $CoverPage $Script:WordCultureCode
	
	If(!$ValidCP)
	{
		$ErrorActionPreference = $SaveEAPreference
		Write-Verbose "$(Get-Date -Format G): Word language value $($Script:WordLanguageValue)"
		Write-Verbose "$(Get-Date -Format G): Culture code $($Script:WordCultureCode)"
		Write-Error "
		`n`n
	For $($Script:WordProduct), $($CoverPage) is not a valid Cover Page option.
		`n`n
	Script cannot Continue.
		`n`n
		"
		AbortScript
	}

	$Script:Word.Visible = $False

	#http://jdhitsolutions.com/blog/2012/05/san-diego-2012-powershell-deep-dive-slides-and-demos/
	#using Jeff's Demo-WordReport.ps1 file for examples
	Write-Verbose "$(Get-Date -Format G): Load Word Templates"

	[bool]$Script:CoverPagesExist = $False
	[bool]$BuildingBlocksExist = $False

	$Script:Word.Templates.LoadBuildingBlocks()
	#word 2010/2013/2016
	$BuildingBlocksCollection = $Script:Word.Templates | Where-Object{$_.name -eq "Built-In Building Blocks.dotx"}

	Write-Verbose "$(Get-Date -Format G): Attempt to load cover page $($CoverPage)"
	$part = $Null

	$BuildingBlocksCollection | 
	ForEach-Object {
		If ($_.BuildingBlockEntries.Item($CoverPage).Name -eq $CoverPage) 
		{
			$BuildingBlocks = $_
		}
	}        

	If($Null -ne $BuildingBlocks)
	{
		$BuildingBlocksExist = $True

		Try 
		{
			$part = $BuildingBlocks.BuildingBlockEntries.Item($CoverPage)
		}

		Catch
		{
			$part = $Null
		}

		If($Null -ne $part)
		{
			$Script:CoverPagesExist = $True
		}
	}

	If(!$Script:CoverPagesExist)
	{
		Write-Verbose "$(Get-Date -Format G): Cover Pages are not installed or the Cover Page $($CoverPage) does not exist."
		Write-Host "Cover Pages are not installed or the Cover Page $($CoverPage) does not exist." -Foreground White
		Write-Host "This report will not have a Cover Page." -Foreground White
	}

	Write-Verbose "$(Get-Date -Format G): Create empty word doc"
	$Script:Doc = $Script:Word.Documents.Add()
	If($Null -eq $Script:Doc)
	{
		Write-Verbose "$(Get-Date -Format G): "
		$ErrorActionPreference = $SaveEAPreference
		Write-Error "
		`n`n
	An empty Word document could not be created. You may need to repair your Word installation.
		`n`n
	Script cannot Continue.
		`n`n"
		AbortScript
	}

	$Script:Selection = $Script:Word.Selection
	If($Null -eq $Script:Selection)
	{
		Write-Verbose "$(Get-Date -Format G): "
		$ErrorActionPreference = $SaveEAPreference
		Write-Error "
		`n`n
	An unknown error happened selecting the entire Word document for default formatting options.
		`n`n
	Script cannot Continue.
		`n`n"
		AbortScript
	}

	#set Default tab stops to 1/2 inch (this line is not from Jeff Hicks)
	#36 =.50"
	$Script:Word.ActiveDocument.DefaultTabStop = 36

	#Disable Spell and Grammar Check to resolve issue and improve performance (from Pat Coughlin)
	Write-Verbose "$(Get-Date -Format G): Disable grammar and spell checking"
	#bug reported 1-Apr-2014 by Tim Mangan
	#save current options first before turning them off
	$Script:CurrentGrammarOption = $Script:Word.Options.CheckGrammarAsYouType
	$Script:CurrentSpellingOption = $Script:Word.Options.CheckSpellingAsYouType
	$Script:Word.Options.CheckGrammarAsYouType = $False
	$Script:Word.Options.CheckSpellingAsYouType = $False

	If($BuildingBlocksExist)
	{
		#insert new page, getting ready for table of contents
		Write-Verbose "$(Get-Date -Format G): Insert new page, getting ready for table of contents"
		$part.Insert($Script:Selection.Range,$True) | Out-Null
		$Script:Selection.InsertNewPage()

		#table of contents
		Write-Verbose "$(Get-Date -Format G): Table of Contents - $($Script:MyHash.Word_TableOfContents)"
		$toc = $BuildingBlocks.BuildingBlockEntries.Item($Script:MyHash.Word_TableOfContents)
		If($Null -eq $toc)
		{
			Write-Verbose "$(Get-Date -Format G): "
			Write-Host "Table of Content - $($Script:MyHash.Word_TableOfContents) could not be retrieved." -Foreground White
			Write-Host "This report will not have a Table of Contents." -Foreground White
		}
		Else
		{
			$toc.insert($Script:Selection.Range,$True) | Out-Null
		}
	}
	Else
	{
		Write-Host "Table of Contents are not installed." -Foreground White
		Write-Host "Table of Contents are not installed so this report will not have a Table of Contents." -Foreground White
	}

	#set the footer
	Write-Verbose "$(Get-Date -Format G): Set the footer"
	[string]$footertext = "Report created by $username"

	#get the footer
	Write-Verbose "$(Get-Date -Format G): Get the footer and format font"
	$Script:Doc.ActiveWindow.ActivePane.view.SeekView = $wdSeekPrimaryFooter
	#get the footer and format font
	$footers = $Script:Doc.Sections.Last.Footers
	ForEach ($footer in $footers) 
	{
		If($footer.exists) 
		{
			$footer.range.Font.name = "Calibri"
			$footer.range.Font.size = 8
			$footer.range.Font.Italic = $True
			$footer.range.Font.Bold = $True
		}
	} #end ForEach
	Write-Verbose "$(Get-Date -Format G): Footer text"
	$Script:Selection.HeaderFooter.Range.Text = $footerText

	#add page numbering
	Write-Verbose "$(Get-Date -Format G): Add page numbering"
	$Script:Selection.HeaderFooter.PageNumbers.Add($wdAlignPageNumberRight) | Out-Null

	FindWordDocumentEnd
	#end of Jeff Hicks 
}

Function UpdateDocumentProperties
{
	Param([string]$AbstractTitle, [string]$SubjectTitle)
	#updated 8-Jun-2017 with additional cover page fields
	#Update document properties
	If($MSWORD -or $PDF)
	{
		If($Script:CoverPagesExist)
		{
			Write-Verbose "$(Get-Date -Format G): Set Cover Page Properties"
			#8-Jun-2017 put these 4 items in alpha order
            Set-DocumentProperty -Document $Script:Doc -DocProperty Author -Value $UserName
            Set-DocumentProperty -Document $Script:Doc -DocProperty Company -Value $Script:CoName
            Set-DocumentProperty -Document $Script:Doc -DocProperty Subject -Value $SubjectTitle
            Set-DocumentProperty -Document $Script:Doc -DocProperty Title -Value $Script:title

			#Get the Coverpage XML part
			$cp = $Script:Doc.CustomXMLParts | Where-Object{$_.NamespaceURI -match "coverPageProps$"}

			#get the abstract XML part
			$ab = $cp.documentelement.ChildNodes | Where-Object{$_.basename -eq "Abstract"}
			#set the text
			If([String]::IsNullOrEmpty($Script:CoName))
			{
				[string]$abstract = $AbstractTitle
			}
			Else
			{
				[string]$abstract = "$($AbstractTitle) for $($Script:CoName)"
			}
			$ab.Text = $abstract

			#added 8-Jun-2017
			$ab = $cp.documentelement.ChildNodes | Where-Object{$_.basename -eq "CompanyAddress"}
			#set the text
			[string]$abstract = $CompanyAddress
			$ab.Text = $abstract

			#added 8-Jun-2017
			$ab = $cp.documentelement.ChildNodes | Where-Object{$_.basename -eq "CompanyEmail"}
			#set the text
			[string]$abstract = $CompanyEmail
			$ab.Text = $abstract

			#added 8-Jun-2017
			$ab = $cp.documentelement.ChildNodes | Where-Object{$_.basename -eq "CompanyFax"}
			#set the text
			[string]$abstract = $CompanyFax
			$ab.Text = $abstract

			#added 8-Jun-2017
			$ab = $cp.documentelement.ChildNodes | Where-Object{$_.basename -eq "CompanyPhone"}
			#set the text
			[string]$abstract = $CompanyPhone
			$ab.Text = $abstract

			$ab = $cp.documentelement.ChildNodes | Where-Object{$_.basename -eq "PublishDate"}
			#set the text
			[string]$abstract = (Get-Date -Format d).ToString()
			$ab.Text = $abstract

			Write-Verbose "$(Get-Date -Format G): Update the Table of Contents"
			#update the Table of Contents
			$Script:Doc.TablesOfContents.item(1).Update()
			$cp = $Null
			$ab = $Null
			$abstract = $Null
		}
	}
}
#endregion

#region registry functions
#http://stackoverflow.com/questions/5648931/test-if-registry-value-exists
# This Function just gets $True or $False
Function Test-RegistryValue($path, $name)
{
	$key = Get-Item -LiteralPath $path -EA 0
	$key -and $Null -ne $key.GetValue($name, $Null)
}

# Gets the specified registry value or $Null if it is missing
Function Get-RegistryValue($path, $name)
{
	$key = Get-Item -LiteralPath $path -EA 0
	If($key)
	{
		$key.GetValue($name, $Null)
	}
	Else
	{
		$Null
	}
}

# Gets the specified registry value or $Null if it is missing
Function Get-RegistryValue2
{
	[CmdletBinding()]
	Param([string]$path, [string]$name, [string]$ComputerName)
	If($ComputerName -eq $env:computername)
	{
		$key = Get-Item -LiteralPath $path -EA 0
		If($key)
		{
			Return $key.GetValue($name, $Null)
		}
		Else
		{
			Return $Null
		}
	}
	Else
	{
		#path needed here is different for remote registry access
		$path = $path.SubString(6)
		$path2 = $path.Replace('\','\\')
        Try
        {
            ## GRL throws an error if can't open
		    $Reg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine', $ComputerName)
        }
        Catch
        {
            Write-Debug -Message "Failed to open HKLM on $ComputerName"
            $Reg = $null
        }
        if( $Reg -and ($RegKey = $Reg.OpenSubKey($path2) ) )
		{
			$Results = $RegKey.GetValue($name)

			If($Null -ne $Results)
			{
				Return $Results
			}
			Else
			{
				Return $Null
			}
		}
		Else
		{
			Return $Null
		}
	}
}

Function Get-RegKeyToObject 
{
	#function contributed by Andrew Williamson @ Fujitsu Services
    param([string]$RegPath,
    [string]$RegKey,
    [string]$ComputerName)
	
    $val = Get-RegistryValue2 $RegPath $RegKey $ComputerName
	
    If($Null -eq $val) 
	{
        $tmp = "Not set"
    } 
	Else 
	{
	    $tmp = $val
    }
	
	$obj1 = [PSCustomObject] @{
		ComputerName = $ComputerName	
		RegKey       = $RegPath	
		RegValue     = $RegKey	
		Value        = $tmp
	}
	$null = $Script:ControllerRegistryItems.Add($obj1)
}
#endregion

#region Word, text, and HTML line output functions
Function line
#function created by Michael B. Smith, Exchange MVP
#@essentialexch on Twitter
#https://essential.exchange/blog
#for creating the formatted text report
#created March 2011
#updated March 2014
# updated March 2019 to use StringBuilder (about 100 times more efficient than simple strings)
{
	Param
	(
		[Int]    $tabs = 0, 
		[String] $name = '', 
		[String] $value = '', 
		[String] $newline = [System.Environment]::NewLine, 
		[Switch] $nonewline
	)

	while( $tabs -gt 0 )
	{
		#V2.23 - switch to using a StringBuilder for $global:Output
		$null = $global:Output.Append( "`t" )
		$tabs--
	}

	If( $nonewline )
	{
		#V2.23 - switch to using a StringBuilder for $global:Output
		$null = $global:Output.Append( $name + $value )
	}
	Else
	{
		#V2.23 - switch to using a StringBuilder for $global:Output
		$null = $global:Output.AppendLine( $name + $value )
	}
}
	
Function WriteWordLine
#Function created by Ryan Revord
#@rsrevord on Twitter
#Function created to make output to Word easy in this script
#updated 27-Mar-2014 to include font name, font size, italics and bold options
{
	Param([int]$style=0, 
	[int]$tabs = 0, 
	[string]$name = '', 
	[string]$value = '', 
	[string]$fontName=$Null,
	[int]$fontSize=0,
	[bool]$italics=$False,
	[bool]$boldface=$False,
	[Switch]$nonewline)
	
	#Build output style
	[string]$output = ""
	Switch ($style)
	{
		0 {$Script:Selection.Style = $Script:MyHash.Word_NoSpacing; Break}
		1 {$Script:Selection.Style = $Script:MyHash.Word_Heading1; Break}
		2 {$Script:Selection.Style = $Script:MyHash.Word_Heading2; Break}
		3 {$Script:Selection.Style = $Script:MyHash.Word_Heading3; Break}
		4 {$Script:Selection.Style = $Script:MyHash.Word_Heading4; Break}
		Default {$Script:Selection.Style = $Script:MyHash.Word_NoSpacing; Break}
	}
	
	#build # of tabs
	While($tabs -gt 0)
	{ 
		$output += "`t"; $tabs--; 
	}
 
	If(![String]::IsNullOrEmpty($fontName)) 
	{
		$Script:Selection.Font.name = $fontName
	} 

	If($fontSize -ne 0) 
	{
		$Script:Selection.Font.size = $fontSize
	} 
 
	If($italics -eq $True) 
	{
		$Script:Selection.Font.Italic = $True
	} 
 
	If($boldface -eq $True) 
	{
		$Script:Selection.Font.Bold = $True
	} 

	#output the rest of the parameters.
	$output += $name + $value
	$Script:Selection.TypeText($output)
 
	#test for new WriteWordLine 0.
	If($nonewline)
	{
		# Do nothing.
	} 
	Else 
	{
		$Script:Selection.TypeParagraph()
	}
}

#***********************************************************************************************************
# WriteHTMLLine
#***********************************************************************************************************

<#
.Synopsis
	Writes a line of output for HTML output
.DESCRIPTION
	This function formats an HTML line
.USAGE
	WriteHTMLLine <Style> <Tabs> <Name> <Value> <Font Name> <Font Size> <Options>

	0 for Font Size denotes using the default font size of 2 or 10 point

.EXAMPLE
	WriteHTMLLine 0 0 " "

	Writes a blank line with no style or tab stops, obviously none needed.

.EXAMPLE
	WriteHTMLLine 0 1 "This is a regular line of text indented 1 tab stops"

	Writes a line with 1 tab stop.

.EXAMPLE
	WriteHTMLLine 0 0 "This is a regular line of text in the default font in italics" "" $Null 0 $htmlitalics

	Writes a line omitting font and font size and setting the italics attribute

.EXAMPLE
	WriteHTMLLine 0 0 "This is a regular line of text in the default font in bold" "" $Null 0 $htmlBold

	Writes a line omitting font and font size and setting the bold attribute

.EXAMPLE
	WriteHTMLLine 0 0 "This is a regular line of text in the default font in bold italics" "" $Null 0 ($htmlBold -bor $htmlitalics)

	Writes a line omitting font and font size and setting both italics and bold options

.EXAMPLE	
	WriteHTMLLine 0 0 "This is a regular line of text in the default font in 10 point" "" $Null 2  # 10 point font

	Writes a line using 10 point font

.EXAMPLE
	WriteHTMLLine 0 0 "This is a regular line of text in Courier New font" "" "Courier New" 0 

	Writes a line using Courier New Font and 0 font point size (default = 2 if set to 0)

.EXAMPLE	
	WriteHTMLLine 0 0 "This is a regular line of RED text indented 0 tab stops with the computer name as data in 10 point Courier New bold italics: " $env:computername "Courier New" 2 ($htmlBold -bor $htmlred -bor $htmlitalics)

	Writes a line using Courier New Font with first and second string values to be used, also uses 10 point font with bold, italics and red color options set.

.NOTES

	Font Size - Unlike word, there is a limited set of font sizes that can be used in HTML. They are:
		0 - default which actually gives it a 2 or 10 point.
		1 - 7.5 point font size
		2 - 10 point
		3 - 13.5 point
		4 - 15 point
		5 - 18 point
		6 - 24 point
		7 - 36 point
	Any number larger than 7 defaults to 7

	Style - Refers to the headers that are used with output and resemble the headers in word, 
	HTML supports headers h1-h6 and h1-h4 are more commonly used. Unlike word, H1 will not 
	give you a blue colored font, you will have to set that yourself.

	Colors and Bold/Italics Flags are:

		htmlbold       
		htmlitalics    
		htmlred        
		htmlcyan        
		htmlblue       
		htmldarkblue   
		htmllightblue   
		htmlpurple      
		htmlyellow      
		htmllime       
		htmlmagenta     
		htmlwhite       
		htmlsilver      
		htmlgray       
		htmlolive       
		htmlorange      
		htmlmaroon      
		htmlgreen       
		htmlblack       
#>

#V2.23
# to suppress $crlf in HTML documents, replace this with '' (empty string)
# but this was added to make the HTML readable
$crlf = [System.Environment]::NewLine

Function WriteHTMLLine
#Function created by Ken Avram
#Function created to make output to HTML easy in this script
#headings fixed 12-Oct-2016 by Webster
#errors with $HTMLStyle fixed 7-Dec-2017 by Webster
# re-implemented/re-based for v2.23 by Michael B. Smith
{
	Param
	(
		[Int]    $style    = 0, 
		[Int]    $tabs     = 0, 
		[String] $name     = '', 
		[String] $value    = '', 
		[String] $fontName = $null,
		[Int]    $fontSize = 1,
		[Int]    $options  = $htmlblack
	)

	#V2.23 - FIXME - long story short, this function was wrong and had been wrong for a long time. 
	## The function generated invalid HTML, and ignored fontname and fontsize parameters. I fixed
	## those items, but that made the report unreadable, because all of the formatting had been based
	## on this function not working properly.

	## here is a typical H1 previously generated:
	## <h1>///&nbsp;&nbsp;Forest Information&nbsp;&nbsp;\\\<font face='Calibri' color='#000000' size='1'></h1></font>

	## fixing the function generated this (unreadably small):
	## <h1><font face='Calibri' color='#000000' size='1'>///&nbsp;&nbsp;Forest Information&nbsp;&nbsp;\\\</font></h1>

	## So I took all the fixes out. This routine now generates valid HTML, but the fontName, fontSize,
	## and options parameters are ignored; so the routine generates equivalent output as before. I took
	## the fixes out instead of fixing all the call sites, because there are 225 call sites! If you are
	## willing to update all the call sites, you can easily re-instate the fixes. They have only been
	## commented out with '##' below.

	## if( [String]::IsNullOrEmpty( $fontName ) )
	## {
	##	$fontName = 'Calibri'
	## }
	## if( $fontSize -le 0 )
	## {
	##	$fontSize = 1
	## }

	## ## output data is stored here
	## [String] $output = ''
	[System.Text.StringBuilder] $sb = New-Object System.Text.StringBuilder( 1024 )

	If( [String]::IsNullOrEmpty( $name ) )	
	{
		## $HTMLBody = '<p></p>'
		$null = $sb.Append( '<p></p>' )
	}
	Else
	{
		## #V2.23
		[Bool] $ital = $options -band $htmlitalics
		[Bool] $bold = $options -band $htmlBold
		## $color = $global:htmlColor[ $options -band 0xffffc ]

		## ## build the HTML output string
##		$HTMLBody = ''
##		if( $ital ) { $HTMLBody += '<i>' }
##		if( $bold ) { $HTMLBody += '<b>' } 
		if( $ital ) { $null = $sb.Append( '<i>' ) }
		if( $bold ) { $null = $sb.Append( '<b>' ) } 

		switch( $style )
		{
			1 { $HTMLOpen = '<h1>'; $HTMLClose = '</h1>'; Break }
			2 { $HTMLOpen = '<h2>'; $HTMLClose = '</h2>'; Break }
			3 { $HTMLOpen = '<h3>'; $HTMLClose = '</h3>'; Break }
			4 { $HTMLOpen = '<h4>'; $HTMLClose = '</h4>'; Break }
			Default { $HTMLOpen = ''; $HTMLClose = ''; Break }
		}

		## $HTMLBody += $HTMLOpen
		$null = $sb.Append( $HTMLOpen )

		## if($HTMLClose -eq '')
		## {
		##	$HTMLBody += "<br><font face='" + $fontName + "' " + "color='" + $color + "' size='"  + $fontSize + "'>"
		## }
		## else
		## {
		##	$HTMLBody += "<font face='" + $fontName + "' " + "color='" + $color + "' size='"  + $fontSize + "'>"
		## }
		
##		while( $tabs -gt 0 )
##		{ 
##			$output += '&nbsp;&nbsp;&nbsp;&nbsp;'
##			$tabs--
##		}
		## output the rest of the parameters.
##		$output += $name + $value
		## $HTMLBody += $output
		$null = $sb.Append( ( '&nbsp;&nbsp;&nbsp;&nbsp;' * $tabs ) + $name + $value )

		## $HTMLBody += '</font>'
##		if( $HTMLClose -eq '' ) { $HTMLBody += '<br>'     }
##		else                    { $HTMLBody += $HTMLClose }

##		if( $ital ) { $HTMLBody += '</i>' }
##		if( $bold ) { $HTMLBody += '</b>' } 

##		if( $HTMLClose -eq '' ) { $HTMLBody += '<br />' }

		if( $HTMLClose -eq '' ) { $null = $sb.Append( '<br>' )     }
		else                    { $null = $sb.Append( $HTMLClose ) }

		if( $ital ) { $null = $sb.Append( '</i>' ) }
		if( $bold ) { $null = $sb.Append( '</b>' ) } 

		if( $HTMLClose -eq '' ) { $null = $sb.Append( '<br />' ) }
	}
	##$HTMLBody += $crlf
	$null = $sb.AppendLine( '' )

##	Out-File -FilePath $Script:FileName1 -Append -InputObject $HTMLBody 4>$Null
	Out-File -FilePath $Script:FileName1 -Append -InputObject $sb.ToString() 4>$Null
}
#endregion

#region HTML table functions
#***********************************************************************************************************
# AddHTMLTable - Called from FormatHTMLTable function
# Created by Ken Avram
# modified by Jake Rutski
# re-implemented by Michael B. Smith for v2.23. Also made the documentation match reality.
#***********************************************************************************************************
Function AddHTMLTable
{
	Param
	(
		[String]   $fontName  = 'Calibri',
		[Int]      $fontSize  = 2,
		[Int]      $colCount  = 0,
		[Int]      $rowCount  = 0,
		[Object[]] $rowInfo   = $null,
		[Object[]] $fixedInfo = $null
	)
	#V2.23 - Use StringBuilder - MBS
	## In the normal case, tables are only a few dozen cells. But in the case
	## of Sites, OUs, and Users - there may be many hundreds of thousands of 
	## cells. Using normal strings is too slow.

	#V2.23
	## if( $ExtraSpecialVerbose )
	## {
	##	$global:rowInfo1 = $rowInfo
	## }

	##$htmlbody = ''
	[System.Text.StringBuilder] $sb = New-Object System.Text.StringBuilder( 8192 )

	if( $rowInfo -and $rowInfo.Length -lt $rowCount )
	{
##		$oldCount = $rowCount
		$rowCount = $rowInfo.Length
##		if( $SuperVerbose )
##		{
##			wv "AddHTMLTable: updated rowCount to $rowCount from $oldCount, based on rowInfo.Length"
##		}
	}

	for( $rowCountIndex = 0; $rowCountIndex -lt $rowCount; $rowCountIndex++ )
	{
		$null = $sb.AppendLine( '<tr>' )
		## $htmlbody += '<tr>'
		## $htmlbody += $crlf #V2.23 - make the HTML readable

		## each row of rowInfo is an array
		## each row consists of tuples: an item of text followed by an item of formatting data

		## reset
		$row = $rowInfo[ $rowCountIndex ]

		$subRow = $row
		if( $subRow -is [Array] -and $subRow[ 0 ] -is [Array] )
		{
			$subRow = $subRow[ 0 ]
			## wv "***** AddHTMLTable: deref rowCountIndex $rowCountIndex, subRow.Length $( $subRow.Length ), subRow.GetType $( $subRow.GetType().FullName )"
		}

		$subRowLength = $subRow.Length
		for( $columnIndex = 0; $columnIndex -lt $colCount; $columnIndex += 2 )
		{
			$item = if( $columnIndex -lt $subRowLength ) { $subRow[ $columnIndex ] } else { 0 }
			## if( !( $item -is [String] ) -and $item -is [Array] )
##			if( $item -is [Array] -and $item[ 0 ] -is [Array] )
##			{
##				$item = $item[ 0 ]
##			}

			$text   = if( $item ) { $item.ToString() } else { '' }
			$format = if( ( $columnIndex + 1 ) -lt $subRowLength ) { $subRow[ $columnIndex + 1 ] } else { 0 }
			## item, text, and format ALWAYS have values, even if empty values
			$color  = $global:htmlColor[ $format -band 0xffffc ]
			[Bool] $bold = $format -band $htmlBold
			[Bool] $ital = $format -band $htmlitalics

			if( $null -eq $fixedInfo -or $fixedInfo.Length -eq 0 )
			{
				$null = $sb.Append( "<td style=""background-color:$( $color )""><font face='$( $fontName )' size='$( $fontSize )'>" )
				##$htmlbody += "<td style=""background-color:$( $color )""><font face='$( $fontName )' size='$( $fontSize )'>"
			}
			else
			{
				$null = $sb.Append( "<td style=""width:$( $fixedInfo[ $columnIndex / 2 ] ); background-color:$( $color )""><font face='$( $fontName )' size='$( $fontSize )'>" )
				##$htmlbody += "<td style=""width:$( $fixedInfo[ $columnIndex / 2 ] ); background-color:$( $color )""><font face='$( $fontName )' size='$( $fontSize )'>"
			}

			##if( $bold ) { $htmlbody += '<b>' }
			##if( $ital ) { $htmlbody += '<i>' }
			if( $bold ) { $null = $sb.Append( '<b>' ) }
			if( $ital ) { $null = $sb.Append( '<i>' ) }

			if( $text -eq ' ' -or $text.length -eq 0)
			{
				##$htmlbody += '&nbsp;&nbsp;&nbsp;'
				$null = $sb.Append( '&nbsp;&nbsp;&nbsp;' )
			}
			else
			{
				for ($inx = 0; $inx -lt $text.length; $inx++ )
				{
					if( $text[ $inx ] -eq ' ' )
					{
						##$htmlbody += '&nbsp;'
						$null = $sb.Append( '&nbsp;' )
					}
					else
					{
						break
					}
				}
				##$htmlbody += $text
				$null = $sb.Append( $text )
			}

##			if( $bold ) { $htmlbody += '</b>' }
##			if( $ital ) { $htmlbody += '</i>' }
			if( $bold ) { $null = $sb.Append( '</b>' ) }
			if( $ital ) { $null = $sb.Append( '</i>' ) }

			$null = $sb.AppendLine( '</font></td>' )
##			$htmlbody += '</font></td>'
##			$htmlbody += $crlf
		}

		$null = $sb.AppendLine( '</tr>' )
##		$htmlbody += '</tr>'
##		$htmlbody += $crlf
	}

##	if( $ExtraSpecialVerbose )
##	{
##		$global:rowInfo = $rowInfo
##		wv "!!!!! AddHTMLTable: HTML = '$htmlbody'"
##	}

##	Out-File -FilePath $Script:FileName1 -Append -InputObject $HTMLBody 4>$Null 
	Out-File -FilePath $Script:FileName1 -Append -InputObject $sb.ToString() 4>$Null 
}

#***********************************************************************************************************
# FormatHTMLTable 
# Created by Ken Avram
# modified by Jake Rutski
# reworked by Michael B. Smith for v2.23
#***********************************************************************************************************

<#
.Synopsis
	Format table for a HTML output document.
.DESCRIPTION
	This function formats a table for HTML from multiple arrays of strings.
.PARAMETER noBorder
	If set to $true, a table will be generated without a border (border = '0'). Otherwise the table will be generated
	with a border (border = '1').
.PARAMETER noHeadCols
	This parameter should be used when generating tables which do not have a separate array containing column headers
	(columnArray is not specified). Set this parameter equal to the number of columns in the table.
.PARAMETER rowArray
	This parameter contains the row data array for the table.
.PARAMETER columnArray
	This parameter contains column header data for the table.
.PARAMETER fixedWidth
	This parameter contains widths for columns in pixel format ("100px") to override auto column widths
	The variable should contain a width for each column you wish to override the auto-size setting
	For example: $fixedWidth = @("100px","110px","120px","130px","140px")
.PARAMETER tableHeader
	A string containing the header for the table (printed at the top of the table, left justified). The
	default is a blank string.
.PARAMETER tableWidth
	The width of the table in pixels, or 'auto'. The default is 'auto'.
.PARAMETER fontName
	The name of the font to use in the table. The default is 'Calibri'.
.PARAMETER fontSize
	The size of the font to use in the table. The default is 2. Note that this is the HTML size, not the pixel size.

.USAGE
	FormatHTMLTable <Table Header> <Table Width> <Font Name> <Font Size>

.EXAMPLE
	FormatHTMLTable "Table Heading" "auto" "Calibri" 3

	This example formats a table and writes it out into an html file. All of the parameters are optional
	defaults are used if not supplied.

	for <Table format>, the default is auto which will autofit the text into the columns and adjust to the longest text in that column. You can also use percentage i.e. 25%
	which will take only 25% of the line and will auto word wrap the text to the next line in the column. Also, instead of using a percentage, you can use pixels i.e. 400px.

	FormatHTMLTable "Table Heading" "auto" -rowArray $rowData -columnArray $columnData

	This example creates an HTML table with a heading of 'Table Heading', auto column spacing, column header data from $columnData and row data from $rowData

	FormatHTMLTable "Table Heading" -rowArray $rowData -noHeadCols 3

	This example creates an HTML table with a heading of 'Table Heading', auto column spacing, no header, and row data from $rowData

	FormatHTMLTable "Table Heading" -rowArray $rowData -fixedWidth $fixedColumns

	This example creates an HTML table with a heading of 'Table Heading, no header, row data from $rowData, and fixed columns defined by $fixedColumns

.NOTES
	In order to use the formatted table it first has to be loaded with data. Examples below will show how to load the table:

	First, initialize the table array

	$rowdata = @()

	Then Load the array. If you are using column headers then load those into the column headers array, otherwise the first line of the table goes into the column headers array
	and the second and subsequent lines go into the $rowdata table as shown below:

	$columnHeaders = @('Display Name',$htmlsb,'Status',$htmlsb,'Startup Type',$htmlsb)

	The first column is the actual name to display, the second are the attributes of the column i.e. color anded with bold or italics. For the anding, parens are required or it will
	not format correctly.

	This is following by adding rowdata as shown below. As more columns are added the columns will auto adjust to fit the size of the page.

	$rowdata = @()
	$columnHeaders = @("User Name",$htmlsb,$UserName,$htmlwhite)
	$rowdata += @(,('Save as PDF',$htmlsb,$PDF.ToString(),$htmlwhite))
	$rowdata += @(,('Save as TEXT',$htmlsb,$TEXT.ToString(),$htmlwhite))
	$rowdata += @(,('Save as WORD',$htmlsb,$MSWORD.ToString(),$htmlwhite))
	$rowdata += @(,('Save as HTML',$htmlsb,$HTML.ToString(),$htmlwhite))
	$rowdata += @(,('Add DateTime',$htmlsb,$AddDateTime.ToString(),$htmlwhite))
	$rowdata += @(,('Hardware Inventory',$htmlsb,$Hardware.ToString(),$htmlwhite))
	$rowdata += @(,('Computer Name',$htmlsb,$ComputerName,$htmlwhite))
	$rowdata += @(,('Filename1',$htmlsb,$Script:FileName1,$htmlwhite))
	$rowdata += @(,('OS Detected',$htmlsb,$Script:RunningOS,$htmlwhite))
	$rowdata += @(,('PSUICulture',$htmlsb,$PSCulture,$htmlwhite))
	$rowdata += @(,('PoSH version',$htmlsb,$Host.Version.ToString(),$htmlwhite))
	FormatHTMLTable "Example of Horizontal AutoFitContents HTML Table" -rowArray $rowdata

	The 'rowArray' paramater is mandatory to build the table, but it is not set as such in the function - if nothing is passed, the table will be empty.

	Colors and Bold/Italics Flags are shown below:

		htmlbold       
		htmlitalics    
		htmlred        
		htmlcyan        
		htmlblue       
		htmldarkblue   
		htmllightblue   
		htmlpurple      
		htmlyellow      
		htmllime       
		htmlmagenta     
		htmlwhite       
		htmlsilver      
		htmlgray       
		htmlolive       
		htmlorange      
		htmlmaroon      
		htmlgreen       
		htmlblack     

#>

Function FormatHTMLTable
{
	Param
	(
		[String]   $tableheader = '',
		[String]   $tablewidth  = 'auto',
		[String]   $fontName    = 'Calibri',
		[Int]      $fontSize    = 2,
		[Switch]   $noBorder    = $false,
		[Int]      $noHeadCols  = 1,
		[Object[]] $rowArray    = $null,
		[Object[]] $fixedWidth  = $null,
		[Object[]] $columnArray = $null
	)

	## FIXME - the help text for this function is wacky wrong - MBS
	## FIXME - Use StringBuilder - MBS - this only builds the table header - benefit relatively small

	$HTMLBody = "<b><font face='" + $fontname + "' size='" + ($fontsize + 1) + "'>" + $tableheader + "</font></b>" + $crlf

	If( $null -eq $columnArray -or $columnArray.Length -eq 0)
	{
		$NumCols = $noHeadCols + 1
	}  # means we have no column headers, just a table
	Else
	{
		$NumCols = $columnArray.Length
	}  # need to add one for the color attrib

	If( $null -ne $rowArray )
	{
		$NumRows = $rowArray.length + 1
	}
	Else
	{
		$NumRows = 1
	}

	If( $noBorder )
	{
		$HTMLBody += "<table border='0' width='" + $tablewidth + "'>"
	}
	Else
	{
		$HTMLBody += "<table border='1' width='" + $tablewidth + "'>"
	}
	$HTMLBody += $crlf

	if( $columnArray -and $columnArray.Length -gt 0 )
	{
		$HTMLBody += '<tr>' + $crlf

		for( $columnIndex = 0; $columnIndex -lt $NumCols; $columnindex += 2 )
		{
			#V2.23
			$val = $columnArray[ $columnIndex + 1 ]
			$tmp = $global:htmlColor[ $val -band 0xffffc ]
			[Bool] $bold = $val -band $htmlBold
			[Bool] $ital = $val -band $htmlitalics

			if( $null -eq $fixedWidth -or $fixedWidth.Length -eq 0 )
			{
				$HTMLBody += "<td style=""background-color:$($tmp)""><font face='$($fontName)' size='$($fontSize)'>"
			}
			else
			{
				$HTMLBody += "<td style=""width:$($fixedWidth[$columnIndex/2]); background-color:$($tmp)""><font face='$($fontName)' size='$($fontSize)'>"
			}

			if( $bold ) { $HTMLBody += '<b>' }
			if( $ital ) { $HTMLBody += '<i>' }

			$array = $columnArray[ $columnIndex ]
			if( $array )
			{
				if( $array -eq ' ' -or $array.Length -eq 0 )
				{
					$HTMLBody += '&nbsp;&nbsp;&nbsp;'
				}
				else
				{
					for( $i = 0; $i -lt $array.Length; $i += 2 )
					{
						if( $array[ $i ] -eq ' ' )
						{
							$HTMLBody += '&nbsp;'
						}
						else
						{
							break
						}
					}
					$HTMLBody += $array
				}
			}
			else
			{
				$HTMLBody += '&nbsp;&nbsp;&nbsp;'
			}
			
			if( $bold ) { $HTMLBody += '</b>' }
			if( $ital ) { $HTMLBody += '</i>' }
		}

		$HTMLBody += '</font></td>'
		$HTMLBody += $crlf
	}

	$HTMLBody += '</tr>' + $crlf

	#V2.23
	Out-File -FilePath $Script:FileName1 -Append -InputObject $HTMLBody 4>$Null 
	$HTMLBody = ''

	##$rowindex = 2
	If( $rowArray )
	{

		AddHTMLTable -fontName $fontName -fontSize $fontSize `
			-colCount $numCols -rowCount $NumRows `
			-rowInfo $rowArray -fixedInfo $fixedWidth
		##$rowArray = @()
		$rowArray = $null
		$HTMLBody = '</table>'
	}
	Else
	{
		$HTMLBody += '</table>'
	}

	Out-File -FilePath $Script:FileName1 -Append -InputObject $HTMLBody 4>$Null 
}
#endregion

#region other HTML functions
Function SetupHTML
{
	Write-Verbose "$(Get-Date -Format G): Setting up HTML"
	If(!$AddDateTime)
	{
		[string]$Script:FileName1 = "$($pwdpath)\$($OutputFileName).html"
	}
	ElseIf($AddDateTime)
	{
		[string]$Script:FileName1 = "$($pwdpath)\$($OutputFileName)_$(Get-Date -f yyyy-MM-dd_HHmm).html"
	}

	$htmlhead = "<html><head><meta http-equiv='Content-Language' content='da'><title>" + $Script:Title + "</title></head><body>"
	out-file -FilePath $Script:Filename1 -Force -InputObject $HTMLHead 4>$Null
}#endregion

#region Iain's Word table functions

<#
.Synopsis
	Add a table to a Microsoft Word document
.DESCRIPTION
	This function adds a table to a Microsoft Word document from either an array of
	Hashtables or an array of PSCustomObjects.

	Using this function is quicker than setting each table cell individually but can
	only utilise the built-in MS Word table autoformats. Individual tables cells can
	be altered after the table has been appended to the document (a table reference
	is Returned).
.EXAMPLE
	AddWordTable -Hashtable $HashtableArray

	This example adds table to the MS Word document, utilising all key/value pairs in
	the array of hashtables. Column headers will display the key names as defined.
	Note: the columns might not be displayed in the order that they were defined. To
	ensure columns are displayed in the required order utilise the -Columns parameter.
.EXAMPLE
	AddWordTable -Hashtable $HashtableArray -List

	This example adds table to the MS Word document, utilising all key/value pairs in
	the array of hashtables. No column headers will be added, in a ListView format.
	Note: the columns might not be displayed in the order that they were defined. To
	ensure columns are displayed in the required order utilise the -Columns parameter.
.EXAMPLE
	AddWordTable -CustomObject $PSCustomObjectArray

	This example adds table to the MS Word document, utilising all note property names
	the array of PSCustomObjects. Column headers will display the note property names.
	Note: the columns might not be displayed in the order that they were defined. To
	ensure columns are displayed in the required order utilise the -Columns parameter.
.EXAMPLE
	AddWordTable -Hashtable $HashtableArray -Columns FirstName,LastName,EmailAddress

	This example adds a table to the MS Word document, but only using the specified
	key names: FirstName, LastName and EmailAddress. If other keys are present in the
	array of Hashtables they will be ignored.
.EXAMPLE
	AddWordTable -CustomObject $PSCustomObjectArray -Columns FirstName,LastName,EmailAddress -Headers "First Name","Last Name","Email Address"

	This example adds a table to the MS Word document, but only using the specified
	PSCustomObject note properties: FirstName, LastName and EmailAddress. If other note
	properties are present in the array of PSCustomObjects they will be ignored. The
	display names for each specified column header has been overridden to display a
	custom header. Note: the order of the header names must match the specified columns.
#>

Function AddWordTable
{
	[CmdletBinding()]
	Param
	(
		# Array of Hashtable (including table headers)
		[Parameter(Mandatory=$True, ValueFromPipelineByPropertyName=$True, ParameterSetName='Hashtable', Position=0)]
		[ValidateNotNullOrEmpty()] [System.Collections.Hashtable[]] $Hashtable,
		# Array of PSCustomObjects
		[Parameter(Mandatory=$True, ValueFromPipelineByPropertyName=$True, ParameterSetName='CustomObject', Position=0)]
		[ValidateNotNullOrEmpty()] [PSCustomObject[]] $CustomObject,
		# Array of Hashtable key names or PSCustomObject property names to include, in display order.
		# If not supplied then all Hashtable keys or all PSCustomObject properties will be displayed.
		[Parameter(ValueFromPipelineByPropertyName=$True)] [AllowNull()] [string[]] $Columns = $Null,
		# Array of custom table header strings in display order.
		[Parameter(ValueFromPipelineByPropertyName=$True)] [AllowNull()] [string[]] $Headers = $Null,
		# AutoFit table behavior.
		[Parameter(ValueFromPipelineByPropertyName=$True)] [AllowNull()] [int] $AutoFit = -1,
		# List view (no headers)
		[Switch] $List,
		# Grid lines
		[Switch] $NoGridLines,
		[Switch] $NoInternalGridLines,
		# Built-in Word table formatting style constant
		# Would recommend only $wdTableFormatContempory for normal usage (possibly $wdTableFormatList5 for List view)
		[Parameter(ValueFromPipelineByPropertyName=$True)] [int] $Format = 0
	)

	Begin 
	{
		Write-Debug ("Using parameter set '{0}'" -f $PSCmdlet.ParameterSetName);
		## Check if -Columns wasn't specified but -Headers were (saves some additional parameter sets!)
		If(($Null -eq $Columns) -and ($Null -eq $Headers)) 
		{
			Write-Warning "No columns specified and therefore, specified headers will be ignored.";
			$Columns = $Null;
		}
		ElseIf(($Null -ne $Columns) -and ($Null -ne $Headers)) 
		{
			## Check if number of specified -Columns matches number of specified -Headers
			If($Columns.Length -ne $Headers.Length) 
			{
				Write-Error "The specified number of columns does not match the specified number of headers.";
			}
		} ## end elseif
	} ## end Begin

	Process
	{
		## Build the Word table data string to be converted to a range and then a table later.
		[System.Text.StringBuilder] $WordRangeString = New-Object System.Text.StringBuilder;

		Switch ($PSCmdlet.ParameterSetName) 
		{
			'CustomObject' 
			{
				If($Null -eq $Columns) 
				{
					## Build the available columns from all availble PSCustomObject note properties
					[string[]] $Columns = @();
					## Add each NoteProperty name to the array
					ForEach($Property in ($CustomObject | Get-Member -MemberType NoteProperty)) 
					{ 
						$Columns += $Property.Name; 
					}
				}

				## Add the table headers from -Headers or -Columns (except when in -List(view)
				If(-not $List) 
				{
					Write-Debug ("$(Get-Date -Format G): `t`tBuilding table headers");
					If($Null -ne $Headers) 
					{
                        [ref] $Null = $WordRangeString.AppendFormat("{0}`n", [string]::Join("`t", $Headers));
					}
					Else 
					{ 
                        [ref] $Null = $WordRangeString.AppendFormat("{0}`n", [string]::Join("`t", $Columns));
					}
				}

				## Iterate through each PSCustomObject
				Write-Debug ("$(Get-Date -Format G): `t`tBuilding table rows");
				ForEach($Object in $CustomObject) 
				{
					$OrderedValues = @();
					## Add each row item in the specified order
					ForEach($Column in $Columns) 
					{ 
						$OrderedValues += $Object.$Column; 
					}
					## Use the ordered list to add each column in specified order
					[ref] $Null = $WordRangeString.AppendFormat("{0}`n", [string]::Join("`t", $OrderedValues));
				} ## end ForEach
				Write-Debug ("$(Get-Date -Format G): `t`t`tAdded '{0}' table rows" -f ($CustomObject.Count));
			} ## end CustomObject

			Default 
			{   ## Hashtable
				If($Null -eq $Columns) 
				{
					## Build the available columns from all available hashtable keys. Hopefully
					## all Hashtables have the same keys (they should for a table).
					$Columns = $Hashtable[0].Keys;
				}

				## Add the table headers from -Headers or -Columns (except when in -List(view)
				If(-not $List) 
				{
					Write-Debug ("$(Get-Date -Format G): `t`tBuilding table headers");
					If($Null -ne $Headers) 
					{ 
						[ref] $Null = $WordRangeString.AppendFormat("{0}`n", [string]::Join("`t", $Headers));
					}
					Else 
					{
						[ref] $Null = $WordRangeString.AppendFormat("{0}`n", [string]::Join("`t", $Columns));
					}
				}
                
				## Iterate through each Hashtable
				Write-Debug ("$(Get-Date -Format G): `t`tBuilding table rows");
				ForEach($Hash in $Hashtable) 
				{
					$OrderedValues = @();
					## Add each row item in the specified order
					ForEach($Column in $Columns) 
					{ 
						$OrderedValues += $Hash.$Column; 
					}
					## Use the ordered list to add each column in specified order
					[ref] $Null = $WordRangeString.AppendFormat("{0}`n", [string]::Join("`t", $OrderedValues));
				} ## end ForEach

				Write-Debug ("$(Get-Date -Format G): `t`t`tAdded '{0}' table rows" -f $Hashtable.Count);
			} ## end default
		} ## end switch

		## Create a MS Word range and set its text to our tab-delimited, concatenated string
		Write-Debug ("$(Get-Date -Format G): `t`tBuilding table range");
		$WordRange = $Script:Doc.Application.Selection.Range;
		$WordRange.Text = $WordRangeString.ToString();

		## Create hash table of named arguments to pass to the ConvertToTable method
		$ConvertToTableArguments = @{ Separator = [Microsoft.Office.Interop.Word.WdTableFieldSeparator]::wdSeparateByTabs; }

		## Negative built-in styles are not supported by the ConvertToTable method
		If($Format -ge 0) 
		{
			$ConvertToTableArguments.Add("Format", $Format);
			$ConvertToTableArguments.Add("ApplyBorders", $True);
			$ConvertToTableArguments.Add("ApplyShading", $True);
			$ConvertToTableArguments.Add("ApplyFont", $True);
			$ConvertToTableArguments.Add("ApplyColor", $True);
			If(!$List) 
			{ 
				$ConvertToTableArguments.Add("ApplyHeadingRows", $True); 
			}
			$ConvertToTableArguments.Add("ApplyLastRow", $True);
			$ConvertToTableArguments.Add("ApplyFirstColumn", $True);
			$ConvertToTableArguments.Add("ApplyLastColumn", $True);
		}

		## Invoke ConvertToTable method - with named arguments - to convert Word range to a table
		## See http://msdn.microsoft.com/en-us/library/office/aa171893(v=office.11).aspx
		Write-Debug ("$(Get-Date -Format G): `t`tConverting range to table");
		## Store the table reference just in case we need to set alternate row coloring
		$WordTable = $WordRange.GetType().InvokeMember(
			"ConvertToTable",                               # Method name
			[System.Reflection.BindingFlags]::InvokeMethod, # Flags
			$Null,                                          # Binder
			$WordRange,                                     # Target (self!)
			([Object[]]($ConvertToTableArguments.Values)),  ## Named argument values
			$Null,                                          # Modifiers
			$Null,                                          # Culture
			([String[]]($ConvertToTableArguments.Keys))     ## Named argument names
		);

		## Implement grid lines (will wipe out any existing formatting
		If($Format -lt 0) 
		{
			Write-Debug ("$(Get-Date -Format G): `t`tSetting table format");
			$WordTable.Style = $Format;
		}

		## Set the table autofit behavior
		If($AutoFit -ne -1) 
		{ 
			$WordTable.AutoFitBehavior($AutoFit); 
		}

		If(!$List)
		{
			#the next line causes the heading row to flow across page breaks
			$WordTable.Rows.First.Headingformat = $wdHeadingFormatTrue;
		}

		If(!$NoGridLines) 
		{
			$WordTable.Borders.InsideLineStyle = $wdLineStyleSingle;
			$WordTable.Borders.OutsideLineStyle = $wdLineStyleSingle;
		}
		If($NoGridLines) 
		{
			$WordTable.Borders.InsideLineStyle = $wdLineStyleNone;
			$WordTable.Borders.OutsideLineStyle = $wdLineStyleNone;
		}
		If($NoInternalGridLines) 
		{
			$WordTable.Borders.InsideLineStyle = $wdLineStyleNone;
			$WordTable.Borders.OutsideLineStyle = $wdLineStyleSingle;
		}

		Return $WordTable;

	} ## end Process
}

<#
.Synopsis
	Sets the format of one or more Word table cells
.DESCRIPTION
	This function sets the format of one or more table cells, either from a collection
	of Word COM object cell references, an individual Word COM object cell reference or
	a hashtable containing Row and Column information.

	The font name, font size, bold, italic , underline and shading values can be used.
.EXAMPLE
	SetWordCellFormat -Hashtable $Coordinates -Table $TableReference -Bold

	This example sets all text to bold that is contained within the $TableReference
	Word table, using an array of hashtables. Each hashtable contain a pair of co-
	ordinates that is used to select the required cells. Note: the hashtable must
	contain the .Row and .Column key names. For example:
	@ { Row = 7; Column = 3 } to set the cell at row 7 and column 3 to bold.
.EXAMPLE
	$RowCollection = $Table.Rows.First.Cells
	SetWordCellFormat -Collection $RowCollection -Bold -Size 10

	This example sets all text to size 8 and bold for all cells that are contained
	within the first row of the table.
	Note: the $Table.Rows.First.Cells Returns a collection of Word COM cells objects
	that are in the first table row.
.EXAMPLE
	$ColumnCollection = $Table.Columns.Item(2).Cells
	SetWordCellFormat -Collection $ColumnCollection -BackgroundColor 255

	This example sets the background (shading) of all cells in the table's second
	column to red.
	Note: the $Table.Columns.Item(2).Cells Returns a collection of Word COM cells objects
	that are in the table's second column.
.EXAMPLE
	SetWordCellFormat -Cell $Table.Cell(17,3) -Font "Tahoma" -Color 16711680

	This example sets the font to Tahoma and the text color to blue for the cell located
	in the table's 17th row and 3rd column.
	Note: the $Table.Cell(17,3) Returns a single Word COM cells object.
#>

Function SetWordCellFormat 
{
	[CmdletBinding(DefaultParameterSetName='Collection')]
	Param (
		# Word COM object cell collection reference
		[Parameter(Mandatory=$True, ValueFromPipeline=$True, ParameterSetName='Collection', Position=0)] [ValidateNotNullOrEmpty()] $Collection,
		# Word COM object individual cell reference
		[Parameter(Mandatory=$True, ParameterSetName='Cell', Position=0)] [ValidateNotNullOrEmpty()] $Cell,
		# Hashtable of cell co-ordinates
		[Parameter(Mandatory=$True, ParameterSetName='Hashtable', Position=0)] [ValidateNotNullOrEmpty()] [System.Collections.Hashtable[]] $Coordinates,
		# Word COM object table reference
		[Parameter(Mandatory=$True, ParameterSetName='Hashtable', Position=1)] [ValidateNotNullOrEmpty()] $Table,
		# Font name
		[Parameter()] [AllowNull()] [string] $Font = $Null,
		# Font color
		[Parameter()] [AllowNull()] $Color = $Null,
		# Font size
		[Parameter()] [ValidateNotNullOrEmpty()] [int] $Size = 0,
		# Cell background color
		[Parameter()] [AllowNull()] [int]$BackgroundColor = $Null,
		# Force solid background color
		[Switch] $Solid,
		[Switch] $Bold,
		[Switch] $Italic,
		[Switch] $Underline
	)

	Begin 
	{
		Write-Debug ("Using parameter set '{0}'." -f $PSCmdlet.ParameterSetName);
	}

	Process 
	{
		Switch ($PSCmdlet.ParameterSetName) 
		{
			'Collection' {
				ForEach($Cell in $Collection) 
				{
					If($Null -ne $BackgroundColor) { $Cell.Shading.BackgroundPatternColor = $BackgroundColor; }
					If($Bold) { $Cell.Range.Font.Bold = $True; }
					If($Italic) { $Cell.Range.Font.Italic = $True; }
					If($Underline) { $Cell.Range.Font.Underline = 1; }
					If($Null -ne $Font) { $Cell.Range.Font.Name = $Font; }
					If($Null -ne $Color) { $Cell.Range.Font.Color = $Color; }
					If($Size -ne 0) { $Cell.Range.Font.Size = $Size; }
					If($Solid) { $Cell.Shading.Texture = 0; } ## wdTextureNone
				} # end ForEach
			} # end Collection
			'Cell' 
			{
				If($Bold) { $Cell.Range.Font.Bold = $True; }
				If($Italic) { $Cell.Range.Font.Italic = $True; }
				If($Underline) { $Cell.Range.Font.Underline = 1; }
				If($Null -ne $Font) { $Cell.Range.Font.Name = $Font; }
				If($Null -ne $Color) { $Cell.Range.Font.Color = $Color; }
				If($Size -ne 0) { $Cell.Range.Font.Size = $Size; }
				If($Null -ne $BackgroundColor) { $Cell.Shading.BackgroundPatternColor = $BackgroundColor; }
				If($Solid) { $Cell.Shading.Texture = 0; } ## wdTextureNone
			} # end Cell
			'Hashtable' 
			{
				ForEach($Coordinate in $Coordinates) 
				{
					$Cell = $Table.Cell($Coordinate.Row, $Coordinate.Column);
					If($Bold) { $Cell.Range.Font.Bold = $True; }
					If($Italic) { $Cell.Range.Font.Italic = $True; }
					If($Underline) { $Cell.Range.Font.Underline = 1; }
					If($Null -ne $Font) { $Cell.Range.Font.Name = $Font; }
					If($Null -ne $Color) { $Cell.Range.Font.Color = $Color; }
					If($Size -ne 0) { $Cell.Range.Font.Size = $Size; }
					If($Null -ne $BackgroundColor) { $Cell.Shading.BackgroundPatternColor = $BackgroundColor; }
					If($Solid) { $Cell.Shading.Texture = 0; } ## wdTextureNone
				}
			} # end Hashtable
		} # end switch
	} # end process
}

<#
.Synopsis
	Sets alternate row colors in a Word table
.DESCRIPTION
	This function sets the format of alternate rows within a Word table using the
	specified $BackgroundColor. This function is expensive (in performance terms) as
	it recursively sets the format on alternate rows. It would be better to pick one
	of the predefined table formats (if one exists)? Obviously the more rows, the
	longer it takes :'(

	Note: this function is called by the AddWordTable function if an alternate row
	format is specified.
.EXAMPLE
	SetWordTableAlternateRowColor -Table $TableReference -BackgroundColor 255

	This example sets every-other table (starting with the first) row and sets the
	background color to red (wdColorRed).
.EXAMPLE
	SetWordTableAlternateRowColor -Table $TableReference -BackgroundColor 39423 -Seed Second

	This example sets every other table (starting with the second) row and sets the
	background color to light orange (weColorLightOrange).
#>

Function SetWordTableAlternateRowColor 
{
	[CmdletBinding()]
	Param (
		# Word COM object table reference
		[Parameter(Mandatory=$True, ValueFromPipeline=$True, Position=0)] [ValidateNotNullOrEmpty()] $Table,
		# Alternate row background color
		[Parameter(Mandatory=$True, Position=1)] [ValidateNotNull()] [int] $BackgroundColor,
		# Alternate row starting seed
		[Parameter(ValueFromPipelineByPropertyName=$True, Position=2)] [ValidateSet('First','Second')] [string] $Seed = 'First'
	)

	Process 
	{
		$StartDateTime = Get-Date;
		Write-Debug ("{0}: `t`tSetting alternate table row colors.." -f $StartDateTime);

		## Determine the row seed (only really need to check for 'Second' and default to 'First' otherwise
		If($Seed.ToLower() -eq 'second') 
		{ 
			$StartRowIndex = 2; 
		}
		Else 
		{ 
			$StartRowIndex = 1; 
		}

		For($AlternateRowIndex = $StartRowIndex; $AlternateRowIndex -lt $Table.Rows.Count; $AlternateRowIndex += 2) 
		{ 
			$Table.Rows.Item($AlternateRowIndex).Shading.BackgroundPatternColor = $BackgroundColor;
		}

		## I've put verbose calls in here we can see how expensive this functionality actually is.
		$EndDateTime = Get-Date;
		$ExecutionTime = New-TimeSpan -Start $StartDateTime -End $EndDateTime;
		Write-Debug ("{0}: `t`tDone setting alternate row style color in '{1}' seconds" -f $EndDateTime, $ExecutionTime.TotalSeconds);
	}
}
#endregion

#region general script functions
Function CheckExcelPrereq
{
	If((Test-Path  REGISTRY::HKEY_CLASSES_ROOT\Excel.Application) -eq $False)
	{
		$ErrorActionPreference = $SaveEAPreference
		Write-Host "`n`n`t`tFor the Delivery Groups Utilization option, this script directly outputs to Microsoft Excel, `n`t`tplease install Microsoft Excel or do not use the DeliveryGroupsUtilization (DGU) switch`n`n"
		AbortScript
	}

	#find out our session (usually "1" except on TS/RDC or Citrix)
	$SessionID = (Get-Process -PID $PID).SessionId
	
	#Find out if excel runsning in our session
	#[bool]$excelrunning = ((Get-Process 'Excel' -ea 0) | Where-Object {$_.SessionId -eq $SessionID}) -ne $Null
	#fix by MBS in V2.20
	[bool]$excelrunning = $null –ne ((Get-Process 'Excel' -ea 0) | Where-Object {$_.SessionId -eq $SessionID})
	
	If($excelrunning)
	{
		$ErrorActionPreference = $SaveEAPreference
		Write-Host "`n`n`tPlease close all instances of Microsoft Excel before running this report.`n`n"
		AbortScript
	}
}

Function Check-LoadedModule
#Function created by Jeff Wouters
#@JeffWouters on Twitter
#modified by Michael B. Smith to handle when the module doesn't exist on server
#modified by @andyjmorgan
#bug fixed by @schose
#bug fixed by Peter Bosen
#This Function handles all three scenarios:
#
# 1. Module is already imported into current session
# 2. Module is not already imported into current session, it does exists on the server and is imported
# 3. Module does not exist on the server

{
	Param([parameter(Mandatory = $True)][alias("Module")][string]$ModuleName)
	#$LoadedModules = Get-Module | Select-Object Name
	#following line changed at the recommendation of @andyjmorgan
	$LoadedModules = Get-Module | ForEach-Object { $_.Name.ToString() }
	#bug reported on 21-JAN-2013 by @schose 
	#the following line did not work if the citrix.grouppolicy.commands.psm1 module
	#was manually loaded from a non Default folder
	#$ModuleFound = (!$LoadedModules -like "*$ModuleName*")
	
	[string]$ModuleFound = ($LoadedModules -like "*$ModuleName*")
	If($ModuleFound -ne $ModuleName) 
	{
		$module = Import-Module -Name $ModuleName -PassThru -EA 0 4>$Null
		If($module -and $?)
		{
			# module imported properly
			Return $True
		}
		Else
		{
			# module import failed
			Return $False
		}
	}
	Else
	{
		#module already imported into current session
		Return $True
	}
}

Function Check-NeededPSSnapins
{
	Param([parameter(Mandatory = $True)][alias("Snapin")][string[]]$Snapins)

	#Function specifics
	$MissingSnapins = @()
	[bool]$FoundMissingSnapin = $False
	$LoadedSnapins = @()
	$RegisteredSnapins = @()

	#Creates arrays of strings, rather than objects, we're passing strings so this will be more robust.
	$loadedSnapins += Get-PSSnapin | ForEach-Object {$_.name}
	$registeredSnapins += Get-PSSnapin -Registered | ForEach-Object {$_.name}

	ForEach($Snapin in $Snapins)
	{
		#check if the snapin is loaded
		If(!($LoadedSnapins -like $snapin))
		{
			#Check if the snapin is missing
			If(!($RegisteredSnapins -like $Snapin))
			{
				#set the flag if it's not already
				If(!($FoundMissingSnapin))
				{
					$FoundMissingSnapin = $True
				}
				#add the entry to the list
				$MissingSnapins += $Snapin
			}
			Else
			{
				#Snapin is registered, but not loaded, loading it now:
				Write-Host "Loading Windows PowerShell snap-in: $snapin"
				Add-PSSnapin -Name $snapin -EA 0

				If(!($?))
				{
					Write-Error "
	`n`n
	Error loading snapin: $($error[0].Exception.Message)
	`n`n
	Script cannot continue.
	`n`n"
					Return $false
				}				
			}
		}
	}

	If($FoundMissingSnapin)
	{
		Write-Warning "Missing Windows PowerShell snap-ins Detected:"
		Write-Host ""
		$missingSnapins | ForEach-Object {Write-Host "`tMissing Snapin: ($_)"}
		Write-Host ""
		Return $False
	}
	Else
	{
		Return $True
	}
}

Function SaveandCloseDocumentandShutdownWord
{
	#bug fix 1-Apr-2014
	#reset Grammar and Spelling options back to their original settings
	$Script:Word.Options.CheckGrammarAsYouType = $Script:CurrentGrammarOption
	$Script:Word.Options.CheckSpellingAsYouType = $Script:CurrentSpellingOption

	Write-Verbose "$(Get-Date -Format G): Save and Close document and Shutdown Word"
	If($Script:WordVersion -eq $wdWord2010)
	{
		#the $saveFormat below passes StrictMode 2
		#I found this at the following two links
		#http://blogs.technet.com/b/bshukla/archive/2011/09/27/3347395.aspx
		#http://msdn.microsoft.com/en-us/library/microsoft.office.interop.word.wdsaveformat(v=office.14).aspx
		If($PDF)
		{
			Write-Verbose "$(Get-Date -Format G): Saving as DOCX file first before saving to PDF"
		}
		Else
		{
			Write-Verbose "$(Get-Date -Format G): Saving DOCX file"
		}
		If($AddDateTime)
		{
			$Script:FileName1 += "_$(Get-Date -f yyyy-MM-dd_HHmm).docx"
			If($PDF)
			{
				$Script:FileName2 += "_$(Get-Date -f yyyy-MM-dd_HHmm).pdf"
			}
		}
		Write-Verbose "$(Get-Date -Format G): Running $($Script:WordProduct) and detected operating system $($Script:RunningOS)"
		$saveFormat = [Enum]::Parse([Microsoft.Office.Interop.Word.WdSaveFormat], "wdFormatDocumentDefault")
		$Script:Doc.SaveAs([REF]$Script:FileName1, [ref]$SaveFormat)
		If($PDF)
		{
			Write-Verbose "$(Get-Date -Format G): Now saving as PDF"
			$saveFormat = [Enum]::Parse([Microsoft.Office.Interop.Word.WdSaveFormat], "wdFormatPDF")
			$Script:Doc.SaveAs([REF]$Script:FileName2, [ref]$saveFormat)
		}
	}
	ElseIf($Script:WordVersion -eq $wdWord2013 -or $Script:WordVersion -eq $wdWord2016)
	{
		If($PDF)
		{
			Write-Verbose "$(Get-Date -Format G): Saving as DOCX file first before saving to PDF"
		}
		Else
		{
			Write-Verbose "$(Get-Date -Format G): Saving DOCX file"
		}
		If($AddDateTime)
		{
			$Script:FileName1 += "_$(Get-Date -f yyyy-MM-dd_HHmm).docx"
			If($PDF)
			{
				$Script:FileName2 += "_$(Get-Date -f yyyy-MM-dd_HHmm).pdf"
			}
		}
		Write-Verbose "$(Get-Date -Format G): Running $($Script:WordProduct) and detected operating system $($Script:RunningOS)"
		$Script:Doc.SaveAs2([REF]$Script:FileName1, [ref]$wdFormatDocumentDefault)
		If($PDF)
		{
			Write-Verbose "$(Get-Date -Format G): Now saving as PDF"
			$Script:Doc.SaveAs([REF]$Script:FileName2, [ref]$wdFormatPDF)
		}
	}

	Write-Verbose "$(Get-Date -Format G): Closing Word"
	$Script:Doc.Close()
	$Script:Word.Quit()
	Write-Verbose "$(Get-Date -Format G): System Cleanup"
	[System.Runtime.Interopservices.Marshal]::ReleaseComObject($Script:Word) | Out-Null
	If(Test-Path variable:global:word)
	{
		Remove-Variable -Name word -Scope Global 4>$Null
	}
	$SaveFormat = $Null
	[gc]::collect() 
	[gc]::WaitForPendingFinalizers()
	
	#is the winword Process still running? kill it

	#find out our session (usually "1" except on TS/RDC or Citrix)
	$SessionID = (Get-Process -PID $PID).SessionId

	#Find out if winword running in our session
	$wordprocess = ((Get-Process 'WinWord' -ea 0) | Where-Object {$_.SessionId -eq $SessionID}) | Select-Object -Property Id 
	If( $wordprocess -and $wordprocess.Id -gt 0)
	{
		Write-Verbose "$(Get-Date -Format G): WinWord Process is still running. Attempting to stop WinWord Process # $($wordprocess.Id)"
		Stop-Process $wordprocess.Id -EA 0
	}
}

Function SaveandCloseTextDocument
{
	If($AddDateTime)
	{
		$Script:FileName1 += "_$(Get-Date -f yyyy-MM-dd_HHmm).txt"
	}

	#V2.23 - switch to using a StringBuilder for $global:Output
	Write-Verbose "$(Get-Date -Format G): Saving Text file"
	Line 0 ""
	Line 0 "Report Complete"
	Write-Output $global:Output.ToString() | Out-File $Script:Filename1 4>$Null
}

Function SaveandCloseHTMLDocument
{
	Write-Verbose "$(Get-Date -Format G): Saving HTML file"
	WriteHTMLLine 0 0 ""
	WriteHTMLLine 0 0 "Report Complete"
	Out-File -FilePath $Script:FileName1 -Append -InputObject "<p></p></body></html>" 4>$Null
}

Function SetFileName1andFileName2
{
	Param([string]$OutputFileName)
	
	#set $Script:Filename1 and $Script:Filename2 with no file extension
	If($AddDateTime)
	{
		[string]$Script:FileName1 = "$($Script:pwdpath)\$($OutputFileName)"
		If($PDF)
		{
			[string]$Script:FileName2 = "$($Script:pwdpath)\$($OutputFileName)"
		}
	}

	If($MSWord -or $PDF)
	{
		CheckWordPreReq
		
		If($DeliveryGroupsUtilization)
		{
			CheckExcelPreReq
		}

		If(!$AddDateTime)
		{
			[string]$Script:FileName1 = "$($Script:pwdpath)\$($OutputFileName).docx"
			If($PDF)
			{
				[string]$Script:FileName2 = "$($Script:pwdpath)\$($OutputFileName).pdf"
			}
		}

		SetupWord
	}
	ElseIf($Text)
	{
		If(!$AddDateTime)
		{
			[string]$Script:FileName1 = "$($Script:pwdpath)\$($OutputFileName).txt"
		}
		ShowScriptOptions
	}
	ElseIf($HTML)
	{
		If(!$AddDateTime)
		{
			[string]$Script:FileName1 = "$($Script:pwdpath)\$($OutputFileName).html"
		}
		SetupHTML
		ShowScriptOptions
	}
}

Function OutputReportFooter
{
	<#
	Report Footer
		Report information:
			Created with: <Script Name> - Release Date: <Script Release Date>
			Script version: <Script Version>
			Started on <Date Time in Local Format>
			Elapsed time: nn days, nn hours, nn minutes, nn.nn seconds
			Ran from domain <Domain Name> by user <Username>
			Ran from the folder <Folder Name>

	Script Name and Script Release date are script-specific variables.
	Script version is a script variable.
	Start Date Time in Local Format is a script variable.
	Domain Name is $env:USERDNSDOMAIN.
	Username is $env:USERNAME.
	Folder Name is a script variable.
	#>

	$runtime = $(Get-Date) - $Script:StartTime
	$Str = [string]::format("{0} days, {1} hours, {2} minutes, {3}.{4} seconds",
		$runtime.Days,
		$runtime.Hours,
		$runtime.Minutes,
		$runtime.Seconds,
		$runtime.Milliseconds)

	If($MSWORD -or $PDF)
	{
		$Script:selection.InsertNewPage()
		WriteWordLine 1 0 "Report Footer"
		WriteWordLine 2 0 "Report Information:"
		WriteWordLine 0 1 "Created with: $Script:ScriptName - Release Date: $Script:ReleaseDate"
		WriteWordLine 0 1 "Script version: $Script:MyVersion"
		WriteWordLine 0 1 "Started on $Script:StartTime"
		WriteWordLine 0 1 "Elapsed time: $Str"
		WriteWordLine 0 1 "Ran from domain $env:USERDNSDOMAIN by user $env:USERNAME"
		WriteWordLine 0 1 "Ran from the folder $Script:pwdpath"
	}
	If($Text)
	{
		Line 0 "///  Report Footer  \\\"
		Line 1 "Report Information:"
		Line 2 "Created with: $Script:ScriptName - Release Date: $Script:ReleaseDate"
		Line 2 "Script version: $Script:MyVersion"
		Line 2 "Started on $Script:StartTime"
		Line 2 "Elapsed time: $Str"
		Line 2 "Ran from domain $env:USERDNSDOMAIN by user $env:USERNAME"
		Line 2 "Ran from the folder $Script:pwdpath"
	}
	If($HTML)
	{
		WriteHTMLLine 1 0 "///&nbsp;&nbsp;Report Footer&nbsp;&nbsp;\\\"
		WriteHTMLLine 2 0 "Report Information:"
		WriteHTMLLine 0 1 "Created with: $Script:ScriptName - Release Date: $Script:ReleaseDate"
		WriteHTMLLine 0 1 "Script version: $Script:MyVersion"
		WriteHTMLLine 0 1 "Started on $Script:StartTime"
		WriteHTMLLine 0 1 "Elapsed time: $Str"
		WriteHTMLLine 0 1 "Ran from domain $env:USERDNSDOMAIN by user $env:USERNAME"
		WriteHTMLLine 0 1 "Ran from the folder $Script:pwdpath"
	}
}

Function ProcessDocumentOutput
{
	If($MSWORD -or $PDF)
	{
		SaveandCloseDocumentandShutdownWord
	}
	ElseIf($Text)
	{
		SaveandCloseTextDocument
	}
	ElseIf($HTML)
	{
		SaveandCloseHTMLDocument
	}

	$GotFile = $False

	If($PDF)
	{
		If(Test-Path "$($Script:FileName2)")
		{
			Write-Verbose "$(Get-Date -Format G): $($Script:FileName2) is ready for use"
			$GotFile = $True
		}
		Else
		{
			Write-Warning "$(Get-Date -Format G): Unable to save the output file, $($Script:FileName2)"
			Write-Error "Unable to save the output file, $($Script:FileName2)"
		}
	}
	Else
	{
		If(Test-Path "$($Script:FileName1)")
		{
			Write-Verbose "$(Get-Date -Format G): $($Script:FileName1) is ready for use"
			$GotFile = $True
		}
		Else
		{
			Write-Warning "$(Get-Date -Format G): Unable to save the output file, $($Script:FileName1)"
			Write-Error "Unable to save the output file, $($Script:FileName1)"
		}
	}
	
	#email output file if requested
	If($GotFile -and ![System.String]::IsNullOrEmpty( $SmtpServer ))
	{
		If($PDF)
		{
			$emailAttachment = $Script:FileName2
		}
		Else
		{
			$emailAttachment = $Script:FileName1
		}
		SendEmail $emailAttachment
	}
}

Function ShowScriptOptions
{
	Write-Verbose "$(Get-Date -Format G): "
	Write-Verbose "$(Get-Date -Format G): "
	Write-Verbose "$(Get-Date -Format G): Add DateTime       : $($AddDateTime)"
	Write-Verbose "$(Get-Date -Format G): AdminAddress       : $($AdminAddress)"
	Write-Verbose "$(Get-Date -Format G): Administrators     : $($Administrators)"
	Write-Verbose "$(Get-Date -Format G): Applications       : $($Applications)"
	Write-Verbose "$(Get-Date -Format G): BrokerRegistryKeys : $($BrokerRegistryKeys)"
	Write-Verbose "$(Get-Date -Format G): Company Name       : $($Script:CoName)"
	Write-Verbose "$(Get-Date -Format G): Company Address    : $($CompanyAddress)"
	Write-Verbose "$(Get-Date -Format G): Company Email      : $($CompanyEmail)"
	Write-Verbose "$(Get-Date -Format G): Company Fax        : $($CompanyFax)"
	Write-Verbose "$(Get-Date -Format G): Company Phone      : $($CompanyPhone)"
	Write-Verbose "$(Get-Date -Format G): Cover Page         : $($CoverPage)"
	Write-Verbose "$(Get-Date -Format G): Controllers        : $($Controllers)"
	Write-Verbose "$(Get-Date -Format G): CSV                : $($CSV)"
	Write-Verbose "$(Get-Date -Format G): Dev                : $($Dev)"
	Write-Verbose "$(Get-Date -Format G): DeliveryGroups     : $($DeliveryGroups)"
	If($Dev)
	{
		Write-Verbose "$(Get-Date -Format G): DevErrorFile       : $($Script:DevErrorFile)"
	}
	Write-Verbose "$(Get-Date -Format G): DGUtilization      : $($DeliveryGroupsUtilization)"
	Write-Verbose "$(Get-Date -Format G): Filename1          : $($Script:filename1)"
	If($PDF)
	{
		Write-Verbose "$(Get-Date -Format G): Filename2          : $($Script:Filename2)"
	}
	Write-Verbose "$(Get-Date -Format G): Folder             : $($Script:pwdpath)" #fixed in 2.23
	Write-Verbose "$(Get-Date -Format G): From               : $($From)"
	Write-Verbose "$(Get-Date -Format G): Hosting            : $($Hosting)"
	Write-Verbose "$(Get-Date -Format G): HW Inventory       : $($Hardware)"
	Write-Verbose "$(Get-Date -Format G): Log                : $($Log)"
	Write-Verbose "$(Get-Date -Format G): Logging            : $($Logging)"
	If($Logging)
	{
		Write-Verbose "$(Get-Date -Format G):    Start Date      : $($StartDate)"
		Write-Verbose "$(Get-Date -Format G):    End Date        : $($EndDate)"
	}
	Write-Verbose "$(Get-Date -Format G): MachineCatalogs    : $($MachineCatalogs)"
	Write-Verbose "$(Get-Date -Format G): MaxDetail          : $($MaxDetails)"
	Write-Verbose "$(Get-Date -Format G): NoADPolicies       : $($NoADPolicies)"
	Write-Verbose "$(Get-Date -Format G): NoPolicies         : $($NoPolicies)"
	Write-Verbose "$(Get-Date -Format G): Policies           : $($Policies)"
	Write-Verbose "$(Get-Date -Format G): Report Footer      : $ReportFooter"
	Write-Verbose "$(Get-Date -Format G): Save As PDF        : $($PDF)"
	Write-Verbose "$(Get-Date -Format G): Save As HTML       : $($HTML)"
	Write-Verbose "$(Get-Date -Format G): Save As TEXT       : $($TEXT)"
	Write-Verbose "$(Get-Date -Format G): Save As WORD       : $($MSWORD)"
	Write-Verbose "$(Get-Date -Format G): ScriptInfo         : $($ScriptInfo)"
	Write-Verbose "$(Get-Date -Format G): Section            : $($Section)"
	Write-Verbose "$(Get-Date -Format G): Site Name          : $($XDSiteName)"
	Write-Verbose "$(Get-Date -Format G): Smtp Port          : $($SmtpPort)"
	Write-Verbose "$(Get-Date -Format G): Smtp Server        : $($SmtpServer)"
	Write-Verbose "$(Get-Date -Format G): StoreFront         : $($StoreFront)"
	Write-Verbose "$(Get-Date -Format G): Title              : $($Script:Title)"
	Write-Verbose "$(Get-Date -Format G): To                 : $($To)"
	Write-Verbose "$(Get-Date -Format G): Use SSL            : $($UseSSL)"
	Write-Verbose "$(Get-Date -Format G): Username           : $($UserName)"
	Write-Verbose "$(Get-Date -Format G): VDA Registry Keys  : $($VDARegistryKeys)"
	Write-Verbose "$(Get-Date -Format G): XA/XD Version      : $($Script:XDSiteVersion)"
	Write-Verbose "$(Get-Date -Format G): "
	Write-Verbose "$(Get-Date -Format G): OS Detected        : $($Script:RunningOS)"
	Write-Verbose "$(Get-Date -Format G): PoSH version       : $($Host.Version)"
	Write-Verbose "$(Get-Date -Format G): PSCulture          : $($PSCulture)"
	Write-Verbose "$(Get-Date -Format G): PSUICulture        : $($PSUICulture)"
	If($MSWORD -or $PDF)
	{
		Write-Verbose "$(Get-Date -Format G): Word language      : $($Script:WordLanguageValue)"
		Write-Verbose "$(Get-Date -Format G): Word version       : $($Script:WordProduct)"
	}
	Write-Verbose "$(Get-Date -Format G): "
	Write-Verbose "$(Get-Date -Format G): Script start       : $($Script:StartTime)"
	Write-Verbose "$(Get-Date -Format G): "
	Write-Verbose "$(Get-Date -Format G): "
}

Function OutputWarning
{
	Param([string] $txt)
	Write-Warning $txt
	If($MSWord -or $PDF)
	{
		WriteWordLine 0 1 $txt
		WriteWordLIne 0 0 ""
	}
	ElseIf($Text)
	{
		Line 1 $txt
		Line 0 ""
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 0 1 $txt
	}
}

Function OutputNotice
{
	Param([string] $txt)
	#Write-Host $txt -Foreground White
	If($MSWord -or $PDF)
	{
		WriteWordLine 0 0 $txt
		WriteWordLIne 0 0 ""
	}
	If($Text)
	{
		Line 0 $txt
		Line 0 ""
	}
	If($HTML)
	{
		WriteHTMLLine 0 0 $txt
	}
}

Function OutputAdminsForDetails
{
	Param([object] $Admins)
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 4 0 "Administrators"
		## Create an array of hashtables to store our admins
		[System.Collections.Hashtable[]] $AdminsWordTable = @();
		## Seed the row index from the second row
	}
	ElseIf($Text)
	{
		Line 0 "Administrators"
		Line 0 ""
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 4 0 "Administrators"
		$rowdata = @()
	}
	
	ForEach($Admin in $Admins)
	{
		$Tmp = ""
		If($Admin.Enabled)
		{
			$Tmp = "Enabled"
		}
		Else
		{
			$Tmp = "Disabled"
		}
		
		If($MSWord -or $PDF)
		{
			$AdminsWordTable += @{ 
			AdminName = $Admin.Name;
			Role = $Admin.Rights[0].RoleName;
			Status = $Tmp;
			}
		}
		ElseIf($Text)
		{
			Line 1 "Administrator Name`t: " $Admin.Name
			Line 1 "Role`t`t`t: " $Admin.Rights[0].RoleName
			Line 1 "Status`t`t`t: " $tmp
			Line 0 ""
		}
		ElseIf($HTML)
		{
			$rowdata += @(,(
			$Admin.Name,$htmlwhite,
			$Admin.Rights[0].RoleName,$htmlwhite,
			$tmp,$htmlwhite))
		}
	}
	
	If($MSWord -or $PDF)
	{
		If($AdminsWordTable.Count -eq 0)
		{
			$AdminsWordTable += @{ 
			AdminName = "No admins found";
			Role = "N/A";
			Status = "N/A";
			}
		}

		$Table = AddWordTable -Hashtable $AdminsWordTable `
		-Columns AdminName, Role, Status `
		-Headers "Administrator Name", "Role", "Status" `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 225;
		$Table.Columns.Item(2).Width = 200;
		$Table.Columns.Item(3).Width = 60;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	ElseIf($Text)
	{
		If($Admins.Count -eq 0)
		{
			Line 0 "No Admins found"
		}
	}
	ElseIf($HTML)
	{
		If($rowdata.Count -eq 0)
		{
			$rowdata += @(,(
			"No admins found",$htmlwhite,
			"N/A",$htmlwhite,
			"N/A",$htmlwhite))
		}
		
		$columnHeaders = @(
		'Administrator Name',($global:htmlsb),
		'Role',($global:htmlsb),
		'Status',($global:htmlsb))

		$msg = ""
		$columnWidths = @("225","200","60")
		FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "485"
	}
}

Function TranscriptLogging
{
	If($Log) 
	{
		try 
		{
			If($Script:StartLog -eq $false)
			{
				Start-Transcript -Path $Script:LogPath -Force -Verbose:$false | Out-Null
			}
			Else
			{
				Start-Transcript -Path $Script:LogPath -Append -Verbose:$false | Out-Null
			}
			Write-Verbose "$(Get-Date -Format G): Transcript/log started at $Script:LogPath"
			$Script:StartLog = $true
		} 
		catch 
		{
			Write-Verbose "$(Get-Date -Format G): Transcript/log failed at $Script:LogPath"
			$Script:StartLog = $false
		}
	}
}

Function Get-IPAddress
{
	#V2.15 added new function
	Param([string]$ComputerName)
	
	$IPAddress = "Unable to determine"
	
	Try
	{
		$IP = Test-Connection -ComputerName $ComputerName -Count 1 | Select-Object IPV4Address
	}
	
	Catch
	{
		$IP = "Unable to resolve IP address" #changed from $Null in V2.21
	}

	If($? -and $Null -ne $IP)
	{
		$IPAddress = $IP.IPV4Address.IPAddressToString
	}
	
	Return $IPAddress
}
#endregion

#region email function
Function SendEmail
{
	Param([array]$Attachments)
	Write-Verbose "$(Get-Date -Format G): Prepare to email"

	$emailAttachment = $Attachments
	$emailSubject = $Script:Title
	$emailBody = @"
Hello, <br />
<br />
$Script:Title is attached.

"@ 

	If($Dev)
	{
		Out-File -FilePath $Script:DevErrorFile -InputObject $error 4>$Null
	}

	$error.Clear()
	
	If($From -Like "anonymous@*")
	{
		#https://serverfault.com/questions/543052/sending-unauthenticated-mail-through-ms-exchange-with-powershell-windows-server
		$anonUsername = "anonymous"
		$anonPassword = ConvertTo-SecureString -String "anonymous" -AsPlainText -Force
		$anonCredentials = New-Object System.Management.Automation.PSCredential($anonUsername,$anonPassword)

		If($UseSSL)
		{
			Send-MailMessage -Attachments $emailAttachment -Body $emailBody -BodyAsHtml -From $From `
			-Port $SmtpPort -SmtpServer $SmtpServer -Subject $emailSubject -To $To `
			-UseSSL -credential $anonCredentials *>$Null 
		}
		Else
		{
			Send-MailMessage -Attachments $emailAttachment -Body $emailBody -BodyAsHtml -From $From `
			-Port $SmtpPort -SmtpServer $SmtpServer -Subject $emailSubject -To $To `
			-credential $anonCredentials *>$Null 
		}
		
		If($?)
		{
			Write-Verbose "$(Get-Date -Format G): Email successfully sent using anonymous credentials"
		}
		ElseIf(!$?)
		{
			$e = $error[0]

			Write-Verbose "$(Get-Date -Format G): Email was not sent:"
			Write-Warning "$(Get-Date -Format G): Exception: $e.Exception" 
		}
	}
	Else
	{
		If($UseSSL)
		{
			Write-Verbose "$(Get-Date -Format G): Trying to send email using current user's credentials with SSL"
			Send-MailMessage -Attachments $emailAttachment -Body $emailBody -BodyAsHtml -From $From `
			-Port $SmtpPort -SmtpServer $SmtpServer -Subject $emailSubject -To $To `
			-UseSSL *>$Null
		}
		Else
		{
			Write-Verbose  "$(Get-Date -Format G): Trying to send email using current user's credentials without SSL"
			Send-MailMessage -Attachments $emailAttachment -Body $emailBody -BodyAsHtml -From $From `
			-Port $SmtpPort -SmtpServer $SmtpServer -Subject $emailSubject -To $To *>$Null
		}

		If(!$?)
		{
			$e = $error[0]
			
			#error 5.7.57 is O365 and error 5.7.0 is gmail
			If($null -ne $e.Exception -and $e.Exception.ToString().Contains("5.7"))
			{
				#The server response was: 5.7.xx SMTP; Client was not authenticated to send anonymous mail during MAIL FROM
				Write-Verbose "$(Get-Date -Format G): Current user's credentials failed. Ask for usable credentials."

				If($Dev)
				{
					Out-File -FilePath $Script:DevErrorFile -InputObject $error -Append 4>$Null
				}

				$error.Clear()

				$emailCredentials = Get-Credential -UserName $From -Message "Enter the password to send email"

				If($UseSSL)
				{
					Send-MailMessage -Attachments $emailAttachment -Body $emailBody -BodyAsHtml -From $From `
					-Port $SmtpPort -SmtpServer $SmtpServer -Subject $emailSubject -To $To `
					-UseSSL -credential $emailCredentials *>$Null 
				}
				Else
				{
					Send-MailMessage -Attachments $emailAttachment -Body $emailBody -BodyAsHtml -From $From `
					-Port $SmtpPort -SmtpServer $SmtpServer -Subject $emailSubject -To $To `
					-credential $emailCredentials *>$Null 
				}

				If($?)
				{
					Write-Verbose "$(Get-Date -Format G): Email successfully sent using new credentials"
				}
				ElseIf(!$?)
				{
					$e = $error[0]

					Write-Verbose "$(Get-Date -Format G): Email was not sent:"
					Write-Warning "$(Get-Date -Format G): Exception: $e.Exception" 
				}
			}
			Else
			{
				Write-Verbose "$(Get-Date -Format G): Email was not sent:"
				Write-Warning "$(Get-Date -Format G): Exception: $e.Exception" 
			}
		}
	}
}
#endregion

#region getadmins function from Citrix
Function GetAdmins
{
	Param([string]$xType="", [string]$xName="")
	
	Switch ($xType)
	{
		"ApplicationGroup" {
			$scopes = $Null

			$permissions = Get-AdminPermission @XDParams2 | `
			Where-Object { $_.MetadataMap["Citrix_ObjectType"] -eq "ApplicationGroup"} | `
			Select-Object -ExpandProperty Id

			$roles = Get-AdminRole @XDParams2 | `
			Where-Object {$_.Permissions | Where-Object { $permissions -contains $_ }} | `
			Select-Object -ExpandProperty Id

			#this is an unscoped object type as $admins is done differently than the others
			$Admins = Get-AdminAdministrator @XDParams2 | `
			Where-Object {$_.UserIdentityType -ne "Sid" -and (-not ([String]::IsNullOrEmpty($_.UserIdentityType)))} | `
			Where-Object {$_.Rights | Where-Object {$roles -contains $_.RoleId}}
		}
		"Catalog" {
			$scopes = (Get-BrokerCatalog -Name $xName @XDParams2).Scopes | `
			Select-Object -ExpandProperty ScopeId

			$permissions = Get-AdminPermission @XDParams2 | Where-Object { $_.MetadataMap["Citrix_ObjectType"] -eq "Catalog" } | `
			Select-Object -ExpandProperty Id

			$roles = Get-AdminRole @XDParams2 | `
			Where-Object {$_.Permissions | Where-Object { $permissions -contains $_ }} | `
			Select-Object -ExpandProperty Id

			$Admins = Get-AdminAdministrator @XDParams2 | `
			Where-Object {$_.UserIdentityType -ne "Sid" -and (-not ([String]::IsNullOrEmpty($_.Name)))} | `
			Where-Object {$_.Rights | `
			Where-Object {($_.ScopeId -eq [guid]::Empty -or $scopes -contains $_.ScopeId) -and $roles -contains $_.RoleId}}
		}
		"DesktopGroup" {
			$scopes = (Get-BrokerDesktopGroup -Name $xName @XDParams2).Scopes | `
			Select-Object -ExpandProperty ScopeId

			$permissions = Get-AdminPermission @XDParams2 | `
			Where-Object { $_.MetadataMap["Citrix_ObjectType"] -eq "DesktopGroup" } | `
			Select-Object -ExpandProperty Id

			$roles = Get-AdminRole @XDParams2 | `
			Where-Object {$_.Permissions | Where-Object { $permissions -contains $_ }} | `
			Select-Object -ExpandProperty Id

			$Admins = Get-AdminAdministrator @XDParams2 | `
			Where-Object {$_.UserIdentityType -ne "Sid" -and (-not ([String]::IsNullOrEmpty($_.Name)))} | `
			Where-Object {$_.Rights | `
			Where-Object {($_.ScopeId -eq [guid]::Empty -or $scopes -contains $_.ScopeId) -and $roles -contains $_.RoleId}}
		}
		"Host" {
			$scopes = Get-hypscopedobject -ObjectName $xName @XDParams2
            If($null -ne $scopes)
            {
			    $scopes = (Get-hypscopedobject -ObjectName $xName @XDParams2).ScopeId

			    $permissions = Get-AdminPermission @XDParams2 | `
			    Where-Object { $_.MetadataMap["Citrix_ObjectType"] -eq "Connection" -or `
			    $_.MetadataMap["Citrix_ObjectType"] -eq "Host"} | `
			    Select-Object -ExpandProperty Id		

			    $roles = Get-AdminRole @XDParams2 | `
			    Where-Object {$_.Permissions | Where-Object { $permissions -contains $_ }} | `
			    Select-Object -ExpandProperty Id

			    $Admins = Get-AdminAdministrator @XDParams2 | `
			    Where-Object {$_.UserIdentityType -ne "Sid" -and (-not ([String]::IsNullOrEmpty($_.Name)))} | `
			    Where-Object {$_.Rights | `
			    Where-Object {($_.ScopeId -eq [guid]::Empty -or `
			    $scopes -contains $_.ScopeId) -and $roles -contains $_.RoleId}}
            }
            Else
            {
                #work around issue of "The property 'ScopeId' cannot be found on this object. Verify that the property exists."
			    $scopes = $null

			    $permissions = Get-AdminPermission @XDParams2 | `
			    Where-Object { $_.MetadataMap["Citrix_ObjectType"] -eq "Connection" -or `
			    $_.MetadataMap["Citrix_ObjectType"] -eq "Host"} | `
			    Select-Object -ExpandProperty Id		

			    $roles = Get-AdminRole @XDParams2 | `
			    Where-Object {$_.Permissions | Where-Object { $permissions -contains $_ }} | `
			    Select-Object -ExpandProperty Id

			    $Admins = Get-AdminAdministrator @XDParams2 | `
			    Where-Object {$_.UserIdentityType -ne "Sid" -and (-not ([String]::IsNullOrEmpty($_.Name)))} | `
			    Where-Object {$_.Rights | `
			    Where-Object {($_.ScopeId -eq [guid]::Empty -or `
			    $scopes -contains $_.ScopeId) -and $roles -contains $_.RoleId}}
            }
		}
		"Storefront" {
			$scopes = $Null

			$permissions = Get-AdminPermission @XDParams2 | `
			Where-Object { $_.MetadataMap["Citrix_ObjectType"] -eq "Storefront" } | `
			Select-Object -ExpandProperty Id

			$roles = Get-AdminRole @XDParams2 | `
			Where-Object {$_.Permissions | Where-Object { $permissions -contains $_ }} | `
			Select-Object -ExpandProperty Id

			#this is an unscoped object type as $admins is done differently than the others
			$Admins = Get-AdminAdministrator @XDParams2 | `
			Where-Object {$_.UserIdentityType -ne "Sid" -and (-not ([String]::IsNullOrEmpty($_.Name)))} | `
			Where-Object {$_.Rights | `
			Where-Object {$roles -contains $_.RoleId}}
		}
	}
	
	# $scopes = (Get-BrokerCatalog -Name "XenApp 75" -adminaddress xd75 ).Scopes | Select-Object -ExpandProperty ScopeId

	# First, get all the permissions which are relevant to this object type
	# Change "Catalog" here as appropriate for the object type you're interested in
	# $permissions = Get-AdminPermission @XDParams2 | Where-Object { $_.MetadataMap["Citrix_ObjectType"] -eq "Catalog" } | Select-Object -ExpandProperty Id

	# Now, get all the roles which include at least one of those permissions
	# $roles = Get-AdminRole @XDParams2 | Where-Object {$_.Permissions | Where-Object { $permissions -contains $_ }} | Select-Object -ExpandProperty Id

	# Finally, get all administrators which have a scope/role pair which matches
	#$Admins = Get-AdminAdministrator @XDParams2 | Where-Object {
	#	$_.Rights | Where-Object {
	#		# [guid]::Empty is the GUID for the All scope
	#		# Remove the next line if you're dealing with an unscoped object type
	#		($_.ScopeId -eq [guid]::Empty -or $scopes -contains $_.ScopeId) -and
	#		$roles -contains $_.RoleId
	#	}
	#}
	#$Admins = Get-AdminAdministrator @XDParams2 | Where-Object {$_.Rights | Where-Object {($_.ScopeId -eq [guid]::Empty -or $scopes -contains $_.ScopeId) -and	$roles -contains $_.RoleId}}

	#$Admins = $Admins | Sort-Object Name
	Return ,$Admins
}
#endregion

#region Machine Catalog functions
Function ProcessMachineCatalogs
{
	Write-Verbose "$(Get-Date -Format G): Retrieving Machine Catalogs"

	$txt = "Machine Catalogs"
	If($MSWord -or $PDF)
	{
		$Selection.InsertNewPage()
		WriteWordLine 1 0 $txt
	}
	ElseIf($Text)
	{
		Line 0 $txt
		Line 0 ""
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 1 0 $txt
	}

	$AllMachineCatalogs = Get-BrokerCatalog @XDParams2 -SortBy Name 

	If($? -and $Null -ne $AllMachineCatalogs)
	{
		OutputMachines $AllMachineCatalogs
	}
	ElseIf($? -and ($Null -eq $AllMachineCatalogs))
	{
		$txt = "There are no Machine Catalogs"
		OutputNotice $txt
	}
	Else
	{
		$txt = "Unable to retrieve Machine Catalogs"
		OutputWarning $txt
	}
	Write-Verbose "$(Get-Date -Format G): "
}

Function OutputMachines
{
	Param([object]$Catalogs)
	
	Write-Verbose "$(Get-Date -Format G): `tProcessing Machine Catalogs"
	
	#add 16-jun-2015, summary table of catalogs to match what is shown in Studio
	If($MSWord -or $PDF)
	{
		[System.Collections.Hashtable[]] $WordTable = @();
	}
	ElseIf($Text)
	{
		Line 0 "                                                                              No. of   Allocated Allocation                                            "
		Line 0 "Machine Catalog                          Machine Type                         Machines Machines  Type       User Data         Provisioning Method      "
		Line 0 "======================================================================================================================================================="
		#       1234567890123456789012345678901234567890S123456789012345678901234567890123456S12345678S12345678SS1234567890S12345678901234567S1234567890123456789012345
		#                                                Single-session OS (Remote PC Access)                               On personal vDisk Machine creation services
	}
	ElseIf($HTML)
	{
		$rowdata = @()
	}

	ForEach($Catalog in $Catalogs)
	{
		$xCatalogType = ""
		$xAllocationType = ""
		$xPersistType = ""
		$xProvisioningType = ""
		
		#updated for CVAD 1909 in V2.28
		If($Catalog.MachinesArePhysical -eq $True -and $Catalog.IsRemotePC -eq $False -and $Catalog.SessionSupport -eq "SingleSession")
		{
			If($Script:XDSiteVersion -ge 7.23)
			{
				$xCatalogType = "Single-session OS"
			}
			Else
			{
				$xCatalogType = "Desktop OS"
			}
			$Script:TotalDesktopOSCatalogs++
		}
		ElseIf($Catalog.MachinesArePhysical -eq $True -and $Catalog.IsRemotePC -eq $False -and $Catalog.SessionSupport -eq "MultiSession")
		{
			If($Script:XDSiteVersion -ge 7.23)
			{
				$xCatalogType = "Multi-session OS"
			}
			Else
			{
				$xCatalogType = "Server OS"
			}
			$Script:TotalServerOSCatalogs++
		}
		ElseIf($Catalog.MachinesArePhysical -eq $False -and $Catalog.IsRemotePC -eq $False -and $Catalog.SessionSupport -eq "SingleSession")
		{
			If($Script:XDSiteVersion -ge 7.23)
			{
				$xCatalogType = "Single-session OS (Virtual)"
			}
			Else
			{
				$xCatalogType = "Desktop OS (Virtual)"
			}
			$Script:TotalDesktopOSCatalogs++
		}
		ElseIf($Catalog.MachinesArePhysical -eq $False -and $Catalog.IsRemotePC -eq $False -and $Catalog.SessionSupport -eq "MultiSession")
		{
			If($Script:XDSiteVersion -ge 7.23)
			{
				$xCatalogType = "Multi-session OS (Virtual)"
			}
			Else
			{
				$xCatalogType = "Server OS (Virtual)"
			}
			$Script:TotalServerOSCatalogs++
		}
		ElseIf($Catalog.MachinesArePhysical -eq $True -and $Catalog.IsRemotePC -eq $True)
		{
			If($Script:XDSiteVersion -ge 7.23)
			{
				$xCatalogType = "Single-session OS (Remote PC Access)"
			}
			Else
			{
				$xCatalogType = "Desktop OS (Remote PC Access)"
			}
			$Script:TotalRemotePCCatalogs++
		}
		
		Switch ($Catalog.AllocationType)
		{
			"Static"	{$xAllocationType = "Static"; Break}
			"Permanent"	{$xAllocationType = "Static"; Break}
			"Random"	{$xAllocationType = "Random"; Break}
			Default		{$xAllocationType = "Allocation type could not be determined: $($Catalog.AllocationType)"; Break}
		}
		Switch ($Catalog.PersistUserChanges)
		{
			"OnLocal" {$xPersistType = "On local disk"; Break}
			"Discard" {$xPersistType = "Discard"; Break}
			"OnPvd"   {$xPersistType = "On personal vDisk"; Break}
			Default   {$xPersistType = "User data could not be determined: $($Catalog.PersistUserChanges)"; Break}
		}
		Switch ($Catalog.ProvisioningType)
		{
			"Manual" {$xProvisioningType = "Manual"; Break}
			"PVS"    {$xProvisioningType = "Provisioning Services"; Break}
			"MCS"    {$xProvisioningType = "Machine creation services"; Break}
			Default  {$xProvisioningType = "Provisioning method could not be determined: $($Catalog.ProvisioningType)"; Break}
		}

		$Machines = @(Get-BrokerMachine @XDParams2 -CatalogName $Catalog.Name -SortBy DNSName)
		If($? -and ($Null -ne $Machines))
		{
			$NumberOfMachines = $Machines.Count
		}
		
		If($MSWord -or $PDF)
		{
			$WordTable += @{
			MachineCatalogName = $Catalog.Name; 
			MachineType = $xCatalogType; 
			NoOfMachines       = $NumberOfMachines.ToString();
			AllocatedMachines  = $Catalog.UsedCount.ToString(); 
			AllocationType = $xAllocationType;
			UserData = $xPersistType;
			ProvisioningMethod = $xProvisioningType;
			}
		}
		ElseIf($Text)
		{
			Line 0 ( "{0,-40} {1,-36} {2,8} {3,8}  {4,-10} {5,-17} {6,-25}" -f `
			$Catalog.Name, 
			$xCatalogType, 
			$NumberOfMachines.ToString(), 
			$Catalog.UsedCount.ToString(), 
			$xAllocationType, 
			$xPersistType, 
			$xProvisioningType)
		}
		ElseIf($HTML)
		{
			$rowdata += @(,(
			$Catalog.Name,$htmlwhite,
			$xCatalogType,$htmlwhite,
			$NumberOfMachines.ToString(),$htmlwhite,
			$Catalog.UsedCount.ToString(),$htmlwhite,
			$xAllocationType,$htmlwhite,
			$xPersistType,$htmlwhite,
			$xProvisioningType,$htmlwhite))
		}
	}

	If($MSWord -or $PDF)
	{
		$Table = AddWordTable -Hashtable $WordTable `
		-Columns  MachineCatalogName, MachineType, NoOfMachines, AllocatedMachines, AllocationType, UserData, ProvisioningMethod `
		-Headers  "Machine Catalog", "Machine type", "No. of machines", "Allocated machines", "Allocation Type", "User data", "Provisioning method" `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table -Size 9 -BackgroundColor $wdColorWhite
		SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 105;
		$Table.Columns.Item(2).Width = 100;
		$Table.Columns.Item(3).Width = 75;
		$Table.Columns.Item(4).Width = 50;
		$Table.Columns.Item(5).Width = 55;
		$Table.Columns.Item(6).Width = 50;
		$Table.Columns.Item(7).Width = 65;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
	}
	ElseIf($Text)
	{
		Line 0 ""
	}
	ElseIf($HTML)
	{
		$columnHeaders = @(
		'Machine Catalog',($global:htmlsb),
		'Machine type',($global:htmlsb),
		'No. of machines',($global:htmlsb),
		'Allocated machines',($global:htmlsb),
		'Allocation Type',($global:htmlsb),
		'User data',($global:htmlsb),
		'Provisioning method',($global:htmlsb)
		)

		$columnWidths = @("155","125","75","50","55","50","90")
		$msg = ""
		FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "600"
	}
	
	ForEach($Catalog in $Catalogs)
	{
		Write-Verbose "$(Get-Date -Format G): `t`tAdding Catalog $($Catalog.Name)"
		$xCatalogType = ""
		$xAllocationType = ""
		$xPersistType = ""
		$xProvisioningType = ""
		$xVDAVersion = ""
		
		#updated for CVAD 1909 in V2.28
		If($Catalog.MachinesArePhysical -eq $True -and $Catalog.IsRemotePC -eq $False -and $Catalog.SessionSupport -eq "SingleSession")
		{
			If($Script:XDSiteVersion -ge 7.23)
			{
				$xCatalogType = "Single-session OS"
			}
			Else
			{
				$xCatalogType = "Desktop OS"
			}
		}
		ElseIf($Catalog.MachinesArePhysical -eq $True -and $Catalog.IsRemotePC -eq $False -and $Catalog.SessionSupport -eq "MultiSession")
		{
			If($Script:XDSiteVersion -ge 7.23)
			{
				$xCatalogType = "Multi-session OS"
			}
			Else
			{
				$xCatalogType = "Server OS"
			}
		}
		ElseIf($Catalog.MachinesArePhysical -eq $False -and $Catalog.IsRemotePC -eq $False -and $Catalog.SessionSupport -eq "SingleSession")
		{
			If($Script:XDSiteVersion -ge 7.23)
			{
				$xCatalogType = "Single-session OS (Virtual)"
			}
			Else
			{
				$xCatalogType = "Desktop OS (Virtual)"
			}
		}
		ElseIf($Catalog.MachinesArePhysical -eq $False -and $Catalog.IsRemotePC -eq $False -and $Catalog.SessionSupport -eq "MultiSession")
		{
			If($Script:XDSiteVersion -ge 7.23)
			{
				$xCatalogType = "Multi-session OS (Virtual)"
			}
			Else
			{
				$xCatalogType = "Server OS (Virtual)"
			}
		}
		ElseIf($Catalog.MachinesArePhysical -eq $True -and $Catalog.IsRemotePC -eq $True)
		{
			If($Script:XDSiteVersion -ge 7.23)
			{
				$xCatalogType = "Single-session OS (Remote PC Access)"
			}
			Else
			{
				$xCatalogType = "Desktop OS (Remote PC Access)"
			}
		}

		Switch ($Catalog.AllocationType)
		{
			"Static"	{$xAllocationType = "Permanent"; Break}
			"Permanent"	{$xAllocationType = "Permanent"; Break}
			"Random"	{$xAllocationType = "Random"; Break}
			Default		{$xAllocationType = "Allocation type could not be determined: $($Catalog.AllocationType)"; Break}
		}
		Switch ($Catalog.PersistUserChanges)
		{
			"OnLocal" {$xPersistType = "On local disk"; Break}
			"Discard" {$xPersistType = "Discard"; Break}
			"OnPvd"   {$xPersistType = "On personal vDisk"; Break}
			Default   {$xPersistType = "User data could not be determined: $($Catalog.PersistUserChanges)"; Break}
		}
		Switch ($Catalog.ProvisioningType)
		{
			"Manual" {$xProvisioningType = "Manual"; Break}
			"PVS"    {$xProvisioningType = "Provisioning Services"; Break}
			"MCS"    {$xProvisioningType = "Machine creation services"; Break}
			Default  {$xProvisioningType = "Provisioning method could not be determined: $($Catalog.ProvisioningType)"; Break}
		}
		Switch ($Catalog.MinimumFunctionalLevel)
		{
			"L5" 	{$xVDAVersion = "5.6 FP1 (Windows XP and Windows Vista)"; Break}
			"L7"	{$xVDAVersion = "7.0 (or newer)"; Break}
			"L7_6"	{$xVDAVersion = "7.6 (or newer)"; Break}
			"L7_7"	{$xVDAVersion = "7.7 (or newer)"; Break}
			"L7_8"	{$xVDAVersion = "7.8 (or newer)"; Break}
			"L7_9"	{$xVDAVersion = "7.9 (or newer)"; Break}
			"L7_20"	{$xVDAVersion = "1811 (or newer)"; Break}
			"L7_25"	{$xVDAVersion = "2003 (or newer)"; Break}
			Default {$xVDAVersion = "Unable to determine VDA version: $($Catalog.MinimumFunctionalLevel)"; Break}
		}

		If($Catalog.ProvisioningType -eq "Manual" -and $Catalog.IsRemotePC -eq $True)
		{
			$RemotePCAccounts = Get-BrokerRemotePCAccount @XDParams2 -CatalogUid $Catalog.Uid
			
			If(!$?)
			{
				$RemotePCOU = "Unable to retrieve"
				$RemotePCSubOU = "Unable to retrieve"
			}
			ElseIf($? -and $Null -eq $RemotePCAccounts)
			{
				$RemotePCOU = "No RemotePC OU configured"
				$RemotePCSubOU = "N/A"
			}
			ElseIf($? -and $Null -ne $RemotePCAccounts)
			{
				#$RemotePCOU = $Results.OU
				#$RemotePCSubOU = $Results.AllowSubfolderMatches.ToString()
				#Handled later
			}
		}
		
		$MachineData = $Null
		$Machines = @(Get-BrokerMachine @XDParams2 -CatalogName $Catalog.Name -SortBy DNSName)
		If($? -and ($Null -ne $Machines))
		{
			$NumberOfMachines = $Machines.Count
			
			#V2.10 don't process Manually provisioned
			#there is no $Catalog.ProvisioningSchemeId for manually provisioned catalogs or ones based on PVS, only MCS
			If($Catalog.ProvisioningType -eq "MCS")
			{
				If($null -ne $Catalog.ProvisioningSchemeId)
				{
					$MachineData = Get-ProvScheme -ProvisioningSchemeUid $Catalog.ProvisioningSchemeId @XDParams1
				}
				Else
				{
					$MachineData = $Null
				}
				
				If($? -and $Null -ne $MachineData)
				{
					$tmp1 = $MachineData.MasterImageVM.Split("\")
					$tmp2 = $tmp1[$tmp1.count -1]
					$tmp3 = $tmp2.Split(".")
					$xDiskImage = $tmp3[0]

					#28-sep-2016 add the VM the catalog is based on
					$MasterVM = ""
					ForEach($Item in $tmp1)
					{
						 #.template for Nutanix and AWS
						 #.manageddisk for Azure
						 #.snapshot from sample data from a customer
						If(($Item.EndsWith(".vm")) -or ($Item.EndsWith(".template")) -or ($Item.EndsWith(".manageddisk")) -or ($Item.EndsWith(".snapshot")))
						{
							$MasterVM = $Item
						}
					}
					
					If(($Catalog.MinimumFunctionalLevel -eq "L7_9" -or 
					    $Catalog.MinimumFunctionalLevel -eq "L7_20" -or 
						$Catalog.MinimumFunctionalLevel -eq "L7_25") -and 
					(($xAllocationType -eq "Random") -or 
					($xAllocationType -eq "Permanent" -and $xPersistType -eq "Discard" )))
					{
						$TempDiskCacheSize = $MachineData.WriteBackCacheDiskSize
						$TempMemoryCacheSize = $MachineData.WriteBackCacheMemorySize
					}
					
					If(($Catalog.MinimumFunctionalLevel -eq "L7_9" -or 
					    $Catalog.MinimumFunctionalLevel -eq "L7_20" -or 
						$Catalog.MinimumFunctionalLevel -eq "L7_25") -and 
					($xAllocationType -eq "Permanent" -and $xPersistType -eq "On local disk" ) -and 
					((Get-ConfigEnabledFeature @XDParams1) -contains "DedicatedFullDiskClone"))
					{
						If($MachineData.UseFullDiskCloneProvisioning -eq $True)
						{
							$VMCopyMode = "Full Copy"
						}
						Else
						{
							$VMCopyMode = "Fast Clone"
						}
					}
					
					If($xAllocationType -eq "Permanent" -and $xPersistType -eq "On personal vDisk" )
					{
						$xPvDDriveLetter = $MachineData.PersonalVDiskDriveLetter
						$xPvDSize = $MachineData.PersonalVDiskDriveSize
					}

				}
				Else
				{
					$xDiskImage = "Unable to retrieve details"
					$MasterVM = "Unable to retrieve details"
				}
			}
			Else
			{
				$xDiskImage = "No details for manually or PVS provisioned machines"
			}
		}
		Else
		{
			Write-Host "Unable to retrieve details for Machine Catalog $($Catalog.Name)" -Foreground White
		}
		
		#V2.17 add getting the Account Identity Pool data
		If($Catalog.ProvisioningType -eq "MCS")
		{
			$IdentityPool = @(Get-AcctIdentityPool @XDParams2 -IdentityPoolName $Catalog.Name)
			
			If($? -and $Null -ne $IdentityPool)
			{
				If($IdentityPool.NamingSchemeType -eq "None")
				{
					$IdentityDomain = "N/A"
					$IdentityNamingScheme = "Use existing AD accounts"
					$IdentityNamingSchemeType = "None"
					$IdentityOU = "N/A"
				}
				Else
				{
					$IdentityDomain = $IdentityPool.Domain
					$IdentityNamingScheme = $IdentityPool.NamingScheme
					$IdentityNamingSchemeType = $IdentityPool.NamingSchemeType
					$IdentityOU = $IdentityPool.OU
				}
			}
			Else
			{
				$IdentityDomain = "Not Found"
				$IdentityNamingScheme = "Not Found"
				$IdentityNamingSchemeType = "Not Found"
				$IdentityOU = "Not Found"
			}
		}
		
		If($MSWord -or $PDF)
		{
			$Selection.InsertNewPage()
			WriteWordLine 2 0 "Machine Catalog: $($Catalog.Name)"
			[System.Collections.Hashtable[]] $CatalogInformation = @()
			
			If($Catalog.ProvisioningType -eq "MCS")
			{
				$CatalogInformation += @{Data = "Description"; Value = $Catalog.Description; }
				$CatalogInformation += @{Data = "Machine type"; Value = $xCatalogType; }
				$CatalogInformation += @{Data = "No. of machines"; Value = $NumberOfMachines.ToString(); }
				$CatalogInformation += @{Data = "Allocated machines"; Value = $Catalog.UsedCount.ToString(); }
				$CatalogInformation += @{Data = "Allocation type"; Value = $xAllocationType; }
				$CatalogInformation += @{Data = "User data"; Value = $xPersistType; }
				$CatalogInformation += @{Data = "Provisioning method"; Value = $xProvisioningType; }
				#V2.17 add identity pool data
				$CatalogInformation += @{Data = "Account naming scheme"; Value = $IdentityNamingScheme; }
				$CatalogInformation += @{Data = "Naming scheme type"; Value = $IdentityNamingSchemeType; }
				$CatalogInformation += @{Data = "AD Domain"; Value = $IdentityDomain; }
				$CatalogInformation += @{Data = "AD Location"; Value = $IdentityOU; }
				#end of identity pool data
				$CatalogInformation += @{Data = "Set to VDA version"; Value = $xVDAVersion; }
				If($Null -ne $MachineData)
				{
					If( $MachineData.PSObject.Properties[ 'HostingUnitName' ] )
					{
						## GRL - The property 'HostingUnitName' cannot be found on this object. Verify that the property exists
						$CatalogInformation += @{Data = "Resources"; Value = $MachineData.HostingUnitName; }
					}
				}
				#V2.14, change from Get-ConfigServiceAddedCapability -contains "ZonesSupport" to validObject
				If(validObject $Catalog ZoneName)
				{
					$CatalogInformation += @{Data = "Zone"; Value = $Catalog.ZoneName; }
				}

				If($Null -ne $MachineData)
				{
					$CatalogInformation += @{Data = "Master VM"; Value = $MasterVM; }
					$CatalogInformation += @{Data = "Disk Image"; Value = $xDiskImage; }
					$CatalogInformation += @{Data = "Virtual CPUs"; Value = $MachineData.CpuCount; }
					$CatalogInformation += @{Data = "Memory"; Value = "$($MachineData.MemoryMB) MB"; }
					$CatalogInformation += @{Data = "Hard disk"; Value = "$($MachineData.DiskSize) GB"; }
					If($xAllocationType -eq "Permanent" -and $xPersistType -eq "On personal vDisk" )
					{
						$CatalogInformation += @{Data = "Personal vDisk size"; Value = "$($xPvDSize) GB"; }
						$CatalogInformation += @{Data = "Personal vDisk drive letter"; Value = $xPvDDriveLetter; }
					}
				}
				ElseIf($Null -eq $MachineData)
				{
					$CatalogInformation += @{Data = "Master VM"; Value = $MasterVM; }
					$CatalogInformation += @{Data = "Disk Image"; Value = $xDiskImage; }
					$CatalogInformation += @{Data = "Virtual CPUs"; Value = "Unable to retrieve details"; }
					$CatalogInformation += @{Data = "Memory"; Value = "Unable to retrieve details"; }
					$CatalogInformation += @{Data = "Hard disk"; Value = "Unable to retrieve details"; }
					If($xAllocationType -eq "Permanent" -and $xPersistType -eq "On personal vDisk" )
					{
						$CatalogInformation += @{Data = "Personal vDisk size"; Value = "Unable to retrieve details"; }
						$CatalogInformation += @{Data = "Personal vDisk drive letter"; Value = "Unable to retrieve details"; }
					}
				}
			
				If(($Catalog.MinimumFunctionalLevel -eq "L7_9" -or 
					$Catalog.MinimumFunctionalLevel -eq "L7_20" -or 
					$Catalog.MinimumFunctionalLevel -eq "L7_25") -and 
				(($xAllocationType -eq "Random") -or 
				($xAllocationType -eq "Permanent" -and $xPersistType -eq "Discard" )))
				{
					$CatalogInformation += @{Data = "Temporary memory cache size"; Value = "$($TempMemoryCacheSize) MB"; }
					$CatalogInformation += @{Data = "Temporary disk cache size"; Value = "$($TempDiskCacheSize) GB"; }
				}

				If(($Catalog.MinimumFunctionalLevel -eq "L7_9" -or 
					$Catalog.MinimumFunctionalLevel -eq "L7_20" -or 
					$Catalog.MinimumFunctionalLevel -eq "L7_25") -and 
				($xAllocationType -eq "Permanent" -and $xPersistType -eq "On local disk" ) -and 
				((Get-ConfigEnabledFeature @XDParams1) -contains "DedicatedFullDiskClone"))
				{
					$CatalogInformation += @{Data = "VM copy mode"; Value = $VMCopyMode; }
				}
				
				If($Null -ne $Machines)
				{
					If($Machines -is [array] -and $Machines.Count)
					{
						If([String]::IsNullOrEmpty($Machines[0].AgentVersion))
						{
							$CatalogInformation += @{Data = "Installed VDA version"; Value = "-"; }
							$CatalogInformation += @{Data = "Operating System"; Value = "-"; }
						}
						Else
						{
							$CatalogInformation += @{Data = "Installed VDA version"; Value = $Machines[0].AgentVersion; }
							$CatalogInformation += @{Data = "Operating System"; Value = $Machines[0].OSType; }
						}
					}
					Else
					{
						$CatalogInformation += @{Data = "Installed VDA version"; Value = "Unable to retrieve details"; }
						$CatalogInformation += @{Data = "Operating System"; Value = "Unable to retrieve details"; }
					}
				}
				ElseIf($Null -eq $Machines)
				{
					$CatalogInformation += @{Data = "Installed VDA version"; Value = "Unable to retrieve details"; }
					$CatalogInformation += @{Data = "Operating System"; Value = "Unable to retrieve details"; }
				}
			}
			ElseIf($Catalog.ProvisioningType -eq "PVS")
			{
				$CatalogInformation += @{Data = "Description"; Value = $Catalog.Description; }
				$CatalogInformation += @{Data = "Machine type"; Value = $xCatalogType; }
				$CatalogInformation += @{Data = "Provisioning method"; Value = $xProvisioningType; }
				$CatalogInformation += @{Data = "PVS address"; Value = $Catalog.PvsAddress; }
				$CatalogInformation += @{Data = "Allocation type"; Value = $xAllocationType; }
				$CatalogInformation += @{Data = "Set to VDA version"; Value = $xVDAVersion; }
				#V2.14, change from Get-ConfigServiceAddedCapability -contains "ZonesSupport" to validObject
				If(validObject $Catalog ZoneName)
				{
					$CatalogInformation += @{Data = "Zone"; Value = $Catalog.ZoneName; }
				}
			
				If($Null -ne $Machines)
				{
					If($Machines -is [array] -and $Machines.Count)
					{
						If([String]::IsNullOrEmpty($Machines[0].AgentVersion))
						{
							$CatalogInformation += @{Data = "Installed VDA version"; Value = "-"; }
							$CatalogInformation += @{Data = "Operating System"; Value = "-"; }
						}
						Else
						{
							$CatalogInformation += @{Data = "Installed VDA version"; Value = $Machines[0].AgentVersion; }
							$CatalogInformation += @{Data = "Operating System"; Value = $Machines[0].OSType; }
						}
					}
					Else
					{
						$CatalogInformation += @{Data = "Installed VDA version"; Value = "Unable to retrieve details"; }
						$CatalogInformation += @{Data = "Operating System"; Value = "Unable to retrieve details"; }
					}
				}
				ElseIf($Null -eq $Machines)
				{
					$CatalogInformation += @{Data = "Installed VDA version"; Value = "Unable to retrieve details"; }
					$CatalogInformation += @{Data = "Operating System"; Value = "Unable to retrieve details"; }
				}
			}
			ElseIf($Catalog.ProvisioningType -eq "Manual" -and $Catalog.IsRemotePC -eq $True)
			{
				$CatalogInformation += @{Data = "Description"; Value = $Catalog.Description; }
				
				If($RemotePCAccounts -is [array])
				{
					ForEach($RemotePCAccount in $RemotePCAccounts)
					{
						$CatalogInformation += @{Data = "Organizational Units"; Value = $RemotePCAccount.OU; }
						$CatalogInformation += @{Data = "     Allow subfolder matches"; Value = $RemotePCAccount.AllowSubfolderMatches.ToString(); }
						If($RemotePCAccount.MachinesExcluded.Count -eq 0)
						{
							$CatalogInformation += @{Data = "     Machines excluded"; Value = "None"; }
						}
						Else
						{
							$cnt = -1
							ForEach($Item in $RemotePCAccount.MachinesExcluded)
							{
								$cnt++
								
								If($cnt -eq 0)
								{
									$CatalogInformation += @{Data = "     Machines excluded"; Value = $Item; }
								}
								Else
								{
									$CatalogInformation += @{Data = ""; Value = $Item; }
								}
							}
						}

						If($RemotePCAccount.MachinesIncluded -eq "*")
						{
							$CatalogInformation += @{Data = "     Machines Included"; Value = "All"; }
						}
						Else
						{
							$cnt = -1
							ForEach($Item in $RemotePCAccount.MachinesIncluded)
							{
								$cnt++
								
								If($cnt -eq 0)
								{
									$CatalogInformation += @{Data = "     Machines Included"; Value = $Item; }
								}
								Else
								{
									$CatalogInformation += @{Data = ""; Value = $Item; }
								}
							}
						}
					}
				}
				Else
				{
					$CatalogInformation += @{Data = "Organizational Units"; Value = $RemotePCOU; }
					$CatalogInformation += @{Data = "     Allow subfolder matches"; Value = $RemotePCSubOU; }
				}

				$CatalogInformation += @{Data = "Machine type"; Value = $xCatalogType; }
				$CatalogInformation += @{Data = "No. of machines"; Value = $NumberOfMachines.ToString(); }
				$CatalogInformation += @{Data = "Allocated machines"; Value = $Catalog.UsedCount.ToString(); }
				$CatalogInformation += @{Data = "Set to VDA version"; Value = $xVDAVersion; }
				#V2.14, change from Get-ConfigServiceAddedCapability -contains "ZonesSupport" to validObject
				If(validObject $Catalog ZoneName)
				{
					$CatalogInformation += @{Data = "Zone"; Value = $Catalog.ZoneName; }
				}

				If($Null -ne $Machines)
				{
					If($Machines -is [array] -and $Machines.Count)
					{
						If([String]::IsNullOrEmpty($Machines[0].AgentVersion))
						{
							$CatalogInformation += @{Data = "Installed VDA version"; Value = "-"; }
							$CatalogInformation += @{Data = "Operating System"; Value = "-"; }
						}
						Else
						{
							$CatalogInformation += @{Data = "Installed VDA version"; Value = $Machines[0].AgentVersion; }
							$CatalogInformation += @{Data = "Operating System"; Value = $Machines[0].OSType; }
						}
					}
				}
				ElseIf($Null -eq $Machines)
				{
					$CatalogInformation += @{Data = "Installed VDA version"; Value = "Unable to retrieve details"; }
					$CatalogInformation += @{Data = "Operating System"; Value = "Unable to retrieve details"; }
				}
			}
			ElseIf($Catalog.ProvisioningType -eq "Manual" -and $Catalog.IsRemotePC -ne $True)
			{
				#(added 29-feb-2016 thanks to Michael Foster)
				$CatalogInformation += @{Data = "Description"; Value = $Catalog.Description; }
				$CatalogInformation += @{Data = "Machine type"; Value = $xCatalogType; }
				$CatalogInformation += @{Data = "No. of machines"; Value = $NumberOfMachines.ToString(); }
				$CatalogInformation += @{Data = "Allocated machines"; Value = $Catalog.UsedCount.ToString(); }
				$CatalogInformation += @{Data = "Allocation type"; Value = $xAllocationType; }
				$CatalogInformation += @{Data = "User data"; Value = $xPersistType; }
				$CatalogInformation += @{Data = "Provisioning method"; Value = $xProvisioningType; }
				$CatalogInformation += @{Data = "Set to VDA version"; Value = $xVDAVersion; }
				#V2.14, change from Get-ConfigServiceAddedCapability -contains "ZonesSupport" to validObject
				If(validObject $Catalog ZoneName)
				{
					$CatalogInformation += @{Data = "Zone"; Value = $Catalog.ZoneName; }
				}
				
				If($Null -ne $Machines)
				{
					If($Machines -is [array] -and $Machines.Count)
					{
						If([String]::IsNullOrEmpty($Machines[0].AgentVersion))
						{
							$CatalogInformation += @{Data = "Installed VDA version"; Value = "-"; }
							$CatalogInformation += @{Data = "Operating System"; Value = "-"; }
						}
						Else
						{
							$CatalogInformation += @{Data = "Installed VDA version"; Value = $Machines[0].AgentVersion; }
							$CatalogInformation += @{Data = "Operating System"; Value = $Machines[0].OSType; }
						}
					}
					Else
					{
						$CatalogInformation += @{Data = "Installed VDA version"; Value = "Unable to retrieve details"; }
						$CatalogInformation += @{Data = "Operating System"; Value = "Unable to retrieve details"; }
					}
				}
				ElseIf($Null -eq $Machines)
				{
					$CatalogInformation += @{Data = "Installed VDA version"; Value = "Unable to retrieve details"; }
					$CatalogInformation += @{Data = "Operating System"; Value = "Unable to retrieve details"; }
				}
			}
			
			#added in V2.20
			If($Catalog.SessionSupport -eq "MultiSession")
			{
				$itemKeys = $Catalog.MetadataMap.Keys

				ForEach( $itemKey in $itemKeys )
				{
					If($itemKey.StartsWith("Task"))
					{
						Continue
					}
					If($itemKey.StartsWith("Citrix_DesktopStudio_IdentityPoolUid"))
					{
						Continue
					}

					$value = $Catalog.MetadataMap[ $itemKey ]
					
					If($value -eq "")
					{
						$value = "Not set"
					}
					$CatalogInformation += @{Data = $itemKey; Value = $value; }
				}
			}
			
			$Table = AddWordTable -Hashtable $CatalogInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 225;
			$Table.Columns.Item(2).Width = 200;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""
		}
		ElseIf($Text)
		{
			Line 0 "Machine Catalog: $($Catalog.Name)"
			If($Catalog.ProvisioningType -eq "MCS")
			{
				Line 1 "Description`t`t`t: " $Catalog.Description
				Line 1 "Machine type`t`t`t: " $xCatalogType
				Line 1 "No. of machines`t`t`t: " $NumberOfMachines.ToString()
				Line 1 "Allocated machines`t`t: " $Catalog.UsedCount.ToString()
				Line 1 "Allocation type`t`t`t: " $xAllocationType
				Line 1 "User data`t`t`t: " $xPersistType
				Line 1 "Provisioning method`t`t: " $xProvisioningType
				#V2.17 add identity pool data
				Line 1 "Account naming scheme`t`t: " $IdentityNamingScheme
				Line 1 "Naming scheme type`t`t: " $IdentityNamingSchemeType
				Line 1 "AD Domain`t`t`t: " $IdentityDomain
				Line 1 "AD Location`t`t`t: " $IdentityOU
				#end of identity pool data
				Line 1 "Set to VDA version`t`t: " $xVDAVersion
				If($Null -ne $MachineData)
				{
					If( $MachineData.PSObject.Properties[ 'HostingUnitName' ] )
					{
						## GRL - The property 'HostingUnitName' cannot be found on this object. Verify that the property exists
						Line 1 "Resources`t`t`t: " $MachineData.HostingUnitName
					}
				}
				#V2.14, change from Get-ConfigServiceAddedCapability -contains "ZonesSupport" to validObject
				If(validObject $Catalog ZoneName)
				{
					Line 1 "Zone`t`t`t`t: " $Catalog.ZoneName
				}
				
				If($Null -ne $MachineData)
				{
					Line 1 "Master VM`t`t`t: " $MasterVM
					Line 1 "Disk Image`t`t`t: " $xDiskImage
					Line 1 "Virtual CPUs`t`t`t: " $MachineData.CpuCount
					Line 1 "Memory`t`t`t`t: " "$($MachineData.MemoryMB) MB"
					Line 1 "Hard disk`t`t`t: " "$($MachineData.DiskSize) GB"
					If($xAllocationType -eq "Permanent" -and $xPersistType -eq "On personal vDisk" )
					{
						Line 1 "Personal vDisk size`t`t: " "$($xPvDSize) GB"
						Line 1 "Personal vDisk drive letter`t: " $xPvDDriveLetter
					}
				}
				ElseIf($Null -eq $MachineData)
				{
					Line 1 "Master VM`t`t`t: " $MasterVM
					Line 1 "Disk Image`t`t`t: " $xDiskImage
					Line 1 "Virtual CPUs`t`t`t: " "Unable to retrieve details"
					Line 1 "Memory`t`t`t`t: " "Unable to retrieve details"
					Line 1 "Hard disk`t`t`t: " "Unable to retrieve details"
					If($xAllocationType -eq "Permanent" -and $xPersistType -eq "On personal vDisk" )
					{
						Line 1 "Personal vDisk size`t`t: " "Unable to retrieve details"
						Line 1 "Personal vDisk drive letter`t: " "Unable to retrieve details"
					}
				}
				
				If(($Catalog.MinimumFunctionalLevel -eq "L7_9" -or 
					$Catalog.MinimumFunctionalLevel -eq "L7_20" -or 
					$Catalog.MinimumFunctionalLevel -eq "L7_25") -and 
				(($xAllocationType -eq "Random") -or 
				($xAllocationType -eq "Permanent" -and $xPersistType -eq "Discard" )))
				{
					Line 1 "Temporary memory cache size`t: " "$($TempMemoryCacheSize) MB"
					Line 1 "Temporary disk cache size`t: " "$($MachineData.WriteBackCacheDiskSize) GB"
				}

				If(($Catalog.MinimumFunctionalLevel -eq "L7_9" -or 
					$Catalog.MinimumFunctionalLevel -eq "L7_20" -or 
					$Catalog.MinimumFunctionalLevel -eq "L7_25") -and 
				($xAllocationType -eq "Permanent" -and $xPersistType -eq "On local disk" ) -and 
				((Get-ConfigEnabledFeature @XDParams1) -contains "DedicatedFullDiskClone"))
				{
					Line 1 "VM copy mode`t`t`t: " $VMCopyMode
				}
				
				If($Null -ne $Machines)
				{
					If($Machines -is [array] -and $Machines.Count)
					{
						If([String]::IsNullOrEmpty($Machines[0].AgentVersion))
						{
							Line 1 "Installed VDA version`t`t: " "-"
							Line 1 "Operating System`t`t: " "-"
						}
						Else
						{
							Line 1 "Installed VDA version`t`t: " $Machines[0].AgentVersion
							Line 1 "Operating System`t`t: " $Machines[0].OSType
						}
					}
					Else
					{
						Line 1 "Installed VDA version`t`t: " "Unable to retrieve details"
						Line 1 "Operating System`t`t: " "Unable to retrieve details"
					}
				}
				ElseIf($Null -eq $Machines)
				{
					Line 1 "Installed VDA version`t`t: " "Unable to retrieve details"
					Line 1 "Operating System`t`t: " "Unable to retrieve details"
				}
			}
			ElseIf($Catalog.ProvisioningType -eq "PVS")
			{
				Line 1 "Description`t`t`t: " $Catalog.Description
				Line 1 "Machine type`t`t`t: " $xCatalogType
				Line 1 "Provisioning method`t`t: " $xProvisioningType
				Line 1 "PVS address`t`t`t: " $Catalog.PvsAddress
				Line 1 "Allocation type`t`t`t: " $xAllocationType
				Line 1 "Set to VDA version`t`t: " $xVDAVersion
				#V2.14, change from Get-ConfigServiceAddedCapability -contains "ZonesSupport" to validObject
				If(validObject $Catalog ZoneName)
				{
					Line 1 "Zone`t`t`t`t: " $Catalog.ZoneName
				}
				
				If($Null -ne $Machines)
				{
					If($Machines -is [array] -and $Machines.Count)
					{
						If([String]::IsNullOrEmpty($Machines[0].AgentVersion))
						{
							Line 1 "Installed VDA version`t`t: " "-"
							Line 1 "Operating System`t`t: " "-"
						}
						Else
						{
							Line 1 "Installed VDA version`t`t: " $Machines[0].AgentVersion
							Line 1 "Operating System`t`t: " $Machines[0].OSType
						}
					}
					Else
					{
						Line 1 "Installed VDA version`t`t: " "Unable to retrieve details"
						Line 1 "Operating System`t`t: " "Unable to retrieve details"
					}
				}
				ElseIf($Null -eq $Machines)
				{
					Line 1 "Installed VDA version`t`t: " "Unable to retrieve details"
					Line 1 "Operating System`t`t: " "Unable to retrieve details"
				}
			}
			ElseIf($Catalog.ProvisioningType -eq "Manual" -and $Catalog.IsRemotePC -eq $True)
			{
				Line 1 "Description`t`t`t: " $Catalog.Description

				If($RemotePCAccounts -is [array])
				{
					ForEach($RemotePCAccount in $RemotePCAccounts)
					{
						Line 1 "Organizational Units`t`t`t: " $RemotePCAccount.OU
						Line 2 "Allow subfolder matches`t`t: " $RemotePCAccount.AllowSubfolderMatches.ToString()
						If($RemotePCAccount.MachinesExcluded.Count -eq 0)
						{
							Line 2 "Machines excluded`t`t: " "None"
						}
						Else
						{
							$cnt = -1
							ForEach($Item in $RemotePCAccount.MachinesExcluded)
							{
								$cnt++
								
								If($cnt -eq 0)
								{
									Line 2 "Machines excluded`t`t: " $Item
								}
								Else
								{
									Line 6 "  " $Item
								}
							}
						}

						If($RemotePCAccount.MachinesIncluded -eq "*")
						{
							Line 2 "Machines Included`t`t: " "All"
						}
						Else
						{
							$cnt = -1
							ForEach($Item in $RemotePCAccount.MachinesIncluded)
							{
								$cnt++
								
								If($cnt -eq 0)
								{
									Line 2 "Machines Included`t`t: " $Item
								}
								Else
								{
									Line 6 "  " $Item
								}
							}
						}
					}
				}
				Else
				{
					Line 1 "Organizational Units`t`t`t: " $RemotePCOU
					Line 2 "Allow subfolder matches`t`t: " $RemotePCSubOU
				}

				Line 1 "Machine type`t`t`t: " $xCatalogType
				Line 1 "No. of machines`t`t`t: "$NumberOfMachines
				Line 1 "Allocated machines`t`t: " $Catalog.UsedCount
				Line 1 "Set to VDA version`t`t: " $xVDAVersion
				#V2.14, change from Get-ConfigServiceAddedCapability -contains "ZonesSupport" to validObject
				If(validObject $Catalog ZoneName)
				{
					Line 1 "Zone`t`t`t`t: " $Catalog.ZoneName
				}
				
				If($Null -ne $Machines)
				{
					If($Machines -is [array] -and $Machines.Count)
					{
						If([String]::IsNullOrEmpty($Machines[0].AgentVersion))
						{
							Line 1 "Installed VDA version`t`t: " "-"
							Line 1 "Operating System`t`t: " "-"
						}
						Else
						{
							Line 1 "Installed VDA version`t`t: " $Machines[0].AgentVersion
							Line 1 "Operating System`t`t: " $Machines[0].OSType
						}
					}
					Else
					{
						Line 1 "Installed VDA version`t`t: " "Unable to retrieve details"
						Line 1 "Operating System`t`t: " "Unable to retrieve details"
					}
				}
				ElseIf($Null -eq $Machines)
				{
					Line 1 "Installed VDA version`t`t: " "Unable to retrieve details"
					Line 1 "Operating System`t`t: " "Unable to retrieve details"
				}
			}
			ElseIf($Catalog.ProvisioningType -eq "Manual" -and $Catalog.IsRemotePC -ne $True)
			{
				#(added 29-feb-2016 thanks to Michael Foster)
				Line 1 "Description`t`t`t: " $Catalog.Description
				Line 1 "Machine type`t`t`t: " $xCatalogType
				Line 1 "No. of machines`t`t`t: "$NumberOfMachines.ToString()
				Line 1 "Allocated machines`t`t: " $Catalog.UsedCount.ToString()
				Line 1 "Allocation type`t`t`t: " $xAllocationType
				Line 1 "User data`t`t`t: " $xPersistType
				Line 1 "Provisioning method`t`t: " $xProvisioningType
				Line 1 "Set to VDA version`t`t: " $xVDAVersion
				#V2.14, change from Get-ConfigServiceAddedCapability -contains "ZonesSupport" to validObject
				If(validObject $Catalog ZoneName)
				{
					Line 1 "Zone`t`t`t`t: " $Catalog.ZoneName
				}
				
				If($Null -ne $Machines)
				{
					If($Machines -is [array] -and $Machines.Count)
					{
						If([String]::IsNullOrEmpty($Machines[0].AgentVersion))
						{
							Line 1 "Installed VDA version`t`t: " "-"
							Line 1 "Operating System`t`t: " "-"
						}
						Else
						{
							Line 1 "Installed VDA version`t`t: " $Machines[0].AgentVersion
							Line 1 "Operating System`t`t: " $Machines[0].OSType
						}
					}
					Else
					{
						Line 1 "Installed VDA version`t`t: " "Unable to retrieve details"
						Line 1 "Operating System`t`t: " "Unable to retrieve details"
					}
				}
				ElseIf($Null -eq $Machines)
				{
					Line 1 "Installed VDA version`t`t: " "Unable to retrieve details"
					Line 1 "Operating System`t`t: " "Unable to retrieve details"
					Write-Host "Unable to retrieve details for Machine Catalog $($Catalog.Name)" -Foreground White
				}
			}

			#added in V2.20
			If($Catalog.SessionSupport -eq "MultiSession")
			{
				$itemKeys = $Catalog.MetadataMap.Keys

				ForEach( $itemKey in $itemKeys )
				{
					If($itemKey.StartsWith("Task"))
					{
						Continue
					}
					If($itemKey.StartsWith("Citrix_DesktopStudio_IdentityPoolUid"))
					{
						Continue
					}

					$value = $Catalog.MetadataMap[ $itemKey ]
					
					If($value -eq "")
					{
						$value = "Not set"
					}
					Line 1 "$($itemKey)`t: " $value
				}
			}

			Line 0 ""
		}
		ElseIf($HTML)
		{
			WriteHTMLLine 2 0 "Machine Catalog: $($Catalog.Name)"
			$rowdata = @()
			$columnHeaders = @("Description",($global:htmlsb),$Catalog.Description,$htmlwhite)
			If($Catalog.ProvisioningType -eq "MCS")
			{
				$rowdata += @(,('Machine Type',($global:htmlsb),$xCatalogType,$htmlwhite))
				$rowdata += @(,('No. of machines',($global:htmlsb),$NumberOfMachines.ToString(),$htmlwhite))
				$rowdata += @(,('Allocated machines',($global:htmlsb),$Catalog.UsedCount.ToString(),$htmlwhite))
				$rowdata += @(,('Allocation type',($global:htmlsb),$xAllocationType,$htmlwhite))
				$rowdata += @(,('User data',($global:htmlsb),$xPersistType,$htmlwhite))
				$rowdata += @(,('Provisioning method',($global:htmlsb),$xProvisioningType,$htmlwhite))
				#V2.17 add identity pool data
				$rowdata += @(,("Account naming scheme",($global:htmlsb),$IdentityNamingScheme,$htmlwhite))
				$rowdata += @(,("Naming scheme type",($global:htmlsb),$IdentityNamingSchemeType,$htmlwhite))
				$rowdata += @(,("AD Domain",($global:htmlsb),$IdentityDomain,$htmlwhite))
				$rowdata += @(,("AD Location",($global:htmlsb),$IdentityOU,$htmlwhite))
				#end of identity pool data
				$rowdata += @(,('Set to VDA version',($global:htmlsb),$xVDAVersion,$htmlwhite))
				If($Null -ne $MachineData)
				{
					If( $MachineData.PSObject.Properties[ 'HostingUnitName' ] )
					{
						## GRL - The property 'HostingUnitName' cannot be found on this object. Verify that the property exists
						$rowdata += @(,('Resources',($global:htmlsb),$MachineData.HostingUnitName,$htmlwhite))
					}
				}
				#V2.14, change from Get-ConfigServiceAddedCapability -contains "ZonesSupport" to validObject
				If(validObject $Catalog ZoneName)
				{
					$rowdata += @(,('Zone',($global:htmlsb),$Catalog.ZoneName,$htmlwhite))
				}
				
				If($Null -ne $MachineData)
				{
					$rowdata += @(,('Master VM',($global:htmlsb),$MasterVM,$htmlwhite))
					$rowdata += @(,('Disk Image',($global:htmlsb),$xDiskImage,$htmlwhite))
					$rowdata += @(,('Virtual CPUs',($global:htmlsb),$MachineData.CpuCount.ToString(),$htmlwhite))
					$rowdata += @(,('Memory',($global:htmlsb),"$($MachineData.MemoryMB) MB",$htmlwhite))
					$rowdata += @(,('Hard disk',($global:htmlsb),"$($MachineData.DiskSize) GB",$htmlwhite))
					If($xAllocationType -eq "Permanent" -and $xPersistType -eq "On personal vDisk" )
					{
						$rowdata += @(,('Personal vDisk size',($global:htmlsb),"$($xPvDSize) GB",$htmlwhite))
						$rowdata += @(,('Personal vDisk drive letter',($global:htmlsb),$xPvDDriveLetter,$htmlwhite))
					}
				}
				ElseIf($Null -eq $MachineData)
				{
					$rowdata += @(,('Master VM',($global:htmlsb),$MasterVM,$htmlwhite))
					$rowdata += @(,('Disk Image',($global:htmlsb),$xDiskImage,$htmlwhite))
					$rowdata += @(,('Virtual CPUs',($global:htmlsb),"Unable to retrieve details",$htmlwhite))
					$rowdata += @(,('Memory',($global:htmlsb),"Unable to retrieve details",$htmlwhite))
					$rowdata += @(,('Hard disk',($global:htmlsb),"Unable to retrieve details",$htmlwhite))
					If($xAllocationType -eq "Permanent" -and $xPersistType -eq "On personal vDisk" )
					{
						$rowdata += @(,('Personal vDisk size',($global:htmlsb),"Unable to retrieve details",$htmlwhite))
						$rowdata += @(,('Personal vDisk drive letter',($global:htmlsb),"Unable to retrieve details",$htmlwhite))
					}
				}
				
				If(($Catalog.MinimumFunctionalLevel -eq "L7_9" -or 
					$Catalog.MinimumFunctionalLevel -eq "L7_20" -or 
					$Catalog.MinimumFunctionalLevel -eq "L7_25") -and 
				(($xAllocationType -eq "Random") -or 
				($xAllocationType -eq "Permanent" -and $xPersistType -eq "Discard" )))
				{
					$rowdata += @(,('Temporary memory cache size',($global:htmlsb),"$($TempMemoryCacheSize) MB",$htmlwhite))
					$rowdata += @(,('Temporary disk cache size',($global:htmlsb), "$($TempDiskCacheSize) GB",$htmlwhite))
				}

				If(($Catalog.MinimumFunctionalLevel -eq "L7_9" -or 
					$Catalog.MinimumFunctionalLevel -eq "L7_20" -or 
					$Catalog.MinimumFunctionalLevel -eq "L7_25") -and 
				($xAllocationType -eq "Permanent" -and $xPersistType -eq "On local disk" ) -and 
				((Get-ConfigEnabledFeature @XDParams1) -contains "DedicatedFullDiskClone"))
				{
					$rowdata += @(,('VM copy mode',($global:htmlsb),$VMCopyMode,$htmlwhite))
				}
				
				If($Null -ne $Machines)
				{
					If($Machines -is [array] -and $Machines.Count)
					{
						If([String]::IsNullOrEmpty($Machines[0].AgentVersion))
						{
							$rowdata += @(,('Installed VDA version',($global:htmlsb),"-",$htmlwhite))
							$rowdata += @(,('Operating System',($global:htmlsb),"-",$htmlwhite))
						}
						Else
						{
							$rowdata += @(,('Installed VDA version',($global:htmlsb),$Machines[0].AgentVersion,$htmlwhite))
							$rowdata += @(,('Operating System',($global:htmlsb),$Machines[0].OSType,$htmlwhite))
						}
					}
					Else
					{
						$rowdata += @(,('Installed VDA version',($global:htmlsb),"Unable to retrieve details",$htmlwhite))
						$rowdata += @(,('Operating System',($global:htmlsb),"Unable to retrieve details",$htmlwhite))
					}
				}
				ElseIf($Null -eq $Machines)
				{
					$rowdata += @(,('Installed VDA version',($global:htmlsb),"Unable to retrieve details",$htmlwhite))
					$rowdata += @(,('Operating System',($global:htmlsb),"Unable to retrieve details",$htmlwhite))
					Write-Host "Unable to retrieve details for Machine Catalog $($Catalog.Name)" -Foreground White
				}
			}
			ElseIf($Catalog.ProvisioningType -eq "PVS")
			{
				$rowdata += @(,('Machine Type',($global:htmlsb),$xCatalogType,$htmlwhite))
				$rowdata += @(,('Provisioning method',($global:htmlsb),$xProvisioningType,$htmlwhite))
				$rowdata += @(,('PVS address',($global:htmlsb),$Catalog.PvsAddress,$htmlwhite))
				$rowdata += @(,('Allocation type',($global:htmlsb),$xAllocationType,$htmlwhite))
				$rowdata += @(,('Set to VDA version',($global:htmlsb),$xVDAVersion,$htmlwhite))
				#V2.14, change from Get-ConfigServiceAddedCapability -contains "ZonesSupport" to validObject
				If(validObject $Catalog ZoneName)
				{
					$rowdata += @(,('Zone',($global:htmlsb),$Catalog.ZoneName,$htmlwhite))
				}
				
				If($Null -ne $Machines)
				{
					If($Machines -is [array] -and $Machines.Count)
					{
						If([String]::IsNullOrEmpty($Machines[0].AgentVersion))
						{
							$rowdata += @(,('Installed VDA version',($global:htmlsb),"-",$htmlwhite))
							$rowdata += @(,('Operating System',($global:htmlsb),"-",$htmlwhite))
						}
						Else
						{
							$rowdata += @(,('Installed VDA version',($global:htmlsb),$Machines[0].AgentVersion,$htmlwhite))
							$rowdata += @(,('Operating System',($global:htmlsb),$Machines[0].OSType,$htmlwhite))
						}
					}
					Else
					{
						$rowdata += @(,('Installed VDA version',($global:htmlsb),"Unable to retrieve details",$htmlwhite))
						$rowdata += @(,('Operating System',($global:htmlsb),"Unable to retrieve details",$htmlwhite))
					}
				}
				ElseIf($Null -eq $Machines)
				{
					$rowdata += @(,('Installed VDA version',($global:htmlsb),"Unable to retrieve details",$htmlwhite))
					$rowdata += @(,('Operating System',($global:htmlsb),"Unable to retrieve details",$htmlwhite))
					Write-Host "Unable to retrieve details for Machine Catalog $($Catalog.Name)" -Foreground White
				}
			}
			ElseIf($Catalog.ProvisioningType -eq "Manual" -and $Catalog.IsRemotePC -eq $True)
			{
				If($RemotePCAccounts -is [array])
				{
					ForEach($RemotePCAccount in $RemotePCAccounts)
					{
						$rowdata += @(,("Organizational Units",($global:htmlsb),$RemotePCAccount.OU,$htmlwhite))
						$rowdata += @(,("     Allow subfolder matches",($global:htmlsb),$RemotePCAccount.AllowSubfolderMatches.ToString(),$htmlwhite))
						If($RemotePCAccount.MachinesExcluded.Count -eq 0)
						{
							$rowdata += @(,("     Machines excluded",($global:htmlsb),"None",$htmlwhite))
						}
						Else
						{
							$cnt = -1
							ForEach($Item in $RemotePCAccount.MachinesExcluded)
							{
								$cnt++
								
								If($cnt -eq 0)
								{
									$rowdata += @(,("     Machines excluded",($global:htmlsb),$Item,$htmlwhite))
								}
								Else
								{
									$rowdata += @(,("",($global:htmlsb),$Item,$htmlwhite))
								}
							}
						}

						If($RemotePCAccount.MachinesIncluded -eq "*")
						{
							$rowdata += @(,("     Machines Included",($global:htmlsb),"All",$htmlwhite))
						}
						Else
						{
							$cnt = -1
							ForEach($Item in $RemotePCAccount.MachinesIncluded)
							{
								$cnt++
								
								If($cnt -eq 0)
								{
									$rowdata += @(,("     Machines Included",($global:htmlsb),$Item,$htmlwhite))
								}
								Else
								{
									$rowdata += @(,("",($global:htmlsb),$Item,$htmlwhite))
								}
							}
						}
					}
				}
				Else
				{
					$rowdata += @(,("Organizational Units",($global:htmlsb),$RemotePCOU,$htmlwhite))
					$rowdata += @(,("     Allow subfolder matches",($global:htmlsb),$RemotePCSubOU,$htmlwhite))
				}

				$rowdata += @(,('Machine Type',($global:htmlsb),$xCatalogType,$htmlwhite))
				$rowdata += @(,('No. of machines',($global:htmlsb),$NumberOfMachines.ToString(),$htmlwhite))
				$rowdata += @(,('Allocated machines',($global:htmlsb),$Catalog.UsedCount.ToString(),$htmlwhite))
				$rowdata += @(,('Set to VDA version',($global:htmlsb),$xVDAVersion,$htmlwhite))
				#V2.14, change from Get-ConfigServiceAddedCapability -contains "ZonesSupport" to validObject
				If(validObject $Catalog ZoneName)
				{
					$rowdata += @(,('Zone',($global:htmlsb),$Catalog.ZoneName,$htmlwhite))
				}
				
				If($Null -ne $Machines)
				{
					If($Machines -is [array] -and $Machines.Count)
					{
						If([String]::IsNullOrEmpty($Machines[0].AgentVersion))
						{
							$rowdata += @(,('Installed VDA version',($global:htmlsb),"-",$htmlwhite))
							$rowdata += @(,('Operating System',($global:htmlsb),"-",$htmlwhite))
						}
						Else
						{
							$rowdata += @(,('Installed VDA version',($global:htmlsb),$Machines[0].AgentVersion,$htmlwhite))
							$rowdata += @(,('Operating System',($global:htmlsb),$Machines[0].OSType,$htmlwhite))
						}
					}
					Else
					{
						$rowdata += @(,('Installed VDA version',($global:htmlsb),"Unable to retrieve details",$htmlwhite))
						$rowdata += @(,('Operating System',($global:htmlsb),"Unable to retrieve details",$htmlwhite))
					}
				}
				ElseIf($Null -eq $Machines)
				{
					$rowdata += @(,('Installed VDA version',($global:htmlsb),"Unable to retrieve details",$htmlwhite))
					$rowdata += @(,('Operating System',($global:htmlsb),"Unable to retrieve details",$htmlwhite))
					Write-Host "Unable to retrieve details for Machine Catalog $($Catalog.Name)" -Foreground White
				}
			}
			ElseIf($Catalog.ProvisioningType -eq "Manual" -and $Catalog.IsRemotePC -ne $True)
			{
				$rowdata += @(,('Machine Type',($global:htmlsb),$xCatalogType,$htmlwhite))
				$rowdata += @(,('No. of machines',($global:htmlsb),$NumberOfMachines.ToString(),$htmlwhite))
				$rowdata += @(,('Allocated machines',($global:htmlsb),$Catalog.UsedCount.ToString(),$htmlwhite))
				$rowdata += @(,('Allocation type',($global:htmlsb),$xAllocationType,$htmlwhite))
				$rowdata += @(,('User data',($global:htmlsb),$xPersistType,$htmlwhite))
				$rowdata += @(,('Provisioning method',($global:htmlsb),$xProvisioningType,$htmlwhite))
				$rowdata += @(,('Set to VDA version',($global:htmlsb),$xVDAVersion,$htmlwhite))
				#V2.14, change from Get-ConfigServiceAddedCapability -contains "ZonesSupport" to validObject
				If(validObject $Catalog ZoneName)
				{
					$rowdata += @(,('Zone',($global:htmlsb),$Catalog.ZoneName,$htmlwhite))
				}
				
				If($Null -ne $Machines)
				{
					If($Machines -is [array] -and $Machines.Count)
					{
						If([String]::IsNullOrEmpty($Machines[0].AgentVersion))
						{
							$rowdata += @(,('Installed VDA version',($global:htmlsb),"-",$htmlwhite))
							$rowdata += @(,('Operating System',($global:htmlsb),"-",$htmlwhite))
						}
						Else
						{
							$rowdata += @(,('Installed VDA version',($global:htmlsb),$Machines[0].AgentVersion,$htmlwhite))
							$rowdata += @(,('Operating System',($global:htmlsb),$Machines[0].OSType,$htmlwhite))
						}
					}
					Else
					{
						$rowdata += @(,('Installed VDA version',($global:htmlsb),"Unable to retrieve details",$htmlwhite))
						$rowdata += @(,('Operating System',($global:htmlsb),"Unable to retrieve details",$htmlwhite))
					}
				}
				ElseIf($Null -eq $Machines)
				{
					$rowdata += @(,('Installed VDA version',($global:htmlsb),"Unable to retrieve details",$htmlwhite))
					$rowdata += @(,('Operating System',($global:htmlsb),"Unable to retrieve details",$htmlwhite))
					Write-Host "Unable to retrieve details for Machine Catalog $($Catalog.Name)" -Foreground White
				}
			}
			
			#added in V2.20
			If($Catalog.SessionSupport -eq "MultiSession")
			{
				$itemKeys = $Catalog.MetadataMap.Keys

				ForEach( $itemKey in $itemKeys )
				{
					If($itemKey.StartsWith("Task"))
					{
						Continue
					}
					If($itemKey.StartsWith("Citrix_DesktopStudio_IdentityPoolUid"))
					{
						Continue
					}
					
					$value = $Catalog.MetadataMap[ $itemKey ]
					
					If($value -eq "")
					{
						$value = "Not set"
					}
					$rowdata += @(,($itemKey,($global:htmlsb),$value,$htmlwhite))
				}
			}

			$msg = ""
			$columnWidths = @("275","300")
			FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "575"
		}
			
		#scopes
		$Scopes = (Get-BrokerCatalog -Name $Catalog.Name @XDParams2).Scopes
		
		If($? -and ($Null -eq $Scopes))
		{
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Scopes"
				[System.Collections.Hashtable[]] $ScopesWordTable = @();

				$ScopesWordTable += @{Scope = "All";}

				$Table = AddWordTable -Hashtable $ScopesWordTable `
				-Columns Scope `
				-Headers  "Scopes" `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 225;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			ElseIf($Text)
			{
				Line 1 "Scopes"
				Line 2 "All"
				Line 0 ""
			}
			ElseIf($HTML)
			{
				WriteHTMLLine 4 0 "Scopes"
				$rowdata = @()
				$rowdata += @(,("All",$htmlwhite))

				$columnHeaders = @(
				'Scopes',($global:htmlsb))

				$msg = ""
				$columnWidths = @("225")
				FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "225"
			}
		}
		ElseIf($? -and ($Null -ne $Scopes))
		{
			If($MSWord -or $PDF)
			{
				WriteWordLine 4 0 "Scopes"
				[System.Collections.Hashtable[]] $ScopesWordTable = @();

				$ScopesWordTable += @{Scope = "All";}

				$CurrentServiceIndex++;
				
				ForEach($Scope in $Scopes)
				{
					$ScopesWordTable += @{Scope = $Scope.ScopeName;}
				}
				$Table = AddWordTable -Hashtable $ScopesWordTable `
				-Columns Scope `
				-Headers  "Scopes" `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 225;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			ElseIf($Text)
			{
				Line 1 "Scopes"
				Line 2 "All"

				ForEach($Scope in $Scopes)
				{
					Line 2 $Scope.ScopeName;
				}
				Line 0 ""
			}
			ElseIf($HTML)
			{
				WriteHTMLLine 4 0 "Scopes"
				$rowdata = @()
				$rowdata += @(,("All",$htmlwhite))

				ForEach($Scope in $Scopes)
				{
					$rowdata += @(,($Scope.ScopeName,$htmlwhite))
				}
				$columnHeaders = @(
				'Scopes',($global:htmlsb))

				$msg = ""
				$columnWidths = @("225")
				FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "225"
			}
		}
		Else
		{
			$txt = "Unable to retrieve Scopes for Machine Catalog $($Catalog.Name)"
			OutputWarning $txt
		}
		
		If($MachineCatalogs)
		{
			If($Null -ne $Machines)
			{
				Write-Verbose "$(Get-Date -Format G): `t`tProcessing Machines in $($Catalog.Name)"
				
				If($MSWord -or $PDF)
				{
					WriteWordLine 4 0 "Machines"
					[System.Collections.Hashtable[]] $MachinesWordTable = @();
				}
				ElseIf($Text)
				{
					Line 1 "Machines"
				}
				ElseIf($HTML)
				{
					WriteHTMLLine 4 0 "Machines"
					$rowdata = @()
				}
				
				ForEach($Machine in $Machines)
				{
					If($MSWord -or $PDF)
					{
						$MachinesWordTable += @{
						MachineName = $Machine.MachineName;
						}
					}
					ElseIf($Text)
					{
						Line 2 $Machine.MachineName
					}
					ElseIf($HTML)
					{
						$rowdata += @(,($Machine.MachineName,$htmlwhite))
					}
				}
				
				If($MSWord -or $PDF)
				{
					If($MachinesWordTable.Count -eq 0)
					{
						$MachinesWordTable += @{
						MachineName = "None found";
						}
					}
					
					$Table = AddWordTable -Hashtable $MachinesWordTable `
					-Columns MachineName `
					-Headers "Machine Names" `
					-Format $wdTableGrid `
					-AutoFit $wdAutoFitFixed;

					SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

					$Table.Columns.Item(1).Width = 225;

					$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

					FindWordDocumentEnd
					$Table = $Null
					WriteWordLine 0 0 ""
				}
				ElseIf($Text)
				{
					Line 0 ""
				}
				ElseIf($HTML)
				{
					$columnHeaders = @(
					'Machine Names',($global:htmlsb))

					$msg = ""
					$columnWidths = @("225")
					FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "225"
				}
				
				Write-Verbose "$(Get-Date -Format G): `t`tProcessing administrators for Machines in $($Catalog.Name)"
				$Admins = GetAdmins "Catalog" $Catalog.Name
				
				If($? -and ($Null -ne $Admins))
				{
					OutputAdminsForDetails $Admins
				}
				ElseIf($? -and ($Null -eq $Admins))
				{
					$txt = "There are no administrators for Machines in $($Catalog.Name)"
					OutputNotice $txt
				}
				Else
				{
					$txt = "Unable to retrieve administrators for Machines in $($Catalog.Name)"
					OutputWarning $txt
				}
				
				ForEach($Machine in $Machines)
				{
					OutputMachineDetails $Machine
				}
			}
		}
	}
}
#endregion

#region AppDisks
Function ProcessAppDisks
{
	Write-Verbose "$(Get-Date -Format G): Retrieving AppDisks"

	$txt = "AppDisks"
	If($MSWord -or $PDF)
	{
		$Selection.InsertNewPage()
		WriteWordLine 1 0 $txt
	}
	ElseIf($Text)
	{
		Line 0 $txt
		Line 0 ""
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 1 0 $txt
	}

	$AllAppDisks = Get-AppLibAppDisk @XDParams2 -SortBy AppDiskName 

	If($? -and ($Null -ne $AllAppDisks))
	{
		Write-Verbose "$(Get-Date -Format G): `tProcessing AppDisks"
		
		OutputAppDiskTable $AllAppDisks
		
		ForEach($AppDisk in $AllAppDisks)
		{
			$Script:TotalAppDisks++
			
			If($AppDisk)
			{
				OutputAppDisk $AppDisk
			}
		}
	}
	ElseIf($? -and ($Null -eq $AllAppDisks))
	{
		$txt = "There are no AppDisks"
		OutputNotice $txt
	}
	Else
	{
		$txt = "Unable to retrieve AppDisks"
		OutputWarning $txt
	}
	Write-Verbose "$(Get-Date -Format G): "
}

Function OutputAppDiskTable
{
	Param([object] $AllAppDisks)

	If($MSWord -or $PDF)
	{
		[System.Collections.Hashtable[]] $WordTable = @();
	}
	ElseIf($HTML)
	{
		$rowdata = @()
	}
		
	ForEach($AppDisk in $AllAppDisks)
	{
		Write-Verbose "$(Get-Date -Format G): `t`tAdding AppDisk $($AppDisk.AppDiskName)"
		
		$xAppDiskState = ""
		Switch($AppDisk.State)
		{
			"Cloning"		{$xAppDiskState = "Cloning"; Break}
			"Creating"		{$xAppDiskState = "Creating"; Break}
			"Deleting"		{$xAppDiskState = "Deleting"; Break}
			"Error"			{$xAppDiskState = "Error"; Break}
			"Importing"		{$xAppDiskState = "Importing"; Break}
			"None"			{$xAppDiskState = "None"; Break}
			"Populating"	{$xAppDiskState = "Ready to install applications"; Break}
			"Ready"			{$xAppDiskState = "Ready"; Break}
			"Sealing"		{$xAppDiskState = "Sealing"; Break}
			"Unknown"		{$xAppDiskState = "Unknown"; Break}
			"Unsupported"	{$xAppDiskState = "Unsupported"; Break}
			Default			{$xAppDiskState = "Unable to determine AppDisk State: $($AppDisk.State)"; Break}
		}
		
		If($MSWord -or $PDF)
		{
			$WordTable +=  @{
			AppDiskName = $AppDisk.AppDiskName; 
			AppDiskState = $xAppDiskState
			}
		}
		ElseIf($Text)
		{
			Line 1 "AppDisk Name`t: " $AppDisk.AppDiskName
			Line 1 "State`t`t: " $xAppDiskState
			Line 0 ""
		}
		ElseIf($HTML)
		{
			$rowdata += @(,(
			$AppDisk.AppDiskName,$htmlwhite,
			$xAppDiskState,$htmlwhite))
		}
	}
	
	If($MSWord -or $PDF)
	{
		$Table = AddWordTable -Hashtable $WordTable `
		-Columns  AppDiskName, AppDiskState `
		-Headers  "Name", "State" `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitContent;

		SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
	}
	ElseIf($HTML)
	{
		$columnHeaders = @(
		'Name',($global:htmlsb),
		'State',($global:htmlsb)
		)

		$msg = ""
		FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders
	}
}

Function OutputAppDisk
{
	Param([object] $AppDisk)
	
	If($MSWORD -or $PDF)
	{
		$Selection.InsertNewPage()
		WriteWordLine 3 0 "AppDisk: " $AppDisk.AppDiskName
	}
	ElseIf($Text)
	{
		Line 0 "AppDisk: " $AppDisk.AppDiskName
		Line 0 ""
	}
	ElseIf($HTML)
	{
		WriteHtmlLine 3 0 "AppDisk: " $AppDisk.AppDiskName
	}
	
	OutputAppDiskDetails $AppDisk
	OutputAppDiskApplications $AppDisk
	OutputAppDiskDeliveryGroups $AppDisk
	OutputAppDiskAdmins $AppDisk
}

Function OutputAppDiskDetails
{
	Param([object] $AppDisk)

	Write-Verbose "$(Get-Date -Format G): `t`tProcessing details"
	$xCompatibility = ""
	Switch ($AppDisk.Compatibility)
	{
		"Compatible"		{$xCompatibility = "Compatible"; Break}
		"None"				{$xCompatibility = "None"; Break}
		"ProblemsDetected"	{$xCompatibility = "Problems detected"; Break}
		"Unknown"			{$xCompatibility = "Unknown"; Break}
		"Unsupported"		{$xCompatibility = "Unknown (AppDNA required)"; Break}
		Default				{$xCompatibility = "Unable to determine Compatibility: $($AppDisk.Compatibility)"; Break}
	}
	
	#get preparation machine details
	$PrepMachine = Get-BrokerMachine @XDParams2 -SID $AppDisk.ReservedMachineSid
	
	If($? -and $Null -ne $PrepMachine)
	{
		$PrepMachineName = $PrepMachine.MachineName
		$PrepMachineRegistrationState = $PrepMachine.RegistrationState.ToString()

		Switch ($PrepMachine.PowerState)
		{
			"Off"			{$PrepMachinePowerState = "Off"; Break}
			"On"			{$PrepMachinePowerState = "On"; Break}
			"Resuming"		{$PrepMachinePowerState = "Resuming"; Break}
			"Suspended"		{$PrepMachinePowerState = "Suspended"; Break}
			"Suspending"	{$PrepMachinePowerState = "Suspending"; Break}
			"TurningOff"	{$PrepMachinePowerState = "Turning Off"; Break}
			"TurningOn"		{$PrepMachinePowerState = "Turning On"; Break}
			"Unavailable"	{$PrepMachinePowerState = "Unavailable"; Break}
			"Unknown"		{$PrepMachinePowerState = "Unknown"; Break}
			"Unmanaged"		{$PrepMachinePowerState = "Unmanaged"; Break}
			Default			{$PrepMachinePowerState = "Unable to determine machine Power State: $($PrepMachine.PowerState)"; Break}
		}
		
	}
	ElseIf($? -and ($Null -eq $PrepMachine))
	{
		$txt = "There is no Preparation machine"
		OutputNotice $txt
		$PrepMachineName = "Unknown"
		$PrepMachinePowerState = "Unknown"
		$PrepMachineRegistrationState = "Unknown"
	}
	Else
	{
		$txt = "Unable to retrieve Preparation machine"
		OutputWarning $txt
		$PrepMachineName = "Unknown"
		$PrepMachinePowerState = "Unknown"
		$PrepMachineRegistrationState = "Unknown"
	}
	
	If($MSWORD -or $PDF)
	{
		WriteWordLine 4 0 "Details"
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "Name"; Value = $AppDisk.AppDiskName; }) > $Null
		$ScriptInformation.Add(@{Data = "Description"; Value = $AppDisk.Description; }) > $Null
		$ScriptInformation.Add(@{Data = "Resources"; Value = $AppDisk.HostingUnitName[0]; }) > $Null
		$cnt = -1
		ForEach($tmp in $AppDisk.HostingUnitName)
		{
			$cnt++
			If($cnt -gt 0)
			{
				$ScriptInformation.Add(@{Data = ""; Value = $tmp; }) > $Null
			}
		}
		$ScriptInformation.Add(@{Data = "Compatibility"; Value = $xCompatibility; }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 100;
		$Table.Columns.Item(2).Width = 250;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		
		WriteWordLine 4 0 "Preparation machine"
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "Machine name"; Value = $PrepMachineName; }) > $Null
		$ScriptInformation.Add(@{Data = "Power state"; Value = $PrepMachinePowerState; }) > $Null
		$ScriptInformation.Add(@{Data = "Registration state"; Value = $PrepMachineRegistrationState; }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 100;
		$Table.Columns.Item(2).Width = 250;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		
	}
	ElseIf($Text)
	{
		Line 0 "Details"
		Line 1 "Name`t`t: " $AppDisk.AppDiskName
		Line 1 "Description`t: " $AppDisk.Description
		Line 1 "Resources`t: " $AppDisk.HostingUnitName[0]
		$cnt = -1
		ForEach($tmp in $AppDisk.HostingUnitName)
		{
			$cnt++
			If($cnt -gt 0)
			{
				Line 3 "" $tmp
			}
		}
		Line 1 "Compatibility`t: " $xCompatibility
		Line 0 ""
		
		Line 0 "Preparation machine"
		Line 1 "Machine name`t`t: " $PrepMachineName
		Line 1 "Power state`t`t: " $PrepMachinePowerState
		Line 1 "Registration state`t: " $PrepMachineRegistrationState
		Line 0 ""
		
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 4 0 "Details"
		$columnHeaders = @("Name",($global:htmlsb),$AppDisk.AppDiskName,$htmlwhite)
		$rowdata += @(,('Description',($global:htmlsb),$AppDisk.Description,$htmlwhite))
		$rowdata += @(,('Resources',($global:htmlsb),$AppDisk.HostingUnitName[0],$htmlwhite))
		$cnt = -1
		ForEach($tmp in $AppDisk.HostingUnitName)
		{
			$cnt++
			If($cnt -gt 0)
			{
				$rowdata += @(,('Resources',($global:htmlsb),$tmp,$htmlwhite))
			}
		}
		$rowdata += @(,('Compatibility',($global:htmlsb),$xCompatibility,$htmlwhite))
		$msg = ""
		$columnWidths = @("100px","250px")
		FormatHTMLTable $msg -rowarray $rowdata -columnArray $columnheaders -fixedWidth $columnWidths -tablewidth "350"
		
		WriteHTMLLine 4 0 "Preparation machine"
		$columnHeaders = @("Machine name",($global:htmlsb),$PrepMachineName,$htmlwhite)
		$rowdata += @(,('Power state',($global:htmlsb),$PrepMachinePowerState,$htmlwhite))
		$rowdata += @(,('Registration state',($global:htmlsb),$PrepMachineRegistrationState,$htmlwhite))
		$msg = ""
		$columnWidths = @("100px","250px")
		FormatHTMLTable $msg -rowarray $rowdata -columnArray $columnheaders -fixedWidth $columnWidths -tablewidth "350"
		WriteHTMLLine 0 0 ""
	}
}

Function OutputAppDiskApplications
{
	Param([object] $AppDisk)
	
	Write-Verbose "$(Get-Date -Format G): `t`tProcessing applications"
	$Apps = $AppDisk.Packages
	
	If($Null -ne $Apps)
	{
		$Apps = $Apps | Sort-Object Name
		
		OutputApplicationsOnStartMenu $Apps
		OutputInstalledPackages $Apps
	}
}

Function OutputApplicationsOnStartMenu
{
	Param([object] $Apps)
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 4 0 "Applications on Start Menu"
		[System.Collections.Hashtable[]] $AppWordTable = @();
		ForEach($App in $Apps)
		{
			$AppWordTable += @{AppName = $App.Name;}
		}
		$Table = AddWordTable -Hashtable $AppWordTable `
		-Columns AppName `
		-Headers "Name" `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitContent;

		SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
	}
	ElseIf($Text)
	{
		Line 0 "Applications on Start Menu"
		Line 0 ""
		$cnt = -1
		ForEach($App in $Apps)
		{
			$cnt++
			If($cnt -eq 0)
			{
				Line 1 "Name:   " $App.Name
			}
			Else
			{
				Line 2 "" $App.Name
			}
		}
		Line 0 ""
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 4 0 "Applications on Start Menu"
		$rowdata = @()
		ForEach($App in $Apps)
		{
			$rowdata += @(,(
			$App.Name,$htmlwhite))
		}

		$columnHeaders = @(
		'Name',($global:htmlsb))

		$msg = ""
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders
	}
}

Function OutputInstalledPackages
{
	Param([object] $Apps)
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 4 0 "Installed packages"
		[System.Collections.Hashtable[]] $AppWordTable = @();
		ForEach($App in $Apps)
		{
			$AppWordTable += @{ 
			AppName = $App.Name;
			AppPublisher = $App.Manufacturer;
			AppVersion = $App.Version;
			}
		}
		$Table = AddWordTable -Hashtable $AppWordTable `
		-Columns AppName,AppPublisher,AppVersion `
		-Headers "Name", "Publisher", "Version" `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitContent;

		SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
	}
	ElseIf($Text)
	{
		Line 0 "Installed packages"
		Line 0 ""
		ForEach($App in $Apps)
		{
			Line 1 "Name`t`t: " $App.Name
			Line 1 "Publisher`t: " $App.Manufacturer
			Line 1 "Version`t`t: " $App.Version
			Line 0 ""
		}
		Line 0 ""
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 4 0 "Installed packages"
		$rowdata = @()
		ForEach($App in $Apps)
		{
			$rowdata += @(,($App.Name,$htmlwhite,
							$App.Manufacturer,$htmlwhite,
							$App.Version,$htmlwhite))
		}

		$columnHeaders = @('Name',($global:htmlsb),
							'Publisher',($global:htmlsb),
							'Version',($global:htmlsb))

		$msg = ""
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders
	}
}

Function OutputAppDiskDeliveryGroups
{
	Param([object] $AppDisk)
	
	Write-Verbose "$(Get-Date -Format G): `t`tProcessing delivery groups"
	
	$DGs = Get-BrokerDesktopGroup @XDParams2 -AppDisk $AppDisk.AppDiskUid
	
	If($? -and $Null -ne $DGs)
	{
		[array]$DeliveryGroups = $DGs | Sort-Object Name
		
		If($MSWord -or $PDF)
		{
			WriteWordLine 4 0 "Delivery Groups"
			[System.Collections.Hashtable[]] $DGWordTable = @();
			ForEach($Group in $DeliveryGroups)
			{
				$DGWordTable += @{DGName = $Group.Name;}
			}
			$Table = AddWordTable -Hashtable $DGWordTable `
			-Columns DGName `
			-Headers "Name" `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitContent;

			SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
		}
		ElseIf($Text)
		{
			Line 0 "Delivery Groups"
			Line 0 ""
			$cnt = -1
			ForEach($Group in $DeliveryGroups)
			{
				$cnt++
				If($cnt -eq 0)
				{
					Line 1 "Name:   " $Group.Name
				}
				Else
				{
					Line 2 "" $Group.Name
				}
			}
			Line 0 ""
		}
		ElseIf($HTML)
		{
			WriteHTMLLine 4 0 "Delivery Groups"
			$rowdata = @()
			ForEach($Group in $DeliveryGroups)
			{
				$rowdata += @(,(
				$Group.Name,$htmlwhite))
			}

			$columnHeaders = @(
			'Name',($global:htmlsb))

			$msg = ""
			FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders
		}
	}
	ElseIf($? -and ($Null -eq $DGs))
	{
		$txt = "There are no Delivery Groups for $($AppDisk.AppDiskName)"
		OutputNotice $txt
	}
	Else
	{
		$txt = "Unable to retrieve Delivery Groups for $($AppDisk.AppDiskName)"
		OutputWarning $txt
	}
}

Function OutputAppDiskAdmins
{
	Param([object] $AppDisk)
	
	Write-Verbose "$(Get-Date -Format G): `t`tProcessing administrators"
	$Admins = GetAdmins "AppDisk"
	
	If($? -and ($Null -ne $Admins))
	{
		OutputAdminsForDetails $Admins
	}
	ElseIf($? -and ($Null -eq $Admins))
	{
		$txt = "There are no administrators for $($AppDisk.AppDiskName)"
		OutputNotice $txt
	}
	Else
	{
		$txt = "Unable to retrieve administrators for $($AppDisk.AppDiskName)"
		OutputWarning $txt
	}
}
#endregion

#region function to output machine/desktop details
Function GetVDARegistryKeys
{
	Param([string]$ComputerName, [string]$xType)
	#2.44 alpha sorted the registry paths

	#Get-VDARegKeyToObject "HKLM:\" "" $ComputerName

	If($xType -eq "Server")
	{
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix" "CtxKlMap" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\AppV" "Features" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\Citrix Virtual Desktop Agent" "DisableLogonUISuppression" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\Citrix Virtual Desktop Agent" "DisableLogonUISuppressionForSmartCardPublishedApps" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\CtxHook" "ExcludedImageNames" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\CtxHook\AppInit_Dlls\SHAppBarHook" "FilePathName" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\CtxHook\AppInit_Dlls\SHAppBarHook" "Flag" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\CtxHook\AppInit_Dlls\SHAppBarHook" "Settings" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\CtxKlMap" "DisableWindowHook" $ComputerName $xType #CVAD2009
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\Graphics" "BTLLossyThreshold" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\HDX3D\BitmapRemotingConfig" "EnableDDAPICursor" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\ICA" "DisableAppendMouse" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\ICA\Thinwire" "EnableDrvTw2NotifyMonitorOrigin" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\ICAClient\Engine\Configuration\Advanced\Modules\ClientAudio" "EchoCancellation" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\ICAClient\GenericUSB" "EnableBloombergHID" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\Reconnect" "DisableGPCalculation" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\Reconnect" "FastReconnect" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\SmartCard" "EnableReaderInsertCountReporting" $ComputerName $xType #added for CVAD2009
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\SmartCard" "EnableSCardHookVcResponseTimeout" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\StreamingHook" "EnableReadImageFileExecOptionsExclusionList" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\UniversalPrintDrivers\PDF" "EnablePostscriptSimulation" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\UniversalPrintDrivers\PDF" "EnableFullFontEmbedding" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\VirtualDesktopAgent" "SupportMultipleForest" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\VirtualDesktopAgent" "ListOfSIDs" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\Explorer.exe" "DontUseDesktopChangeRouter" $ComputerName $xType #CVAD2103
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Policies\Citrix\VirtualDesktopAgent" "SupportMultipleForestDdcLookup" $ComputerName $xType #CVAD2009
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Wow6432Node\Citrix\CtxHook" "ExcludedImageNames" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Wow6432Node\Citrix\ICAClient\Engine\Configuration\Advanced\Modules\GfxRender" "UseDirect3D" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Wow6432Node\Citrix\ICAClient\Engine\Configuration\Advanced\Modules\GfxRender" "PresentDevice" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Wow6432Node\Citrix\ICAClient\Engine\Configuration\Advanced\Modules\GfxRender" "MaxNumRefFrames" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Wow6432Node\Citrix\ICAClient\Engine\Configuration\Advanced\Modules\ClientAudio" "EchoCancellation" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Wow6432Node\Citrix\StreamingHook" "EnableReadImageFileExecOptionsExclusionList" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SYSTEM\CurrentControlSet\Control\Citrix" "EnableVisualEffect" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SYSTEM\CurrentControlSet\Control\Citrix\wfshell\TWI" "ApplicationLaunchWaitTimeoutMS" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SYSTEM\CurrentControlSet\Control\Citrix\wfshell\TWI" "LogoffCheckerStartupDelayInSeconds" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SYSTEM\CurrentControlSet\Control\Citrix\wfshell\TWI" "LogoffCheckSysModules" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SYSTEM\CurrentControlSet\Control\Citrix\wfshell\TWI" "SeamlessFlags" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SYSTEM\CurrentControlSet\Control\Citrix\wfshell\TWI" "WorkerWaitInterval" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SYSTEM\CurrentControlSet\Control\Citrix\wfshell\TWI" "WorkerFullCheckInterval" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SYSTEM\CurrentControlSet\Control\Citrix\wfshell\TWI" "AAHookFlags" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SYSTEM\CurrentControlSet\Control\SCMConfig" "EnableSvchostMitigationPolicy" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SYSTEM\CurrentControlSet\Control\TerminalServer" "fSingleSessionPerUser" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\ica-tcp\AudioConfig" "MaxPolicyAge" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\ica-tcp\AudioConfig" "PolicyTimeout" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\Wds\icawd" "MtuDiscovery" $ComputerName $xType #CVAD2009
		Get-VDARegKeyToObject "HKLM:\SYSTEM\CurrentControlSet\Services\CtxDNDSvc" "Enabled" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SYSTEM\CurrentControlSet\Services\CtxUvi" "UviProcessExcludes" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SYSTEM\CurrentControlSet\Services\CtxUvi" "UviEnabled" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SYSTEM\Currentcontrolset\Services\picadm\Parameters" "DisableFullStreamWrite" $ComputerName $xType
	}
	ElseIf($xType -eq "Desktop")
	{
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix" "CtxKlMap" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\AppV" "Features" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\Audio" "CleanMappingWhenDisconnect" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\Citrix Virtual Desktop Agent" "DisableLogonUISuppression" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\CtxHook" "ExcludedImageNames" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\CtxKlMap" "DisableWindowHook" $ComputerName $xType #CVAD2009
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\Graphics" "BTLLossyThreshold" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\HDX3D\BitmapRemotingConfig" "EnableDDAPICursor" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\HDX3D\BitmapRemotingConfig" "HKLM_DisableMontereyFBCOnInit" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\ICA" "DisableAppendMouse" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\ICA\Thinwire" "EnableDrvTw2NotifyMonitorOrigin" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\ICAClient\Engine\Configuration\Advanced\Modules\ClientAudio" "EchoCancellation" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\ICAClient\GenericUSB" "EnableBloombergHID" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\PortICA" "DisableRemotePCSleepPreventer" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\PortICA\RemotePC" "RpcaMode" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\PortICA\RemotePC" "RpcaTimeout" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\Reconnect" "DisableGPCalculation" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\Reconnect" "FastReconnect" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\SmartCard" "EnableReaderInsertCountReporting" $ComputerName $xType #added for CVAD2009
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\SmartCard" "EnableSCardHookVcResponseTimeout" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\UniversalPrintDrivers\PDF" "EnablePostscriptSimulation" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\UniversalPrintDrivers\PDF" "EnableFullFontEmbedding" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\VirtualDesktopAgent" "SupportMultipleForest" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Citrix\VirtualDesktopAgent" "ListOfSIDs" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Policies\Citrix\VirtualDesktopAgent" "SupportMultipleForestDdcLookup" $ComputerName $xType #CVAD2009
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Wow6432Node\Citrix\CtxHook" "ExcludedImageNames" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Wow6432Node\Citrix\ICAClient\Engine\Configuration\Advanced\Modules\GfxRender" "UseDirect3D" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Wow6432Node\Citrix\ICAClient\Engine\Configuration\Advanced\Modules\GfxRender" "PresentDevice" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Wow6432Node\Citrix\ICAClient\Engine\Configuration\Advanced\Modules\GfxRender" "MaxNumRefFrames" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SOFTWARE\Wow6432Node\Citrix\ICAClient\Engine\Configuration\Advanced\Modules\ClientAudio" "EchoCancellation" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SYSTEM\CurrentControlSet\Control\Citrix\wfshell\TWI" "LogoffCheckSysModules" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\Wds\icawd" "MtuDiscovery" $ComputerName $xType #CVAD2009
		Get-VDARegKeyToObject "HKLM:\SYSTEM\CurrentControlSet\Services\CtxDNDSvc" "Enabled" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SYSTEM\CurrentControlSet\Services\CtxUvi" "UviProcessExcludes" $ComputerName $xType
		Get-VDARegKeyToObject "HKLM:\SYSTEM\CurrentControlSet\Services\CtxUvi" "UviEnabled" $ComputerName $xType
	}
}

Function Get-VDARegKeyToObject 
{
	#function contributed by Andrew Williamson @ Fujitsu Services
    param([string]$RegPath,
    [string]$RegKey,
    [string]$ComputerName,
	[string]$xType)
	
    $val = Get-RegistryValue2 $RegPath $RegKey $ComputerName
	
    If($Null -eq $val) 
	{
        $tmp = "Not set"
    } 
	Else 
	{
	    $tmp = $val
    }
	$obj1 = [PSCustomObject] @{
		RegKey       = $RegPath	
		RegValue     = $RegKey	
		VDAType      = $xType	
		ComputerName = $ComputerName	
		Value        = $tmp
	}
	$null = $Script:VDARegistryItems.Add($obj1)
}

Function OutputMachineDetails
{
	Param([object] $Machine)
	
	#V2.10 10-Feb-2018, if HostedMachineName is empty, like for RemotePC and unregistered machines, use the first part of DNSName
	$tmp = $Machine.DNSName.Split(".")
	$xMachineName = $tmp[0]
	$tmp = $Null
	Write-Verbose "$(Get-Date -Format G): `t`tOutput Machine $xMachineName"
	
	#V2.20
	#first see if VDA is Linux
	If($Machine.OSType -Like "*linux*")
	{
		#Linux VDAs do not have an easily accessible registry so skip them
		$LinuxVDA = $True
	}
	Else
	{
		$LinuxVDA = $False
		If($VDARegistryKeys)
		{
			Write-Verbose "$(Get-Date -Format G): `t`t`tTesting $($xMachineName)"
			$MachineIsOnline = $False
			
			If(Resolve-DnsName -Name $xMachineName -EA 0 4>$Null)
			{
				$results = Test-NetConnection -ComputerName $xMachineName -InformationLevel Quiet -EA 0 3>$Null
				If($results)
				{
					Write-Verbose "$(Get-Date -Format G): `t`t`t`t$($xMachineName) is online"
					$MachineIsOnline = $True
				}
				Else
				{
					Write-Verbose "$(Get-Date -Format G): `t`t`t`t$($xMachineName) is offline. VDA Registry Key data cannot be gathered."
				}
			}
			Else
			{
				Write-Verbose "$(Get-Date -Format G): `t`t`t`t$($xMachineName) was not found in DNS. VDA Registry Key data cannot be gathered."
			}
		}
	}
	
	$xAssociatedUserFullNames = @()
	ForEach($Value in $Machine.AssociatedUserFullNames)
	{
		$xAssociatedUserFullNames += "$($Value)"
	}
		
	$xAssociatedUserNames = @()
	ForEach($Value in $Machine.AssociatedUserNames)
	{
		$xAssociatedUserNames += "$($Value)"
	}
	
	$xAssociatedUserUPNs = @()
	ForEach($Value in $Machine.AssociatedUserUPNs)
	{
		$xAssociatedUserUPNs += "$($Value)"
	}

	$xDesktopConditions = @()
	ForEach($Value in $Machine.DesktopConditions)
	{
		$xDesktopConditions += "$($Value)"
	}
	
	If($xDesktopConditions.Count -eq 0)
	{
		$xDesktopConditions += "-"
	}

	$xAllocationType = ""
	If($Machine.AllocationType -eq "Static")
	{
		$xAllocationType = "Private"
	}
	Else
	{
		$xAllocationType = $Machine.AllocationType
	}

	$xInMaintenanceMode = ""
	If($Machine.InMaintenanceMode)
	{
		$xInMaintenanceMode = "On"
	}
	Else
	{
		$xInMaintenanceMode ="Off"
	}

	$MaintModeReason = ""
	Switch($Machine.MaintenanceModeReason)
	{
		"Administrator"				{$MaintModeReason = "Machine was manually placed in maintenance mode by an administrator"; Break}
		"MaxFailedRegistrations"	{$MaintModeReason = "Machine was automatically placed in maintenance mode due to reaching the maximum failed registration limit"; Break}
		"None"						{$MaintModeReason = "Machine is not in maintenance mode"; Break}
		Default						{$MaintModeReason = "Unable to determine Maintenance Mode Reason: $($Machine.MaintenanceModeReason)"; Break}
	}
	
	$xWindowsConnectionSetting = ""
	If($Machine.SessionSupport -eq "MultiSession")
	{
		Switch ($Machine.WindowsConnectionSetting)
		{
			"LogonEnabled"			{$xWindowsConnectionSetting = "Logon Enabled"}
			"Draining"				{$xWindowsConnectionSetting = "Draining"}
			"DrainingUntilRestart"	{$xWindowsConnectionSetting = "Draining until restart"}
			"LogonDisabled"			{$xWindowsConnectionSetting = "Logons Disabled"}
			Default					{$xWindowsConnectionSetting = "Unable to determine WindowsConnectionSetting: $($Machine.WindowsConnectionSetting)"; Break}
		}
	}

	$xIsPhysical = ""
	If($Machine.IsPhysical)
	{
		$xIsPhysical = "Physical"
	}
	Else
	{
		$xIsPhysical ="Virtual"
	}

	$xPvdStage = "-"
	If($xAllocationType -eq "Private")
	{
		If($Machine.PvdStage -eq "None")
		{
			$xPvdStage = "Ready"
		}
		Else
		{
			$xPvdStage = $Machine.PvdStage
		}
	}

	$xSummaryState = ""
	If($Machine.SummaryState -eq "InUse")
	{
		$xSummaryState = "In Use"
	}
	Else
	{
		$xSummaryState = $Machine.SummaryState.ToString()
	}

	$xTags = @()
	ForEach($Value in $Machine.Tags)
	{
		$xTags += "$($Value)"
	}
	
	If($xTags.Count -eq 0)
	{
		$xTags += "-"
	}

	$xApplicationsInUse = @()
	ForEach($value in $Machine.ApplicationsInUse)
	{
		$xApplicationsInUse += "$($value)"
	}
	
	If($xApplicationsInUse.Count -eq 0)
	{
		$xApplicationsInUse += "-"
	}

	$xPublishedApplications = @()
	ForEach($value in $Machine.PublishedApplications)
	{
		$xPublishedApplications += "$($value)"
	}
	
	If($xPublishedApplications.Count -eq 0)
	{
		$xPublishedApplications += "-"
	}

	$xSessionSecureIcaActive = ""
	If($Machine.SessionSecureIcaActive)
	{
		$xSessionSecureIcaActive = "Yes"
	}
	Else
	{
		$xSessionSecureIcaActive = "-"
	}

	$xLastDeregistrationReason = ""
	Switch ($Machine.LastDeregistrationReason)
	{
		$Null									{$xLastDeregistrationReason = "-"; Break}
		"AgentAddressResolutionFailed"			{$xLastDeregistrationReason = "Agent Address Resolution Failed"; Break}
		"AgentNotContactable"					{$xLastDeregistrationReason = "Agent Not Contactable"; Break}
		"AgentRejectedSettingsUpdate"			{$xLastDeregistrationReason = "Agent Rejected Settings Update"; Break}
		"AgentRequested"						{$xLastDeregistrationReason = "Agent Requested"; Break}
		"AgentShutdown"							{$xLastDeregistrationReason = "Agent Shutdown"; Break}
		"AgentSuspended"						{$xLastDeregistrationReason = "Agent Suspended"; Break}
		"AgentWrongActiveDirectoryOU"			{$xLastDeregistrationReason = "Agent Wrong Active Directory OU"; Break}
		"BrokerRegistrationLimitReached"		{$xLastDeregistrationReason = "Broker Registration Limit Reached"; Break}
		"ContactLost"							{$xLastDeregistrationReason = "Contact Lost"; Break}
		"DesktopRemoved"						{$xLastDeregistrationReason = "Desktop Removed"; Break}
		"DesktopRestart"						{$xLastDeregistrationReason = "Desktop Restart"; Break}
		"EmptyRegistrationRequest"				{$xLastDeregistrationReason = "Empty Registration Request"; Break}
		"FunctionalLevelTooLowForCatalog"		{$xLastDeregistrationReason = "Functional Level Too Low For Catalog"; Break}
		"FunctionalLevelTooLowForDesktopGroup"	{$xLastDeregistrationReason = "Functional Level Too Low For Desktop Group"; Break}
		"IncompatibleVersion"					{$xLastDeregistrationReason = "Incompatible Version"; Break}
		"InconsistentRegistrationCapabilities"	{$xLastDeregistrationReason = "Inconsistent Registration Capabilities"; Break}
		"InvalidRegistrationRequest"			{$xLastDeregistrationReason = "Invalid Registration Request"; Break}
		"MissingAgentVersion"					{$xLastDeregistrationReason = "Missing Agent Version"; Break}
		"MissingRegistrationCapabilities"		{$xLastDeregistrationReason = "Missing Registration Capabilities"; Break}
		"NotLicensedForFeature"					{$xLastDeregistrationReason = "Not Licensed For Feature"; Break}
		"PowerOff"								{$xLastDeregistrationReason = "Power Off"; Break}
		"SendSettingsFailure"					{$xLastDeregistrationReason = "Send Settings Failure"; Break}
		"SessionAuditFailure"					{$xLastDeregistrationReason = "Session Audit Failure"; Break}
		"SessionPrepareFailure"					{$xLastDeregistrationReason = "Session Prepare Failure"; Break}
		"SettingsCreationFailure"				{$xLastDeregistrationReason = "Settings Creation Failure"; Break}
		"SingleMultiSessionMismatch"			{$xLastDeregistrationReason = "Single Multi Session Mismatch"; Break}
		"UnknownError"							{$xLastDeregistrationReason = "Unknown Error"; Break}
		"UnsupportedCredentialSecurityVersion"	{$xLastDeregistrationReason = "Unsupported Credential Security Version"; Break} 
		Default 								{$xLastDeregistrationReason = "Unable to determine LastDeregistrationReason: $($Machine.LastDeregistrationReason)"; Break}
	}

	$xPersistUserChanges = ""
	Switch ($Machine.PersistUserChanges)
	{
		"OnLocal"	{$xPersistUserChanges = "On Local"; Break}
		"Discard"	{$xPersistUserChanges = "Discard"; Break}
		"OnPvD"		{$xPersistUserChanges = "On personal vDisk"; Break}
		Default		{$xPersistUserChanges = "Unable to determine the value of PersistUserChanges: $($Machine.PersistUserChanges)"; Break}
	}

	$xWillShutdownAfterUse = ""
	If($Machine.WillShutdownAfterUse)
	{
		$xWillShutdownAfterUse = "Yes"
	}
	Else
	{
		$xWillShutdownAfterUse = "No"
	}

	$WillShutdownAfterUseReason = ""
	Switch($Machine.WillShutdownAfterUseReason)
	{
		"None"						{$WillShutdownAfterUseReason = "Machine will not shutdown after use"; Break}
		"ResetDiskImage"			{$WillShutdownAfterUseReason = "Machine will shutdown after use to reset its disk image"; Break}
		"ScheduledNaturalReboot"	{$WillShutdownAfterUseReason = "Machine will shutdown after use as part of the scheduled natural reboot process"; Break}
		"OnDemandNaturalReboot"		{$WillShutdownAfterUseReason = "Machine will shutdown after use as part of an on-demand natural reboot process"; Break}
		Default						{$WillShutdownAfterUseReason = "Unable to determine Will Shutdown After Use Reason: $($Machine.WillShutdownAfterUseReason)"; Break}
	}
	
	$xSessionSmartAccessTags = @()
	ForEach($value in $Machine.SessionSmartAccessTags)
	{
		$xSessionSmartAccessTags += "$($value)"
	}
	
	If($xSessionSmartAccessTags.Count -eq 0)
	{
		$xSessionSmartAccessTags += "-"
	}
	
	Switch($Machine.FaultState)
	{
		"None"			{$xMachineFaultState = "No fault; machine is healthy"; Break}
		"FailedToStart"	{$xMachineFaultState = "Last power-on operation for machine failed"; Break}
		"StuckOnBoot"	{$xMachineFaultState = "Machine does not seem to have booted following power on"; Break}
		"Unregistered"	{$xMachineFaultState = "Machine has failed to register within expected period, or its registration has been rejected"; Break}
		"MaxCapacity"	{$xMachineFaultState = "Machine is reporting itself at maximum capacity"; Break}
		Default			{$xMachineFaultState = "Unable to determine the value of FaultState: $($Machine.FaultState)"; Break}
	}

	If([String]::IsNullOrEmpty($Machine.SessionLaunchedViaHostName))
	{
		$xSessionLaunchedViaHostName = "-"
	}
	Else
	{
		$xSessionLaunchedViaHostName = $Machine.SessionLaunchedViaHostName
	}
	
	
	If([String]::IsNullOrEmpty($Machine.SessionLaunchedViaIP))
	{
		$xSessionLaunchedViaIP = "-"
	}
	Else
	{
		$xSessionLaunchedViaIP = $Machine.SessionLaunchedViaIP
	}
	
	If([String]::IsNullOrEmpty($Machine.SessionClientAddress))
	{
		$xSessionClientAddress = "-"
	}
	Else
	{
		$xSessionClientAddress = $Machine.SessionClientAddress
	}
	
	If([String]::IsNullOrEmpty($Machine.SessionClientName))
	{
		$xSessionClientName = "-"
	}
	Else
	{
		$xSessionClientName = $Machine.SessionClientName
	}
	
	If([String]::IsNullOrEmpty($Machine.SessionClientVersion))
	{
		$xSessionClientVersion = "-"
	}
	Else
	{
		$xSessionClientVersion = $Machine.SessionClientVersion
	}
	
	If([String]::IsNullOrEmpty($Machine.SessionConnectedViaHostName))
	{
		$xSessionConnectedViaHostName = "-"
	}
	Else
	{
		$xSessionConnectedViaHostName = $Machine.SessionConnectedViaHostName
	}
	
	If([String]::IsNullOrEmpty($Machine.SessionConnectedViaIP))
	{
		$xSessionConnectedViaIP = "-"
	}
	Else
	{
		$xSessionConnectedViaIP = $Machine.SessionConnectedViaIP
	}
	
	If([String]::IsNullOrEmpty($Machine.SessionProtocol))
	{
		$xSessionProtocol = "-"
	}
	Else
	{
		$xSessionProtocol = $Machine.SessionProtocol
	}
	
	If([String]::IsNullOrEmpty($Machine.SessionStateChangeTime))
	{
		$xSessionStateChangeTime = "-"
	}
	Else
	{
		$xSessionStateChangeTime = $Machine.SessionStateChangeTime
	}
	
	If([String]::IsNullOrEmpty($Machine.SessionState))
	{
		$xSessionState = "-"
	}
	Else
	{
		$xSessionState = $Machine.SessionState.ToString()
	}
	
	If([String]::IsNullOrEmpty($Machine.SessionUserName))
	{
		$xSessionUserName = "-"
	}
	Else
	{
		$xSessionUserName = $Machine.SessionUserName
	}
	
	If([String]::IsNullOrEmpty($Machine.LastConnectionTime))
	{
		$xLastConnectionTime = "-"
	}
	Else
	{
		$xLastConnectionTime = $Machine.LastConnectionTime.ToString()
	}
	
	If([String]::IsNullOrEmpty($Machine.LastConnectionUser))
	{
		$xLastConnectionUser = "-"
	}
	Else
	{
		$xLastConnectionUser = $Machine.LastConnectionUser
	}
	
	If([String]::IsNullOrEmpty($Machine.ControllerDNSName))
	{
		$xBroker = "-"
	}
	Else
	{
		$xBroker = $Machine.ControllerDNSName
	}
	
	If([String]::IsNullOrEmpty($Machine.HostingServerName))
	{
		$xHostingServerName = "-"
	}
	Else
	{
		$xHostingServerName = $Machine.HostingServerName
	}
	
	If([String]::IsNullOrEmpty($Machine.HostedMachineName))
	{
		$xHostedMachineName = "-"
	}
	Else
	{
		$xHostedMachineName = $Machine.HostedMachineName
	}

	If([String]::IsNullOrEmpty($Machine.HypervisorConnectionName))
	{
		$xHypervisorConnectionName = "-"
	}
	Else
	{
		$xHypervisorConnectionName = $Machine.HypervisorConnectionName
	}

	Switch ($Machine.PowerState)
	{
		"Off"			{$xPowerState = "Off"; Break}
		"On"			{$xPowerState = "On"; Break}
        "Resuming"		{$xPowerState = "Resuming"; Break}
		"Suspended"		{$xPowerState = "Suspended"; Break}
		"Suspending"	{$xPowerState = "Suspending"; Break}
		"TurningOff"	{$xPowerState = "Turning Off"; Break}
		"TurningOn"		{$xPowerState = "Turning On"; Break}
		"Unavailable"	{$xPowerState = "Unavailable"; Break}
		"Unknown"		{$xPowerState = "Unknown"; Break}
		"Unmanaged"		{$xPowerState = "Unmanaged"; Break}
		Default			{$xPowerState = "Unable to determine machine Power State: $($Machine.PowerState)"; Break}
	}
	
	If([String]::IsNullOrEmpty($Machine.IPAddress))
	{
		$xIPAddress = "-"
	}
	Else
	{
		$xIPAddress = $Machine.IPAddress.ToString()
	}

	If([String]::IsNullOrEmpty($Machine.LastDeregistrationTime))
	{
		$xLastDeregistrationTime = "-"
	}
	Else
	{
		$xLastDeregistrationTime = $Machine.LastDeregistrationTime.ToString()
	}

	If([String]::IsNullOrEmpty($Machine.OSType))
	{
		$xOSType = "-"
	}
	Else
	{
		$xOSType = $Machine.OSType
	}
	
	If([String]::IsNullOrEmpty($Machine.AgentVersion))
	{
		$xAgentVersion = "-"
	}
	Else
	{
		$xAgentVersion = $Machine.AgentVersion
	}

	$LastConnectionFailure = ""
	Switch($Machine.LastConnectionFailure)
	{
		"None"					{$LastConnectionFailure = "None"; Break}
		"SessionPreparation"	{$LastConnectionFailure = "Session preparation"; Break}
		"RegistrationTimeout"	{$LastConnectionFailure = "Registration timeout"; Break}
		"ConnectionTimeout"		{$LastConnectionFailure = "Connection Timeout"; Break}
		"Licensing"				{$LastConnectionFailure = "Licensing"; Break}
		"Ticketing"				{$LastConnectionFailure = "Ticketing"; Break}
		"Other"					{$LastConnectionFailure = "Other"; Break}
		Default					{$LastConnectionFailure = "Unable to determine Last Connection Failure reason: $($Machine.LastConnectionFailure)"; Break}
	}

	$ScheduledReboot = ""
	Switch($Machine.ScheduledReboot)
	{
		"None"			{$ScheduledReboot = "No reboot is scheduled"; Break}
		"Pending"		{$ScheduledReboot = "Machine is awaiting reboot but is available for us"; Break}
		"Draining"		{$ScheduledReboot = "Machine is awaiting reboot and is unavailable for new sessions; reconnections to existing connections are still allowed, however"; Break}
		"InProgress"	{$ScheduledReboot = "Machine is actively undergoing a scheduled reboot"; Break}
		"Natural"		{$ScheduledReboot = "Natural reboot in progress. Machine is awaiting a restart"; Break}
		Default			{$ScheduledReboot = "Unable to determine Scheduled Reboot reason: $($Machine.ScheduledReboot)"; Break}
	}
	
	If($MSWord -or $PDF)
	{
		$Selection.InsertNewPage()
		WriteWordLine 3 0 $Machine.DNSName
		If($Machine.SessionSupport -eq "MultiSession")
		{
			WriteWordLine 4 0 "Machine"
			[System.Collections.Hashtable[]] $ScriptInformation = @()
			$ScriptInformation += @{Data = "Name"; Value = $Machine.DNSName; }
			$ScriptInformation += @{Data = "Machine Catalog"; Value = $Machine.CatalogName; }
			$ScriptInformation += @{Data = "Delivery Group"; Value = $Machine.DesktopGroupName; }
			If($NoSessions -eq $False) #V2.27
			{
                ## GRL $xAssociatedUserFullNames can have a count of zero so $xAssociatedUserFullNames[0] isn't valid.
                [string]$name = $(If( $xAssociatedUserFullNames -is [array] -and $xAssociatedUserFullNames.Count ) { $xAssociatedUserFullNames[0] } Else { '-' } )
				$ScriptInformation += @{Data = "User Display Name"; Value = $name; }
				$cnt = -1
				ForEach($tmp in $xAssociatedUserFullNames)
				{
					$cnt++
					If($cnt -gt 0)
					{
						$ScriptInformation += @{Data = ""; Value = $tmp; }
					}
				}
                ## GRL $xAssociatedUserNames can have a count of zero so $xAssociatedUserNames[0] isn't valid.
                [string]$name = $(If( $xAssociatedUserNames -is [array] -and $xAssociatedUserNames.Count ) { $xAssociatedUserNames[0] } Else { '-' } )
				$ScriptInformation += @{Data = "User"; Value = $name; }
				$cnt = -1
				ForEach($tmp in $xAssociatedUserNames)
				{
					$cnt++
					If($cnt -gt 0)
					{
						$ScriptInformation += @{Data = ""; Value = $tmp; }
					}
				}
                ## GRL $xAssociatedUserUPNs can have a count of zero so $xAssociatedUserUPNs[0] isn't valid.
                [string]$upn = $(If( $xAssociatedUserUPNs -is [array] -and $xAssociatedUserUPNs.Count ) { $xAssociatedUserUPNs[0] } Else { '-' } )
				$ScriptInformation += @{Data = "UPN"; Value = $upn; }
				$cnt = -1
				ForEach($tmp in $xAssociatedUserUPNs)
				{
					$cnt++
					If($cnt -gt 0)
					{
						$ScriptInformation += @{Data = ""; Value = $tmp; }
					}
				}
			}
			[string]$cond = $(If( $xDesktopConditions -is [array] -and $xDesktopConditions.Count ) { $xDesktopConditions[0] } Else { '-' } )
			$ScriptInformation += @{Data = "Desktop Conditions"; Value = $cond; }
			$cnt = -1
			ForEach($tmp in $xDesktopConditions)
			{
				$cnt++
				If($cnt -gt 0)
				{
					$ScriptInformation += @{Data = ""; Value = $tmp; }
				}
			}
			$ScriptInformation += @{Data = "Allocation Type"; Value = $xAllocationType; }
			$ScriptInformation += @{Data = "Maintenance Mode"; Value = $xInMaintenanceMode; }
			$ScriptInformation += @{Data = "Maintenance Mode Reason"; Value = $MaintModeReason; }
			$ScriptInformation += @{Data = "Windows Connection Setting"; Value = $xWindowsConnectionSetting; }
			$ScriptInformation += @{Data = "Is Assigned"; Value = $Machine.IsAssigned.ToString(); }
			$ScriptInformation += @{Data = "Is Physical"; Value = $xIsPhysical; }
			$ScriptInformation += @{Data = "Provisioning Type"; Value = $Machine.ProvisioningType.ToString(); }
			$ScriptInformation += @{Data = "PvD State"; Value = $xPvdStage; }
			$ScriptInformation += @{Data = "Scheduled Reboot"; Value = $ScheduledReboot; }
			$ScriptInformation += @{Data = "Draining Until Shutdown"; Value = $Machine.DrainingUntilShutdown.ToString(); }
			#V2.14, change from Get-ConfigServiceAddedCapability -contains "ZonesSupport" to validObject
			If(validObject $Machine ZoneName)
			{
				$ScriptInformation += @{Data = "Zone"; Value = $Machine.ZoneName; }
			}
			$ScriptInformation += @{Data = "Summary State"; Value = $xSummaryState; }
            [string]$TagName = $(If( $xTags -is [array] -and $xTags.Count ) { $xTags[0] } Else { '-' } )
			$ScriptInformation += @{Data = "Tags"; Value = $TagName }
			$cnt = -1
			ForEach($tmp in $xTags)
			{
				$cnt++
				If($cnt -gt 0)
				{
					$ScriptInformation += @{Data = ""; Value = $tmp; }
				}
			}
			$ScriptInformation += @{Data = "Load Index"; Value = $Machine.LoadIndex; }

			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 200;
			$Table.Columns.Item(2).Width = 250;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""

			#V2.20
			If((!$LinuxVDA) -and $VDARegistryKeys -and $MachineIsOnline)
			{
				#First test if the Remote Registry service is enabled. If not skip the VDA registry keys
				$results = Get-Service -ComputerName $Machine.DNSName -Name "RemoteRegistry" -EA 0
				If($? -and $Null -ne $results)
				{
					If($results.Status -eq "Running")
					{
						GetVDARegistryKeys $Machine.DNSName "Server"
						$Script:ALLVDARegistryItems += $Script:VDARegistryItems
						$Script:VDARegistryItems = New-Object System.Collections.ArrayList
					}
					Else
					{
						$obj1 = [PSCustomObject] @{
							RegKey       = "N/A"
							RegValue     = "N/A"
							VDAType      = "Server"
							ComputerName = $Machine.DNSName	
							Value        = "The Remote Registry service is not running"
						}
						$null = $Script:VDARegistryItems.Add($obj1)
						$Script:ALLVDARegistryItems += $Script:VDARegistryItems
						$Script:VDARegistryItems = New-Object System.Collections.ArrayList
					}
				}
				Else
				{
					$obj1 = [PSCustomObject] @{
						RegKey       = "N/A"
						RegValue     = "N/A"
						VDAType      = "Server"
						ComputerName = $Machine.DNSName	
						Value        = "The Remote Registry service is not running"
					}
					$null = $Script:VDARegistryItems.Add($obj1)
					$Script:ALLVDARegistryItems += $Script:VDARegistryItems
					$Script:VDARegistryItems = New-Object System.Collections.ArrayList
				}
			}
			ElseIf($LinuxVDA -and $VDARegistryKeys)
			{
				Write-Verbose "$(Get-Date -Format G): `t`t`tVDA is Linux, skipping"
			}
			
			WriteWordLine 4 0 "Machine Details"
			[System.Collections.Hashtable[]] $ScriptInformation = @()
			$ScriptInformation += @{Data = "Agent Version"; Value = $xAgentVersion; }
			$ScriptInformation += @{Data = "IP Address"; Value = $xIPAddress; }
			$ScriptInformation += @{Data = "Is Assigned"; Value = $Machine.IsAssigned.ToString(); }

			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 200;
			$Table.Columns.Item(2).Width = 250;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""

			WriteWordLine 4 0 "Applications"
			[System.Collections.Hashtable[]] $ScriptInformation = @()
			
			[string]$AppsInUse = $(If( $xApplicationsInUse -is [array] -and $xApplicationsInUse.Count ) { $xApplicationsInUse[0] } Else { '-' } )
			$ScriptInformation += @{Data = "Applications In Use"; Value = $AppsInUse; }
			$cnt = -1
			ForEach($tmp in $xApplicationsInUse)
			{
				$cnt++
				If($cnt -gt 0)
				{
					$ScriptInformation += @{Data = ""; Value = $tmp; }
				}
			}
			[string]$PubApps = $(If( $xPublishedApplications -is [array] -and $xPublishedApplications.Count ) { $xPublishedApplications[0] } Else { '-' } )
			$ScriptInformation += @{Data = "Published Applications"; Value = $PubApps; }
			$cnt = -1
			ForEach($tmp in $xPublishedApplications)
			{
				$cnt++
				If($cnt -gt 0)
				{
					$ScriptInformation += @{Data = ""; Value = $tmp; }
				}
			}

			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 200;
			$Table.Columns.Item(2).Width = 250;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""

			WriteWordLine 4 0 "Registration"
			[System.Collections.Hashtable[]] $ScriptInformation = @()
			$ScriptInformation += @{Data = "Broker"; Value = $xBroker; }
			$ScriptInformation += @{Data = "Last registration failure"; Value = $xLastDeregistrationReason; }
			$ScriptInformation += @{Data = "Last registration failure time"; Value = $xLastDeregistrationTime; }
			$ScriptInformation += @{Data = "Registration State"; Value = $Machine.RegistrationState.ToString(); }
			$ScriptInformation += @{Data = "Fault State"; Value = $xMachineFaultState; }

			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 200;
			$Table.Columns.Item(2).Width = 250;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""
		
			WriteWordLine 4 0 "Hosting"
			[System.Collections.Hashtable[]] $ScriptInformation = @()
			$ScriptInformation += @{Data = "VM"; Value = $xHostedMachineName; }
			$ScriptInformation += @{Data = "Hosting Server Name"; Value = $xHostingServerName; }
			$ScriptInformation += @{Data = "Connection"; Value = $xHypervisorConnectionName ; }
			$ScriptInformation += @{Data = "Pending Update"; Value = $Machine.ImageOutOfDate; }
			$ScriptInformation += @{Data = "Persist User Changes"; Value = $xPersistUserChanges; }
			$ScriptInformation += @{Data = "Power Action Pending"; Value = $Machine.PowerActionPending; }
			$ScriptInformation += @{Data = "Power State"; Value = $xPowerState; }

			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 200;
			$Table.Columns.Item(2).Width = 250;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""

			If($NoSessions -eq $False) #V2.27
			{
				WriteWordLine 4 0 "Connection"
				[System.Collections.Hashtable[]] $ScriptInformation = @()
				$ScriptInformation += @{Data = "Last Connection Time"; Value = $xLastConnectionTime ; }
				$ScriptInformation += @{Data = "Last Connection User"; Value = $xLastConnectionUser; }
				$ScriptInformation += @{Data = "Last Connection Failure"; Value = $LastConnectionFailure; }
				$ScriptInformation += @{Data = "Secure ICA Active"; Value = $xSessionSecureIcaActive ; }

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 4 0 "Session Details"
				[System.Collections.Hashtable[]] $ScriptInformation = @()
				$ScriptInformation += @{Data = "Launched Via"; Value = $xSessionLaunchedViaHostName; }
				$ScriptInformation += @{Data = "Launched Via (IP)"; Value = $xSessionLaunchedViaIP; }
				[string]$SSAT = $(If( $xSessionSmartAccessTags -is [array] -and $xSessionSmartAccessTags.Count ) { $xSessionSmartAccessTags[0] } Else { '-' } )
				$ScriptInformation += @{Data = "SmartAccess Filters"; Value = $SSAT; }
				$cnt = -1
				ForEach($tmp in $xSessionSmartAccessTags)
				{
					$cnt++
					If($cnt -gt 0)
					{
						$ScriptInformation += @{Data = ""; Value = $tmp; }
					}
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 4 0 "Session"
				[System.Collections.Hashtable[]] $ScriptInformation = @()
				$ScriptInformation += @{Data = "Session Count"; Value = $Machine.SessionCount.ToString(); }

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
			}
		}
		ElseIf($Machine.SessionSupport -eq "SingleSession")
		{
			WriteWordLine 4 0 "Machine"
			[System.Collections.Hashtable[]] $ScriptInformation = @()
			$ScriptInformation += @{Data = "Name"; Value = $Machine.DNSName; }
			$ScriptInformation += @{Data = "Machine Catalog"; Value = $Machine.CatalogName; }
			$ScriptInformation += @{Data = "Delivery Group"; Value = $Machine.DesktopGroupName; }
			If($NoSessions -eq $False) #V2.27
			{
                ## GRL $xAssociatedUserFullNames can have a count of zero so $xAssociatedUserFullNames[0] isn't valid.
                [string]$name = $(If( $xAssociatedUserFullNames -is [array] -and $xAssociatedUserFullNames.Count ) { $xAssociatedUserFullNames[0] } Else { '-' } )
				$ScriptInformation += @{Data = "User Display Name"; Value = $name; }
				$cnt = -1
				ForEach($tmp in $xAssociatedUserFullNames)
				{
					$cnt++
					If($cnt -gt 0)
					{
						$ScriptInformation += @{Data = ""; Value = $tmp; }
					}
				}
                ## GRL $xAssociatedUserNames can have a count of zero so $xAssociatedUserNames[0] isn't valid.
                [string]$name = $(If( $xAssociatedUserNames -is [array] -and $xAssociatedUserNames.Count ) { $xAssociatedUserNames[0] } Else { '-' } )
				$ScriptInformation += @{Data = "User"; Value = $name; }
				$cnt = -1
				ForEach($tmp in $xAssociatedUserNames)
				{
					$cnt++
					If($cnt -gt 0)
					{
						$ScriptInformation += @{Data = ""; Value = $tmp; }
					}
				}
                ## GRL $xAssociatedUserUPNs can have a count of zero so $xAssociatedUserUPNs[0] isn't valid.
                [string]$upn = $(If( $xAssociatedUserUPNs -is [array] -and $xAssociatedUserUPNs.Count ) { $xAssociatedUserUPNs[0] } Else { '-' } )
				$ScriptInformation += @{Data = "UPN"; Value = $upn; }
				$cnt = -1
				ForEach($tmp in $xAssociatedUserUPNs)
				{
					$cnt++
					If($cnt -gt 0)
					{
						$ScriptInformation += @{Data = ""; Value = $tmp; }
					}
				}
			}
			[string]$cond = $(If( $xDesktopConditions -is [array] -and $xDesktopConditions.Count ) { $xDesktopConditions[0] } Else { '-' } )
			$ScriptInformation += @{Data = "Desktop Conditions"; Value = $cond; }
			$cnt = -1
			ForEach($tmp in $xDesktopConditions)
			{
				$cnt++
				If($cnt -gt 0)
				{
					$ScriptInformation += @{Data = ""; Value = $tmp; }
				}
			}
			$ScriptInformation += @{Data = "Allocation Type"; Value = $xAllocationType; }
			$ScriptInformation += @{Data = "Maintenance Mode"; Value = $xInMaintenanceMode; }
			$ScriptInformation += @{Data = "Maintenance Mode Reason"; Value = $MaintModeReason; }
			$ScriptInformation += @{Data = "Is Assigned"; Value = $Machine.IsAssigned.ToString(); }
			$ScriptInformation += @{Data = "Is Physical"; Value = $xIsPhysical; }
			$ScriptInformation += @{Data = "Provisioning Type"; Value = $Machine.ProvisioningType.ToString(); }
			$ScriptInformation += @{Data = "PvD State"; Value = $xPvdStage; }
			#V2.14, change from Get-ConfigServiceAddedCapability -contains "ZonesSupport" to validObject
			If(validObject $Machine ZoneName)
			{
				$ScriptInformation += @{Data = "Zone"; Value = $Machine.ZoneName; }
			}
			$ScriptInformation += @{Data = "Scheduled Reboot"; Value = $ScheduledReboot; }
			$ScriptInformation += @{Data = "Summary State"; Value = $xSummaryState; }
            [string]$TagName = $(If( $xTags -is [array] -and $xTags.Count ) { $xTags[0] } Else { '-' } )
			$ScriptInformation += @{Data = "Tags"; Value = $TagName; }
			$cnt = -1
			ForEach($tmp in $xTags)
			{
				$cnt++
				If($cnt -gt 0)
				{
					$ScriptInformation += @{Data = ""; Value = $tmp; }
				}
			}

			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 200;
			$Table.Columns.Item(2).Width = 250;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""

			#V2.20
			If((!$LinuxVDA) -and $VDARegistryKeys -and $MachineIsOnline)
			{
				#First test if the Remote Registry service is enabled. If not skip the VDA registry keys
				$results = Get-Service -ComputerName $Machine.DNSName -Name "RemoteRegistry" -EA 0
				If($? -and $Null -ne $results)
				{
					If($results.Status -eq "Running")
					{
						GetVDARegistryKeys $Machine.DNSName "Desktop"
						$Script:ALLVDARegistryItems += $Script:VDARegistryItems
						$Script:VDARegistryItems = New-Object System.Collections.ArrayList
					}
					Else
					{
						$obj1 = [PSCustomObject] @{
							RegKey       = "N/A"
							RegValue     = "N/A"
							VDAType      = "Desktop"
							ComputerName = $Machine.DNSName	
							Value        = "The Remote Registry service is not running"
						}
						$null = $Script:VDARegistryItems.Add($obj1)
						$Script:ALLVDARegistryItems += $Script:VDARegistryItems
						$Script:VDARegistryItems = New-Object System.Collections.ArrayList
					}
				}
				Else
				{
					$obj1 = [PSCustomObject] @{
						RegKey       = "N/A"
						RegValue     = "N/A"
						VDAType      = "Desktop"
						ComputerName = $Machine.DNSName	
						Value        = "The Remote Registry service is not running"
					}
					$null = $Script:VDARegistryItems.Add($obj1)
					$Script:ALLVDARegistryItems += $Script:VDARegistryItems
					$Script:VDARegistryItems = New-Object System.Collections.ArrayList
				}
			}
			ElseIf($LinuxVDA -and $VDARegistryKeys)
			{
				Write-Verbose "$(Get-Date -Format G): `t`t`tVDA is Linux, skipping"
			}
			
			WriteWordLine 4 0 "Machine Details"
			[System.Collections.Hashtable[]] $ScriptInformation = @()
			$ScriptInformation += @{Data = "Agent Version"; Value = $xAgentVersion; }
			$ScriptInformation += @{Data = "IP Address"; Value = $xIPAddress; }
			$ScriptInformation += @{Data = "Is Assigned"; Value = $Machine.IsAssigned.ToString(); }
			$ScriptInformation += @{Data = "OS Type"; Value = $xOSType; }

			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 200;
			$Table.Columns.Item(2).Width = 250;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""

			WriteWordLine 4 0 "Applications"
			[System.Collections.Hashtable[]] $ScriptInformation = @()
			
			[string]$AppsInUse = $(If( $xApplicationsInUse -is [array] -and $xApplicationsInUse.Count ) { $xApplicationsInUse[0] } Else { '-' } )
			$ScriptInformation += @{Data = "Applications In Use"; Value = $AppsInUse; }
			$cnt = -1
			ForEach($tmp in $xApplicationsInUse)
			{
				$cnt++
				If($cnt -gt 0)
				{
					$ScriptInformation += @{Data = ""; Value = $tmp; }
				}
			}
			[string]$PubApps = $(If( $xPublishedApplications -is [array] -and $xPublishedApplications.Count ) { $xPublishedApplications[0] } Else { '-' } )
			$ScriptInformation += @{Data = "Published Applications"; Value = $PubApps; }
			$cnt = -1
			ForEach($tmp in $xPublishedApplications)
			{
				$cnt++
				If($cnt -gt 0)
				{
					$ScriptInformation += @{Data = ""; Value = $tmp; }
				}
			}

			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 200;
			$Table.Columns.Item(2).Width = 250;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""

			If($NoSessions -eq $False) #V2.27
			{
				WriteWordLine 4 0 "Connection"
				[System.Collections.Hashtable[]] $ScriptInformation = @()
				$ScriptInformation += @{Data = "Client (IP)"; Value = $xSessionClientAddress; }
				$ScriptInformation += @{Data = "Client"; Value = $xSessionClientName; }
				$ScriptInformation += @{Data = "Plug-in Version"; Value = $xSessionClientVersion; }
				$ScriptInformation += @{Data = "Connected Via"; Value = $xSessionConnectedViaHostName; }
				$ScriptInformation += @{Data = "Connected Via (IP)"; Value = $xSessionConnectedViaIP; }
				$ScriptInformation += @{Data = "Last Connection Time"; Value = $xLastConnectionTime ; }
				$ScriptInformation += @{Data = "Last Connection User"; Value = $xLastConnectionUser; }
				$ScriptInformation += @{Data = "Last Connection Failure"; Value = $LastConnectionFailure; }
				$ScriptInformation += @{Data = "Connection Type"; Value = $xSessionProtocol; }
				$ScriptInformation += @{Data = "Secure ICA Active"; Value = $xSessionSecureIcaActive ; }

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			
			WriteWordLine 4 0 "Registration"
			[System.Collections.Hashtable[]] $ScriptInformation = @()
			$ScriptInformation += @{Data = "Broker"; Value = $xBroker; }
			$ScriptInformation += @{Data = "Last registration failure"; Value = $xLastDeregistrationReason; }
			$ScriptInformation += @{Data = "Last registration failure time"; Value = $xLastDeregistrationTime; }
			$ScriptInformation += @{Data = "Registration State"; Value = $Machine.RegistrationState.ToString(); }
			$ScriptInformation += @{Data = "Fault State"; Value = $xMachineFaultState; }

			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 200;
			$Table.Columns.Item(2).Width = 250;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""

			WriteWordLine 4 0 "Hosting"
			[System.Collections.Hashtable[]] $ScriptInformation = @()
			$ScriptInformation += @{Data = "VM"; Value = $xHostedMachineName; }
			$ScriptInformation += @{Data = "Hosting Server Name"; Value = $xHostingServerName; }
			$ScriptInformation += @{Data = "Connection"; Value = $xHypervisorConnectionName ; }
			$ScriptInformation += @{Data = "Pending Update"; Value = $Machine.ImageOutOfDate; }
			$ScriptInformation += @{Data = "Persist User Changes"; Value = $xPersistUserChanges; }
			$ScriptInformation += @{Data = "Power Action Pending"; Value = $Machine.PowerActionPending; }
			$ScriptInformation += @{Data = "Power State"; Value = $xPowerState; }
			$ScriptInformation += @{Data = "Will Shutdown After Use"; Value = $xWillShutdownAfterUse; }
			$ScriptInformation += @{Data = "Will Shutdown After Use Reason"; Value = $WillShutdownAfterUseReason; }

			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 200;
			$Table.Columns.Item(2).Width = 250;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""

			If($NoSessions -eq $False) #V2.27
			{
				WriteWordLine 4 0 "Session Details"
				[System.Collections.Hashtable[]] $ScriptInformation = @()
				$ScriptInformation += @{Data = "Launched Via"; Value = $xSessionLaunchedViaHostName; }
				$ScriptInformation += @{Data = "Launched Via (IP)"; Value = $xSessionLaunchedViaIP; }
				$ScriptInformation += @{Data = "Session Change Time"; Value = $xSessionStateChangeTime; }
				[string]$SSAT = $(If( $xSessionSmartAccessTags -is [array] -and $xSessionSmartAccessTags.Count ) { $xSessionSmartAccessTags[0] } Else { '-' } )
				$ScriptInformation += @{Data = "SmartAccess Filters"; Value = $SSAT; }
				$cnt = -1
				ForEach($tmp in $xSessionSmartAccessTags)
				{
					$cnt++
					If($cnt -gt 0)
					{
						$ScriptInformation += @{Data = ""; Value = $tmp; }
					}
				}

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""

				WriteWordLine 4 0 "Session"
				[System.Collections.Hashtable[]] $ScriptInformation = @()
				$ScriptInformation += @{Data = "Session State"; Value = $xSessionState; }
				$ScriptInformation += @{Data = "Current User"; Value = $xSessionUserName; }
				$ScriptInformation += @{Data = "Start Time"; Value = $xSessionStateChangeTime; }

				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
			}
		}
		
		WriteWordLine 0 0 ""
	}
	ElseIf($Text)
	{
		If($Machine.SessionSupport -eq "MultiSession")
		{
			Line 1 "Machine"
			Line 2 "Name`t`t`t`t: " $Machine.DNSName
			Line 2 "Machine Catalog`t`t`t: " $Machine.CatalogName
			Line 2 "Delivery Group`t`t`t: " $Machine.DesktopGroupName
			If($NoSessions -eq $False) #V2.27
			{
                ## GRL $xAssociatedUserFullNames can have a count of zero so $xAssociatedUserFullNames[0] isn't valid.
                [string]$name = $(If( $xAssociatedUserFullNames -is [array] -and $xAssociatedUserFullNames.Count ) { $xAssociatedUserFullNames[0] } Else { '-' } )
				Line 2 "User Display Name`t`t: " $name
				$cnt = -1
				ForEach($tmp in $xAssociatedUserFullNames)
				{
					$cnt++
					If($cnt -gt 0)
					{
						Line 6 "  " $tmp
					}
				}
				## GRL $xAssociatedUserNames can have a count of zero so $xAssociatedUserNames[0] isn't valid.
                [string]$name = $(If( $xAssociatedUserNames -is [array] -and $xAssociatedUserNames.Count ) { $xAssociatedUserNames[0] } Else { '-' } )
				Line 2 "User`t`t`t`t: " $name
				$cnt = -1
				ForEach($tmp in $xAssociatedUserNames)
				{
					$cnt++
					If($cnt -gt 0)
					{
						Line 6 "  " $tmp
					}
				}
                ## GRL $xAssociatedUserUPNs can have a count of zero so $xAssociatedUserUPNs[0] isn't valid.
                [string]$upn = $(If( $xAssociatedUserUPNs -is [array] -and $xAssociatedUserUPNs.Count ) { $xAssociatedUserUPNs[0] } Else { '-' } )
				Line 2 "UPN`t`t`t`t: " $upn
				$cnt = -1
				ForEach($tmp in $xAssociatedUserUPNs)
				{
					$cnt++
					If($cnt -gt 0)
					{
						Line 6 "  " $tmp
					}
				}
			}
			[string]$cond = $(If( $xDesktopConditions -is [array] -and $xDesktopConditions.Count ) { $xDesktopConditions[0] } Else { '-' } )
			Line 2 "Desktop Conditions`t`t: " $cond
			$cnt = -1
			ForEach($tmp in $xDesktopConditions)
			{
				$cnt++
				If($cnt -gt 0)
				{
					Line 6 "  " $tmp
				}
			}
			Line 2 "Allocation Type`t`t`t: " $xAllocationType
			Line 2 "Maintenance Mode`t`t: " $xInMaintenanceMode
			Line 2 "Windows Connection Setting`t: " $xWindowsConnectionSetting
			Line 2 "Is Assigned`t`t`t: " $Machine.IsAssigned.ToString()
			Line 2 "Is Physical`t`t`t: " $xIsPhysical
			Line 2 "Provisioning Type`t`t: " $Machine.ProvisioningType.ToString()
			Line 2 "PvD State`t`t`t: " $xPvdStage
			Line 2 "Scheduled Reboot`t`t: " $ScheduledReboot
			Line 2 "Draining Until Shutdown`t`t: " $Machine.DrainingUntilShutdown.ToString()
			#V2.14, change from Get-ConfigServiceAddedCapability -contains "ZonesSupport" to validObject
			If(validObject $Machine ZoneName)
			{
				Line 2 "Zone`t`t`t`t: " $Machine.ZoneName
			}
			Line 2 "Summary State`t`t`t: " $xSummaryState
            [string]$TagName = $(If( $xTags -is [array] -and $xTags.Count ) { $xTags[0] } Else { '-' } )
			Line 2 "Tags`t`t`t`t: " $TagName
			$cnt = -1
			ForEach($tmp in $xTags)
			{
				$cnt++
				If($cnt -gt 0)
				{
					Line 6 "  " $tmp
				}
			}
			Line 2 "Load Index`t`t`t: " $Machine.LoadIndex
			Line 0 ""

			#V2.20
			If((!$LinuxVDA) -and $VDARegistryKeys -and $MachineIsOnline)
			{
				#First test if the Remote Registry service is enabled. If not skip the VDA registry keys
				#First test if the Remote Registry service is enabled. If not skip the VDA registry keys
				$results = Get-Service -ComputerName $Machine.DNSName -Name "RemoteRegistry" -EA 0
				If($? -and $Null -ne $results)
				{
					If($results.Status -eq "Running")
					{
						GetVDARegistryKeys $Machine.DNSName "Server"
						$Script:ALLVDARegistryItems += $Script:VDARegistryItems
						$Script:VDARegistryItems = New-Object System.Collections.ArrayList
					}
					Else
					{
						$obj1 = [PSCustomObject] @{
							RegKey       = "N/A"
							RegValue     = "N/A"
							VDAType      = "Server"
							ComputerName = $Machine.DNSName	
							Value        = "The Remote Registry service is not running"
						}
						$null = $Script:VDARegistryItems.Add($obj1)
						$Script:ALLVDARegistryItems += $Script:VDARegistryItems
						$Script:VDARegistryItems = New-Object System.Collections.ArrayList
					}
				}
				Else
				{
					$obj1 = [PSCustomObject] @{
						RegKey       = "N/A"
						RegValue     = "N/A"
						VDAType      = "Server"
						ComputerName = $Machine.DNSName	
						Value        = "The Remote Registry service is not running"
					}
					$null = $Script:VDARegistryItems.Add($obj1)
					$Script:ALLVDARegistryItems += $Script:VDARegistryItems
					$Script:VDARegistryItems = New-Object System.Collections.ArrayList
				}
			}
			ElseIf($LinuxVDA -and $VDARegistryKeys)
			{
				Write-Verbose "$(Get-Date -Format G): `t`t`tVDA is Linux, skipping"
			}
			
			Line 1 "Machine Details"
			Line 2 "Agent Version`t`t`t: " $xAgentVersion
			Line 2 "IP Address`t`t`t: " $IPAddress
			Line 2 "Is Assigned`t`t`t: " $Machine.IsAssigned.ToString()
			Line 0 ""
			
			Line 1 "Applications"
			[string]$AppsInUse = $(If( $xApplicationsInUse -is [array] -and $xApplicationsInUse.Count ) { $xApplicationsInUse[0] } Else { '-' } )
			Line 2 "Applications In Use`t`t: " $AppsInUse
			$cnt = -1
			ForEach($tmp in $xApplicationsInUse)
			{
				$cnt++
				If($cnt -gt 0)
				{
					Line 6 "  " $tmp
				}
			}
			[string]$PubApps = $(If( $xPublishedApplications -is [array] -and $xPublishedApplications.Count ) { $xPublishedApplications[0] } Else { '-' } )
			Line 2 "Published Applications`t`t: " $PubApps
			$cnt = -1
			ForEach($tmp in $xPublishedApplications)
			{
				$cnt++
				If($cnt -gt 0)
				{
					Line 6 "  " $tmp
				}
			}
			Line 0 ""
			
			Line 1 "Registration"
			Line 2 "Broker`t`t`t`t: " $xBroker
			Line 2 "Last registration failure`t: " $xLastDeregistrationReason
			Line 2 "Last registration failure time`t: " $xLastDeregistrationTime
			Line 2 "Registration State`t`t: " $Machine.RegistrationState.ToString()
			Line 2 "Fault State`t`t`t: " $xMachineFaultState
			Line 0 ""
			
			Line 1 "Hosting"
			Line 2 "VM`t`t`t`t: " $xHostedMachineName
			Line 2 "Hosting Server Name`t`t: " $xHostingServerName
			Line 2 "Connection`t`t`t: " $xHypervisorConnectionName 
			Line 2 "Pending Update`t`t`t: " $Machine.ImageOutOfDate
			Line 2 "Persist User Changes`t`t: " $xPersistUserChanges
			Line 2 "Power Action Pending`t`t: " $Machine.PowerActionPending.ToString()
			Line 2 "Power State`t`t`t: " $xPowerState
			Line 0 ""
			
			If($NoSessions -eq $False) #V2.27
			{
				Line 1 "Connection"
				Line 2 "Last Connection Time`t`t: " $xLastConnectionTime 
				Line 2 "Last Connection User`t`t: " $xLastConnectionUser
				Line 2 "Last Connection Failure`t: " $LastConnectionFailure
				Line 2 "Secure ICA Active`t`t: " $xSessionSecureIcaActive 
				Line 0 ""
				
				Line 1 "Session Details"
				Line 2 "Launched Via`t`t`t: " $xSessionLaunchedViaHostName
				Line 2 "Launched Via (IP)`t`t: " $xSessionLaunchedViaIP
				[string]$SSAT = $(If( $xSessionSmartAccessTags -is [array] -and $xSessionSmartAccessTags.Count ) { $xSessionSmartAccessTags[0] } Else { '-' } )
				Line 2 "SmartAccess Filters`t`t: " $SSAT
				$cnt = -1
				ForEach($tmp in $xSessionSmartAccessTags)
				{
					$cnt++
					If($cnt -gt 0)
					{
						Line 5 "  " $tmp
					}
				}
				Line 0 ""
				
				Line 1 "Session"
				Line 2 "Session Count`t`t`t: " $Machine.SessionCount.ToString()
				Line 0 ""
			}
		}
		ElseIf($Machine.SessionSupport -eq "SingleSession")
		{
			Line 1 "Machine"
			Line 2 "Name`t`t`t`t: " $Machine.DNSName
			Line 2 "Machine Catalog`t`t`t: " $Machine.CatalogName
			Line 2 "Delivery Group`t`t`t: " $Machine.DesktopGroupName
			If($NoSessions -eq $False) #V2.27
			{
                ## GRL $xAssociatedUserFullNames can have a count of zero so $xAssociatedUserFullNames[0] isn't valid.
                [string]$name = $(If( $xAssociatedUserFullNames -is [array] -and $xAssociatedUserFullNames.Count ) { $xAssociatedUserFullNames[0] } Else { '-' } )
				Line 2 "User Display Name`t`t: " $name
				$cnt = -1
				ForEach($tmp in $xAssociatedUserFullNames)
				{
					$cnt++
					If($cnt -gt 0)
					{
						Line 6 "  " $tmp
					}
				}
                ## GRL $xAssociatedUserNames can have a count of zero so $xAssociatedUserNames[0] isn't valid.
                [string]$name = $(If( $xAssociatedUserNames -is [array] -and $xAssociatedUserNames.Count ) { $xAssociatedUserNames[0] } Else { '-' } )
				Line 2 "User`t`t`t`t: " $name
				$cnt = -1
				ForEach($tmp in $xAssociatedUserNames)
				{
					$cnt++
					If($cnt -gt 0)
					{
						Line 6 "  " $tmp
					}
				}
                ## GRL $xAssociatedUserUPNs can have a count of zero so $xAssociatedUserUPNs[0] isn't valid.
                [string]$upn = $(If( $xAssociatedUserUPNs -is [array] -and $xAssociatedUserUPNs.Count ) { $xAssociatedUserUPNs[0] } Else { '-' } )
				Line 2 "UPN`t`t`t`t: " $upn
				$cnt = -1
				ForEach($tmp in $xAssociatedUserUPNs)
				{
					$cnt++
					If($cnt -gt 0)
					{
						Line 6 "  " $tmp
					}
				}
			}
			[string]$cond = $(If( $xDesktopConditions -is [array] -and $xDesktopConditions.Count ) { $xDesktopConditions[0] } Else { '-' } )
			Line 2 "Desktop Conditions`t`t: " $cond
			$cnt = -1
			ForEach($tmp in $xDesktopConditions)
			{
				$cnt++
				If($cnt -gt 0)
				{
					Line 6 "  " $tmp
				}
			}
			Line 2 "Allocation Type`t`t`t: " $xAllocationType
			Line 2 "Maintenance Mode`t`t: " $xInMaintenanceMode
			Line 2 "Maintenance Mode Reason`t: " $MaintModeReason
			Line 2 "Is Assigned`t`t`t: " $Machine.IsAssigned.ToString()
			Line 2 "Is Physical`t`t`t: " $xIsPhysical
			Line 2 "Provisioning Type`t`t: " $Machine.ProvisioningType.ToString()
			Line 2 "PvD State`t`t`t: " $xPvdStage
			#V2.14, change from Get-ConfigServiceAddedCapability -contains "ZonesSupport" to validObject
			If(validObject $Machine ZoneName)
			{
				Line 2 "Zone`t`t`t`t: " $Machine.ZoneName
			}
			Line 2 "Scheduled Reboot`t`t: " $ScheduledReboot
			Line 2 "Summary State`t`t`t: " $xSummaryState
            [string]$TagName = $(If( $xTags -is [array] -and $xTags.Count ) { $xTags[0] } Else { '-' } )
			Line 2 "Tags`t`t`t`t: " $TagName
			$cnt = -1
			ForEach($tmp in $xTags)
			{
				$cnt++
				If($cnt -gt 0)
				{
					Line 6 "  " $tmp
				}
			}
			Line 0 ""

			#V2.20
			If((!$LinuxVDA) -and $VDARegistryKeys -and $MachineIsOnline)
			{
				#First test if the Remote Registry service is enabled. If not skip the VDA registry keys
				#First test if the Remote Registry service is enabled. If not skip the VDA registry keys
				$results = Get-Service -ComputerName $Machine.DNSName -Name "RemoteRegistry" -EA 0
				If($? -and $Null -ne $results)
				{
					If($results.Status -eq "Running")
					{
						GetVDARegistryKeys $Machine.DNSName "Desktop"
						$Script:ALLVDARegistryItems += $Script:VDARegistryItems
						$Script:VDARegistryItems = New-Object System.Collections.ArrayList
					}
					Else
					{
						$obj1 = [PSCustomObject] @{
							RegKey       = "N/A"
							RegValue     = "N/A"
							VDAType      = "Desktop"
							ComputerName = $Machine.DNSName	
							Value        = "The Remote Registry service is not running"
						}
						$null = $Script:VDARegistryItems.Add($obj1)
						$Script:ALLVDARegistryItems += $Script:VDARegistryItems
						$Script:VDARegistryItems = New-Object System.Collections.ArrayList
					}
				}
				Else
				{
					$obj1 = [PSCustomObject] @{
						RegKey       = "N/A"
						RegValue     = "N/A"
						VDAType      = "Desktop"
						ComputerName = $Machine.DNSName	
						Value        = "The Remote Registry service is not running"
					}
					$null = $Script:VDARegistryItems.Add($obj1)
					$Script:ALLVDARegistryItems += $Script:VDARegistryItems
					$Script:VDARegistryItems = New-Object System.Collections.ArrayList
				}
			}
			ElseIf($LinuxVDA -and $VDARegistryKeys)
			{
				Write-Verbose "$(Get-Date -Format G): `t`t`tVDA is Linux, skipping"
			}
			
			Line 1 "Machine Details"
			Line 2 "Agent Version`t`t`t: " $xAgentVersion
			Line 2 "IP Address`t`t`t: " $xIPAddress
			Line 2 "Is Assigned`t`t`t: " $Machine.IsAssigned.ToString()
			Line 2 "OS Type`t`t`t`t: " $xOSType
			Line 0 ""
			
			Line 1 "Applications"
			[string]$AppsInUse = $(If( $xApplicationsInUse -is [array] -and $xApplicationsInUse.Count ) { $xApplicationsInUse[0] } Else { '-' } )
			Line 2 "Applications In Use`t`t: " $AppsInUse
			$cnt = -1
			ForEach($tmp in $xApplicationsInUse)
			{
				$cnt++
				If($cnt -gt 0)
				{
					Line 6 "  " $tmp
				}
			}
			[string]$PubApps = $(If( $xPublishedApplications -is [array] -and $xPublishedApplications.Count ) { $xPublishedApplications[0] } Else { '-' } )
			Line 2 "Published Applications`t`t: " $PubApps
			$cnt = -1
			ForEach($tmp in $xPublishedApplications)
			{
				$cnt++
				If($cnt -gt 0)
				{
					Line 6 "  " $tmp
				}
			}
			Line 0 ""
			
			If($NoSessions -eq $False) #V2.27
			{
				Line 1 "Connection"
				Line 2 "Client (IP)`t`t`t: " $xSessionClientAddress
				Line 2 "Client`t`t`t`t: " $xSessionClientName
				Line 2 "Plug-in Version`t`t`t: " $xSessionClientVersion
				Line 2 "Connected Via`t`t`t: " $xSessionConnectedViaHostName
				Line 2 "Connect Via (IP)`t`t: " $xSessionConnectedViaIP
				Line 2 "Last Connection Time`t`t: " $xLastConnectionTime 
				Line 2 "Last Connection User`t`t: " $xLastConnectionUser
				Line 2 "Last Connection Failure`t: " $LastConnectionFailure
				Line 2 "Connection Type`t`t`t: " $xSessionProtocol
				Line 2 "Secure ICA Active`t`t: " $xSessionSecureIcaActive 
				Line 0 ""
			}
			
			Line 1 "Registration"
			Line 2 "Broker`t`t`t`t: " $xBroker
			Line 2 "Last registration failure`t: " $xLastDeregistrationReason
			Line 2 "Last registration failure time`t: " $xLastDeregistrationTime
			Line 2 "Registration State`t`t: " $Machine.RegistrationState.ToString()
			Line 2 "Fault State`t`t`t: " $xMachineFaultState
			Line 0 ""
			
			Line 1 "Hosting"
			Line 2 "VM`t`t`t`t: " $xHostedMachineName
			Line 2 "Hosting Server Name`t`t: " $xHostingServerName
			Line 2 "Connection`t`t`t: " $xHypervisorConnectionName 
			Line 2 "Pending Update`t`t`t: " $Machine.ImageOutOfDate
			Line 2 "Persist User Changes`t`t: " $xPersistUserChanges
			Line 2 "Power Action Pending`t`t: " $Machine.PowerActionPending
			Line 2 "Power State`t`t`t: " $xPowerState
			Line 2 "Will Shutdown After Use`t`t: " $xWillShutdownAfterUse
			Line 2 "Will Shutdown After Use Reason`t: " $WillShutdownAfterUseReason
			Line 0 ""
			
			If($NoSessions -eq $False) #V2.27
			{
				Line 1 "Session Details"
				Line 2 "Launched Via`t`t`t: " $xSessionLaunchedViaHostName
				Line 2 "Launched Via (IP)`t`t: " $xSessionLaunchedViaIP
				Line 2 "Session Change Time`t`t: " $xSessionStateChangeTime
				[string]$SSAT = $(If( $xSessionSmartAccessTags -is [array] -and $xSessionSmartAccessTags.Count ) { $xSessionSmartAccessTags[0] } Else { '-' } )
				Line 2 "SmartAccess Filters`t`t: " $SSAT
				$cnt = -1
				ForEach($tmp in $xSessionSmartAccessTags)
				{
					$cnt++
					If($cnt -gt 0)
					{
						Line 5 "  " $tmp
					}
				}
				Line 0 ""
				
				Line 1 "Session"
				Line 2 "Session State`t`t`t: " $xSessionState
				Line 2 "Current User`t`t`t: " $xSessionUserName
				Line 2 "Start Time`t`t`t: " $xSessionStateChangeTime
				Line 0 ""
			}
		}
	}
	ElseIf($HTML)
	{
		If($Machine.SessionSupport -eq "MultiSession")
		{
			WriteHTMLLine 4 0 "Machine"
			$rowdata = @()

			$columnHeaders = @("Name",($global:htmlsb),$Machine.DNSName,$htmlwhite)
			$rowdata += @(,('Machine Catalog',($global:htmlsb),$Machine.CatalogName,$htmlwhite))
			$rowdata += @(,('Delivery Group',($global:htmlsb),$Machine.DesktopGroupName,$htmlwhite))
			If($NoSessions -eq $False) #V2.27
			{
                ## GRL $xAssociatedUserFullNames can have a count of zero so $xAssociatedUserFullNames[0] isn't valid.
                [string]$name = $(If( $xAssociatedUserFullNames -is [array] -and $xAssociatedUserFullNames.Count ) { $xAssociatedUserFullNames[0] } Else { '-' } )
				$rowdata += @(,('User Display Name',($global:htmlsb),$name,$htmlwhite))
				$cnt = -1
				ForEach($tmp in $xAssociatedUserFullNames)
				{
					$cnt++
					If($cnt -gt 0)
					{
						$rowdata += @(,('',($global:htmlsb),$tmp,$htmlwhite))
					}
				}
                ## GRL $xAssociatedUserNames can have a count of zero so $xAssociatedUserNames[0] isn't valid.
                [string]$name = $(If( $xAssociatedUserNames -is [array] -and $xAssociatedUserNames.Count ) { $xAssociatedUserNames[0] } Else { '-' } )
				$rowdata += @(,('User',($global:htmlsb),$name,$htmlwhite))
				$cnt = -1
				ForEach($tmp in $xAssociatedUserNames)
				{
					$cnt++
					If($cnt -gt 0)
					{
						$rowdata += @(,('',($global:htmlsb),$tmp,$htmlwhite))
					}
				}
                ## GRL $xAssociatedUserUPNs can have a count of zero so $xAssociatedUserUPNs[0] isn't valid.
                [string]$upn = $(If( $xAssociatedUserUPNs -is [array] -and $xAssociatedUserUPNs.Count ) { $xAssociatedUserUPNs[0] } Else { '-' } )
				$rowdata += @(,('UPN',($global:htmlsb),$upn,$htmlwhite))
				$cnt = -1
				ForEach($tmp in $xAssociatedUserUPNs)
				{
					$cnt++
					If($cnt -gt 0)
					{
						$rowdata += @(,('',($global:htmlsb),$tmp,$htmlwhite))
					}
				}
			}
			[string]$cond = $(If( $xDesktopConditions -is [array] -and $xDesktopConditions.Count ) { $xDesktopConditions[0] } Else { '-' } )
			$rowdata += @(,('Desktop Conditions',($global:htmlsb),$cond,$htmlwhite))
			$cnt = -1
			ForEach($tmp in $xDesktopConditions)
			{
				$cnt++
				If($cnt -gt 0)
				{
					$rowdata += @(,('',($global:htmlsb),$tmp,$htmlwhite))
				}
			}
			$rowdata += @(,('Allocation Type',($global:htmlsb),$xAllocationType,$htmlwhite))
			$rowdata += @(,('Maintenance Mode',($global:htmlsb),$xInMaintenanceMode,$htmlwhite))
			$rowdata += @(,('Maintenance Mode Reason',($global:htmlsb),$MaintModeReason,$htmlwhite))
			$rowdata += @(,('Windows Connection Setting',($global:htmlsb),$xWindowsConnectionSetting,$htmlwhite))
			$rowdata += @(,('Is Assigned',($global:htmlsb),$Machine.IsAssigned.ToString(),$htmlwhite))
			$rowdata += @(,('Is Physical',($global:htmlsb),$xIsPhysical,$htmlwhite))
			$rowdata += @(,('Provisioning Type',($global:htmlsb),$Machine.ProvisioningType.ToString(),$htmlwhite))
			$rowdata += @(,('PvD State',($global:htmlsb),$xPvdStage,$htmlwhite))
			$rowdata += @(,('Scheduled Reboot',($global:htmlsb),$ScheduledReboot,$htmlwhite))
			$rowdata += @(,("Draining Until Shutdown",($global:htmlsb),$Machine.DrainingUntilShutdown.ToString(),$htmlwhite))
			#V2.14, change from Get-ConfigServiceAddedCapability -contains "ZonesSupport" to validObject
			If(validObject $Machine ZoneName)
			{
				$rowdata += @(,('Zone',($global:htmlsb),$Machine.ZoneName,$htmlwhite))
			}
			$rowdata += @(,('Summary State',($global:htmlsb),$xSummaryState,$htmlwhite))
            [string]$TagName = $(If( $xTags -is [array] -and $xTags.Count ) { $xTags[0] } Else { '-' } )
			$rowdata += @(,('Tags',($global:htmlsb),$TagName,$htmlwhite))
			$cnt = -1
			ForEach($tmp in $xTags)
			{
				$cnt++
				If($cnt -gt 0)
				{
					$rowdata += @(,('',($global:htmlsb),$tmp,$htmlwhite))
				}
			}
			$rowdata += @(,('Load Index',($global:htmlsb),$Machine.LoadIndex.ToString(),$htmlwhite))

			$msg = ""
			$columnWidths = @("200","250")
			FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "450"

			#V2.20
			If((!$LinuxVDA) -and $VDARegistryKeys -and $MachineIsOnline)
			{
				#First test if the Remote Registry service is enabled. If not skip the VDA registry keys
				$results = Get-Service -ComputerName $Machine.DNSName -Name "RemoteRegistry" -EA 0
				If($? -and $Null -ne $results)
				{
					If($results.Status -eq "Running")
					{
						GetVDARegistryKeys $Machine.DNSName "Server"
						$Script:ALLVDARegistryItems += $Script:VDARegistryItems
						$Script:VDARegistryItems = New-Object System.Collections.ArrayList
					}
					Else
					{
						$obj1 = [PSCustomObject] @{
							RegKey       = "N/A"
							RegValue     = "N/A"
							VDAType      = "Server"
							ComputerName = $Machine.DNSName	
							Value        = "The Remote Registry service is not running"
						}
						$null = $Script:VDARegistryItems.Add($obj1)
						$Script:ALLVDARegistryItems += $Script:VDARegistryItems
						$Script:VDARegistryItems = New-Object System.Collections.ArrayList
					}
				}
				Else
				{
					$obj1 = [PSCustomObject] @{
						RegKey       = "N/A"
						RegValue     = "N/A"
						VDAType      = "Server"
						ComputerName = $Machine.DNSName	
						Value        = "The Remote Registry service is not running"
					}
					$null = $Script:VDARegistryItems.Add($obj1)
					$Script:ALLVDARegistryItems += $Script:VDARegistryItems
					$Script:VDARegistryItems = New-Object System.Collections.ArrayList
				}
			}
			ElseIf($LinuxVDA -and $VDARegistryKeys)
			{
				Write-Verbose "$(Get-Date -Format G): `t`t`tVDA is Linux, skipping"
			}
			
			WriteHTMLLine 4 0 "Machine Details"
			$rowdata = @()
			$columnHeaders = @("Agent Version",($global:htmlsb),$xAgentVersion,$htmlwhite)
			$rowdata += @(,('IP Address',($global:htmlsb),$xIPAddress,$htmlwhite))
			$rowdata += @(,('Is Assigned',($global:htmlsb),$Machine.IsAssigned.ToString(),$htmlwhite))

			$msg = ""
			$columnWidths = @("200","250")
			FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "450"

			WriteHTMLLine 4 0 "Applications"
			$rowdata = @()
			[string]$AppsInUse = $(If( $xApplicationsInUse -is [array] -and $xApplicationsInUse.Count ) { $xApplicationsInUse[0] } Else { '-' } )
			$columnHeaders = @("Applications In Use",($global:htmlsb),$AppsInUse,$htmlwhite)
			$cnt = -1
			ForEach($tmp in $xApplicationsInUSe)
			{
				$cnt++
				If($cnt -gt 0)
				{
					$rowdata += @(,('',($global:htmlsb),$tmp,$htmlwhite))
				}
			}
			[string]$PubApps = $(If( $xPublishedApplications -is [array] -and $xPublishedApplications.Count ) { $xPublishedApplications[0] } Else { '-' } )
			$rowdata += @(,('Published Applications',($global:htmlsb),$PubApps,$htmlwhite))
			$cnt = -1
			ForEach($tmp in $xPublishedApplications)
			{
				$cnt++
				If($cnt -gt 0)
				{
					$rowdata += @(,('',($global:htmlsb),$tmp,$htmlwhite))
				}
			}

			$msg = ""
			$columnWidths = @("200","250")
			FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "450"

			WriteHTMLLine 4 0 "Registration"
			$rowdata = @()
			$columnHeaders = @("Broker",($global:htmlsb),$xBroker,$htmlwhite)
			$rowdata += @(,('Last registration failure',($global:htmlsb),$xLastDeregistrationReason,$htmlwhite))
			$rowdata += @(,('Last registration failure time',($global:htmlsb),$xLastDeregistrationTime,$htmlwhite))
			$rowdata += @(,('Registration State',($global:htmlsb),$Machine.RegistrationState.ToString(),$htmlwhite))
			$rowdata += @(,('Fault State',($global:htmlsb),$xMachineFaultState,$htmlwhite))

			$msg = ""
			$columnWidths = @("200","250")
			FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "450"

			WriteHTMLLine 4 0 "Hosting"
			$rowdata = @()
			$columnHeaders = @("VM",($global:htmlsb),$xHostedMachineName,$htmlwhite)
			$rowdata += @(,('Hosting Server Name',($global:htmlsb),$xHostingServerName,$htmlwhite))
			$rowdata += @(,('Connection',($global:htmlsb),$xHypervisorConnectionName,$htmlwhite))
			$rowdata += @(,('Pending Update',($global:htmlsb),$Machine.ImageOutOfDate.ToString(),$htmlwhite))
			$rowdata += @(,('Persist User Changes',($global:htmlsb),$xPersistUserChanges,$htmlwhite))
			$rowdata += @(,('Power Action Pending',($global:htmlsb),$Machine.PowerActionPending.ToString(),$htmlwhite))
			$rowdata += @(,('Power State',($global:htmlsb),$xPowerState,$htmlwhite))

			$msg = ""
			$columnWidths = @("200","250")
			FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "450"

			If($NoSessions -eq $False) #V2.27
			{
				WriteHTMLLine 4 0 "Connection"
				$rowdata = @()
				$columnHeaders = @("Last Connection Time",($global:htmlsb),$xLastConnectionTime,$htmlwhite)
				$rowdata += @(,('Last Connection User',($global:htmlsb),$xLastConnectionUser,$htmlwhite))
				$rowdata += @(,('Last Connection Failure',($global:htmlsb),$LastConnectionFailure,$htmlwhite))
				$rowdata += @(,('Secure ICA Active',($global:htmlsb),$xSessionSecureIcaActive,$htmlwhite))

				$msg = ""
				$columnWidths = @("200","250")
				FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "450"

				WriteHTMLLine 4 0 "Session Details"
				$rowdata = @()
				$columnHeaders = @("Launched Via",($global:htmlsb),$xSessionLaunchedViaHostName,$htmlwhite)
				$rowdata += @(,('Launched Via (IP)',($global:htmlsb),$xSessionLaunchedViaIP,$htmlwhite))
				[string]$SSAT = $(If( $xSessionSmartAccessTags -is [array] -and $xSessionSmartAccessTags.Count ) { $xSessionSmartAccessTags[0] } Else { '-' } )
				$rowdata += @(,('SmartAccess Filters',($global:htmlsb),$SSAT,$htmlwhite))
				$cnt = -1
				ForEach($tmp in $xSessionSmartAccessTags)
				{
					$cnt++
					If($cnt -gt 0)
					{
						$rowdata += @(,('',($global:htmlsb),$tmp,$htmlwhite))
					}
				}

				$msg = ""
				$columnWidths = @("200","250")
				FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "450"

				WriteHTMLLine 4 0 "Session"
				$rowdata = @()
				$columnHeaders = @("Session Count",($global:htmlsb),$Machine.SessionCount.ToString(),$htmlwhite)

				$msg = ""
				$columnWidths = @("200","250")
				FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "450"
			}
		}
		ElseIf($Machine.SessionSupport -eq "SingleSession")
		{
			WriteHTMLLine 4 0 "Machine"
			$rowdata = @()

			$columnHeaders = @("Name",($global:htmlsb),$Machine.DNSName,$htmlwhite)
			$rowdata += @(,('Machine Catalog',($global:htmlsb),$Machine.CatalogName,$htmlwhite))
			$rowdata += @(,('Delivery Group',($global:htmlsb),$Machine.DesktopGroupName,$htmlwhite))
			If($NoSessions -eq $False) #V2.27
			{
                ## GRL $xAssociatedUserFullNames can have a count of zero so $xAssociatedUserFullNames[0] isn't valid.
                [string]$name = $(If( $xAssociatedUserFullNames -is [array] -and $xAssociatedUserFullNames.Count ) { $xAssociatedUserFullNames[0] } Else { '-' } )
				$rowdata += @(,('User Display Name',($global:htmlsb),$name,$htmlwhite))
				$cnt = -1
				ForEach($tmp in $xAssociatedUserFullNames)
				{
					$cnt++
					If($cnt -gt 0)
					{
						$rowdata += @(,('',($global:htmlsb),$tmp,$htmlwhite))
					}
				}
                ## GRL $xAssociatedUserNames can have a count of zero so $xAssociatedUserNames[0] isn't valid.
                [string]$name = $(If( $xAssociatedUserNames -is [array] -and $xAssociatedUserNames.Count ) { $xAssociatedUserNames[0] } Else { '-' } )
				$rowdata += @(,('User',($global:htmlsb),$name,$htmlwhite))
				$cnt = -1
				ForEach($tmp in $xAssociatedUserNames)
				{
					$cnt++
					If($cnt -gt 0)
					{
						$rowdata += @(,('',($global:htmlsb),$tmp,$htmlwhite))
					}
				}
                ## GRL $xAssociatedUserUPNs can have a count of zero so $xAssociatedUserUPNs[0] isn't valid.
                [string]$upn = $(If( $xAssociatedUserUPNs -is [array] -and $xAssociatedUserUPNs.Count ) { $xAssociatedUserUPNs[0] } Else { '-' } )
				$rowdata += @(,('UPN',($global:htmlsb),$upn,$htmlwhite))
				$cnt = -1
				ForEach($tmp in $xAssociatedUserUPNs)
				{
					$cnt++
					If($cnt -gt 0)
					{
						$rowdata += @(,('',($global:htmlsb),$tmp,$htmlwhite))
					}
				}
			}
			[string]$cond = $(If( $xDesktopConditions -is [array] -and $xDesktopConditions.Count ) { $xDesktopConditions[0] } Else { '-' } )
			$rowdata += @(,('Desktop Conditions',($global:htmlsb),$cond,$htmlwhite))
			$cnt = -1
			ForEach($tmp in $xDesktopConditions)
			{
				$cnt++
				If($cnt -gt 0)
				{
					$rowdata += @(,('',($global:htmlsb),$tmp,$htmlwhite))
				}
			}
			$rowdata += @(,('Allocation Type',($global:htmlsb),$xAllocationType,$htmlwhite))
			$rowdata += @(,('Maintenance Mode',($global:htmlsb),$xInMaintenanceMode,$htmlwhite))
			$rowdata += @(,('Maintenance Mode Reason',($global:htmlsb),$MaintModeReason,$htmlwhite))
			$rowdata += @(,('Is Assigned',($global:htmlsb),$Machine.IsAssigned.ToString(),$htmlwhite))
			$rowdata += @(,('Is Physical',($global:htmlsb),$xIsPhysical,$htmlwhite))
			$rowdata += @(,('Provisioning Type',($global:htmlsb),$Machine.ProvisioningType.ToString(),$htmlwhite))
			$rowdata += @(,('PvD State',($global:htmlsb),$xPvdStage,$htmlwhite))
			#V2.14, change from Get-ConfigServiceAddedCapability -contains "ZonesSupport" to validObject
			If(validObject $Machine ZoneName)
			{
				$rowdata += @(,('Zone',($global:htmlsb),$Machine.ZoneName,$htmlwhite))
			}
			$rowdata += @(,('Scheduled Reboot',($global:htmlsb),$ScheduledReboot,$htmlwhite))
			$rowdata += @(,('Summary State',($global:htmlsb),$xSummaryState,$htmlwhite))
            [string]$TagName = $(If( $xTags -is [array] -and $xTags.Count ) { $xTags[0] } Else { '-' } )
			$rowdata += @(,('Tags',($global:htmlsb),$TagName,$htmlwhite))
			$cnt = -1
			ForEach($tmp in $xTags)
			{
				$cnt++
				If($cnt -gt 0)
				{
					$rowdata += @(,('',($global:htmlsb),$tmp,$htmlwhite))
				}
			}

			$msg = ""
			$columnWidths = @("200","250")
			FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "450"

			#V2.20
			If((!$LinuxVDA) -and $VDARegistryKeys -and $MachineIsOnline)
			{
				#First test if the Remote Registry service is enabled. If not skip the VDA registry keys
				$results = Get-Service -ComputerName $Machine.DNSName -Name "RemoteRegistry" -EA 0
				If($? -and $Null -ne $results)
				{
					If($results.Status -eq "Running")
					{
						GetVDARegistryKeys $Machine.DNSName "Desktop"
						$Script:ALLVDARegistryItems += $Script:VDARegistryItems
						$Script:VDARegistryItems = New-Object System.Collections.ArrayList
					}
					Else
					{
						$obj1 = [PSCustomObject] @{
							RegKey       = "N/A"
							RegValue     = "N/A"
							VDAType      = "Desktop"
							ComputerName = $Machine.DNSName	
							Value        = "The Remote Registry service is not running"
						}
						$null = $Script:VDARegistryItems.Add($obj1)
						$Script:ALLVDARegistryItems += $Script:VDARegistryItems
						$Script:VDARegistryItems = New-Object System.Collections.ArrayList
					}
				}
				Else
				{
					$obj1 = [PSCustomObject] @{
						RegKey       = "N/A"
						RegValue     = "N/A"
						VDAType      = "Desktop"
						ComputerName = $Machine.DNSName	
						Value        = "The Remote Registry service is not running"
					}
					$null = $Script:VDARegistryItems.Add($obj1)
					$Script:ALLVDARegistryItems += $Script:VDARegistryItems
					$Script:VDARegistryItems = New-Object System.Collections.ArrayList
				}
			}
			ElseIf($LinuxVDA -and $VDARegistryKeys)
			{
				Write-Verbose "$(Get-Date -Format G): `t`t`tVDA is Linux, skipping"
			}
			
			WriteHTMLLine 4 0 "Machine Details"
			$rowdata = @()
			$columnHeaders = @("Agent Version",($global:htmlsb),$xAgentVersion,$htmlwhite)
			$rowdata += @(,('IP Address',($global:htmlsb),$xIPAddress,$htmlwhite))
			$rowdata += @(,('Is Assigned',($global:htmlsb),$Machine.IsAssigned.ToString(),$htmlwhite))
			$rowdata += @(,('OS Type',($global:htmlsb),$xOSType,$htmlwhite))

			$msg = ""
			$columnWidths = @("200","250")
			FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "450"

			WriteHTMLLine 4 0 "Applications"
			$rowdata = @()
			[string]$AppsInUse = $(If( $xApplicationsInUse -is [array] -and $xApplicationsInUse.Count ) { $xApplicationsInUse[0] } Else { '-' } )
			$columnHeaders = @("Applications In Use",($global:htmlsb),$AppsInUse,$htmlwhite)
			$cnt = -1
			ForEach($tmp in $xApplicationsInUSe)
			{
				$cnt++
				If($cnt -gt 0)
				{
					$rowdata += @(,('',($global:htmlsb),$tmp,$htmlwhite))
				}
			}
			[string]$PubApps = $(If( $xPublishedApplications -is [array] -and $xPublishedApplications.Count ) { $xPublishedApplications[0] } Else { '-' } )
			$rowdata += @(,('Published Applications',($global:htmlsb),$PubApps,$htmlwhite))
			$cnt = -1
			ForEach($tmp in $xPublishedApplications)
			{
				$cnt++
				If($cnt -gt 0)
				{
					$rowdata += @(,('',($global:htmlsb),$tmp,$htmlwhite))
				}
			}

			$msg = ""
			$columnWidths = @("200","250")
			FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "450"

			If($NoSessions -eq $False) #V2.27
			{
				WriteHTMLLine 4 0 "Connection"
				$rowdata = @()
				$columnHeaders = @("Client (IP)",($global:htmlsb),$xSessionClientAddress,$htmlwhite)
				$rowdata += @(,('Client',($global:htmlsb),$xSessionClientName,$htmlwhite))
				$rowdata += @(,('Plug-in Version',($global:htmlsb),$xSessionClientVersion,$htmlwhite))
				$rowdata += @(,('Connected Via',($global:htmlsb),$xSessionConnectedViaHostName,$htmlwhite))
				$rowdata += @(,('Connect Via (IP)',($global:htmlsb),$xSessionConnectedViaIP,$htmlwhite))
				$rowdata += @(,('Last Connection Time',($global:htmlsb),$xLastConnectionTime,$htmlwhite))
				$rowdata += @(,('Last Connection User',($global:htmlsb),$xLastConnectionUser,$htmlwhite))
				$rowdata += @(,('Last Connection Failure',($global:htmlsb),$LastConnectionFailure,$htmlwhite))
				$rowdata += @(,('Connection Type',($global:htmlsb),$xSessionProtocol,$htmlwhite))
				$rowdata += @(,('Secure ICA Active',($global:htmlsb),$xSessionSecureIcaActive,$htmlwhite))

				$msg = ""
				$columnWidths = @("200","250")
				FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "450"
			}

			WriteHTMLLine 4 0 "Registration"
			$rowdata = @()
			$columnHeaders = @("Broker",($global:htmlsb),$xBroker,$htmlwhite)
			$rowdata += @(,('Last registration failure',($global:htmlsb),$xLastDeregistrationReason,$htmlwhite))
			$rowdata += @(,('Last registration failure time',($global:htmlsb),$xLastDeregistrationTime,$htmlwhite))
			$rowdata += @(,('Registration State',($global:htmlsb),$Machine.RegistrationState.ToString(),$htmlwhite))
			$rowdata += @(,('Fault State',($global:htmlsb),$xMachineFaultState,$htmlwhite))

			$msg = ""
			$columnWidths = @("200","250")
			FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "450"

			WriteHTMLLine 4 0 "Hosting"
			$rowdata = @()
			$columnHeaders = @("VM",($global:htmlsb),$xHostedMachineName,$htmlwhite)
			$rowdata += @(,('Hosting Server Name',($global:htmlsb),$xHostingServerName,$htmlwhite))
			$rowdata += @(,('Connection',($global:htmlsb),$xHypervisorConnectionName,$htmlwhite))
			$rowdata += @(,('Pending Update',($global:htmlsb),$Machine.ImageOutOfDate.ToString(),$htmlwhite))
			$rowdata += @(,('Persist User Changes',($global:htmlsb),$xPersistUserChanges,$htmlwhite))
			$rowdata += @(,('Power Action Pending',($global:htmlsb),$Machine.PowerActionPending.ToString(),$htmlwhite))
			$rowdata += @(,('Power State',($global:htmlsb),$xPowerState,$htmlwhite))
			$rowdata += @(,('Will Shutdown After Use',($global:htmlsb),$xWillShutdownAfterUse,$htmlwhite))
			$rowdata += @(,('Will Shutdown After Use Reason',($global:htmlsb),$WillShutdownAfterUseReason,$htmlwhite))

			$msg = ""
			$columnWidths = @("200","250")
			FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "450"

			If($NoSessions -eq $False) #V2.27
			{
				WriteHTMLLine 4 0 "Session Details"
				$rowdata = @()
				$columnHeaders = @("Launched Via",($global:htmlsb),$xSessionLaunchedViaHostName,$htmlwhite)
				$rowdata += @(,('Launched Via (IP)',($global:htmlsb),$xSessionLaunchedViaIP,$htmlwhite))
				$rowdata += @(,('Session Change Time',($global:htmlsb),$xSessionStateChangeTime,$htmlwhite))
				[string]$SSAT = $(If( $xSessionSmartAccessTags -is [array] -and $xSessionSmartAccessTags.Count ) { $xSessionSmartAccessTags[0] } Else { '-' } )
				$rowdata += @(,('SmartAccess Filters',($global:htmlsb),$SSAT,$htmlwhite))
				$cnt = -1
				ForEach($tmp in $xSessionSmartAccessTags)
				{
					$cnt++
					If($cnt -gt 0)
					{
						$rowdata += @(,('',($global:htmlsb),$tmp,$htmlwhite))
					}
				}

				$msg = ""
				$columnWidths = @("200","250")
				FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "450"

				WriteHTMLLine 4 0 "Session"
				$rowdata = @()
				$columnHeaders = @("Session State",($global:htmlsb),$xSessionState,$htmlwhite)
				$rowdata += @(,('Current User',($global:htmlsb),$xSessionUserName,$htmlwhite))
				$rowdata += @(,('Start Time',($global:htmlsb),$xSessionStateChangeTime,$htmlwhite))

				$msg = ""
				$columnWidths = @("200","250")
				FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "450"
			}
		}
	}
}
#endregion

#region Delivery Group functions
Function ProcessDeliveryGroups
{
	Write-Verbose "$(Get-Date -Format G): Retrieving Delivery Groups"
	
	$txt = "Delivery Groups"
	If($MSWord -or $PDF)
	{
		$Selection.InsertNewPage()
		WriteWordLine 1 0 $txt
	}
	ElseIf($Text)
	{
		Line 0 $txt
		Line 0 ""
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 1 0 $txt
	}

	$AllDeliveryGroups = Get-BrokerDesktopGroup @XDParams2 -SortBy Name 

	If($? -and ($Null -ne $AllDeliveryGroups))
	{
		Write-Verbose "$(Get-Date -Format G): `tProcessing Delivery Groups"
		
		#add 16-jun-2015, summary table of delivery groups to match what is shown in Studio
		OutputDeliveryGroupTable $AllDeliveryGroups
		
		ForEach($Group in $AllDeliveryGroups)
		{
			OutputDeliveryGroup $Group
		}
	}
	ElseIf($? -and ($Null -eq $AllDeliveryGroups))
	{
		$txt = "There are no Delivery Groups"
		OutputNotice $txt
	}
	Else
	{
		$txt = "Unable to retrieve Delivery Groups"
		OutputWarning $txt
	}
	Write-Verbose "$(Get-Date -Format G): "
}

Function OutputDeliveryGroupTable 
{
	Param([object] $AllDeliveryGroups)
	
	If($MSWord -or $PDF)
	{
		[System.Collections.Hashtable[]] $WordTable = @();
	}
	ElseIf($Text)
	{
		Line 1 "                                                                                                           No. of   Sessions          Machine                                                                "
		Line 1 "Delivery Group                                                                   Delivering                Machines in use   AppDisks type                                          Unregistered Disconnected"
		Line 1 "============================================================================================================================================================================================================="
		#       12345678901234567890123456789012345678901234567890123456789012345678901234567890S1234567890123456789012345S12345678S12345678S12345678S123456789012345678901234567890123456789012345S123456789012S123456789012
		#                                                                                        Applications and Desktops 99999999 99999999 99999999 Single-session OS (Static machine assignment) 999999999999 999999999999
	}
	ElseIf($HTML)
	{
		$rowdata = @()
	}
	
	ForEach($Group in $AllDeliveryGroups)
	{
		[string]$xSingleSession    = ""
		[string]$xState            = ""
		[string]$xDeliveryType     = ""
		[string]$xGroupName        = ""
		[int]$NumApps              = 0
		[int]$NumAppGroups         = 0
		[int]$NumDesktops          = 0
		
		#updated for CVAD 1909 in V2.28
		If($Group.SessionSupport -eq "SingleSession")
		{
			If($Script:XDSiteVersion -ge 7.23)
			{
				$xSingleSession = "Single-session OS"
			}
			Else
			{
				$xSingleSession = "Desktop OS"
			}
		}
		Else
		{
			If($Script:XDSiteVersion -ge 7.23)
			{
				$xSingleSession = "Multi-session OS"
			}
			Else
			{
				$xSingleSession = "Server OS"
			}
		}
		
		If($Group.InMaintenanceMode)
		{
			$xState = "(Maint) "
		}
		
		$xGroupName = "$($xState)$($Group.Name)"
		
		If($Group.DesktopKind -eq "Private")
		{
			$xSingleSession += " (Static machine assignment)"
		}
		
		$NumApps      = (@(Get-BrokerApplication @XDParams2 -DesktopGroupUid $Group.Uid)).Count
		$NumAppGroups = (@(Get-BrokerApplicationGroup @XDParams2 -DesktopGroupUid $Group.Uid)).Count
		$NumDesktops  = (@(Get-BrokerEntitlementPolicyRule @XDParams2 -DesktopGroupUid $Group.Uid)).Count

		If($NumApps -gt 0 -or $NumAppGroups -gt 0 -and $NumDesktops -eq 0)
		{
			$xDeliveryType = "Applications"
			$Script:TotalApplicationGroups++
		}
		ElseIf($NumApps -eq 0 -and $NumAppGroups -eq 0 -and $NumDesktops -gt 0)
		{
			$xDeliveryType = "Desktops"
			$Script:TotalDesktopGroups++
		}
		ElseIf($NumApps -gt 0 -or $NumAppGroups -gt 0 -and $NumDesktops -gt 0)
		{
			$xDeliveryType = "Applications and Desktops"
			$Script:TotalAppsAndDesktopGroups++
		}
		Else
		{
			$xDeliveryType = "Delivery type could not be determined: Apps($NumApps) AppGroups($NumAppGroups) Desktops($NumDesktops)"
		}

		If($Group.DeliveryType -eq "DesktopsOnly" -and $Group.DesktopKind -eq "Private")
		{
			$xDeliveryType = "Desktops"
		}
		
		[int]$xAppDisks = $Group.AppDisks.Count
		
		If($MSWord -or $PDF)
		{
			$WordTable += @{
			DeliveryGroupName = $xGroupName; 
			DeliveryType      = $xDeliveryType
			NoOfMachines      = $Group.TotalDesktops; 
			SessionsInUse     = $Group.Sessions; 
			AppDisks          = $xAppDisks
			MachineType       = $xSingleSession; 
			Unregistered      = $Group.DesktopsUnregistered; 
			Disconnected      = $Group.DesktopsDisconnected; 
			}
		}
		ElseIf($Text)
		{
			Line 1 ( "{0,-80} {1,-25} {2,8} {3,8} {4,8} {5,-45} {6,12} {7,12}" -f `
			$xGroupName, $xDeliveryType, $Group.TotalDesktops, $Group.Sessions, `
			$xAppDisks, $xSingleSession, $Group.DesktopsUnregistered, $Group.DesktopsDisconnected)
		}
		ElseIf($HTML)
		{
			$rowdata += @(,(
			$xGroupName,$htmlwhite,
			$xDeliveryType,$htmlwhite,
			$Group.TotalDesktops.ToString(),$htmlwhite,
			$Group.Sessions.ToString(),$htmlwhite,
			$xAppDisks.ToString(),$htmlwhite,
			$xSingleSession,$htmlwhite,
			$Group.DesktopsUnregistered.ToString(),$htmlwhite,
			$Group.DesktopsDisconnected.ToString(),$htmlwhite))
		}
	}
	
	If($MSWord -or $PDF)
	{
		$Table = AddWordTable -Hashtable $WordTable `
		-Columns  DeliveryGroupName, DeliveryType, NoOfMachines, SessionsInUse, AppDisks, MachineType, Unregistered, Disconnected `
		-Headers  "Delivery Group", "Delivering", "No. of machines", "Sessions in use", "AppDisks", "Machine type", "Unregistered", "Disconnected" `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table -Size 8 -BackgroundColor $wdColorWhite
		SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 110;
		$Table.Columns.Item(2).Width = 95;
		$Table.Columns.Item(3).Width = 43;
		$Table.Columns.Item(4).Width = 40;
		$Table.Columns.Item(5).Width = 42;
		$Table.Columns.Item(6).Width = 58;
		$Table.Columns.Item(7).Width = 55;
		$Table.Columns.Item(8).Width = 57;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
	}
	ElseIf($Text)
	{
		Line 0 ""
	}
	ElseIf($HTML)
	{
		$columnHeaders = @(
		'Delivery Group',($global:htmlsb),
		'Delivering',($global:htmlsb),
		'No. of machines',($global:htmlsb),
		'Sessions in use',($global:htmlsb),
		'AppDisks',($global:htmlsb),
		'Machine type',($global:htmlsb),
		'Unregistered',($global:htmlsb),
		'Disconnected',($global:htmlsb)
		)

		$columnWidths = @("135","130","50","45","50","65","60","65")
		$msg = ""
		FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "600"
	}
	
}

Function OutputDeliveryGroup
{
	Param([object] $Group)
	
	Write-Verbose "$(Get-Date -Format G): `t`tAdding Delivery Group $($Group.Name)"
	$xSingleSession = ""
	$xState = ""

	#updated for CVAD 1909 in V2.28
	If($Group.SessionSupport -eq "SingleSession")
	{
		If($Script:XDSiteVersion -ge 7.23)
		{
			$xSingleSession = "Single-session OS"
		}
		Else
		{
			$xSingleSession = "Desktop OS"
		}
	}
	Else
	{
		If($Script:XDSiteVersion -ge 7.23)
		{
			$xSingleSession = "Multi-session OS"
		}
		Else
		{
			$xSingleSession = "Server OS"
		}
	}

	If($Group.Enabled -eq $True -and $Group.InMaintenanceMode -eq $True)
	{
		$xState = "Maintenance Mode"
	}
	ElseIf($Group.Enabled -eq $False -and $Group.InMaintenanceMode -eq $True)
	{
		$xState = "Maintenance Mode"
	}
	ElseIf($Group.Enabled -eq $True -and $Group.InMaintenanceMode -eq $False)
	{
		$xState = "Enabled"
	}
	ElseIf($Group.Enabled -eq $False -and $Group.InMaintenanceMode -eq $False)
	{
		$xState = "Disabled"
	}

	If($MSWord -or$PDF)
	{
		$Selection.InsertNewPage()
		WriteWordLine 2 0 "Delivery Group: " $Group.Name
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "Machine type"; Value = $xSingleSession; }) > $Null
		$ScriptInformation.Add(@{Data = "Number of machines"; Value = $Group.TotalDesktops; }) > $Null
		$ScriptInformation.Add(@{Data = "Sessions in use"; Value = $Group.Sessions; }) > $Null
		$ScriptInformation.Add(@{Data = "Number of applications"; Value = $Group.TotalApplications; }) > $Null
		$ScriptInformation.Add(@{Data = "State"; Value = $xState; }) > $Null
		$ScriptInformation.Add(@{Data = "Unregistered"; Value = $Group.DesktopsUnregistered; }) > $Null
		$ScriptInformation.Add(@{Data = "Disconnected"; Value = $Group.DesktopsDisconnected; }) > $Null
		$ScriptInformation.Add(@{Data = "Available"; Value = $Group.DesktopsAvailable; }) > $Null
		$ScriptInformation.Add(@{Data = "In Use"; Value = $Group.DesktopsInUse; }) > $Null
		$ScriptInformation.Add(@{Data = "Never Registered"; Value = $Group.DesktopsNeverRegistered; }) > $Null
		$ScriptInformation.Add(@{Data = "Preparing"; Value = $Group.DesktopsPreparing; }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 200;
		$Table.Columns.Item(2).Width = 200;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	ElseIf($Text)
	{
		Line 0 "Delivery Group: " $Group.Name
		Line 1 "Machine type`t`t: " $xSingleSession
		Line 1 "No. of machines`t`t: " $Group.TotalDesktops
		Line 1 "Sessions in use`t`t: " $Group.Sessions
		Line 1 "No. of applications`t: " $Group.TotalApplications
		Line 1 "State`t`t`t: " $xState
		Line 1 "Unregistered`t`t: " $Group.DesktopsUnregistered
		Line 1 "Disconnected`t`t: " $Group.DesktopsDisconnected
		Line 1 "Available`t`t: " $Group.DesktopsAvailable
		Line 1 "In Use`t`t`t: " $Group.DesktopsInUse
		Line 1 "Never Registered`t: " $Group.DesktopsNeverRegistered
		Line 1 "Preparing`t`t: " $Group.DesktopsPreparing
		Line 0 ""
	}
	ElseIf($HTML)
	{
		$rowdata = @()
		WriteHTMLLine 2 0 "Delivery Group: " $Group.Name
		$columnHeaders = @("Machine type",($global:htmlsb),$xSingleSession,$htmlwhite)
		$rowdata += @(,('No. of machines',($global:htmlsb),$Group.TotalDesktops.ToString(),$htmlwhite))
		$rowdata += @(,('Sessions in use',($global:htmlsb),$Group.Sessions.ToString(),$htmlwhite))
		$rowdata += @(,('No. of applications',($global:htmlsb),$Group.TotalApplications.ToString(),$htmlwhite))
		$rowdata += @(,('State',($global:htmlsb),$xState,$htmlwhite))
		$rowdata += @(,('Unregistered',($global:htmlsb),$Group.DesktopsUnregistered.ToString(),$htmlwhite))
		$rowdata += @(,('Disconnected',($global:htmlsb),$Group.DesktopsDisconnected.ToString(),$htmlwhite))
		$rowdata += @(,('Available',($global:htmlsb),$Group.DesktopsAvailable.ToString(),$htmlwhite))
		$rowdata += @(,('In Use',($global:htmlsb),$Group.DesktopsInUse.ToString(),$htmlwhite))
		$rowdata += @(,('Never Registered',($global:htmlsb),$Group.DesktopsNeverRegistered.ToString(),$htmlwhite))
		$rowdata += @(,('Preparing',($global:htmlsb),$Group.DesktopsPreparing.ToString(),$htmlwhite))

		$msg = ""
		$columnWidths = @("125","200")
		FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "325"
	}
	
	If($DeliveryGroups)
	{
		Write-Verbose "$(Get-Date -Format G): `t`tProcessing details"
		$txt = "Delivery Group Details: "
		If($MSWord -or $PDF)
		{
			WriteWordLine 2 0 $txt $Group.Name
		}
		ElseIf($text)
		{
			Line 0 $txt $Group.Name
		}
		ElseIf($HTML)
		{
			WriteHTMLLine 2 0 $txt $Group.Name
		}
		OutputDeliveryGroupDetails $Group
		
		Write-Verbose "$(Get-Date -Format G): `t`tProcessing applications"
		OutputDeliveryGroupApplicationDetails $Group

		#retrieve machines in delivery group
		$Machines = Get-BrokerMachine -DesktopGroupName $Group.name @XDParams2 -SortBy DNSName
		If($? -and $Null -ne $Machines)
		{
			#V2.23 if both -MachineCatalogs and -DeliveryGroups parameters are used, only output the machine details for catalogs, not delivery groups
			If($MachineCatalogs -and $DeliveryGroups)
			{
				#do not do machine details for delivery groups if both -MachineCatalogs and -DeliveryGroups parameters are used
				#Write-Verbose "Skipping machine details in OutputDeliveryGroup since both -MachineCatalogs and -DeliveryGroups parameters are used"
			}
			ElseIf($DeliveryGroups -and -not $MachineCatalogs)
			{
				If($MSWord -or $PDF)
				{
					WriteWordLine 4 0 "Desktops"
				}
				ElseIf($text)
				{
					Line 0 "Desktops"
				}
				ElseIf($HTML)
				{
					WriteHTMLLine 4 0 "Desktops"
				}
				
				ForEach($Machine in $Machines)
				{
					OutputMachineDetails $Machine
				}
			}
			ElseIf(-not $DeliveryGroups -and $MachineCatalogs)
			{
				#shouldn't be here
#Do not indent the following write-error lines. Doing so will mess up the console formatting of the error message.
				Write-Error "
				`n`n
	OOPS!!! An error that should not occur has occured in Function OutputDeliveryGroup.
				`n`n
	Please send an email to webster@carlwebster.com
				`n`n
				"
			}
		}
		ElseIf($? -and $Null -eq $Machines)
		{
			$txt = "There are no Machines for Delivery Group $($Group.name)"
			OutputNotice $txt
		}
		Else
		{
			$txt = "Unable to retrieve Machines for Delivery Group $($Group.name)"
			OutputWarning $txt
		}

		Write-Verbose "$(Get-Date -Format G): `t`tProcessing machine catalogs"
		OutputDeliveryGroupCatalogs $Group

		Write-Verbose "$(Get-Date -Format G): `t`tProcessing AppDisks"
		OutputDeliveryGroupAppDisks $Group

		If($DeliveryGroupsUtilization)
		{
			Write-Verbose "$(Get-Date -Format G): `t`t`tCreating Delivery Group Utilization report"
			OutputDeliveryGroupUtilization $Group
		}

		Write-Verbose "$(Get-Date -Format G): `t`tProcessing Tags"
		OutputDeliveryGroupTags $Group

		Write-Verbose "$(Get-Date -Format G): `t`tProcessing Application Groups"
		OutputDeliveryGroupApplicationGroups $Group

		Write-Verbose "$(Get-Date -Format G): `t`tProcessing administrators"
		$Admins = GetAdmins "DesktopGroup" $Group.Name
		
		If($? -and ($Null -ne $Admins))
		{
			OutputAdminsForDetails $Admins
		}
		ElseIf($? -and ($Null -eq $Admins))
		{
			$txt = "There are no administrators for $($Group.Name)"
			OutputNotice $txt
		}
		Else
		{
			$txt = "Unable to retrieve administrators for $($Group.Name)"
			OutputWarning $txt
		}
		Write-Verbose "$(Get-Date -Format G): "
	}
	
	If($DeliveryGroupsUtilization)
	{
		Write-Verbose "$(Get-Date -Format G): `t`t`tCreating Delivery Group Utilization report"
		OutputDeliveryGroupUtilization $Group
	}
}

Function OutputDeliveryGroupDetails 
{
	Param([object] $Group)

	[string]$xDGType                   = "Delivery Group Type cannot be determined: $($Group.DeliveryType) $($Group.DesktopKind)"
	[string]$xSessionReconnection      = ""
	[string]$xSecureIcaRequired        = "Use delivery group setting"
	[string]$xVDAVersion               = ""
	[string]$xDeliveryType             = ""
	[string]$xColorDepth               = ""
	[string]$xShutdownDesktopsAfterUse = "No"
	[string]$xTurnOnAddedMachine       = "No"
	$DGIncludedUsers                   = @()
	$DGExcludedUsers                   = @()
	$DGScopes                          = @()
	$DGSFServers                       = @()
	[string]$xSessionPrelaunch         = "Off"
	[int]$xSessionPrelaunchAvgLoad     = 0
	[int]$xSessionPrelaunchAnyLoad     = 0
	[string]$xSessionLinger            = "Off"
	[int]$xSessionLingerAvgLoad        = 0
	[int]$xSessionLingerAnyLoad        = 0
	[string]$xEndPrelaunchSession      = ""
	[string]$xEndLinger                = ""
	[bool]$PwrMgmt1                    = $False
	[bool]$PwrMgmt2                    = $False
	[bool]$PwrMgmt3                    = $False
	[string]$xUsersHomeZone            = "No"
	
	If($Group.DeliveryType -eq "AppsOnly" -and $Group.DesktopKind -eq "Shared")
	{
		$xDGType = "Random Applications"
	}
	ElseIf($Group.DeliveryType -eq "DesktopsOnly" -and $Group.DesktopKind -eq "Shared")
	{
		$xDGType = "Random Desktops"
	}
	ElseIf($Group.DeliveryType -eq "DesktopsOnly" -and $Group.DesktopKind -eq "Private")
	{
		$xDGType = "Static Desktops"
		$xDeliveryType = "Desktops"
	}
	ElseIf($Group.DeliveryType -eq "DesktopsAndApps" -and $Group.DesktopKind -eq "Shared")
	{
		$xDGType = "Random Desktops and applications"
	}
	
	$NumApps      = (@(Get-BrokerApplication @XDParams2 -DesktopGroupUid $Group.Uid)).Count
	$NumAppGroups = (@(Get-BrokerApplicationGroup @XDParams2 -DesktopGroupUid $Group.Uid)).Count
	$NumDesktops  = (@(Get-BrokerEntitlementPolicyRule @XDParams2 -DesktopGroupUid $Group.Uid)).Count

	If($NumApps -gt 0 -or $NumAppGroups -gt 0 -and $NumDesktops -eq 0)
	{
		$xDeliveryType = "Applications"
	}
	ElseIf($NumApps -eq 0 -and $NumAppGroups -eq 0 -and $NumDesktops -gt 0)
	{
		$xDeliveryType = "Desktops"
	}
	ElseIf($NumApps -gt 0 -or $NumAppGroups -gt 0 -and $NumDesktops -gt 0)
	{
		$xDeliveryType = "Applications and Desktops"
	}
	Else
	{
		$xDeliveryType = "Delivery type could not be determined: Apps($NumApps) AppGroups($NumAppGroups) Desktops($NumDesktops)"
	}
	
	If((Get-BrokerServiceAddedCapability @XDParams1) -contains "RestrictToTag")
	{
		$CanRestrictToTags = $True
	}
	Else
	{
		$CanRestrictToTags = $False
	}
	
	#added for 7.14
	If((Get-BrokerServiceAddedCapability @XDParams1) -contains "MultiTypeLicensing")
	{
		If([String]::IsNullOrEmpty($Group.LicenseModel))
		{
			$LicenseModel = "Site Default"
		}
		Else
		{
			$LicenseModel = $Group.LicenseModel
		}
		
		If([String]::IsNullOrEmpty($Group.ProductCode))
		{
			$ProductCode = "Site Default"
		}
		Else
		{
			$ProductCode = $Group.ProductCode
		}
	}

	Switch ($Group.MinimumFunctionalLevel)
	{
		"L5" 	{$xVDAVersion = "5.6 FP1 (Windows XP and Windows Vista)"; Break}
		"L7"	{$xVDAVersion = "7.0 (or newer)"; Break}
		"L7_6"	{$xVDAVersion = "7.6 (or newer)"; Break}
		"L7_7"	{$xVDAVersion = "7.7 (or newer)"; Break}
		"L7_8"	{$xVDAVersion = "7.8 (or newer)"; Break}
		"L7_9"	{$xVDAVersion = "7.9 (or newer)"; Break}
		"L7_20"	{$xVDAVersion = "1811 (or newer)"; Break}
		"L7_25"	{$xVDAVersion = "2003 (or newer)"; Break}
		#fixed in V2.14, forgot to set variable
		Default {$xVDAVersion = "Unable to determine VDA version: $($Group.MinimumFunctionalLevel)"; Break}
	}
	
	#V2.14 change from If/ElseIf to Switch
	Switch ($Group.ColorDepth)
	{
		"FourBit"		{$xColorDepth = "4bit - 16 colors"; Break}
		"EightBit"		{$xColorDepth = "8bit - 256 colors"; Break}
		"SixteenBit"	{$xColorDepth = "16bit - High color"; Break}
		"TwentyFourBit"	{$xColorDepth = "24bit - True color"; Break}
		Default			{$xColorDepth = "Unable to determine Color Depth: $($Group.ColorDepth)"; Break}
	}
	
	If($Group.ShutdownDesktopsAfterUse)
	{
		$xShutdownDesktopsAfterUse = "Yes"
	}
	
	If($Group.TurnOnAddedMachine)
	{
		$xTurnOnAddedMachine = "Yes"
	}

	ForEach($Scope in $Group.Scopes)
	{
		$DGScopes += $Scope
	}
	$DGScopes += "All"
	
	ForEach($Server in $Group.MachineConfigurationNames)
	{
		$SFTmp = Get-BrokerMachineConfiguration -Name $Server
		If($? -and $Null -ne $SFTmp)
		{
			$SFByteArray = $SFTmp.Policy
			## GRL add Try/Catch
            try
            {
			    $SFServer = Get-SFStoreFrontAddress -ByteArray $SFByteArray -ErrorAction SilentlyContinue 4>$Null
			    If($? -and $Null -ne $SFServer)
			    {
				    $DGSFServers += $SFServer.Url
			    }
            }
            catch
            {
                Write-Warning -Message "Failed call to Get-SFStoreFrontAddress for $server"
            }
		}
	}
	
	If($DGSFServers.Count -eq 0)
	{
		$DGSFServers += "-"
	}
	
	$test = Get-BrokerSessionPreLaunch @XDParams1
	If($? -and $null -ne $test)
	{
		$SPLUIDs = @()
		ForEach($SPL in $test)
		{
			$SPLUIDs += $SPL.DesktopGroupUid
		}
		If($SPLUIDs -contains $Group.Uid)
		{
			$Results = Get-BrokerSessionPreLaunch -DesktopGroupUid $Group.Uid @XDParams1
			If($? -and $Null -ne $Results)
			{
				If($Results.Enabled -and $Results.AssociatedUserFullNames.Count -eq 0)
				{
					$xSessionPrelaunch = "Prelaunch for any user"
				}
				ElseIf($Results.Enabled -and $Results.AssociatedUserFullNames.Count -gt 0)
				{
					$xSessionPrelaunch = "Prelaunch for specific users"
				}
				
				If($Results.MaxAverageLoadThreshold -gt 0)
				{
					$xSessionPrelaunchAvgLoad = ($Results.MaxAverageLoadThreshold/100)
				}
				If($Results.MaxLoadPerMachineThreshold -gt 0)
				{
					$xSessionPrelaunchAnyLoad = ($Results.MaxLoadPerMachineThreshold/100)
				}
				$Mins = $Results.MaxTimeBeforeTerminate.Minutes
				$Hours = $Results.MaxTimeBeforeTerminate.Hours
				$Days = $Results.MaxTimeBeforeTerminate.Days
				If($Mins -gt 0)
				{
					$xEndPrelaunchSession = "$($Mins) Minutes"
				}
				If($Hours -gt 0)
				{
					$xEndPrelaunchSession = "$($Hours) Hours"
				}
				ElseIf($Days -gt 0)
				{
					$xEndPrelaunchSession = "$($Days) Days"
				}
			}
		}
	}
	
	$test = Get-BrokerSessionLinger @XDParams1
	If($? -and $null -ne $test)
	{
		$SLUIDs = @()
		ForEach($SL in $test)
		{
			$SLUIDs += $SL.DesktopGroupUid
		}
		If($SLUIDs -contains $Group.Uid)
		{
			$Results = Get-BrokerSessionLinger -DesktopGroupUid $Group.Uid @XDParams1
			If($? -and $Null -ne $Results)
			{
				$xSessionLinger = "Keep session active"
				If($Results.MaxAverageLoadThreshold -gt 0)
				{
					$xSessionLingerAvgLoad = ($Results.MaxAverageLoadThreshold/100)
				}
				If($Results.MaxLoadPerMachineThreshold -gt 0)
				{
					$xSessionLingerAnyLoad = ($Results.MaxLoadPerMachineThreshold/100)
				}
				$Mins = $Results.MaxTimeBeforeTerminate.Minutes
				$Hours = $Results.MaxTimeBeforeTerminate.Hours
				$Days = $Results.MaxTimeBeforeTerminate.Days
				If($Mins -gt 0)
				{
					$xEndLinger = "$($Mins) Minutes"
				}
				If($Hours -gt 0)
				{
					$xEndLinger = "$($Hours) Hours"
				}
				ElseIf($Days -gt 0)
				{
					$xEndLinger = "$($Days) Days"
				}
			}
		}
	}

	If($Group.ZonePreferences -Contains "UserHomeOnly")
	{
		$xUsersHomeZone = "Yes, if configured"
	}
	
	#get a desktop in an associated delivery group to get the catalog
	#V2.10 10-feb-2018 change from xdparams1 to xdparams2 to add maxrecordcount
	#V2.15 change from the deprecated Get-BrokerDesktop to Get-BrokerMachine
	#$Desktop = Get-BrokerDesktop @XDParams2 -DesktopGroupUid $Group.Uid -Property CatalogName
	$Desktop = Get-BrokerMachine @XDParams2 -DesktopGroupUid $Group.Uid -Property CatalogName
	
	If($? -and $Null -ne $Desktop)
	{
		#V2.10 10-feb-2018 change from xdparams1 to xdparams2 to add maxrecordcount
		$Catalog = Get-BrokerCatalog @XDParams2 -Name $Desktop[0].CatalogName
		
		If($? -and $Null -ne $Catalog)
		{
			If($Catalog.AllocationType -eq "Static" -and $Catalog.PersistUserChanges -eq "Discard" -and $Group.DesktopKind -eq "Private" -and $Group.SessionSupport -eq "SingleSession")
			{
				$PwrMgmt1 = $True
				$PwrMgmt2 = $False
				$PwrMgmt3 = $False
			}
			ElseIf($Catalog.AllocationType -eq "Static" -and $Catalog.PersistUserChanges -ne "Discard" -and $Group.DesktopKind -eq "Private" -and $Group.SessionSupport -eq "SingleSession")
			{
				$PwrMgmt1 = $False
				$PwrMgmt2 = $True
				$PwrMgmt3 = $False
			}
			ElseIf($Catalog.AllocationType -eq "Random" -and $Catalog.PersistUserChanges -eq "Discard" -and $Group.DesktopKind -eq "Shared" -and $Group.SessionSupport -eq "SingleSession")
			{
				$PwrMgmt1 = $False
				$PwrMgmt2 = $False
				$PwrMgmt3 = $True
			}
		}
	}

	If($PwrMgmt2 -or $PwrMgmt3)
	{
		#V2.10 10-feb-2018 change from xdparams1 to xdparams2 to add maxrecordcount
		$PwrMgmts = Get-BrokerPowerTimeScheme @XDParams2 -DesktopGroupUid $Group.Uid 
	}
	
	$xOffPeakBufferSizePercent           = $Group.OffPeakBufferSizePercent
	$xOffPeakDisconnectTimeout           = $Group.OffPeakDisconnectTimeout
	$xOffPeakExtendedDisconnectTimeout   = $Group.OffPeakExtendedDisconnectTimeout
	$xOffPeakLogOffTimeout               = $Group.OffPeakLogOffTimeout
	$xPeakBufferSizePercent              = $Group.PeakBufferSizePercent
	$xPeakDisconnectTimeout              = $Group.PeakDisconnectTimeout
	$xPeakExtendedDisconnectTimeout      = $Group.PeakExtendedDisconnectTimeout
	$xPeakLogOffTimeout                  = $Group.PeakLogOffTimeout
	$xSettlementPeriodBeforeAutoShutdown = $Group.SettlementPeriodBeforeAutoShutdown
	$xSettlementPeriodBeforeUse          = $Group.SettlementPeriodBeforeUse
	$xOffPeakDisconnectAction            = ""
	$xOffPeakExtendedDisconnectAction    = ""
	$xOffPeakLogOffAction                = ""
	$xPeakDisconnectAction               = ""
	$xPeakExtendedDisconnectAction       = ""
	$xPeakLogOffAction                   = ""

	Switch ($Group.OffPeakDisconnectAction)
	{
		"Nothing"	{ $xOffPeakDisconnectAction = "No action"; Break}
		"Suspend"	{ $xOffPeakDisconnectAction = "Suspend"; Break}
		"Shutdown"	{ $xOffPeakDisconnectAction = "Shut down"; Break}
		Default		{ $xOffPeakDisconnectAction = "Unable to determine the OffPeakDisconnectAction action: $($Group.OffPeakDisconnectAction)"; Break}
	}
	
	Switch ($Group.OffPeakExtendedDisconnectAction)
	{
		"Nothing"	{ $xOffPeakExtendedDisconnectAction = "No action"; Break}
		"Suspend"	{ $xOffPeakExtendedDisconnectAction = "Suspend"; Break}
		"Shutdown"	{ $xOffPeakExtendedDisconnectAction = "Shut down"; Break}
		Default		{ $xOffPeakExtendedDisconnectAction = "Unable to determine the OffPeakExtendedDisconnectAction action: $($Group.OffPeakExtendedDisconnectAction)"; Break}
	}
	
	Switch ($Group.OffPeakLogOffAction)
	{
		"Nothing"	{ $xOffPeakLogOffAction = "No action"; Break}
		"Suspend"	{ $xOffPeakLogOffAction = "Suspend"; Break}
		"Shutdown"	{ $xOffPeakLogOffAction = "Shut down"; Break}
		Default		{ $xOffPeakLogOffAction = "Unable to determine $xOffPeakLogOffAction action: $($Group.OffPeakLogOffAction)"; Break}
	}
	
	Switch ($Group.PeakDisconnectAction)
	{
		"Nothing"	{ $xPeakDisconnectAction = "No action"; Break}
		"Suspend"	{ $xPeakDisconnectAction = "Suspend"; Break}
		"Shutdown"	{ $xPeakDisconnectAction = "Shut down"; Break}
		Default		{ $xPeakDisconnectAction = "Unable to determine $xPeakDisconnectAction action: $($Group.PeakDisconnectAction)"; Break}
	}
	
	Switch ($Group.PeakExtendedDisconnectAction)
	{
		"Nothing"	{ $xPeakExtendedDisconnectAction = "No action"; Break}
		"Suspend"	{ $xPeakExtendedDisconnectAction = "Suspend"; Break}
		"Shutdown"	{ $xPeakExtendedDisconnectAction = "Shut down"; Break}
		Default		{ $xPeakExtendedDisconnectAction = "Unable to determine $xPeakExtendedDisconnectAction action: $($Group.PeakExtendedDisconnectAction)"; Break}
	}
	
	Switch ($Group.PeakLogOffAction)
	{
		"Nothing"	{ $xPeakLogOffAction = "No action"; Break}
		"Suspend"	{ $xPeakLogOffAction = "Suspend"; Break}
		"Shutdown"	{ $xPeakLogOffAction = "Shut down"; Break}
		Default		{ $xPeakLogOffAction = "Unable to determine $xPeakLogOffAction action: $($Group.PeakLogOffAction)"; Break}
	}

	$xEnabled = "Disabled"
	If($Group.Enabled)
	{
		$xEnabled = "Enabled"
	}

	$xSecureICA = "Disabled"
	If($Group.SecureICARequired)
	{
		$xSecureICA = "Enabled"
	}
	
	#added 17-jun-2015
	$xAutoPowerOnForAssigned = "Disabled"
	$xAutoPowerOnForAssignedDuringPeak = "Disabled"
	
	If($Group.AutomaticPowerOnForAssigned)
	{
		$xAutoPowerOnForAssigned = "Enabled"
	}
	If($Group.AutomaticPowerOnForAssignedDuringPeak)
	{
		$xAutoPowerOnForAssignedDuringPeak = "Enabled"
	}

	$SFAnonymousUsers = $False
	#V2.10 10-feb-2018 change from xdparams1 to xdparams2 to add maxrecordcount
	$Results = Get-BrokerAccessPolicyRule -DesktopGroupUid $Group.Uid @XDParams2
	
	If($? -and $Null -ne $Results)
	{
		ForEach($Result in $Results)
		{
			
			If($Result.AllowedUsers -eq "Any" -or $Result.AllowedUsers -eq "FilteredOrAnonymous" -or $Result.AllowedUsers -eq "AnonymousOnly")
			{
				$SFAnonymousUsers = $True
			}
			
			If($Result.IncludedUserFilterEnabled -and $Result.AllowedUsers -eq "Filtered")
			{
				ForEach($User in $Result.IncludedUsers)
				{
					$DGIncludedUsers += $User.Name
				}
			}
			ElseIf($Result.IncludedUserFilterEnabled -and ($Result.AllowedUsers -eq "AnyAuthenticated" -or $Result.AllowedUsers -eq "Any"))
			{
				$DGIncludedUsers += "Allow any authenticated users to use this Delivery Group"
			}
			
			If($Result.ExcludedUserFilterEnabled)
			{
				ForEach($User in $Result.ExcludedUsers)
				{
					$DGExcludedUsers += $User.Name
				}
			}
			
			If($Result.Name -like '*_AG')
			{
				If($Result.AllowedConnections -eq "ViaAG" -and $Result.IncludedSmartAccessFilterEnabled -eq $False -and $Result.Enabled -eq $True)
				{
					$xAllConnections = "Enabled"
					$xNSConnection = "Disabled"
					$xAGFilters = @()
					$xAGFilters += "N/A"
				}
				ElseIf($Result.AllowedConnections -eq "ViaAG" -and $Result.IncludedSmartAccessFilterEnabled -eq $True -and $Result.Enabled -eq $True)
				{
					$xAllConnections = "Enabled"
					$xNSConnection = "Enabled"
					$xAGFilters = @()
					ForEach($AccessCondition in $Result.IncludedSmartAccessTags)
					{
						$xAGFilters += $AccessCondition
					}
					If($xAGFilters.Count -eq 0)
					{
						$xAGFilters += "None"
					}
				}
				ElseIf($Result.AllowedConnections -eq "ViaAG" -and $Result.IncludedSmartAccessFilterEnabled -eq $False -and $Result.Enabled -eq $False)
				{
					$xAllConnections = "Disabled"
					$xNSConnection = "Disabled"
					$xAGFilters = @()
					$xAGFilters += "N/A"
				}
			}
			Else
			{
				$xAllConnections = "-"
				$xNSConnection = "-"
				$xAGFilters = @()
			}
		}
		
		[array]$DGIncludedUsers = $DGIncludedUsers | Sort-Object -unique
		[array]$DGExcludedUsers = $DGExcludedUsers | Sort-Object -unique
	}
	
	#desktops per user for singlesession OS
	If($Group.SessionSupport -eq "SingleSession")
	{
		If($xDGType -eq "Static Desktops")
		{
			#static desktops have a maxdesktops count stored as a property
			$xMaxDesktops = 0
			#V2.10 10-feb-2018 change from xdparams1 to xdparams2 to add maxrecordcount
			$MaxDesktops = Get-BrokerAssignmentPolicyRule @XDParams2 -DesktopGroupUid $Group.Uid
			
			If($? -and $Null -ne $MaxDesktops)
			{
				$xMaxDesktops = $MaxDesktops.MaxDesktops
			}
		}
		ElseIf($xDGType -like "*Random*")
		{
			#random desktops are a count of the number of entitlement policy rules
			$xMaxDesktops = 0
			#V2.10 10-feb-2018 change from xdparams1 to xdparams2 to add maxrecordcount
			$MaxDesktops = @(Get-BrokerEntitlementPolicyRule @XDParams2 -DesktopGroupUid $Group.Uid)
			
			If($? -and $Null -ne $MaxDesktops)
			{
				$xMaxDesktops = $MaxDesktops.Count
			}
		}
	}
	
	If([String]::IsNullOrEmpty($Group.TimeZone))
	{
		$xTimeZone = "Not Configured"
	}
	Else
	{
		$xTimeZone = $Group.TimeZone
	}
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 4 0 "Details: " $Group.Name
		[System.Collections.Hashtable[]] $ScriptInformation = @()
		$ScriptInformation += @{Data = "Description"; Value = $Group.Description; }
		If(![String]::IsNullOrEmpty($Group.PublishedName))
		{
			$ScriptInformation += @{Data = "Display Name"; Value = $Group.PublishedName; }
		}
		$ScriptInformation += @{Data = "Type"; Value = $xDGType; }
		$ScriptInformation += @{Data = "Set to VDA version"; Value = $xVDAVersion; }
		If($Group.SessionSupport -eq "SingleSession" -and ($xDGType -eq "Static Desktops" -or $xDGType -like "*Random*"))
		{
			$ScriptInformation += @{Data = "Desktops per user"; Value = $xMaxDesktops; }
		}
		$ScriptInformation += @{Data = "Time zone"; Value = $xTimeZone; }
		$ScriptInformation += @{Data = "Enable Delivery Group"; Value = $xEnabled; }
		$ScriptInformation += @{Data = "Enable Secure ICA"; Value = $xSecureICA; }
		$ScriptInformation += @{Data = "Color Depth"; Value = $xColorDepth; }
		$ScriptInformation += @{Data = "Shutdown Desktops After Use"; Value = $xShutdownDesktopsAfterUse; }
		$ScriptInformation += @{Data = "Turn On Added Machine"; Value = $xTurnOnAddedMachine; }
		[string]$DGIU = $(If( $DGIncludedUsers -is [array] -and $DGIncludedUsers.Count ) { $DGIncludedUsers[0] } Else { '-' } )
		$ScriptInformation += @{Data = "Included Users"; Value = $DGIU; }
		$cnt = -1
		ForEach($tmp in $DGIncludedUsers)
		{
			$cnt++
			If($cnt -gt 0)
			{
				$ScriptInformation += @{Data = ""; Value = $tmp; }
			}
		}
		
		If($DGExcludedUsers -is [array])
		{
			If($DGExcludedUsers.Count -gt 0)
			{
				$ScriptInformation += @{Data = "Excluded Users"; Value = $DGExcludedUsers[0]; }
				$cnt = -1
				ForEach($tmp in $DGExcludedUsers)
				{
					$cnt++
					If($cnt -gt 0)
					{
						$ScriptInformation += @{Data = ""; Value = $tmp; }
					}
				}
			}
		}
		
		If($Group.SessionSupport -eq "MultiSession")
		{
			$ScriptInformation += @{Data = 'Give access to unauthenticated (anonymous) users'; Value = $SFAnonymousUsers; }
		}

		#If($xDeliveryType -ne "Applications" -and $Null -ne $DesktopSettings)
		If($xDeliveryType -ne "Applications")
		{
			#Fixed in V2.1 to handle multiple desktop entitlements
			$DesktopSettings = $Null
			$DesktopSettings = Get-BrokerEntitlementPolicyRule @XDParams2 -DesktopGroupUid $Group.Uid
			
			If($? -and $Null -ne $DesktopSettings)
			{
				ForEach($DesktopSetting in $DesktopSettings)
				{
					$DesktopSettingIncludedUsers = @()
					$DesktopSettingExcludedUsers = @()

					If($CanRestrictToTags -eq $True)
					{
						If([String]::IsNullOrEmpty($DesktopSetting.RestrictToTag))
						{
							$RestrictedToTag = "-"
						}
						Else
						{
							$RestrictedToTag = $DesktopSetting.RestrictToTag
						}
					}
					Else
					{
						$RestrictedToTag = "-"
					}
					
					If($DesktopSetting.IncludedUserFilterEnabled -eq $True)
					{
						ForEach($User in $DesktopSetting.IncludedUsers)
						{
							$DesktopSettingIncludedUsers += $User.Name
						}
						
						[array]$DesktopSettingIncludedUsers = $DesktopSettingIncludedUsers | Sort-Object -unique
					}
					ElseIf($DesktopSetting.IncludedUserFilterEnabled -eq $False)
					{
						$DesktopSettingIncludedUsers += "Allow everyone with access to this Delivery Group to use a desktop"
					}
					
					If($DesktopSetting.ExcludedUserFilterEnabled -eq $True)
					{
						ForEach($User in $DesktopSetting.ExcludedUsers)
						{
							$DesktopSettingExcludedUsers += $User.Name
						}

						[array]$DesktopSettingExcludedUsers = $DesktopSettingExcludedUsers | Sort-Object -unique
					}
					#added in V2.19
					Switch ($DesktopSetting.SessionReconnection)
					{
						"Always" 			{$xSessionReconnection = "Always"; Break}
						"DisconnectedOnly"	{$xSessionReconnection = "Disconnected Only"; Break}
						"SameEndpointOnly"	{$xSessionReconnection = "Same Endpoint Only"; Break}
						Default				{$xSessionReconnection = "Unable to determine Session Reconnection value: $($DesktopSetting.SessionReconnection)"; Break}
					}
					#added in V2.19
					If($Null -ne $DesktopSetting.SecureIcaRequired)
					{
						$xSecureIcaRequired = $DesktopSetting.SecureIcaRequired.ToString()
					}
					$ScriptInformation += @{Data = "Desktop Entitlement"; Value = ""; }
					$ScriptInformation += @{Data = "     Display name"; Value = $DesktopSetting.PublishedName; }
					$ScriptInformation += @{Data = "     Description"; Value = $DesktopSetting.Description; }
					If($CanRestrictToTags)
					{
						$ScriptInformation += @{Data = "     Restrict launches to machines with tag"; Value = $RestrictedToTag; }
					}
					[string]$DSIU = $(If( $DesktopSettingIncludedUsers -is [array] -and $DesktopSettingIncludedUsers.Count ) { $DesktopSettingIncludedUsers[0] } Else { '-' } )
					$ScriptInformation += @{Data = "     Included Users"; Value = $DSIU; }
					$cnt = -1
					ForEach($tmp in $DesktopSettingIncludedUsers)
					{
						$cnt++
						If($cnt -gt 0)
						{
							$ScriptInformation += @{Data = ""; Value = $tmp; }
						}
					}
					
					If($DesktopSettingExcludedUsers.Count -gt 0)
					{
						$ScriptInformation += @{Data = "     Excluded Users"; Value = $DesktopSettingExcludedUsers[0]; }
						$cnt = -1
						#V2.15 changed to use correct variable name
						ForEach($tmp in $DesktopSettingExcludedUsers)
						{
							$cnt++
							If($cnt -gt 0)
							{
								$ScriptInformation += @{Data = ""; Value = $tmp; }
							}
						}
					}
					$ScriptInformation += @{Data = "     Enable desktop"; Value = $DesktopSetting.Enabled; }
					#New in V2.19
					$ScriptInformation += @{Data = "     Leasing behavior"; Value = $DesktopSetting.LeasingBehavior; }
					$ScriptInformation += @{Data = "     Maximum concurrent instances"; Value = $DesktopSetting.MaxPerEntitlementInstances; }
					$ScriptInformation += @{Data = "     SecureICA required"; Value = $DesktopSetting.SecureIcaRequired; }
					$ScriptInformation += @{Data = "     Session reconnection"; Value = $xSessionReconnection; }
				}
			}
		}
		
		[string]$DGS = $(If( $DGScopes -is [array] -and $DGScopes.Count ) { $DGScopes[0] } Else { '-' } )
		$ScriptInformation += @{Data = "Scopes"; Value = $DGS; }
		$cnt = -1
		ForEach($tmp in $DGScopes)
		{
			$cnt++
			If($cnt -gt 0)
			{
				$ScriptInformation += @{Data = ""; Value = $tmp; }
			}
		}
		
		[string]$DGSFS = $(If( $DGSFServers -is [array] -and $DGSFServers.Count ) { $DGSFServers[0] } Else { '-' } )
		$ScriptInformation += @{Data = "StoreFronts"; Value = $DGSFS; }
		$cnt = -1
		ForEach($tmp in $DGSFServers)
		{
			$cnt++
			If($cnt -gt 0)
			{
				$ScriptInformation += @{Data = ""; Value = $tmp; }
			}
		}
		
		If($Group.SessionSupport -eq "MultiSession" -and $xDeliveryType -like '*App*')
		{
			$ScriptInformation += @{Data = "Session prelaunch"; Value = $xSessionPrelaunch; }
			If($xSessionPrelaunch -ne "Off")
			{
				$ScriptInformation += @{Data = "Prelaunched session will end in"; Value = $xEndPrelaunchSession; }
				
				If($xSessionPrelaunchAvgLoad -gt 0)
				{
					$ScriptInformation += @{Data = "When avg load on all machines exceeds (%)"; Value = $xSessionPrelaunchAvgLoad; }
				}
				If($xSessionPrelaunchAnyLoad -gt 0)
				{
					$ScriptInformation += @{Data = "When load on any machines exceeds (%)"; Value = $xSessionPrelaunchAnyLoad; }
				}
			}
			$ScriptInformation += @{Data = "Session lingering"; Value = $xSessionLinger; }
			If($xSessionLinger -ne "Off")
			{
				$ScriptInformation += @{Data = "Keep sessions active until after"; Value = $xEndLinger; }
				
				If($xSessionLingerAvgLoad -gt 0)
				{
					$ScriptInformation += @{Data = "When avg load on all machines exceeds (%)"; Value = $xSessionPrelaunchAvgLoad; }
				}
				If($xSessionLingerAnyLoad -gt 0)
				{
					$ScriptInformation += @{Data = "When load on any machines exceeds (%)"; Value = $xSessionPrelaunchAnyLoad; }
				}
			}
		}

		$ScriptInformation += @{Data = "Launch in user's home zone"; Value = $xUsersHomeZone; }
		
		If($Group.SessionSupport -eq "MultiSession")
		{
			#Fixed in V2.21 to handle multiple restart schedules
			If((Get-BrokerServiceAddedCapability @XDParams1) -contains "MultipleRebootSchedulesPerGroup")
			{
				$ChkTags = $True
				$RestartSchedules = Get-BrokerRebootScheduleV2 @XDParams1 -DesktopGroupUid $Group.Uid
			}
			Else
			{
				$ChkTags = $False
				$RestartSchedules = Get-BrokerRebootSchedule @XDParams1 -DesktopGroupUid $Group.Uid
			}
			
			If($? -and $Null -ne $RestartSchedules)
			{
				ForEach($RestartSchedule in $RestartSchedules)
				{
					$ScriptInformation += @{Data = "Restart Schedule"; Value = ""; }
					#added in V2.21
					Switch($RestartSchedule.WarningRepeatInterval)
					{
						0	{$RestartScheduleWarningRepeatInterval = "Do not repeat"}
						5	{$RestartScheduleWarningRepeatInterval = "Every 5 minutes"} 
						Default {$RestartScheduleWarningRepeatInterval = "Notification frequency could not be determined: $($RestartSchedule.WarningRepeatInterval) "}
					}
				
					$ScriptInformation += @{Data = "     Restart machines automatically"; Value = "Yes"; }

					If($ChkTags -eq $True)
					{
						If($Null -eq $RestartSchedule.RestrictToTag)
						{
							$RestrictToTag = "-"
						}
						Else
						{
							$RestrictToTag = $RestartSchedule.RestrictToTag
						}
						
						$ScriptInformation += @{Data = "     Restrict to tag"; Value = $RestrictToTag; }
					}
					
					$tmp = ""
					If($RestartSchedule.Frequency -eq "Daily")
					{
						$tmp = "Daily"
					}
					ElseIf($RestartSchedule.Frequency -eq "Weekly")
					{
						$tmp = "Every $($RestartSchedule.Day)"
					}
					
					$ScriptInformation += @{Data = "     Restart frequency"; Value = $tmp; }
					$ScriptInformation += @{Data = "     Begin restart at"; Value = "$($RestartSchedule.StartTime.Hours.ToString("00")):$($RestartSchedule.StartTime.Minutes.ToString("00"))"; }
					
					$xTime = 0
					$tmp = ""
					If($RestartSchedule.RebootDuration -eq 0)
					{
						$tmp = "Restart all machines at once"
					}
					ElseIf($RestartSchedule.RebootDuration -eq 30)
					{
						$tmp = "30 minutes"
					}
					Else
					{
						$xTime = $RestartSchedule.RebootDuration / 60
						$tmp = "$($xTime) hours"
					}
					$ScriptInformation += @{Data = "     Restart duration"; Value = $tmp; }
					$xTime = $Null
					$tmp = $Null
					
					$tmp = ""
					If($RestartSchedule.WarningDuration -eq 0)
					{
						$tmp = "Do not send a notification"
						$ScriptInformation += @{Data = "     Send notification to users"; Value = $tmp; }
					}
					Else
					{
						$tmp = "$($RestartSchedule.WarningDuration) minutes before user is logged off"
						$ScriptInformation += @{Data = "     Send notification to users"; Value = $tmp; }
						$ScriptInformation += @{Data = "     Notification message"; Value = $RestartSchedule.WarningMessage; }
					}
					$ScriptInformation += @{Data = "     Notification frequency"; Value = $RestartScheduleWarningRepeatInterval; }
				}
			}
			Else
			{
				$ScriptInformation += @{Data = "Restart machines automatically"; Value = "No"; }
			}
		}

		If((Get-BrokerServiceAddedCapability @XDParams1) -contains "MultiTypeLicensing")
		{
			$ScriptInformation += @{Data = "License model"; Value = $LicenseModel; }
			$ScriptInformation += @{Data = "Product code"; Value = $ProductCode; }
		}

		If((Get-BrokerServiceAddedCapability @XDParams1) -contains "AppProtection" -and $Group.SessionSupport -eq "SingleSession")
		{
			#Added in V2.32
			$ScriptInformation += @{Data = "App Protection Key Logging Required"; Value = $Group.AppProtectionKeyLoggingRequired; }
			$ScriptInformation += @{Data = "App Protection Screen Capture Required"; Value = $Group.AppProtectionScreenCaptureRequired; }
		}

		#added in V2.13
		#this data has been collected for a long time, I simple forgot to add it to the output
		$ScriptInformation += @{ Data = "Off Peak Buffer Size Percent"; Value = $xOffPeakBufferSizePercent; }
		$ScriptInformation += @{ Data = "Off Peak Disconnect Timeout (Minutes)"; Value = $xOffPeakDisconnectTimeout; }
		$ScriptInformation += @{ Data = "Off Peak Extended Disconnect Timeout (Minutes)"; Value = $xOffPeakExtendedDisconnectTimeout; }
		$ScriptInformation += @{ Data = "Off Peak LogOff Timeout (Minutes)"; Value = $xOffPeakLogOffTimeout; }
		$ScriptInformation += @{ Data = "Peak Buffer Size Percent"; Value = $xPeakBufferSizePercent; }
		$ScriptInformation += @{ Data = "Peak Disconnect Timeout (Minutes)"; Value = $xPeakDisconnectTimeout; }
		$ScriptInformation += @{ Data = "Peak Extended Disconnect Timeout (Minutes)"; Value = $xPeakExtendedDisconnectTimeout; }
		$ScriptInformation += @{ Data = "Peak LogOff Timeout (Minutes)"; Value = $xPeakLogOffTimeout; }
		$ScriptInformation += @{ Data = "Settlement Period Before Autoshutdown (HH:MM:SS)"; Value = $xSettlementPeriodBeforeAutoShutdown; }
		$ScriptInformation += @{ Data = "Settlement Period Before Use (HH:MM:SS)"; Value = $xSettlementPeriodBeforeUse; }

		If($PwrMgmt1)
		{
			$ScriptInformation += @{Data = "During peak hours, when disconnected $($Group.PeakDisconnectTimeout) mins"; Value = $xPeakDisconnectAction; }
			$ScriptInformation += @{Data = "During peak extended hours, when disconnected $($Group.PeakExtendedDisconnectTimeout) mins"; Value = $xPeakExtendedDisconnectAction; }
			$ScriptInformation += @{Data = "During off-peak hours, when disconnected $($Group.OffPeakDisconnectTimeout) mins"; Value = $xOffPeakDisconnectAction; }
			$ScriptInformation += @{Data = "During off-peak extended hours, when disconnected $($Group.OffPeakExtendedDisconnectTimeout) mins"; Value = $xOffPeakExtendedDisconnectAction; }
		}
		If($PwrMgmt2)
		{
			#count if there are any items fist
			$val = 0
			ForEach($PwrMgmt in $PwrMgmts)
			{
				If($PwrMgmt.DaysOfWeek -eq "Weekdays")
				{
					For($i=0;$i -le 23;$i++)
					{
						If($PwrMgmt.PeakHours[$i])
						{
							$val++
						}
					}
				}
			}

			If($val -eq 0)
			{
				$ScriptInformation += @{Data = "Weekday Peak hours"; Value = "None"; }
			}
			Else
			{
				$val = 0
				ForEach($PwrMgmt in $PwrMgmts)
				{
					If($PwrMgmt.DaysOfWeek -eq "Weekdays")
					{
						For($i=0;$i -le 23;$i++)
						{
							If($PwrMgmt.PeakHours[$i])
							{
								If($i -eq 0)
								{
									$ScriptInformation += @{Data = "Weekday Peak hours"; Value = "$($i.ToString("00")):00"; }
								}
								Else
								{
									$ScriptInformation += @{Data = ""; Value = "$($i.ToString("00")):00"; }
								}
								$val++
							}
						}
					}
				}
			}

			$val = 0
			ForEach($PwrMgmt in $PwrMgmts)
			{
				If($PwrMgmt.DaysOfWeek -eq "Weekend")
				{
					For($i=0;$i -le 23;$i++)
					{
						If($PwrMgmt.PeakHours[$i])
						{
							$val++
						}
					}
				}
			}

			If($val -eq 0)
			{
				$ScriptInformation += @{Data = "Weekend Peak hours"; Value = "None"; }
			}
			Else
			{
				$val = 0
				ForEach($PwrMgmt in $PwrMgmts)
				{
					If($PwrMgmt.DaysOfWeek -eq "Weekend")
					{
						For($i=0;$i -le 23;$i++)
						{
							If($PwrMgmt.PeakHours[$i])
							{
								If($val -eq 0)
								{
									$ScriptInformation += @{Data = "Weekend Peak hours"; Value = "$($i.ToString("00")):00"; }
								}
								Else
								{
									$ScriptInformation += @{Data = ""; Value = "$($i.ToString("00")):00"; }
								}
								$val++
							}
						}
					}
				}
			}

			$ScriptInformation += @{Data = "During peak hours, when disconnected $($Group.PeakDisconnectTimeout) mins"; Value = $xPeakDisconnectAction; }
			$ScriptInformation += @{Data = "During peak extended hours, when disconnected $($Group.PeakExtendedDisconnectTimeout) mins"; Value = $xPeakExtendedDisconnectAction; }
			$ScriptInformation += @{Data = "During peak hours, when logged off $($Group.PeakLogOffTimeout) mins"; Value = $xPeakLogOffAction; }
			$ScriptInformation += @{Data = "During off-peak hours, when disconnected $($Group.OffPeakDisconnectTimeout) mins"; Value = $xOffPeakDisconnectAction; }
			$ScriptInformation += @{Data = "During off-peak extended hours, when disconnected $($Group.OffPeakExtendedDisconnectTimeout) mins"; Value = $xOffPeakExtendedDisconnectAction; }
			$ScriptInformation += @{Data = "During off-peak hours, when logged off $($Group.OffPeakLogOffTimeout) mins"; Value = $xOffPeakLogOffAction; }
		}
		If($PwrMgmt3)
		{
			$val = 0
			ForEach($PwrMgmt in $PwrMgmts)
			{
				If($PwrMgmt.DaysOfWeek -eq "Weekdays")
				{
					For($i=0;$i -le 23;$i++)
					{
						If($PwrMgmt.PoolSize[$i] -gt 0)
						{
							$val++
						}
					}
				}
			}
			
			If($val -eq 0 )
			{
				$ScriptInformation += @{Data = "Weekday number machines powered on, and when"; Value = "None"; }
			}
			Else
			{
				$val = 0
				ForEach($PwrMgmt in $PwrMgmts)
				{
					If($PwrMgmt.DaysOfWeek -eq "Weekdays")
					{
						For($i=0;$i -le 23;$i++)
						{
							If($PwrMgmt.PoolSize[$i] -gt 0)
							{
								If($val -eq 0)
								{
									$ScriptInformation += @{Data = "Weekday number machines powered on, and when"; Value = "$($PwrMgmt.PoolSize[$i].ToString("####0")) - $($i.ToString("00")):00"; }
								}
								Else
								{
									$ScriptInformation += @{Data = ""; Value = "$($PwrMgmt.PoolSize[$i].ToString("####0")) - $($i.ToString("00")):00"; }
								}
								$val++
							}
						}
					}
				}
			}
			
			$val = 0
			ForEach($PwrMgmt in $PwrMgmts)
			{
				If($PwrMgmt.DaysOfWeek -eq "Weekend")
				{
					For($i=0;$i -le 23;$i++)
					{
						If($PwrMgmt.PoolSize[$i] -gt 0)
						{
							$val++
						}
					}
				}
			}

			If($val -eq 0)
			{
				$ScriptInformation += @{Data = "Weekend number machines powered on, and when"; Value = "None"; }
			}
			Else
			{
				$val = 0
				ForEach($PwrMgmt in $PwrMgmts)
				{
					If($PwrMgmt.DaysOfWeek -eq "Weekend")
					{
						For($i=0;$i -le 23;$i++)
						{
							If($PwrMgmt.PoolSize[$i] -gt 0)
							{
								If($val -eq 0)
								{
									$ScriptInformation += @{Data = "Weekend number machines powered on, and when"; Value = "$($PwrMgmt.PoolSize[$i].ToString("####0")) - $($i.ToString("00")):00"; }
								}
								Else
								{
									$ScriptInformation += @{Data = ""; Value = "$($PwrMgmt.PoolSize[$i].ToString("####0")) - $($i.ToString("00")):00"; }
								}
								$val++
							}
						}
					}
				}
			}
			
			$val = 0
			ForEach($PwrMgmt in $PwrMgmts)
			{
				If($PwrMgmt.DaysOfWeek -eq "Weekdays")
				{
					For($i=0;$i -le 23;$i++)
					{
						If($PwrMgmt.PeakHours[$i])
						{
							$val++
						}
					}
				}
			}

			If($val -eq 0)
			{
				$ScriptInformation += @{Data = "Weekday Peak hours"; Value = "None"; }
			}
			Else
			{
				$val = 0
				ForEach($PwrMgmt in $PwrMgmts)
				{
					If($PwrMgmt.DaysOfWeek -eq "Weekdays")
					{
						For($i=0;$i -le 23;$i++)
						{
							If($PwrMgmt.PeakHours[$i])
							{
								If($val -eq 0)
								{
									$ScriptInformation += @{Data = "Weekday Peak hours"; Value = "$($i.ToString("00")):00"; }
								}
								Else
								{
									$ScriptInformation += @{Data = ""; Value = "$($i.ToString("00")):00"; }
								}
								$val++
							}
						}
					}
				}
			}

			$val = 0
			ForEach($PwrMgmt in $PwrMgmts)
			{
				If($PwrMgmt.DaysOfWeek -eq "Weekend")
				{
					For($i=0;$i -le 23;$i++)
					{
						If($PwrMgmt.PeakHours[$i])
						{
							$val++
						}
					}
				}
			}

			If($val -eq 0)
			{
				$ScriptInformation += @{Data = "Weekend Peak hours"; Value = "None"; }
			}
			Else
			{
				$val = 0
				ForEach($PwrMgmt in $PwrMgmts)
				{
					If($PwrMgmt.DaysOfWeek -eq "Weekend")
					{
						For($i=0;$i -le 23;$i++)
						{
							If($PwrMgmt.PeakHours[$i])
							{
								If($val -eq 0)
								{
									$ScriptInformation += @{Data = "Weekend Peak hours"; Value = "$($i.ToString("00")):00"; }
								}
								Else
								{
									$ScriptInformation += @{Data = ""; Value = "$($i.ToString("00")):00"; }
								}
								$val++
							}
						}
					}
				}
			}

			$ScriptInformation += @{Data = "During peak hours, when disconnected $($Group.PeakDisconnectTimeout) mins"; Value = $xPeakDisconnectAction; }
			$ScriptInformation += @{Data = "During peak extended hours, when disconnected $($Group.PeakExtendedDisconnectTimeout) mins"; Value = $xPeakExtendedDisconnectAction; }
			$ScriptInformation += @{Data = "During off-peak hours, when disconnected $($Group.OffPeakDisconnectTimeout) mins"; Value = $xOffPeakDisconnectAction; }
			$ScriptInformation += @{Data = "During off-peak extended hours, when disconnected $($Group.OffPeakExtendedDisconnectTimeout) mins"; Value = $xOffPeakExtendedDisconnectAction; }
		}

		$ScriptInformation += @{Data = "Automatic power on for assigned"; Value = $xAutoPowerOnForAssigned; }
		$ScriptInformation += @{Data = "Automatic power on for assigned during peak"; Value = $xAutoPowerOnForAssignedDuringPeak; }
		#Added V2.14
		If(validObject $Group ReuseMachinesWithoutShutdownInOutage)
		{
			If($Group.ReuseMachinesWithoutShutdownInOutage -eq $Script:XDSite1.ReuseMachinesWithoutShutdownInOutageAllowed)
			{
				$ScriptInformation += @{Data = "Reuse Machines Without Shutdown in Outage"; Value = $Group.ReuseMachinesWithoutShutdownInOutage; }
			}
			Else
			{
				$ScriptInformation += @{Data = "Reuse Machines Without Shutdown in Outage"; Value = "$($Group.ReuseMachinesWithoutShutdownInOutage) (Doesn't match Site setting)"; }
			}
			
		}
		
		$ScriptInformation += @{Data = "All connections not through NetScaler Gateway"; Value = $xAllConnections; }
		$ScriptInformation += @{Data = "Connections through NetScaler Gateway"; Value = $xNSConnection; }
		[string]$AGF = $(If( $xAGFilters -is [array] -and $xAGFilters.Count ) { $xAGFilters[0] } Else { '-' } )
		$ScriptInformation += @{Data = "Connections meeting any of the following filters"; Value = $AGF; }
		$cnt = -1
		ForEach($tmp in $xAGFilters)
		{
			$cnt++
			If($cnt -gt 0)
			{
				$ScriptInformation += @{Data = ""; Value = $tmp; }
			}
		}
		
		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 200;
		$Table.Columns.Item(2).Width = 200;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	ElseIf($Text)
	{
		Line 0 "Details: " $Group.Name
		Line 1 "Description`t`t`t`t`t: " $Group.Description
		If(![String]::IsNullOrEmpty($Group.PublishedName))
		{
			Line 1 "Display Name`t`t`t`t`t: " $Group.PublishedName
		}
		Line 1 "Type`t`t`t`t`t`t: " $xDGType
		Line 1 "Set to VDA version`t`t`t`t: " $xVDAVersion
		If($Group.SessionSupport -eq "SingleSession" -and ($xDGType -eq "Static Desktops" -or $xDGType -like "*Random*"))
		{
			Line 1 "Desktops per user`t`t`t`t: " $xMaxDesktops
		}
		Line 1 "Time zone`t`t`t`t`t: " $xTimeZone
		Line 1 "Enable Delivery Group`t`t`t`t: " $xEnabled
		Line 1 "Enable Secure ICA`t`t`t`t: " $xSecureICA
		Line 1 "Color Depth`t`t`t`t`t: " $xColorDepth
		Line 1 "Shutdown Desktops After Use`t`t`t: " $xShutdownDesktopsAfterUse
		Line 1 "Turn On Added Machine`t`t`t`t: " $xTurnOnAddedMachine
		[string]$DGIU = $(If( $DGIncludedUsers -is [array] -and $DGIncludedUsers.Count ) { $DGIncludedUsers[0] } Else { '-' } )
		Line 1 "Included Users`t`t`t`t`t: " $DGIU
		$cnt = -1
		ForEach($tmp in $DGIncludedUsers)
		{
			$cnt++
			If($cnt -gt 0)
			{
				Line 7 "  " $tmp
			}
		}
		
		If($DGExcludedUsers -is [array])
		{
			If($DGExcludedUsers.Count -gt 0)
			{
				Line 1 "Excluded Users`t`t`t`t`t`t: " $DGExcludedUsers[0]
				$cnt = -1
				ForEach($tmp in $DGExcludedUsers)
				{
					$cnt++
					If($cnt -gt 0)
					{
						Line 8 "  " $tmp
					}
				}
			}
		}

		If($Group.SessionSupport -eq "MultiSession")
		{
			Line 1 "Give access to unauthenticated (anonymous) users: " $SFAnonymousUsers
		}

		If($xDeliveryType -ne "Applications")
		{
			#Fixed in V2.1 to handle multiple desktop entitlements
			$DesktopSettings = $Null
			$DesktopSettings = Get-BrokerEntitlementPolicyRule @XDParams2 -DesktopGroupUid $Group.Uid
			
			If($? -and $Null -ne $DesktopSettings)
			{
				ForEach($DesktopSetting in $DesktopSettings)
				{
					$DesktopSettingIncludedUsers = @()
					$DesktopSettingExcludedUsers = @()

					If($CanRestrictToTags -eq $True)
					{
						If([String]::IsNullOrEmpty($DesktopSetting.RestrictToTag))
						{
							$RestrictedToTag = "-"
						}
						Else
						{
							$RestrictedToTag = $DesktopSetting.RestrictToTag
						}
					}
					Else
					{
						$RestrictedToTag = "-"
					}
					
					If($DesktopSetting.IncludedUserFilterEnabled -eq $True)
					{
						ForEach($User in $DesktopSetting.IncludedUsers)
						{
							$DesktopSettingIncludedUsers += $User.Name
						}
						
						[array]$DesktopSettingIncludedUsers = $DesktopSettingIncludedUsers | Sort-Object -unique
					}
					ElseIf($DesktopSetting.IncludedUserFilterEnabled -eq $False)
					{
						$DesktopSettingIncludedUsers += "Allow everyone with access to this Delivery Group to use a desktop"
					}
					
					If($DesktopSetting.ExcludedUserFilterEnabled -eq $True)
					{
						ForEach($User in $DesktopSetting.ExcludedUsers)
						{
							$DesktopSettingExcludedUsers += $User.Name
						}

						[array]$DesktopSettingExcludedUsers = $DesktopSettingExcludedUsers | Sort-Object -unique
					}
					#added in V2.19
					Switch ($DesktopSetting.SessionReconnection)
					{
						"Always" 			{$xSessionReconnection = "Always"; Break}
						"DisconnectedOnly"	{$xSessionReconnection = "Disconnected Only"; Break}
						"SameEndpointOnly"	{$xSessionReconnection = "Same Endpoint Only"; Break}
						Default				{$xSessionReconnection = "Unable to determine Session Reconnection value: $($DesktopSetting.SessionReconnection)"; Break}
					}
					#added in V2.19
					If($Null -ne $DesktopSetting.SecureIcaRequired)
					{
						$xSecureIcaRequired = $DesktopSetting.SecureIcaRequired.ToString()
					}
					Line 1 "Desktop Entitlement" ""
					Line 2 "Display name`t`t`t`t: " $DesktopSetting.PublishedName
					Line 2 "Description`t`t`t`t: " $DesktopSetting.Description
					If($CanRestrictToTags)
					{
						Line 2 "Restrict launches to machines with tag`t: " $RestrictedToTag
					}
					[string]$DSIU = $(If( $DesktopSettingIncludedUsers -is [array] -and $DesktopSettingIncludedUsers.Count ) { $DesktopSettingIncludedUsers[0] } Else { '-' } )
					Line 2 "Included Users`t`t`t`t: " $DSIU
					$cnt = -1
					ForEach($tmp in $DesktopSettingIncludedUsers)
					{
						$cnt++
						If($cnt -gt 0)
						{
							Line 7 "  " $tmp
						}
					}
					
					If($DesktopSettingExcludedUsers.Count -gt 0)
					{
						Line 2 "Excluded Users`t`t`t`t: " $DesktopSettingExcludedUsers[0]
						$cnt = -1
						#V2.15 changed to use correct variable name
						ForEach($tmp in $DesktopSettingExcludedUsers)
						{
							$cnt++
							If($cnt -gt 0)
							{
								Line 7 "  " $tmp
							}
						}
					}
					Line 2 "Enable desktop`t`t`t`t: " $DesktopSetting.Enabled
					#New in V2.19
					Line 2 "Leasing behavior`t`t`t: " $DesktopSetting.LeasingBehavior
					Line 2 "Maximum concurrent instances`t`t: " $DesktopSetting.MaxPerEntitlementInstances
					Line 2 "SecureICA required`t`t`t: " $DesktopSetting.SecureIcaRequired
					Line 2 "Session reconnection`t`t`t: " $xSessionReconnection
				}
			}
		}
		
		[string]$DGS = $(If( $DGScopes -is [array] -and $DGScopes.Count ) { $DGScopes[0] } Else { '-' } )
		Line 1 "Scopes`t`t`t`t`t`t: " $DGS
		$cnt = -1
		ForEach($tmp in $DGScopes)
		{
			$cnt++
			If($cnt -gt 0)
			{
				Line 7 "  " $tmp
			}
		}
		
		[string]$DGSFS = $(If( $DGSFServers -is [array] -and $DGSFServers.Count ) { $DGSFServers[0] } Else { '-' } )
		Line 1 "StoreFronts`t`t`t`t`t: " $DGSFS
		$cnt = -1
		ForEach($tmp in $DGSFServers)
		{
			$cnt++
			If($cnt -gt 0)
			{
				Line 7 "  " $tmp
			}
		}
		
		If($Group.SessionSupport -eq "MultiSession" -and $xDeliveryType -like '*App*')
		{
			Line 1 "Session prelaunch`t`t`t`t: " $xSessionPrelaunch
			If($xSessionPrelaunch -ne "Off")
			{
				Line 1 "Prelaunched session will end in`t`t`t: " $xEndPrelaunchSession
				
				If($xSessionPrelaunchAvgLoad -gt 0)
				{
					Line 1 "When avg load on all machines exceeds (%)`t: " $xSessionPrelaunchAvgLoad
				}
				If($xSessionPrelaunchAnyLoad -gt 0)
				{
					Line 1 "When load on any machines exceeds (%)`t`t: " $xSessionPrelaunchAnyLoad
				}
			}
			Line 1 "Session lingering`t`t`t`t: " $xSessionLinger
			If($xSessionLinger -ne "Off")
			{
				Line 1 "Keep sessions active until after`t`t: " $xEndLinger
				
				If($xSessionLingerAvgLoad -gt 0)
				{
					Line 1 "When avg load on all machines exceeds (%)`t: " $xSessionPrelaunchAvgLoad
				}
				If($xSessionLingerAnyLoad -gt 0)
				{
					Line 1 "When load on any machines exceeds (%)`t`t: " $xSessionPrelaunchAnyLoad
				}
			}
		}

		Line 1 "Launch in user's home zone`t`t`t: " $xUsersHomeZone
		
		If($Group.SessionSupport -eq "MultiSession")
		{
			#Fixed in V2.21 to handle multiple restart schedules
			If((Get-BrokerServiceAddedCapability @XDParams1) -contains "MultipleRebootSchedulesPerGroup")
			{
				$ChkTags = $True
				$RestartSchedules = Get-BrokerRebootScheduleV2 @XDParams1 -DesktopGroupUid $Group.Uid
			}
			Else
			{
				$ChkTags = $False
				$RestartSchedules = Get-BrokerRebootSchedule @XDParams1 -DesktopGroupUid $Group.Uid
			}
			
			If($? -and $Null -ne $RestartSchedules)
			{
				ForEach($RestartSchedule in $RestartSchedules)
				{
					Line 1 "Restart Schedule"
					#added in V2.21
					Switch($RestartSchedule.WarningRepeatInterval)
					{
						0	{$RestartScheduleWarningRepeatInterval = "Do not repeat"}
						5	{$RestartScheduleWarningRepeatInterval = "Every 5 minutes"} 
						Default {$RestartScheduleWarningRepeatInterval = "Notification frequency could not be determined: $($RestartSchedule.WarningRepeatInterval) "}
					}

					Line 2 "Restart machines automatically`t`t`t: " "Yes"

					If($ChkTags -eq $True)
					{
						If($Null -eq $RestartSchedule.RestrictToTag)
						{
							$RestrictToTag = "-"
						}
						Else
						{
							$RestrictToTag = $RestartSchedule.RestrictToTag
						}
						
						Line 2 "Restrict to tag`t`t`t`t`t: " $RestrictToTag
					}
					
					$tmp = ""
					If($RestartSchedule.Frequency -eq "Daily")
					{
						$tmp = "Daily"
					}
					ElseIf($RestartSchedule.Frequency -eq "Weekly")
					{
						$tmp = "Every $($RestartSchedule.Day)"
					}
					
					Line 2 "Restart frequency`t`t`t`t: " $tmp
					Line 2 "Begin restart at`t`t`t`t: " "$($RestartSchedule.StartTime.Hours.ToString("00")):$($RestartSchedule.StartTime.Minutes.ToString("00"))"
					
					$xTime = 0
					$tmp = ""
					If($RestartSchedule.RebootDuration -eq 0)
					{
						$tmp = "Restart all machines at once"
					}
					ElseIf($RestartSchedule.RebootDuration -eq 30)
					{
						$tmp = "30 minutes"
					}
					Else
					{
						$xTime = $RestartSchedule.RebootDuration / 60
						$tmp = "$($xTime) hours"
					}
					Line 2 "Restart duration`t`t`t`t: " $tmp
					$xTime = $Null
					$tmp = $Null
					
					$tmp = ""
					If($RestartSchedule.WarningDuration -eq 0)
					{
						$tmp = "Do not send a notification"
						Line 2 "Send notification to users`t`t`t: " $tmp
					}
					Else
					{
						$tmp = "$($RestartSchedule.WarningDuration) minutes before user is logged off"
						Line 2 "Send notification to users`t`t`t: " $tmp
						Line 2 "Notification message`t`t`t`t: " $RestartSchedule.WarningMessage
					}
					Line 2 "Notification frequency`t`t`t`t: " $RestartScheduleWarningRepeatInterval
				}
			}
			Else
			{
				Line 1 "Restart machines automatically`t`t`t: " "No"
			}
		}
		
		If((Get-BrokerServiceAddedCapability @XDParams1) -contains "MultiTypeLicensing")
		{
			Line 1 "License model`t`t`t`t`t: " $LicenseModel
			Line 1 "Product code`t`t`t`t`t: " $ProductCode
		}

		If((Get-BrokerServiceAddedCapability @XDParams1) -contains "AppProtection" -and $Group.SessionSupport -eq "SingleSession")
		{
			#Added in V2.32
			Line 1 "App Protection Key Logging Required`t`t: " $Group.AppProtectionKeyLoggingRequired
			Line 1 "App Protection Screen Capture Required`t`t: " $Group.AppProtectionScreenCaptureRequired
		}

		#added in V2.13
		#this data has been collected for a long time, I simple forgot to add it to the output
		Line 1 "Off Peak Buffer Size Percent`t`t`t: " $xOffPeakBufferSizePercent
		Line 1 "Off Peak Disconnect Timeout (Minutes)`t`t: " $xOffPeakDisconnectTimeout
		Line 1 "Off Peak Extended Disconnect Timeout (Minutes)`t: " $xOffPeakExtendedDisconnectTimeout
		Line 1 "Off Peak LogOff Timeout (Minutes)`t`t: " $xOffPeakLogOffTimeout
		Line 1 "Peak Buffer Size Percent`t`t`t: " $xPeakBufferSizePercent
		Line 1 "Peak Disconnect Timeout (Minutes)`t`t: " $xPeakDisconnectTimeout
		Line 1 "Peak Extended Disconnect Timeout (Minutes)`t: " $xPeakExtendedDisconnectTimeout
		Line 1 "Peak LogOff Timeout (Minutes)`t`t`t: " $xPeakLogOffTimeout
		Line 1 "Settlement Period Before Autoshutdown (HH:MM:SS): " $xSettlementPeriodBeforeAutoShutdown
		Line 1 "Settlement Period Before Use (HH:MM:SS)`t`t: " $xSettlementPeriodBeforeUse
		
		If($PwrMgmt1)
		{
			Line 1 "During peak hours, when disconnected $($Group.PeakDisconnectTimeout) mins`t`t: " $xPeakDisconnectAction
			Line 1 "During peak extended hours, when disconnected $($Group.PeakExtendedDisconnectTimeout) mins`t: " $xPeakExtendedDisconnectAction
			Line 1 "During off-peak hours, when disconnected $($Group.OffPeakDisconnectTimeout) mins`t`t: " $xOffPeakDisconnectAction
			Line 1 "During off-peak extended hours, when disconnected $($Group.OffPeakExtendedDisconnectTimeout) mins: " $xOffPeakExtendedDisconnectAction
		}
		If($PwrMgmt2)
		{
			#count if there are any items fist
			$val = 0
			ForEach($PwrMgmt in $PwrMgmts)
			{
				If($PwrMgmt.DaysOfWeek -eq "Weekdays")
				{
					For($i=0;$i -le 23;$i++)
					{
						If($PwrMgmt.PeakHours[$i])
						{
							$val++
						}
					}
				}
			}

			If($val -eq 0)
			{
				Line 1 "Weekday Peak hours`t`t`t`t`t: " "None"
			}
			Else
			{
				$val = 0
				ForEach($PwrMgmt in $PwrMgmts)
				{
					If($PwrMgmt.DaysOfWeek -eq "Weekdays")
					{
						For($i=0;$i -le 23;$i++)
						{
							If($PwrMgmt.PeakHours[$i])
							{
								If($i -eq 0)
								{
									Line 1 "Weekday Peak hours`t`t`t`t`t: " "$($i.ToString("00")):00"
								}
								Else
								{
									Line 8 "  " "$($i.ToString("00")):00"
								}
								$val++
							}
						}
					}
				}
			}

			$val = 0
			ForEach($PwrMgmt in $PwrMgmts)
			{
				If($PwrMgmt.DaysOfWeek -eq "Weekend")
				{
					For($i=0;$i -le 23;$i++)
					{
						If($PwrMgmt.PeakHours[$i])
						{
							$val++
						}
					}
				}
			}

			If($val -eq 0)
			{
				Line 1 "Weekend Peak hours`t`t`t`t`t: " "None"
			}
			Else
			{
				$val = 0
				ForEach($PwrMgmt in $PwrMgmts)
				{
					If($PwrMgmt.DaysOfWeek -eq "Weekend")
					{
						For($i=0;$i -le 23;$i++)
						{
							If($PwrMgmt.PeakHours[$i])
							{
								If($val -eq 0)
								{
									Line 1 "Weekend Peak hours`t`t`t`t`t: " "$($i.ToString("00")):00"
								}
								Else
								{
									Line 8 "  " "$($i.ToString("00")):00"
								}
								$val++
							}
						}
					}
				}
			}

			Line 1 "During peak hours, when disconnected $($Group.PeakDisconnectTimeout) mins`t`t: " $xPeakDisconnectAction
			Line 1 "During peak extended hours, when disconnected $($Group.PeakExtendedDisconnectTimeout) mins`t: " $xPeakExtendedDisconnectAction
			Line 1 "During peak hours, when logged off $($Group.PeakLogOffTimeout) mins`t`t: " $xPeakLogOffAction
			Line 1 "During off-peak hours, when disconnected $($Group.OffPeakDisconnectTimeout) mins`t`t: " $xOffPeakDisconnectAction
			Line 1 "During off-peak extended hours, when disconnected $($Group.OffPeakExtendedDisconnectTimeout) mins: " $xOffPeakExtendedDisconnectAction
			Line 1 "During off-peak hours, when logged off $($Group.OffPeakLogOffTimeout) mins`t`t: " $xOffPeakLogOffAction
		}
		If($PwrMgmt3)
		{
			$val = 0
			ForEach($PwrMgmt in $PwrMgmts)
			{
				If($PwrMgmt.DaysOfWeek -eq "Weekdays")
				{
					For($i=0;$i -le 23;$i++)
					{
						If($PwrMgmt.PoolSize[$i] -gt 0)
						{
							$val++
						}
					}
				}
			}

			If($val -eq 0)
			{
				Line 1 "Weekday number machines powered on, and when`t: " "None"
			}
			Else
			{
				$val = 0
				ForEach($PwrMgmt in $PwrMgmts)
				{
					If($PwrMgmt.DaysOfWeek -eq "Weekdays")
					{
						For($i=0;$i -le 23;$i++)
						{
							If($PwrMgmt.PoolSize[$i] -gt 0)
							{
								If($val -eq 0)
								{
									Line 1 "Weekday number machines powered on, and when`t: " "$($PwrMgmt.PoolSize[$i].ToString("####0")) - $($i.ToString("00")):00"
								}
								Else
								{
									Line 7 "  " "$($PwrMgmt.PoolSize[$i].ToString("####0")) - $($i.ToString("00")):00"
								}
								$val++
							}
						}
					}
				}
			}

			$val = 0
			ForEach($PwrMgmt in $PwrMgmts)
			{
				If($PwrMgmt.DaysOfWeek -eq "Weekend")
				{
					For($i=0;$i -le 23;$i++)
					{
						If($PwrMgmt.PoolSize[$i] -gt 0)
						{
							$val++
						}
					}
				}
			}

			If($val -eq 0)
			{
				Line 1 "Weekend number machines powered on, and when`t: " "None"
			}
			Else
			{
				$val = 0
				ForEach($PwrMgmt in $PwrMgmts)
				{
					If($PwrMgmt.DaysOfWeek -eq "Weekend")
					{
						For($i=0;$i -le 23;$i++)
						{
							If($PwrMgmt.PoolSize[$i] -gt 0)
							{
								If($val -eq 0)
								{
									Line 1 "Weekend number machines powered on, and when`t: " "$($PwrMgmt.PoolSize[$i].ToString("####0")) - $($i.ToString("00")):00"
								}
								Else
								{
									Line 7 "  " "$($PwrMgmt.PoolSize[$i].ToString("####0")) - $($i.ToString("00")):00"
								}
								$val++
							}
						}
					}
				}
			}

			$val = 0
			ForEach($PwrMgmt in $PwrMgmts)
			{
				If($PwrMgmt.DaysOfWeek -eq "Weekdays")
				{
					For($i=0;$i -le 23;$i++)
					{
						If($PwrMgmt.PeakHours[$i])
						{
							$val++
						}
					}
				}
			}

			If($val -eq 0)
			{
				Line 1 "Weekday Peak hours`t`t`t`t: " "None"
			}
			Else
			{
				$val = 0
				ForEach($PwrMgmt in $PwrMgmts)
				{
					If($PwrMgmt.DaysOfWeek -eq "Weekdays")
					{
						For($i=0;$i -le 23;$i++)
						{
							If($PwrMgmt.PeakHours[$i])
							{
								If($val -eq 0)
								{
									Line 1 "Weekday Peak hours`t`t`t`t: " "$($i.ToString("00")):00"
								}
								Else
								{
									Line 7 "  " "$($i.ToString("00")):00"
								}
								$val++
							}
						}
					}
				}
			}

			$val = 0
			ForEach($PwrMgmt in $PwrMgmts)
			{
				If($PwrMgmt.DaysOfWeek -eq "Weekend")
				{
					For($i=0;$i -le 23;$i++)
					{
						If($PwrMgmt.PeakHours[$i])
						{
							$val++
						}
					}
				}
			}

			If($val -eq 0)
			{
				Line 1 "Weekend Peak hours`t`t`t`t: " "None"
			}
			Else
			{
				$val = 0
				ForEach($PwrMgmt in $PwrMgmts)
				{
					If($PwrMgmt.DaysOfWeek -eq "Weekend")
					{
						For($i=0;$i -le 23;$i++)
						{
							If($PwrMgmt.PeakHours[$i])
							{
								If($val -eq 0)
								{
									Line 1 "Weekend Peak hours`t`t`t`t: " "$($i.ToString("00")):00"
								}
								Else
								{
									Line 7 "  " "$($i.ToString("00")):00"
								}
								$val++
							}
						}
					}
				}
			}

			Line 1 "During peak hours, "
			Line 2 "when disconnected $($Group.PeakDisconnectTimeout) mins`t`t: " $xPeakDisconnectAction
			Line 1 "During peak extended hours, "
			Line 2 "when disconnected $($Group.PeakExtendedDisconnectTimeout) mins`t`t: " $xPeakExtendedDisconnectAction
			Line 1 "During off-peak hours, "
			Line 2 "when disconnected $($Group.OffPeakDisconnectTimeout) mins`t`t: " $xOffPeakDisconnectAction
			Line 1 "During off-peak extended hours, "
			Line 2 "when disconnected $($Group.OffPeakExtendedDisconnectTimeout) mins`t`t: " $xOffPeakExtendedDisconnectAction
		}

		Line 1 "Automatic power on for assigned`t`t`t: " $xAutoPowerOnForAssigned
		Line 1 "Automatic power on for assigned during peak`t: " $xAutoPowerOnForAssignedDuringPeak
		#Added V2.14
		If(validObject $Group ReuseMachinesWithoutShutdownInOutage)
		{
			If($Group.ReuseMachinesWithoutShutdownInOutage -eq $Script:XDSite1.ReuseMachinesWithoutShutdownInOutageAllowed)
			{
				Line 1 "Reuse Machines Without Shutdown in Outage`t: " $Group.ReuseMachinesWithoutShutdownInOutage
			}
			Else
			{
				Line 1 "Reuse Machines Without Shutdown in Outage`t: $($Group.ReuseMachinesWithoutShutdownInOutage) (Doesn't match Site setting)"
			}
		}
		
		Line 1 "All connections not through NetScaler Gateway`t: " $xAllConnections
		Line 1 "Connections through NetScaler Gateway`t`t: " $xNSConnection
		[string]$AGF = $(If( $xAGFilters -is [array] -and $xAGFilters.Count ) { $xAGFilters[0] } Else { '-' } )
		Line 1 "Connections meeting any of the following filters: " $AGF
		$cnt = -1
		ForEach($tmp in $xAGFilters)
		{
			$cnt++
			If($cnt -gt 0)
			{
				Line 7 "  " $tmp
			}
		}
		Line 0 ""
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 4 0 "Details: " $Group.Name
		$rowdata = @()
		$columnHeaders = @("Description",($global:htmlsb),$Group.Description,$htmlwhite)
		If(![String]::IsNullOrEmpty($Group.PublishedName))
		{
			$rowdata += @(,('Display Name',($global:htmlsb),$Group.PublishedName,$htmlwhite))
		}
		$rowdata += @(,('Type',($global:htmlsb),$xDGType,$htmlwhite))
		$rowdata += @(,('Set to VDA version',($global:htmlsb),$xVDAVersion,$htmlwhite))
		If($Group.SessionSupport -eq "SingleSession" -and ($xDGType -eq "Static Desktops" -or $xDGType -like "*Random*"))
		{
			$rowdata += @(,('Desktops per user',($global:htmlsb),$xMaxDesktops.ToString(),$htmlwhite))
		}
		$rowdata += @(,('Time zone',($global:htmlsb),$xTimeZone,$htmlwhite))
		$rowdata += @(,('Enable Delivery Group',($global:htmlsb),$xEnabled,$htmlwhite))
		$rowdata += @(,('Enable Secure ICA',($global:htmlsb),$xSecureICA,$htmlwhite))
		$rowdata += @(,('Color Depth',($global:htmlsb),$xColorDepth,$htmlwhite))
		$rowdata += @(,("Shutdown Desktops After Use",($global:htmlsb),$xShutdownDesktopsAfterUse,$htmlwhite))
		$rowdata += @(,("Turn On Added Machine",($global:htmlsb),$xTurnOnAddedMachine,$htmlwhite))
		[string]$DGIU = $(If( $DGIncludedUsers -is [array] -and $DGIncludedUsers.Count ) { $DGIncludedUsers[0] } Else { '-' } )
		$rowdata += @(,('Included Users',($global:htmlsb),$DGIU,$htmlwhite))
		$cnt = -1
		ForEach($tmp in $DGIncludedUsers)
		{
			$cnt++
			If($cnt -gt 0)
			{
				$rowdata += @(,('',($global:htmlsb),$tmp,$htmlwhite))
			}
		}
		
		If($DGExcludedUsers -is [array])
		{
			If($DGExcludedUsers.Count -gt 0)
			{
				$rowdata += @(,('Excluded Users',($global:htmlsb), $DGExcludedUsers[0],$htmlwhite))
				$cnt = -1
				ForEach($tmp in $DGExcludedUsers)
				{
					$cnt++
					If($cnt -gt 0)
					{
						$rowdata += @(,('',($global:htmlsb),$tmp,$htmlwhite))
					}
				}
			}
		}

		If($Group.SessionSupport -eq "MultiSession")
		{
			$rowdata += @(,('Give access to unauthenticated (anonymous) users',($global:htmlsb),$SFAnonymousUsers.ToString(),$htmlwhite))
		}

		If($xDeliveryType -ne "Applications")
		{
			#Fixed in V2.1 to handle multiple desktop entitlements
			$DesktopSettings = $Null
			$DesktopSettings = Get-BrokerEntitlementPolicyRule @XDParams2 -DesktopGroupUid $Group.Uid
			
			If($? -and $Null -ne $DesktopSettings)
			{
				ForEach($DesktopSetting in $DesktopSettings)
				{
					$DesktopSettingIncludedUsers = @()
					$DesktopSettingExcludedUsers = @()

					If($CanRestrictToTags -eq $True)
					{
						If([String]::IsNullOrEmpty($DesktopSetting.RestrictToTag))
						{
							$RestrictedToTag = "-"
						}
						Else
						{
							$RestrictedToTag = $DesktopSetting.RestrictToTag
						}
					}
					Else
					{
						$RestrictedToTag = "-"
					}
					
					If($DesktopSetting.IncludedUserFilterEnabled -eq $True)
					{
						ForEach($User in $DesktopSetting.IncludedUsers)
						{
							$DesktopSettingIncludedUsers += $User.Name
						}
						
						[array]$DesktopSettingIncludedUsers = $DesktopSettingIncludedUsers | Sort-Object -unique
					}
					ElseIf($DesktopSetting.IncludedUserFilterEnabled -eq $False)
					{
						$DesktopSettingIncludedUsers += "Allow everyone with access to this Delivery Group to use a desktop"
					}
					
					If($DesktopSetting.ExcludedUserFilterEnabled -eq $True)
					{
						ForEach($User in $DesktopSetting.ExcludedUsers)
						{
							$DesktopSettingExcludedUsers += $User.Name
						}

						[array]$DesktopSettingExcludedUsers = $DesktopSettingExcludedUsers | Sort-Object -unique
					}
					#added in V2.19
					Switch ($DesktopSetting.SessionReconnection)
					{
						"Always" 			{$xSessionReconnection = "Always"; Break}
						"DisconnectedOnly"	{$xSessionReconnection = "Disconnected Only"; Break}
						"SameEndpointOnly"	{$xSessionReconnection = "Same Endpoint Only"; Break}
						Default				{$xSessionReconnection = "Unable to determine Session Reconnection value: $($DesktopSetting.SessionReconnection)"; Break}
					}
					#added in V2.19
					If($Null -ne $DesktopSetting.SecureIcaRequired)
					{
						$xSecureIcaRequired = $DesktopSetting.SecureIcaRequired.ToString()
					}
					$rowdata += @(,("Desktop Entitlement",($global:htmlsb),"",$htmlwhite))
					$rowdata += @(,("     Display name",($global:htmlsb),$DesktopSetting.PublishedName,$htmlwhite))
					$rowdata += @(,("     Description",($global:htmlsb),$DesktopSetting.Description,$htmlwhite))
					If($CanRestrictToTags)
					{
						$rowdata += @(,("     Restrict launches to machines with tag",($global:htmlsb),$RestrictedToTag,$htmlwhite))
					}
					[string]$DSIU = $(If( $DesktopSettingIncludedUsers -is [array] -and $DesktopSettingIncludedUsers.Count ) { $DesktopSettingIncludedUsers[0] } Else { '-' } )
					$rowdata += @(,("     Included Users",($global:htmlsb),$DSIU,$htmlwhite))
					$cnt = -1
					ForEach($tmp in $DesktopSettingIncludedUsers)
					{
						$cnt++
						If($cnt -gt 0)
						{
							$rowdata += @(,("",($global:htmlsb),$tmp,$htmlwhite))
						}
					}
					
					If($DesktopSettingExcludedUsers.Count -gt 0)
					{
						$rowdata += @(,("     Excluded Users",($global:htmlsb),$DesktopSettingExcludedUsers[0],$htmlwhite))
						$cnt = -1
						#V2.15 changed to use correct variable name
						ForEach($tmp in $DesktopSettingExcludedUsers)
						{
							$cnt++
							If($cnt -gt 0)
							{
								$rowdata += @(,("",($global:htmlsb),$tmp,$htmlwhite))
							}
						}
					}
					$rowdata += @(,("     Enable desktop",($global:htmlsb),$DesktopSetting.Enabled.ToString(),$htmlwhite))
					#New in V2.19
					$rowdata += @(,("     Leasing behavior",($global:htmlsb),$DesktopSetting.LeasingBehavior.ToString(),$htmlwhite))
					$rowdata += @(,("     Maximum concurrent instances",($global:htmlsb),$DesktopSetting.MaxPerEntitlementInstances.ToString(),$htmlwhite))
					$rowdata += @(,("     SecureICA required",($global:htmlsb),$xSecureIcaRequired,$htmlwhite))
					$rowdata += @(,("     Session reconnection",($global:htmlsb),$xSessionReconnection,$htmlwhite))
				}
			}
		}
		
		[string]$DGS = $(If( $DGScopes -is [array] -and $DGScopes.Count ) { $DGScopes[0] } Else { '-' } )
		$rowdata += @(,('Scopes',($global:htmlsb),$DGS,$htmlwhite))
		$cnt = -1
		ForEach($tmp in $DGScopes)
		{
			$cnt++
			If($cnt -gt 0)
			{
				$rowdata += @(,('',($global:htmlsb),$tmp,$htmlwhite))
			}
		}
		
		[string]$DGSFS = $(If( $DGSFServers -is [array] -and $DGSFServers.Count ) { $DGSFServers[0] } Else { '-' } )
		$rowdata += @(,('StoreFronts',($global:htmlsb),$DGSFS,$htmlwhite))
		$cnt = -1
		ForEach($tmp in $DGSFServers)
		{
			$cnt++
			If($cnt -gt 0)
			{
				$rowdata += @(,('',($global:htmlsb),$tmp,$htmlwhite))
			}
		}
		
		If($Group.SessionSupport -eq "MultiSession" -and $xDeliveryType -like '*App*')
		{
			$rowdata += @(,('Session prelaunch',($global:htmlsb),$xSessionPrelaunch,$htmlwhite))
			If($xSessionPrelaunch -ne "Off")
			{
				$rowdata += @(,('Prelaunched session will end in',($global:htmlsb),$xEndPrelaunchSession,$htmlwhite))
				
				If($xSessionPrelaunchAvgLoad -gt 0)
				{
					$rowdata += @(,('When avg load on all machines exceeds (%)',($global:htmlsb),$xSessionPrelaunchAvgLoad,$htmlwhite))
				}
				If($xSessionPrelaunchAnyLoad -gt 0)
				{
					$rowdata += @(,('When load on any machines exceeds (%)',($global:htmlsb),$xSessionPrelaunchAnyLoad,$htmlwhite))
				}
			}
			$rowdata += @(,('Session lingering',($global:htmlsb),$xSessionLinger,$htmlwhite))
			If($xSessionLinger -ne "Off")
			{
				$rowdata += @(,('Keep sessions active until after',($global:htmlsb),$xEndLinger,$htmlwhite))
				
				If($xSessionLingerAvgLoad -gt 0)
				{
					$rowdata += @(,('When avg load on all machines exceeds (%)',($global:htmlsb),$xSessionPrelaunchAvgLoad,$htmlwhite))
				}
				If($xSessionLingerAnyLoad -gt 0)
				{
					$rowdata += @(,('When load on any machines exceeds (%)',($global:htmlsb),$xSessionPrelaunchAnyLoad,$htmlwhite))
				}
			}
		}
		
		$rowdata += @(,("Launch in user's home zone",($global:htmlsb),$xUsersHomeZone,$htmlwhite)) 
			
		If($Group.SessionSupport -eq "MultiSession")
		{
			#Fixed in V2.21 to handle multiple restart schedules
			If((Get-BrokerServiceAddedCapability @XDParams1) -contains "MultipleRebootSchedulesPerGroup")
			{
				$ChkTags = $True
				$RestartSchedules = Get-BrokerRebootScheduleV2 @XDParams1 -DesktopGroupUid $Group.Uid
			}
			Else
			{
				$ChkTags = $False
				$RestartSchedules = Get-BrokerRebootSchedule @XDParams1 -DesktopGroupUid $Group.Uid
			}
			
			If($? -and $Null -ne $RestartSchedules)
			{
				ForEach($RestartSchedule in $RestartSchedules)
				{
					$rowdata += @(,('Restart Schedule',($global:htmlsb),"",$htmlwhite))
					#added in V2.21
					Switch($RestartSchedule.WarningRepeatInterval)
					{
						0	{$RestartScheduleWarningRepeatInterval = "Do not repeat"}
						5	{$RestartScheduleWarningRepeatInterval = "Every 5 minutes"} 
						Default {$RestartScheduleWarningRepeatInterval = "Notification frequency could not be determined: $($RestartSchedule.WarningRepeatInterval) "}
					}

					$rowdata += @(,('     Restart machines automatically',($global:htmlsb),"Yes",$htmlwhite))

					If($ChkTags -eq $True)
					{
						If($Null -eq $RestartSchedule.RestrictToTag)
						{
							$RestrictToTag = "-"
						}
						Else
						{
							$RestrictToTag = $RestartSchedule.RestrictToTag
						}
						
						$rowdata += @(,('     Restrict to tag',($global:htmlsb),$RestrictToTag,$htmlwhite))
					}
					
					$tmp = ""
					If($RestartSchedule.Frequency -eq "Daily")
					{
						$tmp = "Daily"
					}
					ElseIf($RestartSchedule.Frequency -eq "Weekly")
					{
						$tmp = "Every $($RestartSchedule.Day)"
					}
					
					$rowdata += @(,('     Restart frequency',($global:htmlsb),$tmp,$htmlwhite))
					$rowdata += @(,('     Begin restart at',($global:htmlsb),"$($RestartSchedule.StartTime.Hours.ToString("00")):$($RestartSchedule.StartTime.Minutes.ToString("00"))",$htmlwhite))
					
					$xTime = 0
					$tmp = ""
					If($RestartSchedule.RebootDuration -eq 0)
					{
						$tmp = "Restart all machines at once"
					}
					ElseIf($RestartSchedule.RebootDuration -eq 30)
					{
						$tmp = "30 minutes"
					}
					Else
					{
						$xTime = $RestartSchedule.RebootDuration / 60
						$tmp = "$($xTime) hours"
					}
					$rowdata += @(,('     Restart duration',($global:htmlsb),$tmp,$htmlwhite))
					$xTime = $Null
					$tmp = $Null
					
					$tmp = ""
					If($RestartSchedule.WarningDuration -eq 0)
					{
						$tmp = "Do not send a notification"
						$rowdata += @(,('     Send notification to users',($global:htmlsb),$tmp,$htmlwhite))
					}
					Else
					{
						$tmp = "$($RestartSchedule.WarningDuration) minutes before user is logged off"
						$rowdata += @(,('     Send notification to users',($global:htmlsb),$tmp,$htmlwhite))
						$rowdata += @(,('     Notification message',($global:htmlsb),$RestartSchedule.WarningMessage,$htmlwhite))
					}
					#added in V2.21
					$rowdata += @(,('     Notification frequency',($global:htmlsb),$RestartScheduleWarningRepeatInterval,$htmlwhite))
				}
			}
			Else
			{
				$rowdata += @(,('Restart machines automatically',($global:htmlsb),"No",$htmlwhite))
			}
		}
		
		If((Get-BrokerServiceAddedCapability @XDParams1) -contains "MultiTypeLicensing")
		{
			$rowdata += @(,('License model',($global:htmlsb),$LicenseModel,$htmlwhite))
			$rowdata += @(,('Product code',($global:htmlsb),$ProductCode,$htmlwhite))
		}
		
		If((Get-BrokerServiceAddedCapability @XDParams1) -contains "AppProtection" -and $Group.SessionSupport -eq "SingleSession")
		{
			#Added in V2.32
			$rowdata += @(,("App Protection Key Logging Required",($global:htmlsb),$Group.AppProtectionKeyLoggingRequired.ToString(),$htmlwhite))
			$rowdata += @(,("App Protection Screen Capture Required",($global:htmlsb),$Group.AppProtectionScreenCaptureRequired.ToString(),$htmlwhite))
		}

		#added in V2.13
		#this data has been collected for a long time, I simple forgot to add it to the output
		$rowdata += @(,( "Off Peak Buffer Size Percent",($global:htmlsb),$xOffPeakBufferSizePercent.ToString(),$htmlwhite))
		$rowdata += @(,( "Off Peak Disconnect Timeout (Minutes)",($global:htmlsb),$xOffPeakDisconnectTimeout.ToString(),$htmlwhite))
		$rowdata += @(,( "Off Peak Extended Disconnect Timeout (Minutes)",($global:htmlsb),$xOffPeakExtendedDisconnectTimeout.ToString(),$htmlwhite))
		$rowdata += @(,( "Off Peak LogOff Timeout (Minutes)",($global:htmlsb),$xOffPeakLogOffTimeout.ToString(),$htmlwhite))
		$rowdata += @(,( "Peak Buffer Size Percent",($global:htmlsb),$xPeakBufferSizePercent.ToString(),$htmlwhite))
		$rowdata += @(,( "Peak Disconnect Timeout (Minutes)",($global:htmlsb),$xPeakDisconnectTimeout.ToString(),$htmlwhite))
		$rowdata += @(,( "Peak Extended Disconnect Timeout (Minutes)",($global:htmlsb),$xPeakExtendedDisconnectTimeout.ToString(),$htmlwhite))
		$rowdata += @(,( "Peak LogOff Timeout (Minutes)",($global:htmlsb),$xPeakLogOffTimeout.ToString(),$htmlwhite))
		$rowdata += @(,( "Settlement Period Before Autoshutdown (HH:MM:SS)",($global:htmlsb),$xSettlementPeriodBeforeAutoShutdown.ToString(),$htmlwhite))
		$rowdata += @(,( "Settlement Period Before Use (HH:MM:SS)",($global:htmlsb),$xSettlementPeriodBeforeUse.ToString(),$htmlwhite))

		If($PwrMgmt1)
		{
			$rowdata += @(,("During peak hours, when disconnected $($Group.PeakDisconnectTimeout) mins",($global:htmlsb),$xPeakDisconnectAction,$htmlwhite))
			$rowdata += @(,("During peak extended hours, when disconnected $($Group.PeakExtendedDisconnectTimeout) mins",($global:htmlsb),$xPeakExtendedDisconnectAction,$htmlwhite))
			$rowdata += @(,("During off-peak hours, when disconnected $($Group.OffPeakDisconnectTimeout) mins",($global:htmlsb),$xOffPeakDisconnectAction,$htmlwhite))
			$rowdata += @(,("During off-peak extended hours, when disconnected $($Group.OffPeakExtendedDisconnectTimeout) mins",($global:htmlsb),$xOffPeakExtendedDisconnectAction,$htmlwhite))
		}
		If($PwrMgmt2)
		{
			#count if there are any items fist
			$val = 0
			ForEach($PwrMgmt in $PwrMgmts)
			{
				If($PwrMgmt.DaysOfWeek -eq "Weekdays")
				{
					For($i=0;$i -le 23;$i++)
					{
						If($PwrMgmt.PeakHours[$i])
						{
							$val++
						}
					}
				}
			}

			If($val -eq 0)
			{
				$rowdata += @(,('Weekday Peak hours',($global:htmlsb),"None",$htmlwhite))
			}
			Else
			{
				$val = 0
				ForEach($PwrMgmt in $PwrMgmts)
				{
					If($PwrMgmt.DaysOfWeek -eq "Weekdays")
					{
						For($i=0;$i -le 23;$i++)
						{
							If($PwrMgmt.PeakHours[$i])
							{
								If($i -eq 0)
								{
									$rowdata += @(,('Weekday Peak hours',($global:htmlsb),"$($i.ToString("00")):00",$htmlwhite))
								}
								Else
								{
									$rowdata += @(,('',($global:htmlsb),"$($i.ToString("00")):00",$htmlwhite))
								}
								$val++
							}
						}
					}
				}
			}

			$val = 0
			ForEach($PwrMgmt in $PwrMgmts)
			{
				If($PwrMgmt.DaysOfWeek -eq "Weekend")
				{
					For($i=0;$i -le 23;$i++)
					{
						If($PwrMgmt.PeakHours[$i])
						{
							$val++
						}
					}
				}
			}

			If($val -eq 0)
			{
				$rowdata += @(,('Weekend Peak hours',($global:htmlsb),"None",$htmlwhite))
			}
			Else
			{
				$val = 0
				ForEach($PwrMgmt in $PwrMgmts)
				{
					If($PwrMgmt.DaysOfWeek -eq "Weekend")
					{
						For($i=0;$i -le 23;$i++)
						{
							If($PwrMgmt.PeakHours[$i])
							{
								If($val -eq 0)
								{
									$rowdata += @(,('Weekend Peak hours',($global:htmlsb),"$($i.ToString("00")):00",$htmlwhite))
								}
								Else
								{
									$rowdata += @(,('',($global:htmlsb),"$($i.ToString("00")):00",$htmlwhite))
								}
								$val++
							}
						}
					}
				}
			}

			$rowdata += @(,("During peak hours, when disconnected $($Group.PeakDisconnectTimeout) mins",($global:htmlsb),$xPeakDisconnectAction,$htmlwhite))
			$rowdata += @(,("During peak extended hours, when disconnected $($Group.PeakExtendedDisconnectTimeout) mins",($global:htmlsb),$xPeakExtendedDisconnectAction,$htmlwhite))
			$rowdata += @(,("During peak hours, when logged off $($Group.PeakLogOffTimeout) mins",($global:htmlsb),$xPeakLogOffAction,$htmlwhite))
			$rowdata += @(,("During off-peak hours, when disconnected $($Group.OffPeakDisconnectTimeout) mins",($global:htmlsb),$xOffPeakDisconnectAction,$htmlwhite))
			$rowdata += @(,("During off-peak extended hours, when disconnected $($Group.OffPeakExtendedDisconnectTimeout) mins",($global:htmlsb),$xOffPeakExtendedDisconnectAction,$htmlwhite))
			$rowdata += @(,("During off-peak hours, when logged off $($Group.OffPeakLogOffTimeout) mins",($global:htmlsb),$xOffPeakLogOffAction,$htmlwhite))
		}
		If($PwrMgmt3)
		{
			$val = 0
			ForEach($PwrMgmt in $PwrMgmts)
			{
				If($PwrMgmt.DaysOfWeek -eq "Weekdays")
				{
					For($i=0;$i -le 23;$i++)
					{
						If($PwrMgmt.PoolSize[$i] -gt 0)
						{
							$val++
						}
					}
				}
			}

			If($val -eq 0)
			{
				$rowdata += @(,('Weekday number machines powered on, and when',($global:htmlsb),"None",$htmlwhite))
			}
			Else
			{
				$val = 0
				ForEach($PwrMgmt in $PwrMgmts)
				{
					If($PwrMgmt.DaysOfWeek -eq "Weekdays")
					{
						For($i=0;$i -le 23;$i++)
						{
							If($PwrMgmt.PoolSize[$i] -gt 0)
							{
								If($val -eq 0)
								{
									$rowdata += @(,('Weekday number machines powered on, and when',($global:htmlsb),"$($PwrMgmt.PoolSize[$i].ToString("####0")) - $($i.ToString("00")):00",$htmlwhite))
								}
								Else
								{
									$rowdata += @(,('',($global:htmlsb),"$($PwrMgmt.PoolSize[$i].ToString("####0")) - $($i.ToString("00")):00",$htmlwhite))
								}
								$val++
							}
						}
					}
				}
			}

			$val = 0
			ForEach($PwrMgmt in $PwrMgmts)
			{
				If($PwrMgmt.DaysOfWeek -eq "Weekend")
				{
					For($i=0;$i -le 23;$i++)
					{
						If($PwrMgmt.PoolSize[$i] -gt 0)
						{
							$val++
						}
					}
				}
			}

			If($val -eq 0)
			{
				$rowdata += @(,('Weekend number machines powered on, and when',($global:htmlsb),"None",$htmlwhite))
			}
			Else
			{
				$val = 0
				ForEach($PwrMgmt in $PwrMgmts)
				{
					If($PwrMgmt.DaysOfWeek -eq "Weekend")
					{
						For($i=0;$i -le 23;$i++)
						{
							If($PwrMgmt.PoolSize[$i] -gt 0)
							{
								If($val -eq 0)
								{
									$rowdata += @(,('Weekend number machines powered on, and when',($global:htmlsb),"$($PwrMgmt.PoolSize[$i].ToString("####0")) - $($i.ToString("00")):00",$htmlwhite))
								}
								Else
								{
									$rowdata += @(,('',($global:htmlsb),"$($PwrMgmt.PoolSize[$i].ToString("####0")) - $($i.ToString("00")):00",$htmlwhite))
								}
								$val++
							}
						}
					}
				}
			}

			$val = 0
			ForEach($PwrMgmt in $PwrMgmts)
			{
				If($PwrMgmt.DaysOfWeek -eq "Weekdays")
				{
					For($i=0;$i -le 23;$i++)
					{
						If($PwrMgmt.PeakHours[$i])
						{
							$val++
						}
					}
				}
			}

			If($val -eq 0)
			{
				$rowdata += @(,('Weekday Peak hours',($global:htmlsb),"None",$htmlwhite))
			}
			Else
			{
				$val = 0
				ForEach($PwrMgmt in $PwrMgmts)
				{
					If($PwrMgmt.DaysOfWeek -eq "Weekdays")
					{
						For($i=0;$i -le 23;$i++)
						{
							If($PwrMgmt.PeakHours[$i])
							{
								If($val -eq 0)
								{
									$rowdata += @(,('Weekday Peak hours',($global:htmlsb),"$($i.ToString("00")):00",$htmlwhite))
								}
								Else
								{
									$rowdata += @(,('',($global:htmlsb),"$($i.ToString("00")):00",$htmlwhite))
								}
								$val++
							}
						}
					}
				}
			}

			$val = 0
			ForEach($PwrMgmt in $PwrMgmts)
			{
				If($PwrMgmt.DaysOfWeek -eq "Weekend")
				{
					For($i=0;$i -le 23;$i++)
					{
						If($PwrMgmt.PeakHours[$i])
						{
							$val++
						}
					}
				}
			}

			If($val -eq 0)
			{
				$rowdata += @(,('Weekend Peak hours',($global:htmlsb),"None",$htmlwhite))
			}
			Else
			{
				$val = 0
				ForEach($PwrMgmt in $PwrMgmts)
				{
					If($PwrMgmt.DaysOfWeek -eq "Weekend")
					{
						For($i=0;$i -le 23;$i++)
						{
							If($PwrMgmt.PeakHours[$i])
							{
								If($val -eq 0)
								{
									$rowdata += @(,('Weekend Peak hours',($global:htmlsb),"$($i.ToString("00")):00",$htmlwhite))
								}
								Else
								{
									$rowdata += @(,('',($global:htmlsb),"$($i.ToString("00")):00",$htmlwhite))
								}
								$val++
							}
						}
					}
				}
			}

			$rowdata += @(,("During peak hours, when disconnected $($Group.PeakDisconnectTimeout) mins",($global:htmlsb),$xPeakDisconnectAction,$htmlwhite))
			$rowdata += @(,("During peak extended hours, when disconnected $($Group.PeakExtendedDisconnectTimeout) mins",($global:htmlsb),$xPeakExtendedDisconnectAction,$htmlwhite))
			$rowdata += @(,("During off-peak hours, when disconnected $($Group.OffPeakDisconnectTimeout) mins",($global:htmlsb),$xOffPeakDisconnectAction,$htmlwhite))
			$rowdata += @(,("During off-peak extended hours, when disconnected $($Group.OffPeakExtendedDisconnectTimeout) mins",($global:htmlsb),$xOffPeakExtendedDisconnectAction,$htmlwhite))
		}
		
		$rowdata += @(,("Automatic power on for assigned",($global:htmlsb), $xAutoPowerOnForAssigned,$htmlwhite))
		$rowdata += @(,("Automatic power on for assigned during peak",($global:htmlsb), $xAutoPowerOnForAssignedDuringPeak,$htmlwhite))
		#Added V2.14
		If(validObject $Group ReuseMachinesWithoutShutdownInOutage)
		{
			If($Group.ReuseMachinesWithoutShutdownInOutage -eq $Script:XDSite1.ReuseMachinesWithoutShutdownInOutageAllowed)
			{
				$rowdata += @(,("Reuse Machines Without Shutdown in Outage",($global:htmlsb),$Group.ReuseMachinesWithoutShutdownInOutage.ToString(),$htmlwhite))
			}
			Else
			{
				$rowdata += @(,("Reuse Machines Without Shutdown in Outage",($global:htmlsb),"$($Group.ReuseMachinesWithoutShutdownInOutage.ToString()) (Doesn't match Site setting)",$htmlwhite))
			}
		}

		$rowdata += @(,('All connections not through NetScaler Gateway',($global:htmlsb),$xAllConnections,$htmlwhite))
		$rowdata += @(,('Connections through NetScaler Gateway',($global:htmlsb),$xNSConnection,$htmlwhite))
		[string]$AGF = $(If( $xAGFilters -is [array] -and $xAGFilters.Count ) { $xAGFilters[0] } Else { '-' } )
		$rowdata += @(,('Connections meeting any of the following filters',($global:htmlsb),$AGF,$htmlwhite))
		$cnt = -1
		ForEach($tmp in $xAGFilters)
		{
			$cnt++
			If($cnt -gt 0)
			{
				$rowdata += @(,('',($global:htmlsb),$tmp,$htmlwhite))
			}
		}

		$msg = ""
		$columnWidths = @("300","300")
		FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "600"
	}
}

Function OutputDeliveryGroupApplicationDetails 
{
	Param([object] $Group)
	
	$AllApplications = Get-BrokerApplication @XDParams2 -AssociatedDesktopGroupUid $Group.Uid -SortBy "ApplicationName"
	
	If($? -and $Null -ne $AllApplications)
	{
		$txt = "Applications"
		If($MSWord -or $PDF)
		{
			WriteWordLine 4 0 $txt
		}
		ElseIf($Text)
		{
			Line 0 $txt
			Line 0 ""
		}
		ElseIf($HTML)
		{
			WriteHTMLLine 4 0 $txt
		}

		If($MSWord -or $PDF)
		{
			[System.Collections.Hashtable[]] $AllApplicationsWordTable = @();
		}
		ElseIf($HTML)
		{
			$rowdata = @()
		}

		ForEach($Application in $AllApplications)
		{
			Write-Verbose "$(Get-Date -Format G): `t`t`tAdding Application $($Application.ApplicationName)"

			$xEnabled = "Enabled"
			If($Application.Enabled -eq $False)
			{
				$xEnabled = "Disabled"
			}
			
			$xLocation = "Master Image"
			If($Application.MetadataKeys.Count -gt 0)
			{
				$xLocation = "App-V"
			}
			
			If($MSWord -or $PDF)
			{
				$AllApplicationsWordTable += @{
				ApplicationName = $Application.ApplicationName; 
				Description = $Application.Description; 
				Location = $xLocation;
				Enabled = $xEnabled; 
				}
			}
			ElseIf($Text)
			{
				Line 1 "Name`t`t: " $Application.ApplicationName
				Line 1 "Description`t: " $Application.Description
				Line 1 "Location`t: " $xLocation
				Line 1 "State`t`t: " $xEnabled
				Line 0 ""
			}
			ElseIf($HTML)
			{
				$rowdata += @(,(
				$Application.ApplicationName,$htmlwhite,
				$Application.Description,$htmlwhite,
				$xLocation,$htmlwhite,
				$xEnabled,$htmlwhite))
			}
		}

		If($MSWord -or $PDF)
		{
			$Table = AddWordTable -Hashtable $AllApplicationsWordTable `
			-Columns  ApplicationName,Description,Location,Enabled `
			-Headers  "Name","Description","Location","State" `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 175;
			$Table.Columns.Item(2).Width = 170;
			$Table.Columns.Item(3).Width = 100;
			$Table.Columns.Item(4).Width = 55;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""
		}
		ElseIf($HTML)
		{
			$columnHeaders = @(
			'Name',($global:htmlsb),
			'Description',($global:htmlsb),
			'Location',($global:htmlsb),
			'State',($global:htmlsb))

			$msg = ""
			$columnWidths = @("200","220","125","55")
			FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "600"
		}
	}
}

Function OutputDeliveryGroupCatalogs 
{
	Param([object] $Group)
	
	#V2.10 10-feb-2018 change from xdparams1 to xdparams2 to add maxrecordcount
	#V2.15 change from the deprecated Get-BrokerDesktop to Get-BrokerMachine and add -SortBy CatalogName
	#$MCs = Get-BrokerDesktop @XDParams2 -DesktopGroupUid $Group.Uid -Property CatalogName
	$MCs = @(Get-BrokerMachine @XDParams2 -DesktopGroupUid $Group.Uid -Property CatalogName -SortBy CatalogName)
	
	If($? -and $Null -ne $MCs)
	{
		If($MCs.Count -ge 1)
		{
			#V2.15 fix the sort -unique. Only the first item in the array was being returned.
			#Adding -Property CatalogName was needed to get the full unique array returned
			[array]$MCs = $MCs | Sort-Object -Property CatalogName -Unique
		}
		
		$txt = "Machine Catalogs"
		If($MSWord -or $PDF)
		{
			WriteWordLine 4 0 $txt
			[System.Collections.Hashtable[]] $CatalogsWordTable = @();
		}
		ElseIf($Text)
		{
			Line 0 $txt
			Line 0 ""
		}
		ElseIf($HTML)
		{
			WriteHTMLLine 4 0 $txt
			$rowdata = @()
		}

		If($MCs.Count -ge 1)
		{
			ForEach($MC in $MCs)
			{
				Write-Verbose "$(Get-Date -Format G): `t`t`tAdding catalog $($MC.CatalogName)"

				#V2.10 10-feb-2018 change from xdparams1 to xdparams2 to add maxrecordcount
				$Catalog = Get-BrokerCatalog @XDParams2 -Name $MC.CatalogName
				If($? -and $Null -ne $Catalog)
				{
					Switch ($Catalog.AllocationType)
					{
						"Static"	{$xAllocationType = "Permanent"; Break}
						"Permanent"	{$xAllocationType = "Permanent"; Break}
						"Random"	{$xAllocationType = "Random"; Break}
						Default		{$xAllocationType = "Allocation type could not be determined: $($Catalog.AllocationType)"; Break}
					}
					
					If($MSWord -or $PDF)
					{
						$CatalogsWordTable += @{
						Name = $Catalog.Name; 
						Type = $xAllocationType; 
						DesktopsTotal = $Catalog.AssignedCount;
						DesktopsFree = $Catalog.AvailableCount; 
						}
					}
					ElseIf($Text)
					{
						Line 1 "Machine Catalog name`t: " $Catalog.Name
						Line 1 "Machine Catalog type`t: " $xAllocationType
						Line 1 "Desktops total`t`t: " $Catalog.AssignedCount
						Line 1 "Desktops free`t`t: " $Catalog.AvailableCount
						Line 0 ""
					}
					ElseIf($HTML)
					{
						$rowdata += @(,(
						$Catalog.Name,$htmlwhite,
						$xAllocationType,$htmlwhite,
						$Catalog.AssignedCount.ToString(),$htmlwhite,
						$Catalog.AvailableCount.ToString(),$htmlwhite))
					}
				}
			}

			If($MSWord -or $PDF)
			{
				$Table = AddWordTable -Hashtable $CatalogsWordTable `
				-Columns  Name,Type,DesktopsTotal,DesktopsFree `
				-Headers  "Machine Catalog name","Machine Catalog type","Desktops total","Desktops free" `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 175;
				$Table.Columns.Item(2).Width = 150;
				$Table.Columns.Item(3).Width = 100;
				$Table.Columns.Item(4).Width = 75;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			ElseIf($HTML)
			{
				$columnHeaders = @(
				'Machine Catalog name',($global:htmlsb),
				'Machine Catalog type',($global:htmlsb),
				'Desktops total',($global:htmlsb),
				'Desktops free',($global:htmlsb))

				$msg = ""
				$columnWidths = @("175","150","100","75")
				FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "500"
			}
		}
		Else
		{
			If($MSWord -or $PDF)
			{
				WriteWordLine 0 0 "There are no Machine Catalogs for Delivery Group " $Group.Name
			}
			If($Text)
			{
				Line 0 "There are no Machine Catalogs for Delivery Group " $Group.Name
				Line 0 ""
			}
			If($HTML)
			{
				WriteHTMLLine 0 0 "There are no Machine Catalogs for Delivery Group " $Group.Name
			}
		}
	}
}

Function OutputDeliveryGroupAppDisks
{
	Param([object] $Group)
	
	$txt = "AppDisks"
	If($MSWord -or $PDF)
	{
		WriteWordLine 4 0 $txt
		[System.Collections.Hashtable[]] $CatalogsWordTable = @();
	}
	ElseIf($Text)
	{
		Line 0 $txt
		Line 0 ""
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 4 0 $txt
		$rowdata = @()
	}

	$GroupAppDisks = $Group.AppDisks
	
	If($GroupAppDisks.Count -gt 0)
	{
		$AppDisks = New-Object System.Collections.ArrayList
		ForEach($AppDisk in $GroupAppDisks)
		{
			$Result = Get-AppLibAppDisk @XDParams1 -AppDiskUid $AppDisk.Guid
			
			If($? -and $Null -ne $Result)
			{
				$obj = [PSCustomObject] @{
					Name        = $Result.AppDiskName				
					Description = $Result.Description				
					State       = $Result.State				
				}
				$null = $AppDisks.Add($obj)
			}
		}
		
		$AppDisks = $AppDisks | Sort-Object Name
		
		ForEach($AppDisk in $AppDisks)
		{
			Write-Verbose "$(Get-Date -Format G): `t`t`tAdding AppDisk $($AppDisk.Name)"

			If($MSWord -or $PDF)
			{
				$CatalogsWordTable += @{
				Name = $AppDisk.Name; 
				Description = $AppDisk.Description; 
				State = $AppDisk.State;
				}
			}
			ElseIf($Text)
			{
				Line 1 "Name`t`t: " $AppDisk.Name
				Line 1 "Description`t: " $AppDisk.Description
				Line 1 "State`t`t: " $AppDisk.State
				Line 0 ""
			}
			ElseIf($HTML)
			{
				$rowdata += @(,(
				$AppDisk.Name,$htmlwhite,
				$AppDisk.Description,$htmlwhite,
				$AppDisk.State,$htmlwhite))
			}
		}

		If($MSWord -or $PDF)
		{
			$Table = AddWordTable -Hashtable $CatalogsWordTable `
			-Columns  Name,Description,State `
			-Headers  "Name","Description","State" `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 150;
			$Table.Columns.Item(2).Width = 150;
			$Table.Columns.Item(3).Width = 150;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""
		}
		ElseIf($HTML)
		{
			$columnHeaders = @(
			'Name',($global:htmlsb),
			'Description',($global:htmlsb),
			'State',($global:htmlsb))

			$msg = ""
			$columnWidths = @("150","150","150")
			FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "450"
		}
	}
	Else
	{
		$txt = "There are no AppDisks for $($Group.Name)"
		OutputNotice $txt
	}
}
	
Function OutputDeliveryGroupUtilization
{
	Param([object]$Group)

	#code contributed by Eduardo Molina
	#Twitter: @molikop
	#eduardo@molikop.com
	#www.molikop.com

	$txt = "Delivery Group Utilization Report"
	If($MSWord -or $PDF)
	{
		Write-Verbose "$(Get-Date -Format G): `t`t`tProcessing Utilization for $($Group.Name)"
		WriteWordLine 3 0 $txt
		WriteWordLine 4 0 "Desktop Group Name: " $Group.Name

		$xEnabled = ""
		If($Group.Enabled -eq $True -and $Group.InMaintenanceMode -eq $True)
		{
			$xEnabled = "Maintenance Mode"
		}
		ElseIf($Group.Enabled -eq $False -and $Group.InMaintenanceMode -eq $True)
		{
			$xEnabled = "Maintenance Mode"
		}
		ElseIf($Group.Enabled -eq $True -and $Group.InMaintenanceMode -eq $False)
		{
			$xEnabled = "Enabled"
		}
		ElseIf($Group.Enabled -eq $False -and $Group.InMaintenanceMode -eq $False)
		{
			$xEnabled = "Disabled"
		}

		$xColorDepth = ""
		If($Group.ColorDepth -eq "FourBit")
		{
			$xColorDepth = "4bit - 16 colors"
		}
		ElseIf($Group.ColorDepth -eq "EightBit")
		{
			$xColorDepth = "8bit - 256 colors"
		}
		ElseIf($Group.ColorDepth -eq "SixteenBit")
		{
			$xColorDepth = "16bit - High color"
		}
		ElseIf($Group.ColorDepth -eq "TwentyFourBit")
		{
			$xColorDepth = "24bit - True color"
		}

		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "Description"; Value = $Group.Description; }) > $Null
		$ScriptInformation.Add(@{Data = "User Icon Name"; Value = $Group.PublishedName; }) > $Null
		$ScriptInformation.Add(@{Data = "Desktop Type"; Value = $Group.DesktopKind; }) > $Null
		$ScriptInformation.Add(@{Data = "Status"; Value = $xEnabled; }) > $Null
		$ScriptInformation.Add(@{Data = "Automatic reboots when user logs off"; Value = $Group.ShutdownDesktopsAfterUse; }) > $Null
		$ScriptInformation.Add(@{Data = "Color Depth"; Value = $xColorDepth; }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 200;
		$Table.Columns.Item(2).Width = 200;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
		
		Write-Verbose "$(Get-Date -Format G): `t`t`tInitializing utilization chart for $($Group.Name)"

		$TempFile =  "$($pwd)\emtempgraph_$(Get-Date -UFormat %Y%m%d_%H%M%S).csv"		
		Write-Verbose "$(Get-Date -Format G): `t`t`tGetting utilization data for $($Group.Name)"
		$Results = Get-BrokerDesktopUsage @XDParams2 -DesktopGroupName $Group.Name -SortBy Timestamp | Select-Object Timestamp, InUse

		If($? -and $Null -ne $Results)
		{
			$Results | Export-Csv $TempFile -NoTypeInformation *>$Null

			#Create excel COM object 
			$excel = New-Object -ComObject excel.application 4>$Null

			#Make not visible 
			$excel.Visible  = $False
			$excel.DisplayAlerts  = $False

			#Various Enumerations 
			$xlDirection = [Microsoft.Office.Interop.Excel.XLDirection] 
			$excelChart = [Microsoft.Office.Interop.Excel.XLChartType]
			$excelAxes = [Microsoft.Office.Interop.Excel.XlAxisType]
			$excelCategoryScale = [Microsoft.Office.Interop.Excel.XlCategoryType]
			$excelTickMark = [Microsoft.Office.Interop.Excel.XlTickMark]

			Write-Verbose "$(Get-Date -Format G): `t`t`tOpening Excel with temp file $($TempFile)"

			#Add CSV File into Excel Workbook 
			$Null = $excel.Workbooks.Open($TempFile)
			$worksheet = $excel.ActiveSheet
			$Null = $worksheet.UsedRange.EntireColumn.AutoFit()

			#Assumes that date is always on A column 
			$range = $worksheet.Range("A2")
			$selectionXL = $worksheet.Range($range,$range.end($xlDirection::xlDown))
			#$Start = @($selectionXL)[0].Text
			#$End = @($selectionXL)[-1].Text

			Write-Verbose "$(Get-Date -Format G): `t`t`tCreating chart for $($Group.Name)"
			$chart = $worksheet.Shapes.AddChart().Chart 

			$chart.chartType = $excelChart::xlXYScatterLines
			$chart.HasLegend = $false
			$chart.HasTitle = $true
			$chart.ChartTitle.Text = "$($Group.Name) utilization"

			#Work with the X axis for the Date Stamp 
			$xaxis = $chart.Axes($excelAxes::XlCategory)                                     
			$xaxis.HasTitle = $False
			$xaxis.CategoryType = $excelCategoryScale::xlCategoryScale
			$xaxis.MajorTickMark = $excelTickMark::xlTickMarkCross
			$xaxis.HasMajorGridLines = $true
			$xaxis.TickLabels.NumberFormat = "m/d/yyyy"
			$xaxis.TickLabels.Orientation = 48 #degrees to rotate text

			#Work with the Y axis for the number of desktops in use                                               
			$yaxis = $chart.Axes($excelAxes::XlValue)
			$yaxis.HasTitle = $true                                                       
			$yaxis.AxisTitle.Text = "Desktops in use"
			$yaxis.AxisTitle.Font.Size = 12

			$worksheet.ChartObjects().Item(1).copy()
			$word.Selection.PasteAndFormat(13)  #Pastes an Excel chart as a picture

			Write-Verbose "$(Get-Date -Format G): `t`t`tClosing excel for $($Group.Name)"
			$excel.Workbooks.Close($false)
			$excel.Quit()

			FindWordDocumentEnd
			WriteWordLine 0 0 ""
			
			While( [System.Runtime.Interopservices.Marshal]::ReleaseComObject($selectionXL)){}
			While( [System.Runtime.Interopservices.Marshal]::ReleaseComObject($Range)){}
			While( [System.Runtime.Interopservices.Marshal]::ReleaseComObject($Chart)){}
			While( [System.Runtime.Interopservices.Marshal]::ReleaseComObject($Worksheet)){}
			While( [System.Runtime.Interopservices.Marshal]::ReleaseComObject($Excel)){}

			If(Test-Path variable:excel)
			{
				Remove-Variable -Name excel 4>$Null
			}

			#If the Excel.exe process is still running for the user's sessionID, kill it
			$SessionID = (Get-Process -PID $PID).SessionId
			(Get-Process 'Excel' -ea 0 | Where-Object {$_.sessionid -eq $Sessionid}) | Stop-Process 4>$Null
			
			Write-Verbose "$(Get-Date -Format G): `t`t`tDeleting temp files $($TempFile)"
			Remove-Item $TempFile *>$Null
		}
		ElseIf($? -and $Null -eq $Results)
		{
			$txt = "There is no Utilization data for $($Group.Name)"
			OutputNotice $txt
		}
		Else
		{
			$txt = "Unable to retrieve Utilization data for $($Group.name)"
			OutputWarning $txt
		}
	}
	Write-Verbose "$(Get-Date -Format G): "
}

Function OutputDeliveryGroupTags
{
	Param([object] $Group)

	$txt = "Tags"
	If($MSWord -or $PDF)
	{
		WriteWordLine 4 0 $txt
		[System.Collections.Hashtable[]] $CatalogsWordTable = @();
	}
	ElseIf($Text)
	{
		Line 0 $txt
		Line 0 ""
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 4 0 $txt
		$rowdata = @()
	}

	$GroupTags = $Group.Tags
	
	If($GroupTags.Count -gt 0)
	{
		$Tags = New-Object System.Collections.ArrayList
		ForEach($Tag in $GroupTags)
		{
			#V2.10 10-feb-2018 change from xdparams1 to xdparams2 to add maxrecordcount
			$Result = Get-BrokerTag @XDParams2 -Name $Tag
			
			If($? -and $Null -ne $Result)
			{
				$obj = [PSCustomObject] @{
					Name        = $Result.Name				
					Description = $Result.Description				
					AppliedTo   = "Delivery Group"				
				}
				$null = $Tags.Add($obj)
			}
		}
		
		#V2.15 added -Property Name
		$Tags = $Tags | Sort-Object -Property Name
		
		ForEach($Tag in $Tags)
		{
			Write-Verbose "$(Get-Date -Format G): `t`t`tAdding Tag $($Tag.Name)"

			If($MSWord -or $PDF)
			{
				$CatalogsWordTable += @{
				Name = $Tag.Name; 
				Description = $Tag.Description; 
				AppliedTo = $Tag.AppliedTo;
				}
			}
			ElseIf($Text)
			{
				Line 1 "Name`t`t: " $Tag.Name
				Line 1 "Description`t: " $Tag.Description
				Line 1 "Applied to`t: " $Tag.AppliedTo
				Line 0 ""
			}
			ElseIf($HTML)
			{
				$rowdata += @(,(
				$Tag.Name,$htmlwhite,
				$Tag.Description,$htmlwhite,
				$Tag.AppliedTo,$htmlwhite))
			}
		}

		If($MSWord -or $PDF)
		{
			$Table = AddWordTable -Hashtable $CatalogsWordTable `
			-Columns  Name,Description,AppliedTo `
			-Headers  "Name","Description","Applied to" `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 150;
			$Table.Columns.Item(2).Width = 150;
			$Table.Columns.Item(3).Width = 150;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""
		}
		ElseIf($HTML)
		{
			$columnHeaders = @(
			'Name',($global:htmlsb),
			'Description',($global:htmlsb),
			'Applied to',($global:htmlsb))

			$msg = ""
			$columnWidths = @("150","150","150")
			FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "450"
		}
	}
	Else
	{
		$txt = "There are no Tags for $($Group.Name)"
		OutputNotice $txt
	}
}
	
Function OutputDeliveryGroupApplicationGroups
{
	Param([object] $Group)

	$txt = "Application Groups"
	If($MSWord -or $PDF)
	{
		WriteWordLine 4 0 $txt
		[System.Collections.Hashtable[]] $CatalogsWordTable = @();
	}
	ElseIf($Text)
	{
		Line 0 $txt
		Line 0 ""
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 4 0 $txt
		$rowdata = @()
	}
	
	#V2.10 10-feb-2018 change from xdparams1 to xdparams2 to add maxrecordcount
	$ApplicationGroups = Get-BrokerApplicationGroup @XDParams2 -AssociatedDesktopGroupUid $Group.Uid -SortBy Name
	
	If($? -and $Null -ne $ApplicationGroups)
	{
		ForEach($ApplicationGroup in $ApplicationGroups)
		{
			Write-Verbose "$(Get-Date -Format G): `t`t`tAdding Application Group $($ApplicationGroup.Name)"

			If($MSWord -or $PDF)
			{
				$CatalogsWordTable += @{
				Name = $ApplicationGroup.Name; 
				Description = $ApplicationGroup.Description; 
				Applications = $ApplicationGroup.TotalApplications.ToString();
				}
			}
			ElseIf($Text)
			{
				Line 1 "Name`t`t: " $ApplicationGroup.Name
				Line 1 "Description`t: " $ApplicationGroup.Description
				Line 1 "Applications`t: " $ApplicationGroup.TotalApplications.ToString()
				Line 0 ""
			}
			ElseIf($HTML)
			{
				$rowdata += @(,(
				$ApplicationGroup.Name,$htmlwhite,
				$ApplicationGroup.Description,$htmlwhite,
				$ApplicationGroup.TotalApplications.ToString(),$htmlwhite))
			}
		}

		If($MSWord -or $PDF)
		{
			$Table = AddWordTable -Hashtable $CatalogsWordTable `
			-Columns  Name,Description,Applications `
			-Headers  "Name","Description","Applications" `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 150;
			$Table.Columns.Item(2).Width = 150;
			$Table.Columns.Item(3).Width = 150;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""
		}
		ElseIf($HTML)
		{
			$columnHeaders = @(
			'Name',($global:htmlsb),
			'Description',($global:htmlsb),
			'Applications',($global:htmlsb))

			$msg = ""
			$columnWidths = @("150","150","150")
			FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "450"
			WriteHTMLLine 0 0 ""
		}
	}
	ElseIf($? -and $Null -eq $ApplicationGroups)
	{
		$txt = "There are no Application Groups for $($Group.Name)"
		OutputNotice $txt
	}
	Else
	{
		$txt = "Unable to retrieve Application Groups for $($Group.Name)"
		OutputWarning $txt
	}
}
#endregion

#region process application functions
Function ProcessApplications
{
	Write-Verbose "$(Get-Date -Format G): Retrieving Applications"
	
	$txt = "Applications"
	If($MSWord -or $PDF)
	{
		$Selection.InsertNewPage()
		WriteWordLine 1 0 $txt
	}
	ElseIf($Text)
	{
		Line 0 $txt
		Line 0 ""
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 1 0 $txt
	}

	$AllApplications = Get-BrokerApplication @XDParams2 -SortBy "AdminFolderName,ApplicationName"
	If($? -and $Null -ne $AllApplications)
	{
		OutputApplications $AllApplications
	}
	ElseIf($? -and ($Null -eq $AllApplications))
	{
		$txt = "There are no Applications"
		OutputNotice $txt
	}
	Else
	{
		$txt = "Unable to retrieve Applications"
		OutputWarning $txt
	}
	Write-Verbose "$(Get-Date -Format G): "
}

Function OutputApplications
{
	Param([object]$AllApplications)
	
	Write-Verbose "$(Get-Date -Format G): `tProcessing Applications"

	If($MSWord -or $PDF)
	{
		[System.Collections.Hashtable[]] $AllApplicationsWordTable = @();
	}
	ElseIf($HTML)
	{
		$rowdata = @()
	}

	ForEach($Application in $AllApplications)
	{
		Write-Verbose "$(Get-Date -Format G): `t`tAdding Application $($Application.ApplicationName)"

		$xEnabled = "Enabled"
		If($Application.Enabled -eq $False)
		{
			$xEnabled = "Disabled"
		}
		
		$xLocation = "Master Image"
		If($Application.MetadataKeys.Count -gt 0)
		{
			$xLocation = "App-V"
		}

		If($xLocation -eq "Master Image")
		{
			$Script:TotalPublishedApplications++
		}
		Else
		{
			$Script:TotalAppvApplications++
		}
		
		If($MSWord -or $PDF)
		{
			$AllApplicationsWordTable += @{
			FolderName = $Application.AdminFolderName;
			ApplicationName = $Application.ApplicationName; 
			Description = $Application.Description; 
			Location = $xLocation;
			Enabled = $xEnabled; 
			}
		}
		ElseIf($Text)
		{
			Line 1 "Folder`t`t: " $Application.AdminFolderName
			Line 1 "Name`t`t: " $Application.ApplicationName
			Line 1 "Description`t: " $Application.Description
			Line 1 "Location`t: " $xLocation
			Line 1 "State`t`t: " $xEnabled
			Line 0 ""
		}
		ElseIf($HTML)
		{
			$rowdata += @(,(
			$Application.AdminFolderName,$htmlwhite,
			$Application.ApplicationName,$htmlwhite,
			$Application.Description,$htmlwhite,
			$xLocation,$htmlwhite,
			$xEnabled,$htmlwhite))
		}
	}

	If($MSWord -or $PDF)
	{
		$Table = AddWordTable -Hashtable $AllApplicationsWordTable `
		-Columns  FolderName,ApplicationName,Description,Location,Enabled `
		-Headers  "Folder","Name","Description","Location","State" `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 100;
		$Table.Columns.Item(2).Width = 145;
		$Table.Columns.Item(3).Width = 125;
		$Table.Columns.Item(4).Width = 80;
		$Table.Columns.Item(5).Width = 50;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	ElseIf($HTML)
	{
		$columnHeaders = @(
		'Folder',($global:htmlsb),
		'Name',($global:htmlsb),
		'Description',($global:htmlsb),
		'Location',($global:htmlsb),
		'State',($global:htmlsb))

		$msg = ""
		$columnWidths = @("125","195","150","80","50")
		FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "600"
	}

	If($Applications)
	{
		ForEach($Application in $AllApplications)
		{
			If($MSWord -or $PDF)
			{
				$Selection.InsertNewPage()
				WriteWordLine 2 0 $Application.ApplicationName
			}
			ElseIf($Text)
			{
				Line 0 ""
				Line 0 $Application.ApplicationName
			}
			ElseIf($HTML)
			{
				WriteHTMLLine 2 0 $Application.ApplicationName
			}
			
			OutputApplicationDetails $Application
			
			If($NoSessions -eq $False) #V2.27
			{
				OutputApplicationSessions $Application
			}
			OutputApplicationAdministrators $Application
		}
	}
}

Function OutputApplicationDetails
{
	Param([object] $Application)
	
	Write-Verbose "$(Get-Date -Format G): `t`tApplication details for $($Application.ApplicationName)"
	$txt = "Details"
	If($MSWord -or $PDF)
	{
		WriteWordLine 3 0 $txt
	}
	ElseIf($Text)
	{
		Line 0 $txt
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 3 0 $txt
	}

	$xTags = @()
	ForEach($Tag in $Application.Tags)
	{
		$xTags += "$($Tag)"
	}
	$xVisibility = @()
	If($Application.UserFilterEnabled)
	{
		$cnt = -1
		ForEach($tmp in $Application.AssociatedUserFullNames)
		{
			$cnt++
			$xVisibility += "$($tmp) ($($Application.AssociatedUserNames[$cnt]))"
		}
		
	}
	Else
	{
		$xVisibility = {Users inherited from Delivery Group}
	}
	
	$DeliveryGroups = @()
	If($Application.AssociatedDesktopGroupUids.Count -gt 1)
	{
		$cnt = -1
		ForEach($DGUid in $Application.AssociatedDesktopGroupUids)
		{
			$cnt++
			$Results = Get-BrokerDesktopGroup @XDParams1 -Uid $DGUid
			If($? -and $Null -ne $Results)
			{
				$DeliveryGroups += "$($Results.Name) Priority: $($Application.AssociatedDesktopGroupPriorities[$cnt])"
			}
		}
	}
	Else
	{
		ForEach($DGUid in $Application.AssociatedDesktopGroupUids)
		{
			$Results = Get-BrokerDesktopGroup @XDParams1 -Uid $DGUid
			If($? -and $Null -ne $Results)
			{
				$DeliveryGroups += $Results.Name
			}
		}
	}
	
	$RedirectedFileTypes = @()
	#V2.10 10-feb-2018 change from xdparams1 to xdparams2 to add maxrecordcount
	$Results = Get-BrokerConfiguredFTA -ApplicationUid $Application.Uid @XDParams2
	If($? -and $Null -ne $Results)
	{
		ForEach($Result in $Results)
		{
			$RedirectedFileTypes += $Result.ExtensionName
		}
	}
	
	#added in 2.14
	$CPUPriorityLevel = "Normal"
	Switch ($Application.CpuPriorityLevel)
	{
		"Low"			{$CPUPriorityLevel = "Low"; Break}
		"BelowNormal"	{$CPUPriorityLevel = "Below Normal"; Break}
		"Normal"		{$CPUPriorityLevel = "Normal"; Break}
		"AboveNormal"	{$CPUPriorityLevel = "Above Normal"; Break}
		"High"			{$CPUPriorityLevel = "High"; Break}
		Default 		{$CPUPriorityLevel = "Unable to determine CPUPriorityLevel: $($Application.CpuPriorityLevel)"; Break}
	}
	
	$ApplicationType = ""
	Switch ($Application.ApplicationType)
	{
		"HostedOnDesktop"	{$ApplicationType = "Hosted on Desktop"; Break}
		"InstalledOnClient"	{$ApplicationType = "Installed on Client"; Break}
		"PublishedContent"	{$ApplicationType = "Published Content"; Break}
		Default 			{$ApplicationType = "Unable to determine ApplicationType: $($Application.ApplicationType)"; Break}
	}
	
	If([String]::IsNullOrEmpty($Application.HomeZoneName))
	{
		$xHomeZoneName = "Not configured"
	}
	Else
	{
		$xHomeZoneName = $Application.HomeZoneName
	}
	
	If($MSWord -or $PDF)
	{
		[System.Collections.Hashtable[]] $ScriptInformation = @()
		$ScriptInformation += @{Data = "Name (for administrator)"; Value = $Application.Name; }
		$ScriptInformation += @{Data = "Name (for user)"; Value = $Application.PublishedName; }
		$ScriptInformation += @{Data = "Description and keywords"; Value = $Application.Description; }
		[string]$xDGs = $(If( $DeliveryGroups -is [array] -and $DeliveryGroups.Count ) { $DeliveryGroups[0] } Else { '-' } )
		$ScriptInformation += @{Data = "Delivery Group"; Value = $xDGs; }
		$cnt = -1
		ForEach($Group in $DeliveryGroups)
		{
			$cnt++
			If($cnt -gt 0)
			{
				$ScriptInformation += @{Data = ""; Value = $Group; }
			}
		}
		$ScriptInformation += @{Data = "Folder (for administrators)"; Value = $Application.AdminFolderName; }
		#V2.12 change from "Folder (for user)" to "Application category (optional)". 
		#This changed in XA/X 7.8 and I never noticed it and no one reported it.
		#Thanks to lbates for bringing it to my attention.
		$ScriptInformation += @{Data = "Application category (optional)"; Value = $Application.ClientFolder; }
		[string]$xVis = $(If( $xVisibility -is [array] -and $xVisibility.Count ) { $xVisibility[0] } Else { '-' } )
		$ScriptInformation += @{Data = "Visibility"; Value = $xVis; }
		$cnt = -1
		ForEach($tmp in $xVisibility)
		{
			$cnt++
			If($cnt -gt 0)
			{
				$ScriptInformation += @{Data = ""; Value = $xVisibility[$cnt]; }
			}
		}
		$ScriptInformation += @{Data = "Application Path"; Value = $Application.CommandLineExecutable; }
		$ScriptInformation += @{Data = "Command line arguments"; Value = $Application.CommandLineArguments; }
		$ScriptInformation += @{Data = "Working directory"; Value = $Application.WorkingDirectory; }

		If([String]::IsNullOrEmpty($RedirectedFileTypes))
		{
			$ScriptInformation += @{Data = "Redirected file types"; Value = "-"; }
		}
		Else
		{
			$tmp1 = ""
			ForEach($tmp in $RedirectedFileTypes)
			{
				$tmp1 += "$($tmp); "
			}
			$ScriptInformation += @{Data = "Redirected file types"; Value = $tmp1; }
			$tmp1 = $Null
		}

        [string]$TagName = $(If( $xTags -is [array] -and $xTags.Count ) { $xTags[0] } Else { '-' } )
		$ScriptInformation += @{Data = "Tags"; Value = $TagName; }
		$cnt = -1
		ForEach($tmp in $xTags)
		{
			$cnt++
			If($cnt -gt 0)
			{
				$ScriptInformation += @{Data = ""; Value = $tmp; }
			}
		}
		
		If($Application.Visible -eq $False)
		{
			$ScriptInformation += @{Data = "Hidden"; Value = "Application is hidden"; }
		}
		
		If((Get-BrokerServiceAddedCapability @XDParams1) -contains "ApplicationUsageLimits")
		{
			#change wording in V2.19 to match the text in Studio
			
			If($Application.MaxTotalInstances -eq 0)
			{
				$ScriptInformation += @{Data = "How do you want to control the use of this application?"; Value = "Allow unlimited use"; }
			}
			Else
			{
				$ScriptInformation += @{Data = "How do you want to control the use of this application?"; Value = "Limit the number of instances running at the same time to $($Application.MaxTotalInstances.ToString())"; }
			}
			
			If($Application.MaxPerUserInstances -eq 0)
			{
				#nothing
			}
			Else
			{
				$ScriptInformation += @{Data = ""; Value = "Limit to one instance per user"; }
			}
			
			#New property in 1808, added in script V2.19
			If(validObject $Application MaxPerMachineInstances)
			{
				If($Application.MaxPerMachineInstances -eq 0)
				{
					$ScriptInformation += @{Data = ""; Value = "Limit the number of instances per machine to Unlimited"; }
				}
				Else
				{
					$ScriptInformation += @{Data = ""; Value = "Limit the number of instances per machine to $($Application.MaxPerMachineInstances.ToString())"; }
				}
			}
		}
		
		#added in 2.14
		$ScriptInformation += @{Data = "Application Type"; Value = $ApplicationType; }
		$ScriptInformation += @{Data = "CPU Priority Level"; Value = $CPUPriorityLevel; }
		If(validObject $Application HomeZoneName)
		{
			$ScriptInformation += @{Data = "Home Zone Name"; Value = $xHomeZoneName; }
		}
		If(validObject $Application HomeZoneOnly)
		{
			$ScriptInformation += @{Data = "Home Zone Only"; Value = $Application.HomeZoneOnly.ToString(); }
		}
		If(validObject $Application IgnoreUserHomeZone)
		{
			$ScriptInformation += @{Data = "Ignore User Home Zone"; Value = $Application.IgnoreUserHomeZone.ToString(); }
		}
		$ScriptInformation += @{Data = "Icon from Client"; Value = $Application.IconFromClient.ToString(); }
		If(validObject $Application LocalLaunchDisabled)
		{
			$ScriptInformation += @{Data = "Local Launch Disabled"; Value = $Application.LocalLaunchDisabled.ToString(); }
		}
		$ScriptInformation += @{Data = "Secure Command Line Arguments Enabled"; Value = $Application.SecureCmdLineArgumentsEnabled.ToString(); }
		$ScriptInformation += @{Data = "Add shortcut to user's desktop"; Value = $Application.ShortcutAddedToDesktop.ToString(); }
		$ScriptInformation += @{Data = "Add shortcut to user's Start Menu"; Value = $Application.ShortcutAddedToStartMenu.ToString(); }
		If($Application.ShortcutAddedToStartMenu)
		{
			$ScriptInformation += @{Data = "Start Menu Folder"; Value = $Application.StartMenuFolder ; }
		}
		$ScriptInformation += @{Data = "Wait for Printer Creation"; Value = $Application.WaitForPrinterCreation.ToString(); }
		
		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 175;
		$Table.Columns.Item(2).Width = 325;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	ElseIf($Text)
	{
		Line 1 "Name (for administrator)`t`t: " $Application.Name
		Line 1 "Name (for user)`t`t`t`t: " $Application.PublishedName
		Line 1 "Description and keywords`t`t: " $Application.Description
		[string]$xDGs = $(If( $DeliveryGroups -is [array] -and $DeliveryGroups.Count ) { $DeliveryGroups[0] } Else { '-' } )
		Line 1 "Delivery Group`t`t`t`t: " $xDGs
		$cnt = -1
		ForEach($Group in $DeliveryGroups)
		{
			$cnt++
			If($cnt -gt 0)
			{
				Line 5 "  " $Group
			}
		}
		Line 1 "Folder (for administrators)`t`t: " $Application.AdminFolderName
		#V2.12 change from "Folder (for user)" to "Application category (optional)". 
		#This changed in XA/X 7.8 and I never noticed it and no one reported it.
		#Thanks to lbates for bringing it to my attention.
		Line 1 "Application category (optional)`t`t: " $Application.ClientFolder
		[string]$xVis = $(If( $xVisibility -is [array] -and $xVisibility.Count ) { $xVisibility[0] } Else { '-' } )
		Line 1 "Visibility`t`t`t`t: " $xVis
		$cnt = -1
		ForEach($tmp in $xVisibility)
		{
			$cnt++
			If($cnt -gt 0)
			{
				Line 6 "  " $xVisibility[$cnt]
			}
		}
		Line 1 "Application Path`t`t`t: " $Application.CommandLineExecutable
		Line 1 "Command line arguments`t`t`t: " $Application.CommandLineArguments
		Line 1 "Working directory`t`t`t: " $Application.WorkingDirectory

		If([String]::IsNullOrEmpty($RedirectedFileTypes))
		{
			Line 1 "Redirected file types`t`t`t: " "-"
		}
		Else
		{
			$tmp1 = ""
			ForEach($tmp in $RedirectedFileTypes)
			{
				$tmp1 += "$($tmp); "
			}
			Line 1 "Redirected file types`t`t`t: " $tmp1
			$tmp1 = $Null
		}

        [string]$TagName = $(If( $xTags -is [array] -and $xTags.Count ) { $xTags[0] } Else { '-' } )
		Line 1 "Tags`t`t`t`t`t: " $TagName
		$cnt = -1
		ForEach($tmp in $xTags)
		{
			$cnt++
			If($cnt -gt 0)
			{
				Line 6 "  " $tmp
			}
		}

		If($Application.Visible -eq $False)
		{
			Line 1 "Hidden`t`t`t`t`t: Application is hidden" ""
		}
		
		If((Get-BrokerServiceAddedCapability @XDParams1) -contains "ApplicationUsageLimits")
		{
			#change wording in V2.19 to match the text in Studio
			Line 1 "How do you want to control the use of this application?"
			
			If($Application.MaxTotalInstances -eq 0)
			{
				Line 2 "Allow unlimited use"
			}
			Else
			{
				Line 2 "Limit the number of instances running at the same time to " $Application.MaxTotalInstances.ToString()
			}
			
			If($Application.MaxPerUserInstances -eq 0)
			{
				#nothing
			}
			Else
			{
				Line 2 "Limit to one instance per user"
			}
			
			#New property in 1808, added in script V2.19
			If(validObject $Application MaxPerMachineInstances)
			{
				If($Application.MaxPerMachineInstances -eq 0)
				{
					Line 2 "Limit the number of instances per machine to: Unlimited"
				}
				Else
				{
					Line 2 "Limit the number of instances per machine to " $Application.MaxPerMachineInstances.ToString()
				}
			}
		}

		#added in 2.14
		Line 1 "Application Type`t`t`t: " $ApplicationType
		Line 1 "CPU Priority Level`t`t`t: " $CPUPriorityLevel
		If(validObject $Application HomeZoneName)
		{
			Line 1 "Home Zone Name`t`t`t`t: " $xHomeZoneName
		}
		If(validObject $Application HomeZoneOnly)
		{
			Line 1 "Home Zone Only`t`t`t`t: " $Application.HomeZoneOnly.ToString()
		}
		If(validObject $Application IgnoreUserHomeZone)
		{
			Line 1 "Ignore User Home Zone`t`t`t: " $Application.IgnoreUserHomeZone.ToString()
		}
		Line 1 "Icon from Client`t`t`t: " $Application.IconFromClient.ToString()
		If(validObject $Application LocalLaunchDisabled)
		{
			Line 1 "Local Launch Disabled`t`t`t: " $Application.LocalLaunchDisabled.ToString()
		}
		Line 1 "Secure Command Line Arguments Enabled`t: " $Application.SecureCmdLineArgumentsEnabled.ToString()
		Line 1 "Add shortcut to user's desktop`t`t: " $Application.ShortcutAddedToDesktop.ToString()
		Line 1 "Add shortcut to user's Start Menu`t: " $Application.ShortcutAddedToStartMenu.ToString()
		If($Application.ShortcutAddedToStartMenu)
		{
			Line 1 "Start Menu Folder`t`t`t: " $Application.StartMenuFolder 
		}
		Line 1 "Wait for Printer Creation`t`t: " $Application.WaitForPrinterCreation.ToString()
		Line 0 ""
	}
	ElseIf($HTML)
	{
		$rowdata = @()
		$columnHeaders = @("Name (for administrator)",($global:htmlsb),$Application.Name,$htmlwhite)
		$rowdata += @(,('Name (for user)',($global:htmlsb),$Application.PublishedName,$htmlwhite))
		$rowdata += @(,('Description and keywords',($global:htmlsb),$Application.Description,$htmlwhite))
		[string]$xDGs = $(If( $DeliveryGroups -is [array] -and $DeliveryGroups.Count ) { $DeliveryGroups[0] } Else { '-' } )
		$rowdata += @(,('Delivery Group',($global:htmlsb),$xDGs,$htmlwhite))
		$cnt = -1
		ForEach($Group in $DeliveryGroups)
		{
			$cnt++
			If($cnt -gt 0)
			{
				$rowdata += @(,('',($global:htmlsb),$Group,$htmlwhite))
			}
		}
		$rowdata += @(,('Folder (for administrators)',($global:htmlsb),$Application.AdminFolderName,$htmlwhite))
		#V2.12 change from "Folder (for user)" to "Application category (optional)". 
		#This changed in XA/X 7.8 and I never noticed it and no one reported it.
		#Thanks to lbates for bringing it to my attention.
		$rowdata += @(,('Application category (optional)',($global:htmlsb),$Application.ClientFolder,$htmlwhite))
		[string]$xVis = $(If( $xVisibility -is [array] -and $xVisibility.Count ) { $xVisibility[0] } Else { '-' } )
		$rowdata += @(,('Visibility',($global:htmlsb),$xVis,$htmlwhite))
		$cnt = -1
		ForEach($tmp in $xVisibility)
		{
			$cnt++
			If($cnt -gt 0)
			{
				$rowdata += @(,('',($global:htmlsb),$xVisibility[$cnt],$htmlwhite))
			}
		}
		$rowdata += @(,('Application Path',($global:htmlsb),$Application.CommandLineExecutable,$htmlwhite))
		$rowdata += @(,('Command Line arguments',($global:htmlsb),$Application.CommandLineArguments,$htmlwhite))
		$rowdata += @(,('Working directory',($global:htmlsb),$Application.WorkingDirectory,$htmlwhite))

		If([String]::IsNullOrEmpty($RedirectedFileTypes))
		{
			$rowdata += @(,("Redirected file types",($global:htmlsb),"-",$htmlwhite))
		}
		Else
		{
			$tmp1 = ""
			ForEach($tmp in $RedirectedFileTypes)
			{
				$tmp1 += "$($tmp); "
			}
			$rowdata += @(,("Redirected file types",($global:htmlsb),$tmp1,$htmlwhite))
			$tmp1 = $Null
		}

        [string]$TagName = $(If( $xTags -is [array] -and $xTags.Count ) { $xTags[0] } Else { '-' } )
		$rowdata += @(,('Tags',($global:htmlsb),$TagName,$htmlwhite))
		$cnt = -1
		ForEach($tmp in $xTags)
		{
			$cnt++
			If($cnt -gt 0)
			{
				$rowdata += @(,('',($global:htmlsb),$tmp,$htmlwhite))
			}
		}

		If($Application.Visible -eq $False)
		{
			$rowdata += @(,('Hidden',($global:htmlsb),"Application is hidden",$htmlwhite))
		}

		If((Get-BrokerServiceAddedCapability @XDParams1) -contains "ApplicationUsageLimits")
		{
			#change wording in V2.19 to match the text in Studio
			
			If($Application.MaxTotalInstances -eq 0)
			{
				$rowdata += @(,("How do you want to control the use of this application?",($global:htmlsb),"Allow unlimited use",$htmlwhite))
			}
			Else
			{
				$rowdata += @(,("How do you want to control the use of this application?",($global:htmlsb),"Limit the number of instances running at the same time to $($Application.MaxTotalInstances.ToString())",$htmlwhite))
			}
			
			If($Application.MaxPerUserInstances -eq 0)
			{
				#nothing
			}
			Else
			{
				$rowdata += @(,("",($global:htmlsb),"Limit to one instance per user",$htmlwhite))
			}
			
			#New property in 1808, added in script V2.19
			If(validObject $Application MaxPerMachineInstances)
			{
				If($Application.MaxPerMachineInstances -eq 0)
				{
					$rowdata += @(,("",($global:htmlsb),"Limit the number of instances per machine to Unlimited",$htmlwhite))
				}
				Else
				{
					$rowdata += @(,("",($global:htmlsb),"Limit the number of instances per machine to $($Application.MaxPerMachineInstances.ToString())",$htmlwhite))
				}
			}
		}

		#added in 2.14
		$rowdata += @(,("Application Type",($global:htmlsb),$ApplicationType,$htmlwhite))
		$rowdata += @(,("CPU Priority Level",($global:htmlsb),$CPUPriorityLevel,$htmlwhite))
		If(validObject $Application HomeZoneName)
		{
			$rowdata += @(,("Home Zone Name",($global:htmlsb),$xHomeZoneName,$htmlwhite))
		}
		If(validObject $Application HomeZoneOnly)
		{
			$rowdata += @(,("Home Zone Only",($global:htmlsb),$Application.HomeZoneOnly.ToString(),$htmlwhite))
		}
		If(validObject $Application IgnoreUserHomeZone)
		{
			$rowdata += @(,("Ignore User Home Zone",($global:htmlsb),$Application.IgnoreUserHomeZone.ToString(),$htmlwhite))
		}
		$rowdata += @(,("Icon from Client",($global:htmlsb),$Application.IconFromClient.ToString(),$htmlwhite))
		If(validObject $Application LocalLaunchDisabled)
		{
			$rowdata += @(,("Local Launch Disabled",($global:htmlsb),$Application.LocalLaunchDisabled.ToString(),$htmlwhite))
		}
		$rowdata += @(,("Secure Command Line Arguments Enabled",($global:htmlsb),$Application.SecureCmdLineArgumentsEnabled.ToString(),$htmlwhite))
		$rowdata += @(,("Add shortcut to user's desktop",($global:htmlsb),$Application.ShortcutAddedToDesktop.ToString(),$htmlwhite))
		$rowdata += @(,("Add shortcut to user's Start Menu",($global:htmlsb),$Application.ShortcutAddedToStartMenu.ToString(),$htmlwhite))
		If($Application.ShortcutAddedToStartMenu)
		{
			$rowdata += @(,("Start Menu Folder",($global:htmlsb),$Application.StartMenuFolder,$htmlwhite)) 
		}
		$rowdata += @(,("Wait for Printer Creation",($global:htmlsb),$Application.WaitForPrinterCreation.ToString(),$htmlwhite))

		$msg = ""
		$columnWidths = @("225","375")
		FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "600"
	}
}

Function OutputApplicationSessions
{
	Param([object] $Application)
	
	Write-Verbose "$(Get-Date -Format G): `t`tApplication sessions for $($Application.BrowserName)"
	$txt = "Sessions"
	If($MSWord -or $PDF)
	{
		WriteWordLine 3 0 $txt
	}
	ElseIf($Text)
	{
		Line 0 $txt
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 3 0 $txt
	}

	#V2.10 10-feb-2018 change from xdparams1 to xdparams2 to add maxrecordcount
	$Sessions = Get-BrokerSession -ApplicationUid $Application.Uid @XDParams2 -SortBy UserName
	
	If($? -and $Null -ne $Sessions)
	{
		If($MSWord -or $PDF)
		{
			[System.Collections.Hashtable[]] $SessionsWordTable = @();
		}
		ElseIf($HTML)
		{
			$rowdata = @()
		}

		#now get the privateappdesktop for each desktopgroup uid
		ForEach($Session in $Sessions)
		{
			#get desktop by Session Uid
			$xMachineName = ""
			#V2.10 10-feb-2018 change from xdparams1 to xdparams2 to add maxrecordcount
			#V2.15 change from the deprecated Get-BrokerDesktop to Get-BrokerMachine
			#$Desktop = Get-BrokerDesktop -SessionUid $Session.Uid @XDParams2
			$Desktop = Get-BrokerMachine -SessionUid $Session.Uid @XDParams2
			
			If($? -and $Null -ne $Desktop)
			{
				$xMachineName = $Desktop.MachineName
			}
			Else
			{
				If(![String]::IsNullOrEmpty($Session.MachineName))
				{
					$xMachineName = $Session.MachineName
				}
				Else
				{
					$xMachineName = "Not Found"
				}
			}
			
			#recording status added in 2.26
			$RecordingStatus = "Not supported"
			$result = Get-BrokerSessionRecordingStatus -Session $Session.Uid -EA 0
			
			If($? -and $null -ne $result)
			{
				Switch ($result)
				{
					"SessionBeingRecorded"	{$RecordingStatus = "Session is being recorded"}
					"SessionNotRecorded"	{$RecordingStatus = "Session is not being recorded"}
					Default					{$RecordingStatus = "Unable to determine session recording status: $($result)"}
				}
			}
			ElseIf($? -and $null -eq $result)
			{
				$RecordingStatus = "No recording status found"
			}
			Else
			{
				$RecordingStatus = "Unable to determine session recording status: $($result)"
			}
			
			If($MSWord -or $PDF)
			{
				$SessionsWordTable += @{
				UserName = $Session.UserName;
				ClientName= $Session.ClientName;
				MachineName = $xMachineName;
				State = $Session.SessionState;
				ApplicationState = $Session.AppState;
				Protocol = $Session.Protocol;
				RecordingStatus = $RecordingStatus; #recording status added in 2.26
				}
			}
			ElseIf($Text)
			{
				Line 2 "User Name`t`t: " $Session.UserName
				Line 2 "Client Name`t`t: " $Session.ClientName
				Line 2 "Machine Name`t`t: " $xMachineName
				Line 2 "State`t`t`t: " $Session.SessionState
				Line 2 "Application State`t: " $Session.AppState
				Line 2 "Protocol`t`t: " $Session.Protocol
				Line 2 "Recording Status`t: " $RecordingStatus #recording status added in 2.26
				Line 0 ""
			}
			ElseIf($HTML)
			{
				$rowdata += @(,(
				$Session.UserName,$htmlwhite,
				$Session.ClientName,$htmlwhite,
				$xMachineName,$htmlwhite,
				$Session.SessionState,$htmlwhite,
				$Session.AppState,$htmlwhite,
				$Session.Protocol,$htmlwhite,
				$RecordingStatus,$htmlwhite)) #recording status added in 2.26
			}
		}
		
		If($MSWord -or $PDF)
		{
			$Table = AddWordTable -Hashtable $SessionsWordTable `
			-Columns  UserName,ClientName,MachineName,State,ApplicationState,Protocol,RecordingStatus `
			-Headers  "User Name","Client Name","Machine Name","State","Application State","Protocol","Recording Status" ` #recording status added in 2.26
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table -Size 9 -BackgroundColor $wdColorWhite
			SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 120;
			$Table.Columns.Item(2).Width = 70;
			$Table.Columns.Item(3).Width = 125;
			$Table.Columns.Item(4).Width = 35;
			$Table.Columns.Item(5).Width = 55;
			$Table.Columns.Item(6).Width = 45;
			$Table.Columns.Item(6).Width = 50; #recording status column

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
		}
		ElseIf($HTML)
		{
			$columnHeaders = @(
			'User Name',($global:htmlsb),
			'Client Name',($global:htmlsb),
			'Machine Name',($global:htmlsb),
			'State',($global:htmlsb),
			'Application State',($global:htmlsb),
			'Protocol',($global:htmlsb),
			'Recording Status',($global:htmlsb)) #recording status added in 2.26

			$msg = ""
			$columnWidths = @("135","85","135","50","50","55","55")
			FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "510"
			WriteHTMLLine 0 0 ""
		}
	}
	ElseIf($? -and $Null -eq $Sessions)
	{
		$txt = "There are no Sessions for Application $($Application.ApplicationName)"
		OutputNotice $txt
	}
	Else
	{
		$txt = "Unable to retrieve Sessions for Application $($Application.ApplicationName)"
		OutputWarning $txt
	}
}

Function OutputApplicationAdministrators
{
	Param([object] $Application)
	
	Write-Verbose "$(Get-Date -Format G): `t`tApplication administrators for $($Application.ApplicationName)"
	$txt = "Administrators"
	If($MSWord -or $PDF)
	{
		WriteWordLine 3 0 $txt
	}
	ElseIf($Text)
	{
		Line 0 ""
		Line 0 $txt
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 3 0 $txt
	}

	#get all the delivery groups
	$DeliveryGroups = @()
	ForEach($DGUid in $Application.AssociatedDesktopGroupUids)
	{
		$Results = Get-BrokerDesktopGroup @XDParams1 -Uid $DGUid
		If($? -and $Null -ne $Results)
		{
			$DeliveryGroups += $Results.Name
		}
	}
	
	#now get the administrators for each delivery group
	$Admins = @()
	ForEach($Group in $DeliveryGroups)
	{
		$Results = GetAdmins "DesktopGroup" $Group
		If($? -and $Null -ne $Results)
		{
			$Admins += $Results
		}
	}
	
	If($Null -ne $Admins)
	{
		If($MSWord -or $PDF)
		{
			[System.Collections.Hashtable[]] $AdminsWordTable = @();
		}
		ElseIf($HTML)
		{
			$rowdata = @()
		}
		
		ForEach($Admin in $Admins)
		{
			$Tmp = ""
			If($Admin.Enabled)
			{
				$Tmp = "Enabled"
			}
			Else
			{
				$Tmp = "Disabled"
			}
			
			If($MSWord -or $PDF)
			{
				$AdminsWordTable += @{ 
				AdminName = $Admin.Name;
				Role = $Admin.Rights[0].RoleName;
				Status = $Tmp;
				}
			}
			ElseIf($Text)
			{
				Line 1 "Administrator Name`t: " $Admin.Name
				Line 1 "Role`t`t`t: " $Admin.Rights[0].RoleName
				Line 1 "Status`t`t`t: " $tmp
				Line 0 ""
			}
			ElseIf($HTML)
			{
				$rowdata += @(,(
				$Admin.Name,$htmlwhite,
				$Admin.Rights[0].RoleName,$htmlwhite,
				$tmp,$htmlwhite))
			}
		}
		
		If($MSWord -or $PDF)
		{
			If($AdminsWordTable.Count -eq 0)
			{
				$AdminsWordTable += @{ 
				AdminName = "No admins found";
				Role = "N/A";
				Status = "N/A";
				}
			}

			$Table = AddWordTable -Hashtable $AdminsWordTable `
			-Columns AdminName, Role, Status `
			-Headers "Administrator Name", "Role", "Status" `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 225;
			$Table.Columns.Item(2).Width = 200;
			$Table.Columns.Item(3).Width = 60;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
		}
		ElseIf($HTML)
		{
			$columnHeaders = @(
			'Administrator Name',($global:htmlsb),
			'Role',($global:htmlsb),
			'Status',($global:htmlsb))

			$msg = ""
			$columnWidths = @("225","200","60")
			FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "485"
		}
	}
	ElseIf($? -and ($Null -eq $Admins))
	{
		$txt = "There are no administrators for $($Group.Name)"
		OutputNotice $txt
	}
	Else
	{
		$txt = "Unable to retrieve administrators for $($Group.Name)"
		OutputWarning $txt
	}
	
}
#endregion

#region application group details
Function ProcessApplicationGroupDetails
{
	Write-Verbose "$(Get-Date -Format G): `tProcessing Application Groups"

	$txt = "Application Groups"
	If($MSWord -or $PDF)
	{
		$Selection.InsertNewPage()
		WriteWordLine 1 0 $txt
	}
	ElseIf($Text)
	{
		Line 0 $txt
		Line 0 ""
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 1 0 $txt
	}

	#V2.10 10-feb-2018 change from xdparams1 to xdparams2 to add maxrecordcount
	$ApplicationGroups = Get-BrokerApplicationGroup @XDParams2 -SortBy Name
	
	If($? -and $Null -ne $ApplicationGroups)
	{
		ForEach($AppGroup in $ApplicationGroups)
		{
			Write-Verbose "$(Get-Date -Format G): `t`t`tAdding Application Group $($AppGroup.Name)"

			$xEnabled = "No"
			If($AppGroup.Enabled)
			{
				$xEnabled = "Yes"
			}
			
			$xSessionSharing = "Disabled"
			If($AppGroup.SessionSharingEnabled)
			{
				$xSessionSharing = "Enabled"
			}
			
			$xSingleSession = "Disabled"
			If($AppGroup.SingleAppPerSession)
			{
				$xSingleSession = "Enabled"
			}
			
			$DGs = @()
			ForEach($DGUid in $AppGroup.AssociatedDesktopGroupUids)
			{
				$results = Get-BrokerDesktopGroup @XDParams1 -Uid $DGUid
				
				If($? -and $Null -ne $results)
				{
					$DGs += $results.Name
				}
			}
			
			[array]$xTags = $AppGroup.Tags
			
			If($MSWord -or $PDF)
			{
				$ScriptInformation = New-Object System.Collections.ArrayList
				$ScriptInformation.Add(@{Data = "Name"; Value = $AppGroup.Name; }) > $Null
				$ScriptInformation.Add(@{Data = "Description"; Value = $AppGroup.Description; }) > $Null
				$ScriptInformation.Add(@{Data = "Applications"; Value = $AppGroup.TotalApplications.ToString(); }) > $Null
				
				If([String]::IsNullOrEmpty($AppGroup.Scopes))
				{
					$ScriptInformation.Add(@{Data = "Scopes"; Value = "All"; }) > $Null
				}
				Else
				{
					$ScriptInformation.Add(@{Data = "Scopes"; Value = "All"; }) > $Null
					$cnt = -1
					ForEach($tmp in $AppGroup.Scopes)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $tmp; }) > $Null
					}
				}
				
				$ScriptInformation.Add(@{Data = "Enabled"; Value = $xEnabled; }) > $Null
				$ScriptInformation.Add(@{Data = "Session sharing"; Value = $xSessionSharing; }) > $Null
				$ScriptInformation.Add(@{Data = "Single application per session"; Value = $xSingleSession; }) > $Null
				$ScriptInformation.Add(@{Data = "Restrict launches to machines with tag"; Value = $AppGroup.RestrictToTag; }) > $Null

				[string]$xxDGs = $(If( $DGs -is [array] -and $DGs.Count ) { $DGs[0] } Else { '-' } )
				$ScriptInformation.Add(@{Data = "Delivery Groups"; Value = $xxDGs; }) > $Null
				$cnt = -1
				ForEach($tmp in $DGs)
				{
					$cnt++
					If($cnt -gt 0)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $tmp; }) > $Null
					}
				}
				
				[string]$TagName = $(If( $xTags -is [array] -and $xTags.Count ) { $xTags[0] } Else { '-' } )
				$ScriptInformation.Add(@{Data = "Tags"; Value = $TagName; }) > $Null
				$cnt = -1
				ForEach($tmp in $xTags)
				{
					$cnt++
					If($cnt -gt 0)
					{
						$ScriptInformation.Add(@{Data = ""; Value = $tmp; }) > $Null
					}
				}
				
				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 200;
				$Table.Columns.Item(2).Width = 300;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			ElseIf($Text)
			{
				Line 1 "Name`t`t`t`t`t: " $AppGroup.Name
				Line 1 "Description`t`t`t`t: " $AppGroup.Description
				Line 1 "Applications`t`t`t`t: " $AppGroup.TotalApplications.ToString()
				
				If([String]::IsNullOrEmpty($AppGroup.Scopes))
				{
					Line 1 "Scopes`t`t`t`t`t: " "All"
				}
				Else
				{
					Line 1 "Scopes`t`t`t`t`t: " "All"
					$cnt = -1
					ForEach($tmp in $AppGroup.Scopes)
					{
						Line 6 "  " $tmp
					}
				}
				
				Line 1 "Enabled`t`t`t`t`t: " $xEnabled
				Line 1 "Session sharing`t`t`t`t: " $xSessionSharing
				Line 1 "Single application per session`t`t: " $xSingleSession
				Line 1 "Restrict launches to machines with tag`t: " $AppGroup.RestrictToTag

				[string]$xxDGs = $(If( $DGs -is [array] -and $DGs.Count ) { $DGs[0] } Else { '-' } )
				Line 1 "Delivery Groups`t`t`t`t: " $xxDGs
				$cnt = -1
				ForEach($tmp in $DGs)
				{
					$cnt++
					If($cnt -gt 0)
					{
						Line 6 "  " $tmp
					}
				}
				
				[string]$TagName = $(If( $xTags -is [array] -and $xTags.Count ) { $xTags[0] } Else { '-' } )
				Line 1 "Tags`t`t`t`t`t: " $TagName
				$cnt = -1
				ForEach($tmp in $xTags)
				{
					$cnt++
					If($cnt -gt 0)
					{
						Line 6 "  " $tmp
					}
				}
				Line 0 ""
			}
			ElseIf($HTML)
			{
				$rowdata = @()
				$columnHeaders = @("Name",($global:htmlsb),$AppGroup.Name,$htmlwhite)
				$rowdata += @(,('Description',($global:htmlsb),$AppGroup.Description,$htmlwhite))
				$rowdata += @(,('Applications',($global:htmlsb),$AppGroup.TotalApplications.ToString(),$htmlwhite))
				
				If([String]::IsNullOrEmpty($AppGroup.Scopes))
				{
					$rowdata += @(,('Scopes',($global:htmlsb),"All",$htmlwhite))
				}
				Else
				{
					$rowdata += @(,('Scopes',($global:htmlsb),"All",$htmlwhite))
					$cnt = -1
					ForEach($tmp in $AppGroup.Scopes)
					{
						$rowdata += @(,('',($global:htmlsb),$tmp,$htmlwhite))
					}
				}
				
				$rowdata += @(,('Enabled',($global:htmlsb),$xEnabled,$htmlwhite))
				$rowdata += @(,('Session sharing',($global:htmlsb),$xSessionSharing,$htmlwhite))
				$rowdata += @(,('Single application per session',($global:htmlsb),$xSingleSession,$htmlwhite))
				$rowdata += @(,('Restrict launches to machines with tag',($global:htmlsb),$AppGroup.RestrictToTag,$htmlwhite))
				
				[string]$xxDGs = $(If( $DGs -is [array] -and $DGs.Count ) { $DGs[0] } Else { '-' } )
				$rowdata += @(,('Delivery Groups',($global:htmlsb),$xxDGs,$htmlwhite))
				$cnt = -1
				ForEach($tmp in $DGs)
				{
					$cnt++
					If($cnt -gt 0)
					{
						$rowdata += @(,('',($global:htmlsb),$tmp,$htmlwhite))
					}
				}
				
				[string]$TagName = $(If( $xTags -is [array] -and $xTags.Count ) { $xTags[0] } Else { '-' } )
				$rowdata += @(,('Tags',($global:htmlsb),$TagName,$htmlwhite))
				$cnt = -1
				ForEach($tmp in $xTags)
				{
					$cnt++
					If($cnt -gt 0)
					{
						$rowdata += @(,('',($global:htmlsb),$tmp,$htmlwhite))
					}
				}

				$msg = ""
				$columnWidths = @("225","275")
				FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "500"
			}
		}
	}
	ElseIf($? -and $Null -eq $ApplicationGroups)
	{
		$txt = "There were no Application Groups found"
		OutputNotice $txt
	}
	Else
	{
		$txt = "Unable to retrieve Application Groups"
		OutputWarning $txt
	}
}
#endregion

#region policy functions
Function CreateDictionary
{
	#taken from citrix.grouppolicy.commands.psm1 and cleaned up

    Return New-Object "System.Collections.Generic.Dictionary``2[System.String,System.Object]"
}

Function CreateObject
{
    Param([System.Collections.IDictionary]$props, [string]$name)
	#taken from citrix.grouppolicy.commands.psm1 and cleaned up

    $obj = New-Object PSObject
    ForEach ($prop in $props.Keys)
    {
        $obj | Add-Member NoteProperty -Name $prop -Value $props.$prop
    }
    if ($name)
    {
        $obj | Add-Member ScriptMethod -Name "ToString" -Value $executioncontext.invokecommand.NewScriptBlock('"{0}"' -f $name) -Force
    }
    Return $obj
}

Function FilterString
{
    Param([string] $value, [string[]] $wildcards)
	#taken from citrix.grouppolicy.commands.psm1 and cleaned up

    $wildcards | Where-Object { $value -like $_ }
}

Function Get-CitrixGroupPolicy
{
	[CmdletBinding()]
	Param(
		[Parameter(Position=0, ValueFromPipelineByPropertyName=$True)]
		[string[]] $PolicyName = "*",
		[Parameter(Position=1, ValueFromPipelineByPropertyName=$True)]
		[string] [ValidateSet("Computer", "User", $Null)] $Type,
		[Parameter()]
		[string] $DriveName = "LocalFarmGPO"
	)
	#taken from citrix.grouppolicy.commands.psm1, renamed, and cleaned up

	Process
	{
		$types = If(!$Type) { @("Computer", "User") } Else { @($Type) }

		ForEach($polType in $types)
		{
			$pols = @(Get-ChildItem "$($DriveName):\$polType" | Where-Object { FilterString $_.Name $PolicyName })

			If($Pols.Count -eq 0)
			{
				If($PolicyName -eq "*")
				{
					Write-Error "
		`n`n
	FATAL ERROR.
	The $polType node is missing for the PSDrive named $DriveName. Try immediately rerunning the script.
		`n`n
	Script cannot Continue.
		`n`n
		"
					AbortScript
				}
				Else
				{
					Write-Error "
		`n`n
	FATAL ERROR.
	For the policy named $PolicyName, the $polType node is missing for the PSDrive named $DriveName. Try immediately rerunning the script.
		`n`n
	Script cannot Continue.
		`n`n
		"
					AbortScript
				}
			}
			
			ForEach($pol in $pols)
			{
				$props             = CreateDictionary
				$props.PolicyName  = $pol.Name
				$props.Type        = $poltype
				$props.Description = $pol.Description
				$props.Enabled     = $pol.Enabled
				$props.Priority    = $pol.Priority
				CreateObject $props $pol.Name
			}
		}
	}
}

Function Get-CitrixGroupPolicyConfiguration
{
	[CmdletBinding()]
	Param(
		[Parameter(Position=0, ValueFromPipelineByPropertyName=$True)]
		[String[]] $PolicyName = "*",
		[Parameter(Position=1, ValueFromPipelineByPropertyName=$True)]
		[ValidateSet("Computer", "User", $Null)] [String] $Type,
		[Parameter()]
		[Switch] $ConfiguredOnly,
		[Parameter()]
		[string] $DriveName = "LocalFarmGPO"
	)
	#taken from citrix.grouppolicy.commands.psm1, renamed, and cleaned up

	Process
	{
		$types = If(!$Type) { @("Computer", "User") } Else { @($Type) }

		ForEach($poltype in $types)
		{
			$pols = @(Get-ChildItem "$($DriveName):\$poltype" | Where-Object { FilterString $_.Name $PolicyName })
			ForEach($pol in $pols)
			{
				$props = CreateDictionary
				$props.PolicyName = $pol.Name
				$props.Type = $poltype

				ForEach($setting in @(Get-ChildItem "$($DriveName):\$poltype\$($pol.Name)\Settings" -Recurse | `
					Where-Object { $_.PSObject.Properties[ 'State' ] -and  $Null -ne $_.State }))
				{
					If(!$ConfiguredOnly -or $setting.State -ne "NotConfigured")
					{
						$setname = $setting.PSChildName
						$config = CreateDictionary
						$config.State = $setting.State.ToString()
						If( $setting.PSObject.Properties[ 'Values' ] )
						{
							If($Null -ne $setting.Values) { $config.Values = ([array]($setting.Values)) }
						}
						If( $setting.PSObject.Properties[ 'Value' ] )
						{
							If($Null -ne $setting.Value) { $config.Value = ([string]($setting.Value)) }
						}
						$config.Path = $setting.PSPath.Substring($setting.PSPath.IndexOf("\Settings\")+10)
						$props.$setname = CreateObject $config
					}
				}
				CreateObject $props $pol.Name
			}
		}
	}
}

Function Get-CitrixGroupPolicyFilter
{
	[CmdletBinding()]
	Param(
		[Parameter(Position=0, ValueFromPipelineByPropertyName=$True)]
		[String[]] $PolicyName = "*",
		[Parameter(Position=1, ValueFromPipelineByPropertyName=$True)]
		[ValidateSet("Computer", "User", $Null)] [String] $Type,
		[Parameter(Position=2, ValueFromPipelineByPropertyName=$True)]
		[String[]] $FilterName = "*",
		[Parameter(Position=3, ValueFromPipelineByPropertyName=$True)]
		[string] $FilterType = "*",
		[Parameter()]
		[string] $DriveName = "LocalFarmGPO"
	)
	#taken from citrix.grouppolicy.commands.psm1, renamed, and cleaned up

	Process
	{
		$types = If(!$Type) { @("Computer", "User") } Else { @($Type) }

		ForEach($poltype in $types)
		{
			$pols = @(Get-ChildItem "$($DriveName):\$poltype" | Where-Object { ($_.Name -ne "Unfiltered") -and (FilterString $_.Name $PolicyName) })
			ForEach($pol in $pols)
			{
				ForEach($filter in @(Get-ChildItem "$($DriveName):\$poltype\$($pol.Name)\Filters" -Recurse |
					Where-Object { ($_.PSObject.Properties[ 'FilterType' ] -and  $Null -ne $_.FilterType) -and (FilterString $_.Name $FilterName) -and (FilterString $_.FilterType $FilterType)}))
				{
					$props             = CreateDictionary
					$props.PolicyName  = $pol.Name
					$props.Type        = $poltype
					$props.FilterName  = $filter.Name
					$props.FilterType  = $filter.FilterType
					$props.Enabled     = $filter.Enabled
					$props.Mode        = [string]($filter.Mode)
					$props.FilterValue = $filter.FilterValue
					If($filter.FilterType -eq "AccessControl")
					{
						$props.ConnectionType    = $filter.ConnectionType
						$props.AccessGatewayFarm = $filter.AccessGatewayFarm
						$props.AccessCondition   = $filter.AccessCondition
					}
					CreateObject $props $filter.Name
				}
			}
		}
	}
}

Function ProcessPolicies
{
	$txt = "Policies"
	$txt1 = "Policies in this report may not match the order shown in Studio."
	$txt2 = "See http://blogs.citrix.com/2013/07/15/merging-of-user-and-computer-policies-in-xendesktop-7-0/"
	If($MSWord -or $PDF)
	{
		$selection.InsertNewPage()
		WriteWordLine 1 0 $txt
		WriteWordLine 0 0 $txt1 "" $Null 8 $False $True	
		WriteWordLine 0 0 $txt2 "" $Null 8 $False $True	
	}
	ElseIf($Text)
	{
		Line 0 $txt
		Line 0 $txt1
		Line 0 $txt2
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 1 0 $txt
		WriteHTMLLine 0 0 $txt1 "" "Calibri" 1
		WriteHTMLLine 0 0 $txt2
	}
	Write-Verbose "$(Get-Date -Format G): Processing XenDesktop Policies"
	
	ProcessPolicySummary 
	
	If($Policies)
	{
		If(Test-Path LocalFarmGPO: 4>$Null)
		{
			ProcessCitrixPolicies "LocalFarmGPO" "Computer" ""
			Write-Verbose "$(Get-Date -Format G): Finished Processing Citrix Site Computer Policies"
			Write-Verbose "$(Get-Date -Format G): "
		}
		Else
		{
			Write-Warning "The LocalFarmGPO PSDrive does not exist (1)"
		}

		If(Test-Path LocalFarmGPO: 4>$Null)
		{
			ProcessCitrixPolicies "LocalFarmGPO" "User" ""
			Write-Verbose "$(Get-Date -Format G): Finished Processing Citrix Site User Policies"
			Write-Verbose "$(Get-Date -Format G): "
		}
		Else
		{
			Write-Warning "The LocalFarmGPO PSDrive does not exist (2)"
		}
		
		If($NoADPolicies)
		{
			#don't process AD policies
		}
		Else
		{
			#thanks to the Citrix Engineering Team for helping me solve processing Citrix AD-based Policies
			Write-Verbose "$(Get-Date -Format G): "
			Write-Verbose "$(Get-Date -Format G): `tSee if there are any Citrix AD-based policies to process"
			$CtxGPOArray = @()
			$CtxGPOArray = GetCtxGPOsInAD
			If($CtxGPOArray -is [Array] -and $CtxGPOArray.Count -gt 0)
			{
				Write-Verbose "$(Get-Date -Format G): "
				Write-Verbose "$(Get-Date -Format G): `tThere are $($CtxGPOArray.Count) Citrix AD-based policies to process"
				Write-Verbose "$(Get-Date -Format G): "

				[array]$CtxGPOArray = $CtxGPOArray | Sort-Object -unique
				
				ForEach($CtxGPO in $CtxGPOArray)
				{
					Write-Verbose "$(Get-Date -Format G): `tCreating ADGpoDrv PSDrive for Computer Policies"
					New-PSDrive -Name ADGpoDrv -PSProvider CitrixGroupPolicy -Root \ -DomainGpo $($CtxGPO) -Scope Global *>$Null
		
					#V2.10 using Citrix policy stuff and new-psdrive breaks transcript logging so restart transcript logging
					TranscriptLogging
					If(Test-Path ADGpoDrv: -EA 0)
					{
						Write-Verbose "$(Get-Date -Format G): `tProcessing Citrix AD Policy $($CtxGPO)"
					
						Write-Verbose "$(Get-Date -Format G): `tRetrieving AD Policy $($CtxGPO)"
						ProcessCitrixPolicies "ADGpoDrv" "Computer" $CtxGPO
						Write-Verbose "$(Get-Date -Format G): Finished Processing Citrix AD Computer Policy $($CtxGPO)"
						Write-Verbose "$(Get-Date -Format G): "
					}
					Else
					{
						Write-Warning "$($CtxGPO) is not readable by this XenDesktop Controller"
						Write-Warning "$($CtxGPO) was probably created by an updated Citrix Group Policy Provider"
					}

					Write-Verbose "$(Get-Date -Format G): `tCreating ADGpoDrv PSDrive for UserPolicies"
					New-PSDrive -Name ADGpoDrv -PSProvider CitrixGroupPolicy -Root \ -DomainGpo $($CtxGPO) -Scope Global *>$Null
		
					#V2.10 using Citrix policy stuff and new-psdrive breaks transcript logging so restart transcript logging
					TranscriptLogging
					If(Test-Path ADGpoDrv: -EA 0)
					{
						Write-Verbose "$(Get-Date -Format G): `tProcessing Citrix AD Policy $($CtxGPO)"
					
						Write-Verbose "$(Get-Date -Format G): `tRetrieving AD Policy $($CtxGPO)"
						ProcessCitrixPolicies "ADGpoDrv" "User" $CtxGPO
						Write-Verbose "$(Get-Date -Format G): Finished Processing Citrix AD User Policy $($CtxGPO)"
						Write-Verbose "$(Get-Date -Format G): "
					}
					Else
					{
						Write-Warning "$($CtxGPO) is not readable by this XenDesktop Controller"
						Write-Warning "$($CtxGPO) was probably created by an updated Citrix Group Policy Provider"
					}
				}
				Write-Verbose "$(Get-Date -Format G): Finished Processing Citrix AD Policies"
				Write-Verbose "$(Get-Date -Format G): "
			}
			Else
			{
				Write-Verbose "$(Get-Date -Format G): There are no Citrix AD-based policies to process"
				Write-Verbose "$(Get-Date -Format G): "
			}
		}
	}
	Write-Verbose "$(Get-Date -Format G): Finished Processing Citrix Policies"
	Write-Verbose "$(Get-Date -Format G): "
}

Function ProcessPolicySummary
{
	If(Test-Path localfarmgpo: -EA 0)
	{
		$HDXPolicies = @()
		$HDXPolicies += Get-CitrixGroupPolicy -DriveName LocalFarmGPO -PolicyName "*" -Type "Computer" -EA 0 `
		| Select-Object PolicyName, Type, Description, Enabled, Priority `
		| Sort-Object Type, Priority
		
		$HDXPolicies += Get-CitrixGroupPolicy -DriveName LocalFarmGPO -PolicyName "*" -Type "User" -EA 0 `
		| Select-Object PolicyName, Type, Description, Enabled, Priority `
		| Sort-Object Type, Priority
		
		OutputSummaryPolicyTable $HDXPolicies "localfarmgpo"
	}
	Else
	{
		Write-Warning "The LocalFarmGPO PSDrive does not exist (3)"
	}
	
	If($NoADPolicies)
	{
		#don't process AD policies
	}
	Else
	{
		Write-Verbose "$(Get-Date -Format G): "
		Write-Verbose "$(Get-Date -Format G): See if there are any Citrix AD-based policies to process"
		$CtxGPOArray = @()
		$CtxGPOArray = GetCtxGPOsInAD
		If($CtxGPOArray -is [Array] -and $CtxGPOArray.Count -gt 0)
		{
			[array]$CtxGPOArray = $CtxGPOArray | Sort-Object -unique
			Write-Verbose "$(Get-Date -Format G): "
			Write-Verbose "$(Get-Date -Format G): `tThere are $($CtxGPOArray.Count) Citrix AD-based policies to process"
			Write-Verbose "$(Get-Date -Format G): "
			
			ForEach($CtxGPO in $CtxGPOArray)
			{
				Write-Verbose "$(Get-Date -Format G): `tCreating ADGpoDrv PSDrive"
				New-PSDrive -Name ADGpoDrv -PSProvider CitrixGroupPolicy -Root \ -DomainGpo $($CtxGPO) -Scope "Global" *>$Null
		
				#V2.10 using Citrix policy stuff and new-psdrive breaks transcript logging so restart transcript logging
				TranscriptLogging
				If(Test-Path ADGpoDrv: -EA 0)
				{
					Write-Verbose "$(Get-Date -Format G): `tProcessing Citrix AD Policy $($CtxGPO)"
				
					Write-Verbose "$(Get-Date -Format G): `tRetrieving AD Policy $($CtxGPO)"
					$HDXPolicies = Get-CitrixGroupPolicy -DriveName ADGpoDrv -EA 0 `
					| Select-Object PolicyName, Type, Description, Enabled, Priority `
					| Sort-Object Type, Priority
			
					OutputSummaryPolicyTable $HDXPolicies "AD" $CtxGPO
					
					Write-Verbose "$(Get-Date -Format G): Finished Processing Citrix AD Policy $($CtxGPO)"
					Write-Verbose "$(Get-Date -Format G): "
				}
				Else
				{
					Write-Warning "$($CtxGPO) is not readable by this XenDesktop Controller"
					Write-Warning "$($CtxGPO) was probably created by an updated Citrix Group Policy Provider"
				}
				Remove-PSDrive ADGpoDrv -EA 0 4>$Null
			}
			Write-Verbose "$(Get-Date -Format G): Finished Processing Citrix AD Policies"
			Write-Verbose "$(Get-Date -Format G): "
		}
		Else
		{
			Write-Verbose "$(Get-Date -Format G): There are no Citrix AD-based policies to process"
			Write-Verbose "$(Get-Date -Format G): "
		}
	}
}

Function OutputSummaryPolicyTable
{
	Param([object] $HDXPolicies, [string] $xLocation, [string] $ADGPOName = "")
	
	If($xLocation -eq "localfarmgpo")
	{
		$txt = "Site Policies"
		If($MSWord -or $PDF)
		{
			WriteWordLine 3 0 $txt
		}
		ElseIf($Text)
		{
			Line 0 $txt
		}
		ElseIf($HTML)
		{
			WriteHTMLLine 3 0 $txt
		}
	}
	ElseIf($xLocation -eq "AD")
	{
		$txt = "Active Directory Policies ($($ADGpoName))"
		If($MSWord -or $PDF)
		{
			WriteWordLine 3 0 $txt
		}
		ElseIf($Text)
		{
			Line 0 $txt
		}
		ElseIf($HTML)
		{
			WriteHTMLLine 3 0 $txt
		}
	}

	If($Null -ne $HDXPolicies)
	{
		Write-Verbose "$(Get-Date -Format G): `t`t`tPolicies"
		If($MSWord -or $PDF)
		{
			[System.Collections.Hashtable[]] $PoliciesWordTable = @();
		}
		ElseIf($HTML)
		{
			$rowdata = @()
		}

		ForEach($Policy in $HDXPolicies)
		{
			If($MSWord -or $PDF)
			{
				$PoliciesWordTable += @{
				Name = $Policy.PolicyName;
				Description = $Policy.Description;
				Enabled= $Policy.Enabled;
				Type = $Policy.Type;
				Priority = $Policy.Priority;
				}
			}
			ElseIf($Text)
			{
				Line 2 "Name`t`t: " $Policy.PolicyName
				Line 2 "Description`t: " $Policy.Description
				Line 2 "Enabled`t`t: " $Policy.Enabled
				Line 2 "Type`t`t: " $Policy.Type
				Line 2 "Priority`t: " $Policy.Priority
				Line 0 ""
			}
			ElseIf($HTML)
			{
				$rowdata += @(,(
				$Policy.PolicyName,$htmlwhite,
				$Policy.Description,$htmlwhite,
				$Policy.Enabled.ToString(),$htmlwhite,
				$Policy.Type,$htmlwhite,
				$Policy.Priority,$htmlwhite))
			}
		}
		
		If($MSWord -or $PDF)
		{
			$Table = AddWordTable -Hashtable $PoliciesWordTable `
			-Columns  Name,Description,Enabled,Type,Priority `
			-Headers  "Name","Description","Enabled","Type","Priority" `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 155
			$Table.Columns.Item(2).Width = 185
			$Table.Columns.Item(3).Width = 55;
			$Table.Columns.Item(4).Width = 60;
			$Table.Columns.Item(5).Width = 45;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
		}
		ElseIf($HTML)
		{
			$columnHeaders = @(
			'Name',($global:htmlsb),
			'Description',($global:htmlsb),
			'Enabled',($global:htmlsb),
			'Type',($global:htmlsb),
			'Priority',($global:htmlsb))

			$msg = ""
			$columnWidths = @("155","185","55","60","45")
			FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "500"
		}
	}
	ElseIf($Null -eq $HDXPolicies)
	{
		$txt = "There are no Policies"
		OutputNotice $txt
	}
	Else
	{
		$txt = "Unable to retrieve Policies"
		OutputWarning $txt
	}
}

Function validStateProp( [object] $object, [string] $topLevel, [string] $secondLevel )
{
	#function created 8-jan-2014 by Michael B. Smith
	If( $object )
	{
		If((Get-Member -Name $topLevel -InputObject $object))
		{
			If((Get-Member -Name $secondLevel -InputObject $object.$topLevel))
			{
				Return $True
			}
		}
	}
	Return $False
}

Function validObject( [object] $object, [string] $topLevel )
{
	#function created 8-jan-2014 by Michael B. Smith
	If( $object )
	{
		If((Get-Member -Name $topLevel -InputObject $object))
		{
			Return $True
		}
	}
	Return $False
}

Function ProcessCitrixPolicies
{
	Param([string]$xDriveName, [string]$xPolicyType, [string] $ADGpoName = "")

	Write-Verbose "$(Get-Date -Format G): `tRetrieving all $($xPolicyType) policy names"

	$CtxPolicies = Get-CitrixGroupPolicy -Type $xPolicyType `
	-DriveName $xDriveName -EA 0 `
	| Select-Object PolicyName, Type, Description, Enabled, Priority `
	| Sort-Object Priority

	If($? -and $Null -ne $CtxPolicies)
	{
		ForEach($Policy in $CtxPolicies)
		{
			Write-Verbose "$(Get-Date -Format G): `tStarted $($Policy.PolicyName) "
			
			If($xDriveName -eq "localfarmgpo")
			{
				$Script:TotalSitePolicies++
			}
			Else
			{
				$Script:TotalADPolicies++
			}
			If($Policy.Type -eq "Computer")
			{
				$Script:TotalComputerPolicies++
			}
			Else
			{
				$Script:TotalUserPolicies++
			}
			$Script:TotalPolicies++
			
			If($MSWord -or $PDF)
			{
				$selection.InsertNewPage()
				If($xDriveName -eq "localfarmgpo")
				{
					WriteWordLine 2 0 "$($Policy.PolicyName) (Site, $($xPolicyType))"
				}
				Else
				{
					WriteWordLine 2 0 "$($Policy.PolicyName) (AD, $($xPolicyType), GPO: $($ADGpoName))"
				}
				[System.Collections.Hashtable[]] $ScriptInformation = @()
			
				$ScriptInformation += @{Data = "Description"; Value = $Policy.Description; }
				$ScriptInformation += @{Data = "Enabled"; Value = $Policy.Enabled; }
				$ScriptInformation += @{Data = "Type"; Value = $Policy.Type; }
				$ScriptInformation += @{Data = "Priority"; Value = $Policy.Priority; }
				
				$Table = AddWordTable -Hashtable $ScriptInformation `
				-Columns Data,Value `
				-List `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 90;
				$Table.Columns.Item(2).Width = 200;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
			}
			ElseIf($Text)
			{
				If($xDriveName -eq "localfarmgpo")
				{
					Line 0 "$($Policy.PolicyName) (Site, $($xPolicyType))"
				}
				Else
				{
					Line 0 "$($Policy.PolicyName) (AD, $($xPolicyType), GPO: $($ADGpoName))"
				}
				If(![String]::IsNullOrEmpty($Policy.Description))
				{
					Line 1 "Description`t: " $Policy.Description
				}
				Line 1 "Enabled`t`t: " $Policy.Enabled
				Line 1 "Type`t`t: " $Policy.Type
				Line 1 "Priority`t: " $Policy.Priority
				Line 0 ""
			}
			ElseIf($HTML)
			{
				If($xDriveName -eq "localfarmgpo")
				{
					WriteHTMLLine 2 0 "$($Policy.PolicyName) (Site, $($xPolicyType))"
				}
				Else
				{
					WriteHTMLLine 2 0 "$($Policy.PolicyName) (AD, $($xPolicyType), GPO: $($ADGpoName))"
				}
				$rowdata = @()
				$columnHeaders = @("Description",($global:htmlsb),$Policy.Description,$htmlwhite)
				$rowdata += @(,('Enabled',($global:htmlsb),$Policy.Enabled.ToString(),$htmlwhite))
				$rowdata += @(,('Type',($global:htmlsb),$Policy.Type,$htmlwhite))
				$rowdata += @(,('Priority',($global:htmlsb),$Policy.Priority,$htmlwhite))

				$msg = ""
				$columnWidths = @("90","200")
				FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "290"
			}

			Write-Verbose "$(Get-Date -Format G): `t`tRetrieving all filters"
			$filters = Get-CitrixGroupPolicyFilter -PolicyName $Policy.PolicyName `
			-Type $xPolicyType `
			-DriveName $xDriveName -EA 0 `
			| Sort-Object FilterType, FilterName -Unique

			If($? -and $Null -ne $Filters)
			{
				If(![String]::IsNullOrEmpty($filters))
				{
					Write-Verbose "$(Get-Date -Format G): `t`tProcessing all filters"
					$txt = "Assigned to"
					If($MSWord -or $PDF)
					{
						WriteWordLine 3 0 $txt
					}
					ElseIf($Text)
					{
						Line 0 $txt
					}
					ElseIf($HTML)
					{
						WriteHTMLLine 3 0 $txt
					}
					
					If($MSWord -or $PDF)
					{
						[System.Collections.Hashtable[]] $FiltersWordTable = @()
					}
					ElseIf($HTML)
					{
						$rowdata = @()
					}
					
					ForEach($Filter in $Filters)
					{
						$tmp = ""
						#5-May-2017 add back the WorkerGroup filter for xenapp 6.x
						Switch($filter.FilterType)
						{
							"AccessControl"  {$tmp = "Access Control"; Break}
							"BranchRepeater" {$tmp = "NetScaler SD-WAN"; Break}
							"ClientIP"       {$tmp = "Client IP Address"; Break}
							"ClientName"     {$tmp = "Client Name"; Break}
							"DesktopGroup"   {$tmp = "Delivery Group"; Break}
							"DesktopKind"    {$tmp = "Delivery GroupType"; Break}
							"DesktopTag"     {$tmp = "Tag"; Break}
							"OU"             {$tmp = "Organizational Unit (OU)"; Break}
							"User"           {$tmp = "User or group"; Break}
							"WorkerGroup"    {$tmp = "Worker Group"; Break}
							Default {$tmp = "Policy Filter Type could not be determined: $($filter.FilterType)"; Break}
						}
						
						If($MSWord -or $PDF)
						{
							$FiltersWordTable += @{
							Name = $filter.FilterName;
							Type= $tmp;
							Enabled = $filter.Enabled;
							Mode = $filter.Mode;
							Value = $filter.FilterValue;
							}
						}
						ElseIf($Text)
						{
							Line 2 "Name`t: " $filter.FilterName
							Line 2 "Type`t: " $tmp
							Line 2 "Enabled`t: " $filter.Enabled
							Line 2 "Mode`t: " $filter.Mode
							Line 2 "Value`t: " $filter.FilterValue
							Line 2 ""
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$filter.FilterName,$htmlwhite,
							$tmp,$htmlwhite,
							$filter.Enabled.ToString(),$htmlwhite,
							$filter.Mode,$htmlwhite,
							$filter.FilterValue,$htmlwhite))
						}
					}
					$tmp = $Null
					If($MSWord -or $PDF)
					{
						$Table = AddWordTable -Hashtable $FiltersWordTable `
						-Columns  Name,Type,Enabled,Mode,Value `
						-Headers  "Name","Type","Enabled","Mode","Value" `
						-Format $wdTableGrid `
						-AutoFit $wdAutoFitFixed;

						SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

						$Table.Columns.Item(1).Width = 115;
						$Table.Columns.Item(2).Width = 125;
						$Table.Columns.Item(3).Width = 50;
						$Table.Columns.Item(4).Width = 40;
						$Table.Columns.Item(5).Width = 170;

						$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

						FindWordDocumentEnd
						$Table = $Null
					}
					ElseIf($HTML)
					{
						$columnHeaders = @(
						'Name',($global:htmlsb),
						'Type',($global:htmlsb),
						'Enabled',($global:htmlsb),
						'Mode',($global:htmlsb),
						'Value',($global:htmlsb))

						$msg = ""
						$columnWidths = @("115","125","50","40","170")
						FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "500"
					}
				}
				Else
				{
					If($MSWord -or $PDF)
					{
						WriteWordLine 0 1 "Assigned to: None"
					}
					ElseIf($Text)
					{
						Line 1 "Assigned to`t`t: None"
					}
					ElseIf($HTML)
					{
						WriteHTMLLine 0 1 "Assigned to: None"
					}
				}
			}
			ElseIf($? -and $Null -eq $Filters)
			{
				$txt = "$($Policy.PolicyName) policy applies to all objects in the Site"
				If($MSWord -or $PDF)
				{
					WriteWordLine 3 0 "Assigned to"
					WriteWordLine 0 1 $txt
				}
				ElseIf($Text)
				{
					Line 0 "Assigned to"
					Line 1 $txt
					Line 0 ""
				}
				ElseIf($HTML)
				{
					WriteHTMLLine 3 0 "Assigned to"
					WriteHTMLLine 0 1 $txt
				}
			}
			ElseIf($? -and $Policy.PolicyName -eq "Unfiltered")
			{
				$txt = "Unfiltered policy applies to all objects in the Site"
				If($MSWord -or $PDF)
				{
					WriteWordLine 3 0 "Assigned to"
					WriteWordLine 0 1 $txt
				}
				ElseIf($Text)
				{
					Line 0 "Assigned to"
					Line 1 $txt
					Line 0 ""
				}
				ElseIf($HTML)
				{
					WriteHTMLLine 3 0 "Assigned to"
					WriteHTMLLine 0 1 $txt
				}
			}
			Else
			{
				$txt = "Unable to retrieve Filter settings"
				If($MSWord -or $PDF)
				{
					WriteWordLine 0 1 $txt
				}
				ElseIf($Text)
				{
					Line 1 $txt
				}
				ElseIf($HTML)
				{
					WriteHTMLLine 0 1 $txt
				}
			}
			
			Write-Verbose "$(Get-Date -Format G): `t`tRetrieving all policy settings"
			$Settings = Get-CitrixGroupPolicyConfiguration -PolicyName $Policy.PolicyName `
			-Type $Policy.Type `
			-DriveName $xDriveName -EA 0
				
			If($? -and $Null -ne $Settings)
			{
				If($MSWord -or $PDF)
				{
					[System.Collections.Hashtable[]] $SettingsWordTable = @();
				}
				ElseIf($HTML)
				{
					$rowdata = @()
				}
				
				$First = $True
				ForEach($Setting in $Settings)
				{
					If($First)
					{
						$txt = "Policy settings"
						If($MSWord -or $PDF)
						{
							WriteWordLine 3 0 $txt
						}
						ElseIf($Text)
						{
							Line 1 $txt
						}
						ElseIf($HTML)
						{
							WriteHTMLLine 3 0 $txt
						}
					}
					$First = $False
					
					Write-Verbose "$(Get-Date -Format G): `t`tPolicy settings"
					Write-Verbose "$(Get-Date -Format G): `t`t`tConnector for Configuration Manager 2012"
					If((validStateProp $Setting AdvanceWarningFrequency State ) -and ($Setting.AdvanceWarningFrequency.State -ne "NotConfigured"))
					{
						$txt = "Connector for Configuration Manager 2012\Advance warning frequency interval"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.AdvanceWarningFrequency.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.AdvanceWarningFrequency.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.AdvanceWarningFrequency.Value
						}
					}
					If((validStateProp $Setting AdvanceWarningMessageBody State ) -and ($Setting.AdvanceWarningMessageBody.State -ne "NotConfigured"))
					{
						$txt = "Connector for Configuration Manager 2012\Advance warning message box body text"
						$tmpArray = $Setting.AdvanceWarningMessageBody.Value.Split("`n")
						$tmp = ""
						$cnt = 0
						ForEach($Thing in $TmpArray)
						{
							If($Null -eq $Thing)
							{
								$Thing = ''
							}
							$cnt++
							$tmp = "$($Thing) "
							If($cnt -eq 1)
							{
								If($MSWord -or $PDF)
								{
									$SettingsWordTable += @{
									Text = $txt;
									Value = $tmp;
									}
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									$txt,$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting $txt $tmp
								}
							}
							Else
							{
								If($MSWord -or $PDF)
								{
									$SettingsWordTable += @{
									Text = "";
									Value = $tmp;
									}
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									"",$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting "`t`t`t`t`t`t`t`t`t      " $tmp
								}
							}
							$txt = ""
						}
						$TmpArray = $Null
						$tmp = $Null
					}
					If((validStateProp $Setting AdvanceWarningMessageTitle State ) -and ($Setting.AdvanceWarningMessageTitle.State -ne "NotConfigured"))
					{
						$txt = "Connector for Configuration Manager 2012\Advance warning message box title"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.AdvanceWarningMessageTitle.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.AdvanceWarningMessageTitle.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.AdvanceWarningMessageTitle.Value
						}
					}
					If((validStateProp $Setting AdvanceWarningPeriod State ) -and ($Setting.AdvanceWarningPeriod.State -ne "NotConfigured"))
					{
						$txt = "Connector for Configuration Manager 2012\Advance warning time period"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.AdvanceWarningPeriod.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.AdvanceWarningPeriod.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.AdvanceWarningPeriod.Value 
						}
					}
					If((validStateProp $Setting FinalForceLogoffMessageBody State ) -and ($Setting.FinalForceLogoffMessageBody.State -ne "NotConfigured"))
					{
						$txt = "Connector for Configuration Manager 2012\Final force logoff message box body text"
						$tmpArray = $Setting.FinalForceLogoffMessageBody.Value.Split("`n")
						$tmp = ""
						$cnt = 0
						ForEach($Thing in $TmpArray)
						{
							If($Null -eq $Thing)
							{
								$Thing = ''
							}
							$cnt++
							$tmp = "$($Thing) "
							If($cnt -eq 1)
							{
								If($MSWord -or $PDF)
								{
									$SettingsWordTable += @{
									Text = $txt;
									Value = $tmp;
									}
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									$txt,$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting $txt $tmp
								}
							}
							Else
							{
								If($MSWord -or $PDF)
								{
									$SettingsWordTable += @{
									Text = "";
									Value = $tmp;
									}
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									"",$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting "`t`t`t`t`t`t`t`t`t" $tmp
								}
							}
						}
						$TmpArray = $Null
						$tmp = $Null
					}
					If((validStateProp $Setting FinalForceLogoffMessageTitle State ) -and ($Setting.FinalForceLogoffMessageTitle.State -ne "NotConfigured"))
					{
						$txt = "Connector for Configuration Manager 2012\Final force logoff message box title"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.FinalForceLogoffMessageTitle.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.FinalForceLogoffMessageTitle.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.FinalForceLogoffMessageTitle.Value 
						}
					}
					If((validStateProp $Setting ForceLogoffGracePeriod State ) -and ($Setting.ForceLogoffGracePeriod.State -ne "NotConfigured"))
					{
						$txt = "Connector for Configuration Manager 2012\Force logoff grace period"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ForceLogoffGracePeriod.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ForceLogoffGracePeriod.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ForceLogoffGracePeriod.Value 
						}
					}
					If((validStateProp $Setting ForceLogoffMessageBody State ) -and ($Setting.ForceLogoffMessageBody.State -ne "NotConfigured"))
					{
						$txt = "Connector for Configuration Manager 2012\Force logoff message box body text"
						$tmpArray = $Setting.ForceLogoffMessageBody.Value.Split("`n")
						$tmp = ""
						$cnt = 0
						ForEach($Thing in $TmpArray)
						{
							If($Null -eq $Thing)
							{
								$Thing = ''
							}
							$cnt++
							$tmp = "$($Thing) "
							If($cnt -eq 1)
							{
								If($MSWord -or $PDF)
								{
									$SettingsWordTable += @{
									Text = $txt;
									Value = $tmp;
									}
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									$txt,$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting $txt $tmp
								}
							}
							Else
							{
								If($MSWord -or $PDF)
								{
									$SettingsWordTable += @{
									Text = "";
									Value = $tmp;
									}
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									"",$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting "`t`t`t`t`t`t`t`t`t   " $tmp
								}
							}
							$txt = ""
						}
						$TmpArray = $Null
						$tmp = $Null
					}
					If((validStateProp $Setting ForceLogoffMessageTitle State ) -and ($Setting.ForceLogoffMessageTitle.State -ne "NotConfigured"))
					{
						$txt = "Connector for Configuration Manager 2012\Force logoff message box title"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ForceLogoffMessageTitle.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ForceLogoffMessageTitle.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ForceLogoffMessageTitle.Value 
						}
					}
					If((validStateProp $Setting ImageProviderIntegrationEnabled State ) -and ($Setting.ImageProviderIntegrationEnabled.State -ne "NotConfigured"))
					{
						$txt = "Connector for Configuration Manager 2012\Image-managed mode"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ImageProviderIntegrationEnabled.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ImageProviderIntegrationEnabled.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ImageProviderIntegrationEnabled.State 
						}
					}
					If((validStateProp $Setting RebootMessageBody State ) -and ($Setting.RebootMessageBody.State -ne "NotConfigured"))
					{
						$txt = "Connector for Configuration Manager 2012\Reboot message box body text"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.RebootMessageBody.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.RebootMessageBody.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.RebootMessageBody.Value 
						}
					}
					If((validStateProp $Setting AgentTaskInterval State ) -and ($Setting.AgentTaskInterval.State -ne "NotConfigured"))
					{
						$txt = "Connector for Configuration Manager 2012\Regular time interval at which the agent task is to run"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.AgentTaskInterval.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.AgentTaskInterval.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.AgentTaskInterval.Value 
						}
					}
					
					Write-Verbose "$(Get-Date -Format G): `t`t`tICA"
					If((validStateProp $Setting ApplicationLaunchWaitTimeout State ) -and ($Setting.ApplicationLaunchWaitTimeout.State -ne "NotConfigured"))
					{
						$txt = "ICA\Application Launch Wait Timeout (milliseconds)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ApplicationLaunchWaitTimeout.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ApplicationLaunchWaitTimeout.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ApplicationLaunchWaitTimeout.Value
						}
					}
					If((validStateProp $Setting ClipboardRedirection State ) -and ($Setting.ClipboardRedirection.State -ne "NotConfigured"))
					{
						$txt = "ICA\Client clipboard redirection"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ClipboardRedirection.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ClipboardRedirection.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ClipboardRedirection.State 
						}
					}
					If((validStateProp $Setting ClientClipboardWriteAllowedFormats State ) -and ($Setting.ClientClipboardWriteAllowedFormats.State -ne "NotConfigured"))
					{
						$txt = "ICA\Client clipboard write allowed formats"
						If(validStateProp $Setting ClientClipboardWriteAllowedFormats Values )
						{
							$tmpArray = $Setting.ClientClipboardWriteAllowedFormats.Values
							$tmp = ""
							$cnt = 0
							ForEach($Thing in $TmpArray)
							{
								If($Null -eq $Thing)
								{
									$Thing = ''
								}
								$cnt++
								$tmp = "$($Thing) "
								If($cnt -eq 1)
								{
									If($MSWord -or $PDF)
									{
										$SettingsWordTable += @{
										Text = $txt;
										Value = $tmp;
										}
									}
									ElseIf($HTML)
									{
										$rowdata += @(,(
										$txt,$htmlbold,
										$tmp,$htmlwhite))
									}
									ElseIf($Text)
									{
										OutputPolicySetting $txt $tmp
									}
								}
								Else
								{
									If($MSWord -or $PDF)
									{
										$SettingsWordTable += @{
										Text = "";
										Value = $tmp;
										}
									}
									ElseIf($HTML)
									{
										$rowdata += @(,(
										"",$htmlbold,
										$tmp,$htmlwhite))
									}
									ElseIf($Text)
									{
										OutputPolicySetting "`t`t`t`t`t  " $tmp
									}
								}
								$txt = ""
							}
							$TmpArray = $Null
							$tmp = $Null
						}
						Else
						{
							$tmp = "No Client clipboard write allowed formats were found"
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $tmp;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$tmp,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $tmp
							}
						}
					}
					If((validStateProp $Setting ClipboardSelectionUpdateMode State ) -and ($Setting.ClipboardSelectionUpdateMode.State -ne "NotConfigured"))
					{
						$txt = "ICA\Clipboard selection update mode"
						$tmp = ""
						Switch ($Setting.ClipboardSelectionUpdateMode.Value)
						{
							"AllUpdatesAllowed"		{$tmp = "Selection changes are updated on both client and host"; Break}
							"AllUpdatesDenied"		{$tmp = "Select changes are not updated on neither client nor host"; Break}
							"UpdateToClientDenied"	{$tmp = "Host selection changes are not updated to client"; Break}
							"UpdateToHostDenied"	{$tmp = "Client selection changes are not updated to host"; Break}
							Default					{$tmp = "Clipboard selection update mode: $($Setting.ClipboardSelectionUpdateMode.Value)"; Break}
						}
						
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
						$tmp = $Null
					}
					If((validStateProp $Setting DesktopLaunchForNonAdmins State ) -and ($Setting.DesktopLaunchForNonAdmins.State -ne "NotConfigured"))
					{
						$txt = "ICA\Desktop launches"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.DesktopLaunchForNonAdmins.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.DesktopLaunchForNonAdmins.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.DesktopLaunchForNonAdmins.State 
						}
					}
					If((validStateProp $Setting HDXEnlightenedDataTransport State ) -and ($Setting.HDXEnlightenedDataTransport.State -ne "NotConfigured"))
					{
						#7.12
						$txt = "ICA\HDX Enlightened Data Transport (For Evaluation Only)"
						$tmp = ""
						Switch ($Setting.HDXEnlightenedDataTransport.Value)
						{
							"DiagnosticMode"	{$tmp = "Diagnostic mode"; Break}
							"Off"				{$tmp = "Off"; Break}
							"Preferred"			{$tmp = "Preferred"; Break}
							Default				{$tmp = "HDX Enlightened Data Transport: $($Setting.HDXEnlightenedDataTransport.Value)"; Break}
						}
						
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
						$tmp = $Null
					}
					If((validStateProp $Setting HDXAdaptiveTransport State ) -and ($Setting.HDXAdaptiveTransport.State -ne "NotConfigured"))
					{
						#7.13
						$txt = "ICA\HDX Adaptive Transport"
						$tmp = ""
						Switch ($Setting.HDXAdaptiveTransport.Value)
						{
							"DiagnosticMode"	{$tmp = "Diagnostic mode"; Break}
							"Off"				{$tmp = "Off"; Break}
							"Preferred"			{$tmp = "Preferred"; Break}
							Default				{$tmp = "HDX Adaptive Transport: $($Setting.HDXAdaptiveTransport.Value)"; Break}
						}
						
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
						$tmp = $Null
					}
					If((validStateProp $Setting IcaListenerTimeout State ) -and ($Setting.IcaListenerTimeout.State -ne "NotConfigured"))
					{
						$txt = "ICA\ICA listener connection timeout (milliseconds)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.IcaListenerTimeout.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.IcaListenerTimeout.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.IcaListenerTimeout.Value 
						}
					}
					If((validStateProp $Setting IcaListenerPortNumber State ) -and ($Setting.IcaListenerPortNumber.State -ne "NotConfigured"))
					{
						$txt = "ICA\ICA listener port number"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.IcaListenerPortNumber.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.IcaListenerPortNumber.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.IcaListenerPortNumber.Value 
						}
					}
					If((validStateProp $Setting NonPublishedProgramLaunching State ) -and ($Setting.NonPublishedProgramLaunching.State -ne "NotConfigured"))
					{
						$txt = "ICA\Launching of non-published programs during client connection"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.NonPublishedProgramLaunching.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.NonPublishedProgramLaunching.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.NonPublishedProgramLaunching.State
						}
					}
					If((validStateProp $Setting LogoffCheckerStartupDelay State ) -and ($Setting.LogoffCheckerStartupDelay.State -ne "NotConfigured"))
					{
						$txt = "ICA\Logoff Checker Startup Delay (seconds)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.LogoffCheckerStartupDelay.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.LogoffCheckerStartupDelay.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.LogoffCheckerStartupDelay.Value 
						}
					}
					If((validStateProp $Setting LossTolerantModeAvailable State ) -and ($Setting.LossTolerantModeAvailable.State -ne "NotConfigured"))
					{
						#added in V2.33 for CVAD 2003
						$txt = "ICA\Loss Tolerant Mode"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.LossTolerantModeAvailable.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.LossTolerantModeAvailable.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.LossTolerantModeAvailable.State
						}
					}
					If((validStateProp $Setting PrimarySelectionUpdateMode State ) -and ($Setting.PrimarySelectionUpdateMode.State -ne "NotConfigured"))
					{
						$txt = "ICA\Primary selection update mode"
						$tmp = ""
						Switch ($Setting.PrimarySelectionUpdateMode.Value)
						{
							"AllUpdatesAllowed"		{$tmp = "Selection changes are updated on both client and host"; Break}
							"AllUpdatesDenied"		{$tmp = "Select changes are not updated on neither client nor host"; Break}
							"UpdateToClientDenied"	{$tmp = "Host selection changes are not updated to client"; Break}
							"UpdateToHostDenied"	{$tmp = "Client selection changes are not updated to host"; Break}
							Default					{$tmp = "Primary selection update mode: $($Setting.PrimarySelectionUpdateMode.Value)"; Break}
						}
						
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
						$tmp = $Null
					}
					If((validStateProp $Setting ReadonlyClipboard State ) -and ($Setting.ReadonlyClipboard.State -ne "NotConfigured"))
					{
						$txt = "ICA\Readonly Clipboard"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ReadonlyClipboard.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ReadonlyClipboard.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ReadonlyClipboard.State 
						}
					}
					If((validStateProp $Setting RendezvousProtocol State ) -and ($Setting.RendezvousProtocol.State -ne "NotConfigured"))
					{
						#new in 7.18
						$txt = "ICA\Rendezvous Protocol"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.RendezvousProtocol.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.RendezvousProtocol.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.RendezvousProtocol.State 
						}
					}
					If((validStateProp $Setting RestrictClientClipboardWrite State ) -and ($Setting.RestrictClientClipboardWrite.State -ne "NotConfigured"))
					{
						$txt = "ICA\Restrict client clipboard write"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.RestrictClientClipboardWrite.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.RestrictClientClipboardWrite.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.RestrictClientClipboardWrite.State
						}
					}
					If((validStateProp $Setting RestrictSessionClipboardWrite State ) -and ($Setting.RestrictSessionClipboardWrite.State -ne "NotConfigured"))
					{
						$txt = "ICA\Restrict session clipboard write"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.RestrictSessionClipboardWrite.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.RestrictSessionClipboardWrite.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.RestrictSessionClipboardWrite.State 
						}
					}
					If((validStateProp $Setting SessionClipboardWriteAllowedFormats State ) -and ($Setting.SessionClipboardWriteAllowedFormats.State -ne "NotConfigured"))
					{
						$txt = "ICA\Session clipboard write allowed formats"
						If(validStateProp $Setting SessionClipboardWriteAllowedFormats Values )
						{
							$tmpArray = $Setting.SessionClipboardWriteAllowedFormats.Values
							$tmp = ""
							$cnt = 0
							ForEach($Thing in $TmpArray)
							{
								If($Null -eq $Thing)
								{
									$Thing = ''
								}
								$cnt++
								$tmp = "$($Thing) "
								If($cnt -eq 1)
								{
									If($MSWord -or $PDF)
									{
										$SettingsWordTable += @{
										Text = $txt;
										Value = $tmp;
										}
									}
									ElseIf($HTML)
									{
										$rowdata += @(,(
										$txt,$htmlbold,
										$tmp,$htmlwhite))
									}
									ElseIf($Text)
									{
										OutputPolicySetting $txt $tmp
									}
								}
								Else
								{
									If($MSWord -or $PDF)
									{
										$SettingsWordTable += @{
										Text = "";
										Value = $tmp;
										}
									}
									ElseIf($HTML)
									{
										$rowdata += @(,(
										"",$htmlbold,
										$tmp,$htmlwhite))
									}
									ElseIf($Text)
									{
										OutputPolicySetting "`t`t`t`t`t   " $tmp
									}
								}
								$txt = ""
							}
							$TmpArray = $Null
							$tmp = $Null
						}
						Else
						{
							$tmp = "No Session clipboard write allowed formats were found"
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $tmp;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$tmp,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $tmp
							}
						}
					}
					If((validStateProp $Setting VirtualChannelWhiteList State ) -and ($Setting.VirtualChannelWhiteList.State -ne "NotConfigured"))
					{
						#V2.34
						#CVAD 2006
						$txt = "ICA\Virtual channel allow list"
						If(validStateProp $Setting VirtualChannelWhiteList Values )
						{
							$tmpArray = $Setting.VirtualChannelWhiteList.Values
							$tmp = ""
							$cnt = 0
							ForEach($Thing in $TmpArray)
							{
								If($Null -eq $Thing)
								{
									$Thing = ''
								}
								$cnt++
								$tmp = "$($Thing) "
								If($cnt -eq 1)
								{
									If($MSWord -or $PDF)
									{
										$SettingsWordTable += @{
										Text = $txt;
										Value = $tmp;
										}
									}
									ElseIf($HTML)
									{
										$rowdata += @(,(
										$txt,$htmlbold,
										$tmp,$htmlwhite))
									}
									ElseIf($Text)
									{
										OutputPolicySetting $txt $tmp
									}
								}
								Else
								{
									If($MSWord -or $PDF)
									{
										$SettingsWordTable += @{
										Text = "";
										Value = $tmp;
										}
									}
									ElseIf($HTML)
									{
										$rowdata += @(,(
										"",$htmlbold,
										$tmp,$htmlwhite))
									}
									ElseIf($Text)
									{
										OutputPolicySetting "`t`t`t      " $tmp
									}
								}
								$txt = ""
							}
							$TmpArray = $Null
							$tmp = $Null
						}
					}
					
					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Adobe Flash Delivery\Flash Redirection"
					If((validStateProp $Setting FlashAcceleration State ) -and ($Setting.FlashAcceleration.State -ne "NotConfigured"))
					{
						$txt = "ICA\Adobe Flash Delivery\Flash Redirection\Flash acceleration"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.FlashAcceleration.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.FlashAcceleration.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.FlashAcceleration.State 
						}
					}
					If((validStateProp $Setting FlashUrlColorList State ) -and ($Setting.FlashUrlColorList.State -ne "NotConfigured"))
					{
						$txt = "ICA\Adobe Flash Delivery\Flash Redirection\Flash background color list"
						If(validStateProp $Setting FlashUrlColorList Values )
						{
							$Values = $Setting.FlashUrlColorList.Values
							$tmp = ""
							$cnt = 0
							ForEach($Value in $Values)
							{
								If($Null -eq $Value)
								{
									$Value = ''
								}
								$cnt++
								$tmp = "$($Value)"
								If($cnt -eq 1)
								{
									If($MSWord -or $PDF)
									{
										$SettingsWordTable += @{
										Text = $txt;
										Value = $tmp;
										}
									}
									ElseIf($HTML)
									{
										$rowdata += @(,(
										$txt,$htmlbold,
										$tmp,$htmlwhite))
									}
									ElseIf($Text)
									{
										OutputPolicySetting $txt $tmp 
									}
								}
								Else
								{
									If($MSWord -or $PDF)
									{
										$SettingsWordTable += @{
										Text = "";
										Value = $tmp;
										}
									}
									ElseIf($HTML)
									{
										$rowdata += @(,(
										"",$htmlbold,
										$tmp,$htmlwhite))
									}
									ElseIf($Text)
									{
										OutputPolicySetting "`t`t`t`t`t`t" $tmp
									}
								}
							}
							$tmp = $Null
							$Values = $Null
						}
						Else
						{
							$tmp = "No Flash background color list were found"
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $tmp;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$tmp,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $tmp 
							}
						}
					}
					If((validStateProp $Setting FlashBackwardsCompatibility State ) -and ($Setting.FlashBackwardsCompatibility.State -ne "NotConfigured"))
					{
						$txt = "ICA\Adobe Flash Delivery\Flash Redirection\Flash backwards compatibility"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.FlashBackwardsCompatibility.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.FlashBackwardsCompatibility.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.FlashBackwardsCompatibility.State 
						}
					}
					If((validStateProp $Setting FlashDefaultBehavior State ) -and ($Setting.FlashDefaultBehavior.State -ne "NotConfigured"))
					{
						$txt = "ICA\Adobe Flash Delivery\Flash Redirection\Flash default behavior"
						$tmp = ""
						Switch ($Setting.FlashDefaultBehavior.Value)
						{
							"Block"		{$tmp = "Block Flash player"; Break}
							"Disable"	{$tmp = "Disable Flash acceleration"; Break}
							"Enable"	{$tmp = "Enable Flash acceleration"; Break}
							Default		{$tmp = "Flash Default behavior could not be determined: $($Setting.FlashDefaultBehavior.Value)"; Break}
						}
						
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
						$tmp = $Null
					}
					If((validStateProp $Setting FlashEventLogging State ) -and ($Setting.FlashEventLogging.State -ne "NotConfigured"))
					{
						$txt = "ICA\Adobe Flash Delivery\Flash Redirection\Flash event logging"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.FlashEventLogging.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.FlashEventLogging.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.FlashEventLogging.State 
						}
					}
					If((validStateProp $Setting FlashIntelligentFallback State ) -and ($Setting.FlashIntelligentFallback.State -ne "NotConfigured"))
					{
						$txt = "ICA\Adobe Flash Delivery\Flash Redirection\Flash intelligent fallback"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.FlashIntelligentFallback.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.FlashIntelligentFallback.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.FlashIntelligentFallback.State 
						}
					}
					If((validStateProp $Setting FlashLatencyThreshold State ) -and ($Setting.FlashLatencyThreshold.State -ne "NotConfigured"))
					{
						$txt = "ICA\Adobe Flash Delivery\Flash Redirection\Flash latency threshold (milliseconds)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.FlashLatencyThreshold.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.FlashLatencyThreshold.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.FlashLatencyThreshold.Value 
						}
					}
					If((validStateProp $Setting FlashServerSideContentFetchingWhitelist State ) -and ($Setting.FlashServerSideContentFetchingWhitelist.State -ne "NotConfigured"))
					{
						$txt = "ICA\Adobe Flash Delivery\Flash Redirection\Flash server-side content fetching URL list"
						If(validStateProp $Setting FlashServerSideContentFetchingWhitelist Values )
						{
							$Values = $Setting.FlashServerSideContentFetchingWhitelist.Values
							$tmp = ""
							$cnt = 0
							ForEach($Value in $Values)
							{
								If($Null -eq $Value)
								{
									$Value = ''
								}
								$cnt++
								$tmp = "$($Value)"
								If($cnt -eq 1)
								{
									If($MSWord -or $PDF)
									{
										$SettingsWordTable += @{
										Text = $txt;
										Value = $tmp;
										}
									}
									ElseIf($HTML)
									{
										$rowdata += @(,(
										$txt,$htmlbold,
										$tmp,$htmlwhite))
									}
									ElseIf($Text)
									{
										OutputPolicySetting $txt $tmp 
									}
								}
								Else
								{
									If($MSWord -or $PDF)
									{
										$SettingsWordTable += @{
										Text = "";
										Value = $tmp;
										}
									}
									ElseIf($HTML)
									{
										$rowdata += @(,(
										"",$htmlbold,
										$tmp,$htmlwhite))
									}
									ElseIf($Text)
									{
										OutputPolicySetting "`t`t`t`t`t`t" $tmp
									}
								}
							}
							$tmp = $Null
							$Values = $Null
						}
						Else
						{
							$tmp = "No Flash server-side content fetching URL list were found"
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $tmp;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$tmp,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $tmp 
							}
						}
					}
					If((validStateProp $Setting FlashUrlCompatibilityList State ) -and ($Setting.FlashUrlCompatibilityList.State -ne "NotConfigured"))
					{
						$txt = "ICA\Adobe Flash Delivery\Flash Redirection\Flash URL compatibility list"
						If(validStateProp $Setting FlashUrlCompatibilityList Values )
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = "";
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								"",$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt
							}
							$Values = $Setting.FlashUrlCompatibilityList.Values
							$tmp = ""
							ForEach($Value in $Values)
							{
								$Items = $Value.Split(' ')
								$Action = $Items[0]
								If($Action -eq "CLIENT")
								{
									$Action = "Render On Client"
								}
								ElseIf($Action -eq "SERVER")
								{
									$Action = "Render On Server"
								}
								ElseIf($Action -eq "BLOCK")
								{
									$Action = "BLOCK           "
								}
								$Url = $Items[1]
								If($Items.Count -eq 3)
								{
									$FlashInstance = $Items[2]
								}
								Else
								{
									$FlashInstance = "Any"
								}
								$tmp = "Action: $($Action)"
								If($MSWord -or $PDF)
								{
									$SettingsWordTable += @{
									Text = "";
									Value = $tmp;
									}
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									"",$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting "`t`t`t`t`t`t" $tmp
								}
								$tmp = "URL Pattern: $($Url)"
								If($MSWord -or $PDF)
								{
									$SettingsWordTable += @{
									Text = "";
									Value = $tmp;
									}
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									"",$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting "`t`t`t`t`t`t" $tmp
								}
								$tmp = "Flash Instance: $($FlashInstance)"
								If($MSWord -or $PDF)
								{
									$SettingsWordTable += @{
									Text = "";
									Value = $tmp;
									}
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									"",$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting "`t`t`t`t`t`t" $tmp
								}
							}
							$Values = $Null
							$Action = $Null
							$Url = $Null
							$FlashInstance = $Null
							$tmp = $Null
						}
						Else
						{
							$tmp = "No Flash URL compatibility list were found"
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $tmp;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$tmp,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $tmp
							}
						}
					}
					If((validStateProp $Setting HDXFlashLoadManagement State ) -and ($Setting.HDXFlashLoadManagement.State -ne "NotConfigured"))
					{
						$txt = "ICA\Adobe Flash Delivery\Flash Redirection\Flash video fallback prevention"
						$tmp = ""
						Switch ($Setting.HDXFlashLoadManagement.Value)
						{
							"Small"						{$tmp = "Only small content"; Break}
							"SmallContentWRedirection"	{$tmp = "Only small content with a supported client"; Break}
							"NoServerSide"				{$tmp = "No server side content"; Break}
							"Unconfigured"				{$tmp = "Not Configured"; Break}
							Default 					{$tmp = "Flash video fallback prevention could not be determined: $($Setting.HDXFlashLoadManagement.Value)"; Break}
						}
						
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
						$tmp = $Null
					}
					If((validStateProp $Setting HDXFlashLoadManagementErrorSwf State ) -and ($Setting.HDXFlashLoadManagementErrorSwf.State -ne "NotConfigured"))
					{
						$txt = "ICA\Adobe Flash Delivery\Flash Redirection\Flash video fallback prevention error *.swf"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.HDXFlashLoadManagementErrorSwf.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.HDXFlashLoadManagementErrorSwf.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.HDXFlashLoadManagementErrorSwf.Value 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Audio"
					If((validStateProp $Setting EnableAdaptiveAudio State ) -and ($Setting.EnableAdaptiveAudio.State -ne "NotConfigured"))
					{
						#new in CVAD 2109
						$txt = "ICA\Audio\Adaptive audio"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.EnableAdaptiveAudio.State;
							}
						}
						If($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.EnableAdaptiveAudio.State,$htmlwhite))
						}
						If($Text)
						{
							OutputPolicySetting $txt $Setting.EnableAdaptiveAudio.State 
						}
					}
					If((validStateProp $Setting AllowRtpAudio State ) -and ($Setting.AllowRtpAudio.State -ne "NotConfigured"))
					{
						$txt = "ICA\Audio\Audio over UDP real-time transport"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.AllowRtpAudio.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.AllowRtpAudio.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.AllowRtpAudio.State 
						}
					}
					If((validStateProp $Setting AudioPlugNPlay State ) -and ($Setting.AudioPlugNPlay.State -ne "NotConfigured"))
					{
						$txt = "ICA\Audio\Audio Plug N Play"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.AudioPlugNPlay.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.AudioPlugNPlay.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.AudioPlugNPlay.State 
						}
					}
					If((validStateProp $Setting AudioQuality State ) -and ($Setting.AudioQuality.State -ne "NotConfigured"))
					{
						$txt = "ICA\Audio\Audio quality"
						$tmp = ""
						Switch ($Setting.AudioQuality.Value)
						{
							"Low"		{$tmp = "Low - for low-speed connections"; Break}
							"Medium"	{$tmp = "Medium - optimized for speech"; Break}
							"High"		{$tmp = "High - high definition audio"; Break}
							Default		{$tmp = "Audio quality could not be determined: $($Setting.AudioQuality.Value)"; Break}
						}
						
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
						$tmp = $Null
					}
					If((validStateProp $Setting ClientAudioRedirection State ) -and ($Setting.ClientAudioRedirection.State -ne "NotConfigured"))
					{
						$txt = "ICA\Audio\Client audio redirection"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ClientAudioRedirection.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ClientAudioRedirection.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ClientAudioRedirection.State 
						}
					}
					If((validStateProp $Setting MicrophoneRedirection State ) -and ($Setting.MicrophoneRedirection.State -ne "NotConfigured"))
					{
						$txt = "ICA\Audio\Client microphone redirection"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.MicrophoneRedirection.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.MicrophoneRedirection.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.MicrophoneRedirection.State 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Auto Client Reconnect"
					If((validStateProp $Setting AutoClientReconnect State ) -and ($Setting.AutoClientReconnect.State -ne "NotConfigured"))
					{
						$txt = "ICA\Auto Client Reconnect\Auto client reconnect"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.AutoClientReconnect.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.AutoClientReconnect.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.AutoClientReconnect.State 
						}
					}
					If((validStateProp $Setting AutoClientReconnectAuthenticationRequired  State ) -and ($Setting.AutoClientReconnectAuthenticationRequired.State -ne "NotConfigured"))
					{
						$txt = "ICA\Auto Client Reconnect\Auto client reconnect authentication"
						$tmp = ""
						Switch ($Setting.AutoClientReconnectAuthenticationRequired.Value)
						{
							"DoNotRequireAuthentication"	{$tmp = "Do not require authentication"; Break}
							"RequireAuthentication"			{$tmp = "Require authentication"; Break}
							Default							{$tmp = "Auto client reconnect authentication could not be determined: $($Setting.AutoClientReconnectAuthenticationRequired.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
						$tmp = $Null
					}
					If((validStateProp $Setting AutoClientReconnectLogging State ) -and ($Setting.AutoClientReconnectLogging.State -ne "NotConfigured"))
					{
						$txt = "ICA\Auto Client Reconnect\Auto client reconnect logging"
						$tmp = ""
						Switch ($Setting.AutoClientReconnectLogging.Value)
						{
							"DoNotLogAutoReconnectEvents"	{$tmp = "Do Not Log auto-reconnect events"; Break}
							"LogAutoReconnectEvents"		{$tmp = "Log auto-reconnect events"; Break}
							Default							{$tmp = "Auto client reconnect logging could not be determined: $($Setting.AutoClientReconnectLogging.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
						$tmp = $Null
					}
					If((validStateProp $Setting ACRTimeout State ) -and ($Setting.ACRTimeout.State -ne "NotConfigured"))
					{
						$txt = "ICA\Auto Client Reconnect\Auto client reconnect timeout (seconds)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ACRTimeout.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ACRTimeout.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ACRTimeout.Value 
						}
					}
					If((validStateProp $Setting ReconnectionUiTransparencyLevel State ) -and ($Setting.ReconnectionUiTransparencyLevel.State -ne "NotConfigured"))
					{
						$txt = "ICA\Auto Client Reconnect\Reconnection UI transparency level (%)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ReconnectionUiTransparencyLevel.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ReconnectionUiTransparencyLevel.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ReconnectionUiTransparencyLevel.Value 
						}
					}
					
					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Bandwidth"
					If((validStateProp $Setting AudioBandwidthLimit State ) -and ($Setting.AudioBandwidthLimit.State -ne "NotConfigured"))
					{
						$txt = "ICA\Bandwidth\Audio redirection bandwidth limit (Kbps)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.AudioBandwidthLimit.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.AudioBandwidthLimit.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.AudioBandwidthLimit.Value 
						}
					}
					If((validStateProp $Setting AudioBandwidthPercent State ) -and ($Setting.AudioBandwidthPercent.State -ne "NotConfigured"))
					{
						$txt = "ICA\Bandwidth\Audio redirection bandwidth limit %"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.AudioBandwidthPercent.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.AudioBandwidthPercent.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.AudioBandwidthPercent.Value 
						}
					}
					If((validStateProp $Setting USBBandwidthLimit State ) -and ($Setting.USBBandwidthLimit.State -ne "NotConfigured"))
					{
						$txt = "ICA\Bandwidth\Client USB device redirection bandwidth limit (Kbps)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.USBBandwidthLimit.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.USBBandwidthLimit.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.USBBandwidthLimit.Value 
						}
					}
					If((validStateProp $Setting USBBandwidthPercent State ) -and ($Setting.USBBandwidthPercent.State -ne "NotConfigured"))
					{
						$txt = "ICA\Bandwidth\Client USB device redirection bandwidth limit %"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.USBBandwidthPercent.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.USBBandwidthPercent.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.USBBandwidthPercent.Value 
						}
					}
					If((validStateProp $Setting ClipboardBandwidthLimit State ) -and ($Setting.ClipboardBandwidthLimit.State -ne "NotConfigured"))
					{
						$txt = "ICA\Bandwidth\Clipboard redirection bandwidth limit (Kbps)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ClipboardBandwidthLimit.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ClipboardBandwidthLimit.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ClipboardBandwidthLimit.Value 
						}
					}
					If((validStateProp $Setting ClipboardBandwidthPercent State ) -and ($Setting.ClipboardBandwidthPercent.State -ne "NotConfigured"))
					{
						$txt = "ICA\Bandwidth\Clipboard redirection bandwidth limit %"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ClipboardBandwidthPercent.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ClipboardBandwidthPercent.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ClipboardBandwidthPercent.Value 
						}
					}
					If((validStateProp $Setting ComPortBandwidthLimit State ) -and ($Setting.ComPortBandwidthLimit.State -ne "NotConfigured"))
					{
						$txt = "ICA\Bandwidth\COM port redirection bandwidth limit (Kbps)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ComPortBandwidthLimit.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ComPortBandwidthLimit.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ComPortBandwidthLimit.Value 
						}
					}
					If((validStateProp $Setting ComPortBandwidthPercent State ) -and ($Setting.ComPortBandwidthPercent.State -ne "NotConfigured"))
					{
						$txt = "ICA\Bandwidth\COM port redirection bandwidth limit %"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ComPortBandwidthPercent.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ComPortBandwidthPercent.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ComPortBandwidthPercent.Value 
						}
					}
					If((validStateProp $Setting FileRedirectionBandwidthLimit State ) -and ($Setting.FileRedirectionBandwidthLimit.State -ne "NotConfigured"))
					{
						$txt = "ICA\Bandwidth\File redirection bandwidth limit (Kbps)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.FileRedirectionBandwidthLimit.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.FileRedirectionBandwidthLimit.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.FileRedirectionBandwidthLimit.Value 
						}
					}
					If((validStateProp $Setting FileRedirectionBandwidthPercent State ) -and ($Setting.FileRedirectionBandwidthPercent.State -ne "NotConfigured"))
					{
						$txt = "ICA\Bandwidth\File redirection bandwidth limit %"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.FileRedirectionBandwidthPercent.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.FileRedirectionBandwidthPercent.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.FileRedirectionBandwidthPercent.Value 
						}
					}
					If((validStateProp $Setting HDXMultimediaBandwidthLimit State ) -and ($Setting.HDXMultimediaBandwidthLimit.State -ne "NotConfigured"))
					{
						$txt = "ICA\Bandwidth\HDX MediaStream Multimedia Acceleration bandwidth limit (Kbps)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.HDXMultimediaBandwidthLimit.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.HDXMultimediaBandwidthLimit.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.HDXMultimediaBandwidthLimit.Value 
						}
					}
					If((validStateProp $Setting HDXMultimediaBandwidthPercent State ) -and ($Setting.HDXMultimediaBandwidthPercent.State -ne "NotConfigured"))
					{
						$txt = "ICA\Bandwidth\HDX MediaStream Multimedia Acceleration bandwidth limit %"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.HDXMultimediaBandwidthPercent.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.HDXMultimediaBandwidthPercent.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.HDXMultimediaBandwidthPercent.Value 
						}
					}
					If((validStateProp $Setting LptBandwidthLimit State ) -and ($Setting.LptBandwidthLimit.State -ne "NotConfigured"))
					{
						$txt = "ICA\Bandwidth\LPT port redirection bandwidth limit (Kbps)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.LptBandwidthLimit.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.LptBandwidthLimit.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.LptBandwidthLimit.Value 
						}
					}
					If((validStateProp $Setting LptBandwidthLimitPercent State ) -and ($Setting.LptBandwidthLimitPercent.State -ne "NotConfigured"))
					{
						$txt = "ICA\Bandwidth\LPT port redirection bandwidth limit %"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.LptBandwidthLimitPercent.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.LptBandwidthLimitPercent.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.LptBandwidthLimitPercent.Value 
						}
					}
					If((validStateProp $Setting OverallBandwidthLimit State ) -and ($Setting.OverallBandwidthLimit.State -ne "NotConfigured"))
					{
						$txt = "ICA\Bandwidth\Overall session bandwidth limit (Kbps)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.OverallBandwidthLimit.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.OverallBandwidthLimit.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.OverallBandwidthLimit.Value 
						}
					}
					If((validStateProp $Setting PrinterBandwidthLimit State ) -and ($Setting.PrinterBandwidthLimit.State -ne "NotConfigured"))
					{
						$txt = "ICA\Bandwidth\Printer redirection bandwidth limit (Kbps)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.PrinterBandwidthLimit.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.PrinterBandwidthLimit.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.PrinterBandwidthLimit.Value 
						}
					}
					If((validStateProp $Setting PrinterBandwidthPercent State ) -and ($Setting.PrinterBandwidthPercent.State -ne "NotConfigured"))
					{
						$txt = "ICA\Bandwidth\Printer redirection bandwidth limit %"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.PrinterBandwidthPercent.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.PrinterBandwidthPercent.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.PrinterBandwidthPercent.Value 
						}
					}
					If((validStateProp $Setting TwainBandwidthLimit State ) -and ($Setting.TwainBandwidthLimit.State -ne "NotConfigured"))
					{
						$txt = "ICA\Bandwidth\TWAIN device redirection bandwidth limit (Kbps)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.TwainBandwidthLimit.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.TwainBandwidthLimit.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.TwainBandwidthLimit.Value 
						}
					}
					If((validStateProp $Setting TwainBandwidthPercent State ) -and ($Setting.TwainBandwidthPercent.State -ne "NotConfigured"))
					{
						$txt = "ICA\Bandwidth\TWAIN device redirection bandwidth limit %"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.TwainBandwidthPercent.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.TwainBandwidthPercent.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.TwainBandwidthPercent.Value 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Client Sensors\Location"
					If((validStateProp $Setting AllowLocationServices State ) -and ($Setting.AllowLocationServices.State -ne "NotConfigured"))
					{
						$txt = "ICA\Client Sensors\Location\Allow applications to use the physical location of the client device"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.AllowLocationServices.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.AllowLocationServices.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.AllowLocationServices.State 
						}
					}
					
					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Desktop UI"
					If((validStateProp $Setting AeroRedirection State ) -and ($Setting.AeroRedirection.State -ne "NotConfigured"))
					{
						$txt = "ICA\Desktop UI\Aero Redirection"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.AeroRedirection.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.AeroRedirection.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.AeroRedirection.State 
						}
					}
					If((validStateProp $Setting GraphicsQuality State ) -and ($Setting.GraphicsQuality.State -ne "NotConfigured"))
					{
						$txt = "ICA\Desktop UI\Desktop Composition graphics quality"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.GraphicsQuality.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.GraphicsQuality.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.GraphicsQuality.Value 
						}
					}
					If((validStateProp $Setting AeroRedirection State ) -and ($Setting.AeroRedirection.State -ne "NotConfigured"))
					{
						$txt = "ICA\Desktop UI\Desktop Composition Redirection"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.AeroRedirection.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.AeroRedirection.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.AeroRedirection.State 
						}
					}
					If((validStateProp $Setting DesktopWallpaper State ) -and ($Setting.DesktopWallpaper.State -ne "NotConfigured"))
					{
						$txt = "ICA\Desktop UI\Desktop wallpaper"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.DesktopWallpaper.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.DesktopWallpaper.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.DesktopWallpaper.State 
						}
					}
					If((validStateProp $Setting MenuAnimation State ) -and ($Setting.MenuAnimation.State -ne "NotConfigured"))
					{
						$txt = "ICA\Desktop UI\Menu animation"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.MenuAnimation.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.MenuAnimation.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.MenuAnimation.State 
						}
					}
					If((validStateProp $Setting WindowContentsVisibleWhileDragging State ) -and ($Setting.WindowContentsVisibleWhileDragging.State -ne "NotConfigured"))
					{
						$txt = "ICA\Desktop UI\View window contents while dragging"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.WindowContentsVisibleWhileDragging.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.WindowContentsVisibleWhileDragging.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.WindowContentsVisibleWhileDragging.State 
						}
					}
			
					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\End User Monitoring"
					If((validStateProp $Setting IcaRoundTripCalculation State ) -and ($Setting.IcaRoundTripCalculation.State -ne "NotConfigured"))
					{
						$txt = "ICA\End User Monitoring\ICA round trip calculation"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.IcaRoundTripCalculation.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.IcaRoundTripCalculation.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.IcaRoundTripCalculation.State 
						}
					}
					If((validStateProp $Setting IcaRoundTripCalculationInterval State ) -and ($Setting.IcaRoundTripCalculationInterval.State -ne "NotConfigured"))
					{
						$txt = "ICA\End User Monitoring\ICA round trip calculation interval (seconds)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.IcaRoundTripCalculationInterval.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.IcaRoundTripCalculationInterval.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.IcaRoundTripCalculationInterval.Value 
						}	
					}
					If((validStateProp $Setting IcaRoundTripCalculationWhenIdle State ) -and ($Setting.IcaRoundTripCalculationWhenIdle.State -ne "NotConfigured"))
					{
						$txt = "ICA\End User Monitoring\ICA round trip calculations for idle connections"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.IcaRoundTripCalculationWhenIdle.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.IcaRoundTripCalculationWhenIdle.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.IcaRoundTripCalculationWhenIdle.State 
						}	
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Enhanced Desktop Experience"
					If((validStateProp $Setting EnhancedDesktopExperience State ) -and ($Setting.EnhancedDesktopExperience.State -ne "NotConfigured"))
					{
						$txt = "ICA\Enhanced Desktop Experience\Enhanced Desktop Experience"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.EnhancedDesktopExperience.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.EnhancedDesktopExperience.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.EnhancedDesktopExperience.State 
						}	
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\File Redirection"
					If((validStateProp $Setting AllowFileTransfer State ) -and ($Setting.AllowFileTransfer.State -ne "NotConfigured"))
					{
						$txt = "ICA\File Redirection\Allow file transfer between desktop and client"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.AllowFileTransfer.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.AllowFileTransfer.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.AllowFileTransfer.State 
						}
					}
					If((validStateProp $Setting AutoConnectDrives State ) -and ($Setting.AutoConnectDrives.State -ne "NotConfigured"))
					{
						$txt = "ICA\File Redirection\Auto connect client drives"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.AutoConnectDrives.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.AutoConnectDrives.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.AutoConnectDrives.State 
						}
					}
					If((validStateProp $Setting ClientDriveRedirection State ) -and ($Setting.ClientDriveRedirection.State -ne "NotConfigured"))
					{
						$txt = "ICA\File Redirection\Client drive redirection"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ClientDriveRedirection.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ClientDriveRedirection.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ClientDriveRedirection.State 
						}
					}
					If((validStateProp $Setting ClientFixedDrives State ) -and ($Setting.ClientFixedDrives.State -ne "NotConfigured"))
					{
						$txt = "ICA\File Redirection\Client fixed drives"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ClientFixedDrives.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ClientFixedDrives.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ClientFixedDrives.State 
						}
					}
					If((validStateProp $Setting ClientFloppyDrives State ) -and ($Setting.ClientFloppyDrives.State -ne "NotConfigured"))
					{
						$txt = "ICA\File Redirection\Client floppy drives"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ClientFloppyDrives.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ClientFloppyDrives.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ClientFloppyDrives.State 
						}
					}
					If((validStateProp $Setting ClientNetworkDrives State ) -and ($Setting.ClientNetworkDrives.State -ne "NotConfigured"))
					{
						$txt = "ICA\File Redirection\Client network drives"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ClientNetworkDrives.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ClientNetworkDrives.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ClientNetworkDrives.State 
						}
					}
					If((validStateProp $Setting ClientOpticalDrives State ) -and ($Setting.ClientOpticalDrives.State -ne "NotConfigured"))
					{
						$txt = "ICA\File Redirection\Client optical drives"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ClientOpticalDrives.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ClientOpticalDrives.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ClientOpticalDrives.State 
						}
					}
					If((validStateProp $Setting ClientRemoveableDrives State ) -and ($Setting.ClientRemoveableDrives.State -ne "NotConfigured"))
					{
						$txt = "ICA\File Redirection\Client removable drives"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ClientRemoveableDrives.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ClientRemoveableDrives.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ClientRemoveableDrives.State 
						}
					}
					If((validStateProp $Setting AllowFileDownload State ) -and ($Setting.AllowFileDownload.State -ne "NotConfigured"))
					{
						$txt = "ICA\File Redirection\Download file from desktop"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.AllowFileDownload.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.AllowFileDownload.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.AllowFileDownload.State 
						}
					}
					If((validStateProp $Setting HostToClientRedirection State ) -and ($Setting.HostToClientRedirection.State -ne "NotConfigured"))
					{
						$txt = "ICA\File Redirection\Host to client redirection"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.HostToClientRedirection.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.HostToClientRedirection.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.HostToClientRedirection.State 
						}
					}
					If((validStateProp $Setting ClientDriveLetterPreservation State ) -and ($Setting.ClientDriveLetterPreservation.State -ne "NotConfigured"))
					{
						$txt = "ICA\File Redirection\Preserve client drive letters"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ClientDriveLetterPreservation.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ClientDriveLetterPreservation.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ClientDriveLetterPreservation.State 
						}
					}
					If((validStateProp $Setting ReadOnlyMappedDrive State ) -and ($Setting.ReadOnlyMappedDrive.State -ne "NotConfigured"))
					{
						$txt = "ICA\File Redirection\Read-only client drive access"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ReadOnlyMappedDrive.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ReadOnlyMappedDrive.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ReadOnlyMappedDrive.State 
						}
					}
					If((validStateProp $Setting SpecialFolderRedirection State ) -and ($Setting.SpecialFolderRedirection.State -ne "NotConfigured"))
					{
						$txt = "ICA\File Redirection\Special folder redirection"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.SpecialFolderRedirection.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.SpecialFolderRedirection.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.SpecialFolderRedirection.State 
						}
					}
					If((validStateProp $Setting AllowFileUpload State ) -and ($Setting.AllowFileUpload.State -ne "NotConfigured"))
					{
						$txt = "ICA\File Redirection\Upload file to desktop"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.AllowFileUpload.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.AllowFileUpload.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.AllowFileUpload.State 
						}
					}
					If((validStateProp $Setting AsynchronousWrites State ) -and ($Setting.AsynchronousWrites.State -ne "NotConfigured"))
					{
						$txt = "ICA\File Redirection\Use asynchronous writes"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.AsynchronousWrites.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.AsynchronousWrites.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.AsynchronousWrites.State 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Graphics"
					If((validStateProp $Setting AllowVisuallyLosslessCompression State ) -and ($Setting.AllowVisuallyLosslessCompression.State -ne "NotConfigured"))
					{
						$txt = "ICA\Graphics\Allow visually lossless compression"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.AllowVisuallyLosslessCompression.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.AllowVisuallyLosslessCompression.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.AllowVisuallyLosslessCompression.State 
						}
					}
					If((validStateProp $Setting DisplayLosslessIndicator State ) -and ($Setting.DisplayLosslessIndicator.State -ne "NotConfigured"))
					{
						#new in 7.16
						$txt = "ICA\Graphics\Display lossless indicator"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.DisplayLosslessIndicator.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.DisplayLosslessIndicator.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.DisplayLosslessIndicator.State 
						}
					}
					If((validStateProp $Setting DisplayMemoryLimit State ) -and ($Setting.DisplayMemoryLimit.State -ne "NotConfigured"))
					{
						$txt = "ICA\Graphics\Display memory limit (KB)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.DisplayMemoryLimit.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.DisplayMemoryLimit.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.DisplayMemoryLimit.Value 
						}	
					}
					If((validStateProp $Setting DynamicPreview State ) -and ($Setting.DynamicPreview.State -ne "NotConfigured"))
					{
						$txt = "ICA\Graphics\Dynamic windows preview"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.DynamicPreview.State;
							}
						}
						If($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.DynamicPreview.State,$htmlwhite))
						}
						If($Text)
						{
							OutputPolicySetting $txt $Setting.DynamicPreview.State 
						}	
					}
					If((validStateProp $Setting DisplayDegradePreference State ) -and ($Setting.DisplayDegradePreference.State -ne "NotConfigured"))
					{
						$txt = "ICA\Graphics\Display mode degrade preference"
						$tmp = ""
						Switch ($Setting.DisplayDegradePreference.Value)
						{
							"ColorDepth"	{$tmp = "Degrade color depth first"; Break}
							"Resolution"	{$tmp = "Degrade resolution first"; Break}
							Default			{$tmp = "Display mode degrade preference could not be determined: $($Setting.DisplayDegradePreference.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}	
						$tmp = $Null
					}
					If((validStateProp $Setting DynamicPreview State ) -and ($Setting.DynamicPreview.State -ne "NotConfigured"))
					{
						$txt = "ICA\Graphics\Dynamic windows preview"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.DynamicPreview.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.DynamicPreview.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.DynamicPreview.State 
						}	
					}
					If((validStateProp $Setting ImageCaching State ) -and ($Setting.ImageCaching.State -ne "NotConfigured"))
					{
						$txt = "ICA\Graphics\Image caching"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ImageCaching.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ImageCaching.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ImageCaching.State 
						}	
					}
					If((validStateProp $Setting LegacyGraphicsMode State ) -and ($Setting.LegacyGraphicsMode.State -ne "NotConfigured"))
					{
						$txt = "ICA\Graphics\Legacy graphics mode"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.LegacyGraphicsMode.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.LegacyGraphicsMode.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.LegacyGraphicsMode.State 
						}
					}
					If((validStateProp $Setting MaximumColorDepth State ) -and ($Setting.MaximumColorDepth.State -ne "NotConfigured"))
					{
						$txt = "ICA\Graphics\Maximum allowed color depth"
						$tmp = ""
						Switch ($Setting.MaximumColorDepth.Value)
						{
							"BitsPerPixel24"	{$tmp = "24 Bits Per Pixel"; Break}
							"BitsPerPixel32"	{$tmp = "32 Bits Per Pixel"; Break}
							"BitsPerPixel16"	{$tmp = "16 Bits Per Pixel"; Break}
							"BitsPerPixel15"	{$tmp = "15 Bits Per Pixel"; Break}
							"BitsPerPixel8"		{$tmp = "8 Bits Per Pixel"; Break}
							Default				{$tmp = "Maximum allowed color depth could not be determined: $($Setting.MaximumColorDepth.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}	
						$tmp = $Null
					}
					If((validStateProp $Setting DisplayDegradeUserNotification State ) -and ($Setting.DisplayDegradeUserNotification.State -ne "NotConfigured"))
					{
						$txt = "ICA\Graphics\Notify user when display mode is degraded"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.DisplayDegradeUserNotification.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.DisplayDegradeUserNotification.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.DisplayDegradeUserNotification.State 
						}	
					}
					If((validStateProp $Setting OptimizeFor3dWorkload State ) -and ($Setting.OptimizeFor3dWorkload.State -ne "NotConfigured"))
					{
						#new in 7.16
						$txt = "ICA\Graphics\Optimize for 3D graphics workload"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.OptimizeFor3dWorkload.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.OptimizeFor3dWorkload.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.OptimizeFor3dWorkload.State 
						}
					}
					If((validStateProp $Setting QueueingAndTossing State ) -and ($Setting.QueueingAndTossing.State -ne "NotConfigured"))
					{
						$txt = "ICA\Graphics\Queueing and tossing"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.QueueingAndTossing.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.QueueingAndTossing.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.QueueingAndTossing.State 
						}	
					}
					If((validStateProp $Setting UseHardwareEncodingForVideoCodec State ) -and ($Setting.UseHardwareEncodingForVideoCodec.State -ne "NotConfigured"))
					{
						$txt = "ICA\Graphics\Use hardware encoding for video codec"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.UseHardwareEncodingForVideoCodec.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.UseHardwareEncodingForVideoCodec.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.UseHardwareEncodingForVideoCodec.State 
						}	
					}
					If((validStateProp $Setting UseVideoCodecForCompression State ) -and ($Setting.UseVideoCodecForCompression.State -ne "NotConfigured"))
					{
						$txt = "ICA\Graphics\Use video codec for compression"
						$tmp = ""
						Switch ($Setting.UseVideoCodecForCompression.Value)
						{
							"UseVideoCodecIfAvailable"	{$tmp = "For the entire screen"; Break}
							"DoNotUseVideoCodec"		{$tmp = "Do not use video codec"; Break}
							"UseVideoCodecIfPreferred"	{$tmp = "Use when preferred"; Break}
							"ActivelyChangingRegions"	{$tmp = "For actively changing regions"; Break}
							Default						{$tmp = "Use video codec for compression could not be determined: $($Setting.UseVideoCodecForCompression.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}	
						$tmp = $Null
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Graphics\Caching"
					If((validStateProp $Setting PersistentCache State ) -and ($Setting.PersistentCache.State -ne "NotConfigured"))
					{
						$txt = "ICA\Graphics\Caching\Persistent cache threshold (Kbps)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.PersistentCache.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.PersistentCache.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.PersistentCache.Value 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Graphics\Framehawk"
					If((validStateProp $Setting EnableFramehawkDisplayChannel State ) -and ($Setting.EnableFramehawkDisplayChannel.State -ne "NotConfigured"))
					{
						$txt = "ICA\Graphics\Framehawk\Framehawk display channel"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.EnableFramehawkDisplayChannel.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.EnableFramehawkDisplayChannel.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.EnableFramehawkDisplayChannel.State 
						}
					}
					If((validStateProp $Setting FramehawkDisplayChannelPortRange State ) -and ($Setting.FramehawkDisplayChannelPortRange.State -ne "NotConfigured"))
					{
						$txt = "ICA\Graphics\Framehawk\Framehawk display channel port range"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.FramehawkDisplayChannelPortRange.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.FramehawkDisplayChannelPortRange.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.FramehawkDisplayChannelPortRange.Value 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Keep Alive"
					If((validStateProp $Setting IcaKeepAliveTimeout State ) -and ($Setting.IcaKeepAliveTimeout.State -ne "NotConfigured"))
					{
						$txt = "ICA\Keep Alive\ICA keep alive timeout (seconds)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.IcaKeepAliveTimeout.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.IcaKeepAliveTimeout.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.IcaKeepAliveTimeout.Value 
						}
					}
					If((validStateProp $Setting IcaKeepAlives State ) -and ($Setting.IcaKeepAlives.State -ne "NotConfigured"))
					{
						$txt = "ICA\Keep Alive\ICA keep alives"
						$tmp = ""
						Switch ($Setting.IcaKeepAlives.Value)
						{
							"DoNotSendKeepAlives"	{$tmp = "Do not send ICA keep alive messages"; Break}
							"SendKeepAlives"		{$tmp = "Send ICA keep alive messages"; Break}
							Default					{$tmp = "ICA keep alives could not be determined: $($Setting.IcaKeepAlives.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
						$tmp = $Null
					}

					#V2.35
					#CVAD 2006
					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Keyboard and IME"
					If((validStateProp $Setting ClientKeyboardLayoutSyncAndIME State ) -and ($Setting.ClientKeyboardLayoutSyncAndIME.State -ne "NotConfigured"))
					{
						$txt = "ICA\Keyboard and IME\Client keyboard layout synchronization and IME improvement"
						$tmp = ""
						Switch ($Setting.ClientKeyboardLayoutSyncAndIME.Value)
						{
							"NotSupport"						{$tmp = "Disabled"; Break}
							"ClientKeyboardLayoutSync"			{$tmp = "Support dynamic client keyboard layout synchronization"; Break}
							"ClientKeyboardLayoutSyncAndIME"	{$tmp = "Support dynamic client keyboard layout synchronization and IME improvement"; Break}
							Default 							{$tmp = "Client keyboard layout synchronization and IME improvement: $($Setting.ClientKeyboardLayoutSyncAndIME.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
						$tmp = $Null
					}
					If((validStateProp $Setting EnableUnicodeKeyboardLayoutMapping State ) -and ($Setting.EnableUnicodeKeyboardLayoutMapping.State -ne "NotConfigured"))
					{
						$txt = "ICA\Keyboard and IME\Enable Unicode keyboard layout mapping"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.EnableUnicodeKeyboardLayoutMapping.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.EnableUnicodeKeyboardLayoutMapping.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.EnableUnicodeKeyboardLayoutMapping.State 
						}
					}
					If((validStateProp $Setting HideKeyboardLayoutSwitchPopupMessageBox State ) -and ($Setting.HideKeyboardLayoutSwitchPopupMessageBox.State -ne "NotConfigured"))
					{
						$txt = "ICA\Keyboard and IME\Hide keyboard layout switch pop-up message box"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.HideKeyboardLayoutSwitchPopupMessageBox.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.HideKeyboardLayoutSwitchPopupMessageBox.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.HideKeyboardLayoutSwitchPopupMessageBox.State
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Local App Access"
					If((validStateProp $Setting AllowLocalAppAccess State ) -and ($Setting.AllowLocalAppAccess.State -ne "NotConfigured"))
					{
						$txt = "ICA\Local App Access\Allow local app access"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.AllowLocalAppAccess.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.AllowLocalAppAccess.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.AllowLocalAppAccess.State 
						}
					}
					If((validStateProp $Setting URLRedirectionBlackList State ) -and ($Setting.URLRedirectionBlackList.State -ne "NotConfigured"))
					{
						$txt = "ICA\Local App Access\URL redirection black list"
						If(validStateProp $Setting URLRedirectionBlackList Values )
						{
							$tmpArray = $Setting.URLRedirectionBlackList.Values
							$tmp = ""
							$cnt = 0
							ForEach($Thing in $TmpArray)
							{
								If($Null -eq $Thing)
								{
									$Thing = ''
								}
								$cnt++
								$tmp = "$($Thing) "
								If($cnt -eq 1)
								{
									If($MSWord -or $PDF)
									{
										$SettingsWordTable += @{
										Text = $txt;
										Value = $tmp;
										}
									}
									ElseIf($HTML)
									{
										$rowdata += @(,(
										$txt,$htmlbold,
										$tmp,$htmlwhite))
									}
									ElseIf($Text)
									{
										OutputPolicySetting $txt $tmp
									}
								}
								Else
								{
									If($MSWord -or $PDF)
									{
										$SettingsWordTable += @{
										Text = "";
										Value = $tmp;
										}
									}
									ElseIf($HTML)
									{
										$rowdata += @(,(
										"",$htmlbold,
										$tmp,$htmlwhite))
									}
									ElseIf($Text)
									{
										OutputPolicySetting "`t`t`t`t`t       " $tmp
									}
								}
							}
							$TmpArray = $Null
							$tmp = $Null
						}
						Else
						{
							$tmp = "No URL redirection black list were found"
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $tmp;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$tmp,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $tmp
							}
						}
					}
					If((validStateProp $Setting URLRedirectionWhiteList State ) -and ($Setting.URLRedirectionWhiteList.State -ne "NotConfigured"))
					{
						$txt = "ICA\Local App Access\URL redirection white list"
						If(validStateProp $Setting URLRedirectionWhiteList Values )
						{
							$tmpArray = $Setting.URLRedirectionWhiteList.Values
							$tmp = ""
							$cnt = 0
							ForEach($Thing in $TmpArray)
							{
								If($Null -eq $Thing)
								{
									$Thing = ''
								}
								$cnt++
								$tmp = "$($Thing) "
								If($cnt -eq 1)
								{
									If($MSWord -or $PDF)
									{
										$SettingsWordTable += @{
										Text = $txt;
										Value = $tmp;
										}
									}
									ElseIf($HTML)
									{
										$rowdata += @(,(
										$txt,$htmlbold,
										$tmp,$htmlwhite))
									}
									ElseIf($Text)
									{
										OutputPolicySetting $txt $tmp
									}
								}
								Else
								{
									If($MSWord -or $PDF)
									{
										$SettingsWordTable += @{
										Text = "";
										Value = $tmp;
										}
									}
									ElseIf($HTML)
									{
										$rowdata += @(,(
										"",$htmlbold,
										$tmp,$htmlwhite))
									}
									ElseIf($Text)
									{
										OutputPolicySetting "`t`t`t`t`t       " $tmp
									}
								}
							}
							$TmpArray = $Null
							$tmp = $Null
						}
						Else
						{
							$tmp = "No URL redirection white list were found"
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $tmp;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$tmp,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $tmp
							}
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Mobile Experience"
					If((validStateProp $Setting AutoKeyboardPopUp State ) -and ($Setting.AutoKeyboardPopUp.State -ne "NotConfigured"))
					{
						$txt = "ICA\Mobile Experience\Automatic keyboard display"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.AutoKeyboardPopUp.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.AutoKeyboardPopUp.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.AutoKeyboardPopUp.State 
						}
					}
					If((validStateProp $Setting MobileDesktop State ) -and ($Setting.MobileDesktop.State -ne "NotConfigured"))
					{
						$txt = "ICA\Mobile Experience\Launch touch-optimized desktop"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.MobileDesktop.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.MobileDesktop.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.MobileDesktop.State 
						}
					}
					If((validStateProp $Setting ComboboxRemoting State ) -and ($Setting.ComboboxRemoting.State -ne "NotConfigured"))
					{
						$txt = "ICA\Mobile Experience\Remote the combo box"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ComboboxRemoting.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ComboboxRemoting.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ComboboxRemoting.State 
						}
					}
					If((validStateProp $Setting TabletModeToggle State ) -and ($Setting.TabletModeToggle.State -ne "NotConfigured"))
					{
						#new in 7.16
						$txt = "ICA\Mobile Experience\Tablet Mode Toggle"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.TabletModeToggle.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.TabletModeToggle.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.TabletModeToggle.State 
						}
					}
					
					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Multimedia"
					If((validStateProp $Setting WebBrowserRedirection State ) -and ($Setting.WebBrowserRedirection.State -ne "NotConfigured"))
					{
						#new in 7.16
						$txt = "ICA\Multimedia\Browser Content Redirection"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.WebBrowserRedirection.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.WebBrowserRedirection.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.WebBrowserRedirection.State
						}
					}
					If((validStateProp $Setting BRUrlWhitelist State ) -and ($Setting.BRUrlWhitelist.State -ne "NotConfigured"))
					{
						#new in 7.16
						$txt = "ICA\Multimedia\Browser Content Redirection ACL Configuration"
						$array = $Setting.BRUrlWhitelist.Values
						$tmp = $array[0]
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}

						$txt = ""
						$cnt = -1
						ForEach($element in $array)
						{
							$cnt++
							
							If($cnt -ne 0)
							{
								$tmp = "$($element) "
								If($MSWord -or $PDF)
								{
									$SettingsWordTable += @{
									Text = "";
									Value = $tmp;
									}
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									"",$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting "`t`t`t`t`t`t" $tmp
								}
							}
						}
						$array = $Null
						$tmp = $Null
					}
					If((validStateProp $Setting WebBrowserRedirectionAuthenticationSites State ) -and ($Setting.WebBrowserRedirectionAuthenticationSites.State -ne "NotConfigured"))
					{
						#new in 7.18
						If( $Setting.WebBrowserRedirectionAuthenticationSites.PSObject.Properties[ 'Values' ] )
						{
							$txt = "ICA\Multimedia\Browser Content Redirection Authentication Sites"
							$array = $Setting.WebBrowserRedirectionAuthenticationSites.Values
							$tmp = $array[0]
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $tmp;
								}
							}
							If($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$tmp,$htmlwhite))
							}
							If($Text)
							{
								OutputPolicySetting $txt $tmp 
							}

							$txt = ""
							$cnt = -1
							ForEach($element in $array)
							{
								$cnt++
								
								If($cnt -ne 0)
								{
									$tmp = "$($element) "
									If($MSWord -or $PDF)
									{
										$SettingsWordTable += @{
										Text = "";
										Value = $tmp;
										}
									}
									If($HTML)
									{
										$rowdata += @(,(
										"",$htmlbold,
										$tmp,$htmlwhite))
									}
									If($Text)
									{
										OutputPolicySetting "`t`t`t`t`t`t`t       " $tmp
									}
								}
							}
							$array = $Null
							$tmp = $Null
						}
					}
					If((validStateProp $Setting WebBrowserRedirectionBlacklist State ) -and ($Setting.WebBrowserRedirectionBlacklist.State -ne "NotConfigured"))
					{
						#new in 7.17
						If( $Setting.WebBrowserRedirectionBlacklist.PSObject.Properties[ 'Values' ] )
						{
							$txt = "ICA\Multimedia\Browser Content Redirection Block List Configuration"
							$array = $Setting.WebBrowserRedirectionBlacklist.Values
							$tmp = $array[0]
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $tmp;
								}
							}
							If($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$tmp,$htmlwhite))
							}
							If($Text)
							{
								OutputPolicySetting $txt $tmp 
							}

							$txt = ""
							$cnt = -1
							ForEach($element in $array)
							{
								$cnt++
								
								If($cnt -ne 0)
								{
									$tmp = "$($element) "
									If($MSWord -or $PDF)
									{
										$SettingsWordTable += @{
										Text = "";
										Value = $tmp;
										}
									}
									If($HTML)
									{
										$rowdata += @(,(
										"",$htmlbold,
										$tmp,$htmlwhite))
									}
									If($Text)
									{
										OutputPolicySetting "`t`t`t`t`t`t`t`t   " $tmp
									}
								}
							}
							$array = $Null
							$tmp = $Null
						}
					}
					If((validStateProp $Setting WebBrowserRedirectionProxy State ) -and ($Setting.WebBrowserRedirectionProxy.State -ne "NotConfigured"))
					{
						#new in 7.16
						$txt = "ICA\Multimedia\Browser Content Redirection Proxy Configuration"
						If($Setting.WebBrowserRedirectionProxy.State -eq "Enabled" -and $Setting.WebBrowserRedirectionProxy.Value -eq "")
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = "Disabled";
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								"Disabled",$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt "Disabled"
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.WebBrowserRedirectionProxy.Value;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.WebBrowserRedirectionProxy.Value,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.WebBrowserRedirectionProxy.Value 
							}
						}
					}
					If((validStateProp $Setting HTML5VideoRedirection State ) -and ($Setting.HTML5VideoRedirection.State -ne "NotConfigured"))
					{
						$txt = "ICA\Multimedia\HTML5 video redirection"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.HTML5VideoRedirection.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.HTML5VideoRedirection.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.HTML5VideoRedirection.State
						}
					}
					If((validStateProp $Setting VideoQuality State ) -and ($Setting.VideoQuality.State -ne "NotConfigured"))
					{
						$txt = "ICA\Multimedia\Limit video quality"
						$tmp = ""
						Switch ($Setting.VideoQuality.Value)
						{
							"P1080"			{$tmp = "Maximum Video Quality 1080p/8.5mbps"; Break}
							"P720"			{$tmp = "Maximum Video Quality 720p/4.0mbps"; Break}
							"P480"			{$tmp = "Maximum Video Quality 480p/720kbps"; Break}
							"P380"			{$tmp = "Maximum Video Quality 380p/400kbps"; Break}
							"P240"			{$tmp = "Maximum Video Quality 240p/200kbps"; Break}
							"Unconfigured"	{$tmp = "Not Configured"; Break}
							Default			{$tmp = "Limit video quality could not be determined: $($Setting.VideoQuality.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
						$tmp = $Null
					}
					If((validStateProp $Setting MaxSpeexQuality State ) -and ($Setting.MaxSpeexQuality.State -ne "NotConfigured"))
					{
						$txt = "ICA\Multimedia\Max Speex quality"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.MaxSpeexQuality.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.MaxSpeexQuality.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.MaxSpeexQuality.Value 
						}
					}
					If((validStateProp $Setting MSTeamsRedirection State ) -and ($Setting.MSTeamsRedirection.State -ne "NotConfigured"))
					{
						#added in 1906
						$txt = "ICA\Multimedia\Microsoft Teams redirection"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.MSTeamsRedirection.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.MSTeamsRedirection.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.MSTeamsRedirection.State 
						}
					}
					If((validStateProp $Setting MultimediaConferencing State ) -and ($Setting.MultimediaConferencing.State -ne "NotConfigured"))
					{
						$txt = "ICA\Multimedia\Multimedia conferencing"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.MultimediaConferencing.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.MultimediaConferencing.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.MultimediaConferencing.State 
						}
					}
					If((validStateProp $Setting MultimediaOptimization State ) -and ($Setting.MultimediaOptimization.State -ne "NotConfigured"))
					{
						$txt = "ICA\Multimedia\Optimization for Windows Media multimedia redirection over WAN"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.MultimediaOptimization.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.MultimediaOptimization.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.MultimediaOptimization.State 
						}
					}
					If((validStateProp $Setting UseGPUForMultimediaOptimization State ) -and ($Setting.UseGPUForMultimediaOptimization.State -ne "NotConfigured"))
					{
						$txt = "ICA\Multimedia\Use GPU for optimizing Windows Media multimedia redirection over WAN"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.UseGPUForMultimediaOptimization.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.UseGPUForMultimediaOptimization.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.UseGPUForMultimediaOptimization.State 
						}
					}
					If((validStateProp $Setting MultimediaAccelerationEnableCSF State ) -and ($Setting.MultimediaAccelerationEnableCSF.State -ne "NotConfigured"))
					{
						$txt = "ICA\Multimedia\Windows Media client-side content fetching"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.MultimediaAccelerationEnableCSF.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.MultimediaAccelerationEnableCSF.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.MultimediaAccelerationEnableCSF.State 
						}
					}
					If((validStateProp $Setting VideoLoadManagement State ) -and ($Setting.VideoLoadManagement.State -ne "NotConfigured"))
					{
						$txt = "ICA\Multimedia\Windows media fallback prevention"
						$tmp = ""
						Switch ($Setting.VideoLoadManagement.Value)
						{
							"SFSR"			{$tmp = "Play all content"; Break}
							"SFCR"			{$tmp = "Play all content only on client"; Break}
							"CFCR"			{$tmp = "Play only client-accessible content on client"; Break}
							"UnConfigured"	{$tmp = "Not Configured"; Break}
							Default			{$tmp = "Windows media fallback prevention could not be determined: $($Setting.VideoLoadManagement.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
						$tmp = $Null
					}
					If((validStateProp $Setting MultimediaAcceleration State ) -and ($Setting.MultimediaAcceleration.State -ne "NotConfigured"))
					{
						$txt = "ICA\Multimedia\Windows Media redirection"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.MultimediaAcceleration.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.MultimediaAcceleration.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.MultimediaAcceleration.State 
						}
					}
					If((validStateProp $Setting MultimediaAccelerationDefaultBufferSize State ) -and ($Setting.MultimediaAccelerationDefaultBufferSize.State -ne "NotConfigured"))
					{
						$txt = "ICA\Multimedia\Windows Media redirection buffer size (seconds)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.MultimediaAccelerationDefaultBufferSize.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.MultimediaAccelerationDefaultBufferSize.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.MultimediaAccelerationDefaultBufferSize.Value 
						}
					}
					If((validStateProp $Setting MultimediaAccelerationUseDefaultBufferSize State ) -and ($Setting.MultimediaAccelerationUseDefaultBufferSize.State -ne "NotConfigured"))
					{
						$txt = "ICA\Multimedia\Windows Media redirection buffer size use"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.MultimediaAccelerationUseDefaultBufferSize.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.MultimediaAccelerationUseDefaultBufferSize.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.MultimediaAccelerationUseDefaultBufferSize.State 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Multi-Stream Connections"
					If((validStateProp $Setting UDPAudioOnServer State ) -and ($Setting.UDPAudioOnServer.State -ne "NotConfigured"))
					{
						$txt = "ICA\Multi-Stream Connections\Audio over UDP"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.UDPAudioOnServer.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.UDPAudioOnServer.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.UDPAudioOnServer.State
						}
					}
					If((validStateProp $Setting RtpAudioPortRange State ) -and ($Setting.RtpAudioPortRange.State -ne "NotConfigured"))
					{
						$txt = "ICA\Multi-Stream Connections\Audio UDP port range"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.RtpAudioPortRange.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.RtpAudioPortRange.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.RtpAudioPortRange.Value 
						}
					}
					If((validStateProp $Setting MultiPortPolicy State ) -and ($Setting.MultiPortPolicy.State -ne "NotConfigured"))
					{
						$txt1 = "ICA\Multi-Stream Connections\Multi-Port Policy\CGP default port"
						$txt2 = "ICA\Multi-Stream Connections\Multi-Port Policy\CGP default port priority"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt1;
							Value = "Default Port";
							}

							$SettingsWordTable += @{
							Text = $txt2;
							Value = "High";
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt1,$htmlbold,
							"Default Port",$htmlwhite))

							$rowdata += @(,(
							$txt2,$htmlbold,
							"High",$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt1 "Default Port"
							OutputPolicySetting $txt2 "High"
						}
						$txt1 = $Null
						$txt2 = $Null
						[string]$Tmp = $Setting.MultiPortPolicy.Value
						If($Tmp.Length -gt 0)
						{
							$Port1Priority = ""
							$Port2Priority = ""
							$Port3Priority = ""
							$TmpArray      = $Tmp.Split(";")
							$TmpArray2                = $TmpArray[0].Split(",")
							[string]$cgpport1         = $TmpArray2[0]
							[string]$cgpport1priority = $TmpArray2[1]

							$TmpArray2                = $TmpArray[1].Split(",")
							[string]$cgpport2         = $TmpArray2[0]
							[string]$cgpport2priority = $TmpArray2[1]

							$TmpArray2                = $TmpArray[2].Split(",")
							[string]$cgpport3         = $TmpArray2[0]
							[string]$cgpport3priority = $TmpArray2[1]
							
							Switch ($cgpport1priority)
							{
								"0"		{$Port1Priority = "Very High"; Break}
								"2"		{$Port1Priority = "Medium"; Break}
								"3"		{$Port1Priority = "Low"; Break}
								Default	{$Port1Priority = "Unknown"; Break}
							}
							Switch ($cgpport2priority)
							{
								"0"		{$Port2Priority = "Very High"; Break}
								"2"		{$Port2Priority = "Medium"; Break}
								"3"		{$Port2Priority = "Low"; Break}
								Default	{$Port2Priority = "Unknown"; Break}
							}
							Switch ($cgpport3priority)
							{
								"0"		{$Port3Priority = "Very High"; Break}
								"2"		{$Port3Priority = "Medium"; Break}
								"3"		{$Port3Priority = "Low"; Break}
								Default	{$Port3Priority = "Unknown"; Break}
							}

							$txt1 = "ICA\Multi-Stream Connections\Multi-Port Policy\CGP port1"
							$txt2 = "ICA\Multi-Stream Connections\Multi-Port Policy\CGP port1 priority"
							$txt3 = "ICA\Multi-Stream Connections\Multi-Port Policy\CGP port2"
							$txt4 = "ICA\Multi-Stream Connections\Multi-Port Policy\CGP port2 priority"
							$txt5 = "ICA\Multi-Stream Connections\Multi-Port Policy\CGP port3"
							$txt6 = "ICA\Multi-Stream Connections\Multi-Port Policy\CGP port3 priority"
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt1;
								Value = $cgpport1;
								}

								$SettingsWordTable += @{
								Text = $txt2;
								Value = $port1priority;
								}

								$SettingsWordTable += @{
								Text = $txt3;
								Value = $cgpport2;
								}

								$SettingsWordTable += @{
								Text = $txt4;
								Value = $port2priority;
								}

								$SettingsWordTable += @{
								Text = $txt5;
								Value = $cgpport3;
								}

								$SettingsWordTable += @{
								Text = $txt6;
								Value = $port3priority;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt1,$htmlbold,
								$cgpport1,$htmlwhite))
								
								$rowdata += @(,(
								$txt2,$htmlbold,
								$port1priority,$htmlwhite))
								
								$rowdata += @(,(
								$txt3,$htmlbold,
								$cgpport2,$htmlwhite))
								
								$rowdata += @(,(
								$txt4,$htmlbold,
								$port2priority,$htmlwhite))
								
								$rowdata += @(,(
								$txt5,$htmlbold,
								$cgpport3,$htmlwhite))
								
								$rowdata += @(,(
								$txt6,$htmlbold,
								$port3priority,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt1 $cgpport1
								OutputPolicySetting $txt2 $port1priority
								OutputPolicySetting $txt3 $cgpport2
								OutputPolicySetting $txt4 $port2priority
								OutputPolicySetting $txt5 $cgpport3
								OutputPolicySetting $txt6 $port3priority
							}	
						}
						$Tmp = $Null
						$cgpport1 = $Null
						$cgpport2 = $Null
						$cgpport3 = $Null
						$cgpport1priority = $Null
						$cgpport2priority = $Null
						$cgpport3priority = $Null
						$Port1Priority = $Null
						$Port2Priority = $Null
						$Port3Priority = $Null
						$txt1 = $Null
						$txt2 = $Null
						$txt3 = $Null
						$txt4 = $Null
						$txt5 = $Null
						$txt6 = $Null
					}
					If((validStateProp $Setting MultiStreamPolicy State ) -and ($Setting.MultiStreamPolicy.State -ne "NotConfigured"))
					{
						$txt = "ICA\Multi-Stream Connections\Multi-Stream computer setting"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.MultiStreamPolicy.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.MultiStreamPolicy.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.MultiStreamPolicy.State 
						}
					}
					If((validStateProp $Setting MultiStream State ) -and ($Setting.MultiStream.State -ne "NotConfigured"))
					{
						$txt = "ICA\Multi-Stream Connections\Multi-Stream user setting"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.MultiStream.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.MultiStream.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.MultiStream.State 
						}
					}
					If((validStateProp $Setting MultiStreamAssignment State ) -and ($Setting.MultiStreamAssignment.State -ne "NotConfigured"))
					{
						#added in 2.33 for CVAD 2003
						<#
						Value=		Virtual Channels							Stream Number
						CTXCAM,0; 	Audio                                       0
						CTXEUEM,1;	End User Experience Monitoring              1
						CTXCTL,1;	ICA Control                                 1
						CTXIME,1;	Input Method Editor                         1
						CTXLIC,1;	License Management                          1
						CTXMTOP,1;	Microsoft Teams/WebRTC Redirection          1
						CTXMOB,1;	Mobile Receiver                             1
						CTXMTCH,1;	MultiTouch                                  1
						CTXTWI,1;	Seamless (Tranparent Window Integration)    1
						CTXSENS,1;	Sensor and Location                         1
						CTXSCRD,1;	Smart Card                                  1
						CTXTW,1;	Thinwire Graphics                           1
						CTXDND,1;	CTXDND                                      1
						CTXNSAP,2;	App Flow                                    2
						CTXCSB,2;	Browser Content Redirection                 2
						CTXCDM,2;	Client Drive Mapping                        2
						CTXCLIP,2;	Clipboard                                   2
						CTXFILE,2;	File Transfer (HTML5 Receiver)              2
						CTXGDT,2;	Generic Data Transfer                       2
						CTXPFWD,2;	Port Forwarding                             2
						CTXMM,2;	Remote Audio and Video Extensions (RAVE)    2
						CTXTUI,2;	Transparent UI Integration/Logon Status     2
						CTXTWN,2;	TWAIN Redirection                           2
						CTXGUSB,2;	USB                                         2
						CTXZLFK,2;	Zero Latency Font and Keyboard              2
						CTXZLC,2;	Zero Latency Data Channel                   2
						CTXCCM,3;	Client COM Port Mapping                     3
						CTXCPM,3;	Client Printer Mapping                      3
						CTXCOM1,3;	Legacy Client Printer Mapping (COM1)        3
						CTXCOM2,3;	Legacy Client Printer Mapping (COM2)        3
						CTXLPT1,3;	Legacy Client Printer Mapping (LPT1)        3
						CTXLPT2,3;	Legacy Client Printer Mapping (LPT2)        3
						#>
						$txt = "ICA\Multi-Stream Connections\Multi-Stream virtual channel stream assignment"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = "";
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							"",$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt ""
						}
						$Values = $Setting.MultiStreamAssignment.Value.Split(';')
						$tmp = ""
						ForEach($Value in $Values)
						{
							If($Value -eq "")
							{
								Continue
							}
							
							$tmparray = $Value.Split(",")
							$ChannelName = $tmparray[0]
							
							If($ChannelName -eq "")
							{
								Continue
							}
							
							$StreamNumber = $tmparray[1]

							Switch ($ChannelName)
							{
								"CTXCAM"	
									{
										$tmp = "Virtual Channel: Audio - Stream Number: $StreamNumber"; Break
									}
								"CTXEUEM"	
									{
										$tmp = "Virtual Channel: End User Experience Monitoring - Stream Number: $StreamNumber"; Break
									}
								"CTXCTL"	
									{
										$tmp = "Virtual Channel: ICA Control - Stream Number: $StreamNumber"; Break
									}
								"CTXIME"	
									{
										$tmp = "Virtual Channel: Input Method Editor - Stream Number: $StreamNumber"; Break
									}
								"CTXLIC"	
									{
										$tmp = "Virtual Channel: License Management - Stream Number: $StreamNumber"; Break
									}
								"CTXMTOP"	
									{
										$tmp = "Virtual Channel: Microsoft Teams/WebRTC Redirection - Stream Number: $StreamNumber"; Break
									}
								"CTXMOB"	
									{
										$tmp = "Virtual Channel: Mobile Receiver - Stream Number: $StreamNumber"; Break
									}
								"CTXMTCH"	
									{
										$tmp = "Virtual Channel: MultiTouch - Stream Number: $StreamNumber"; Break
									}
								"CTXTWI"	
									{
										$tmp = "Virtual Channel: Seamless (Tranparent Window Integration) - Stream Number: $StreamNumber"; Break
									}
								"CTXSENS"	
									{
										$tmp = "Virtual Channel: Sensor and Location - Stream Number: $StreamNumber"; Break
									}
								"CTXSCRD"	
									{
										$tmp = "Virtual Channel: Smart Card - Stream Number: $StreamNumber"; Break
									}
								"CTXTW"		
									{
										$tmp = "Virtual Channel: Thinwire Graphics - Stream Number: $StreamNumber"; Break
									}
								"CTXDND"	
									{
										$tmp = "Virtual Channel: CTXDND - Stream Number: $StreamNumber"; Break
									}
								"CTXNSAP"	
									{
										$tmp = "Virtual Channel: App Flow - Stream Number: $StreamNumber"; Break
									}
								"CTXCSB"	
									{
										$tmp = "Virtual Channel: Browser Content Redirection - Stream Number: $StreamNumber"; Break
									}
								"CTXCDM"	
									{
										$tmp = "Virtual Channel: Client Drive Mapping - Stream Number: $StreamNumber"; Break
									}
								"CTXCLIP"	
									{
										$tmp = "Virtual Channel: Clipboard - Stream Number: $StreamNumber"; Break
									}
								"CTXFILE"	
									{
										$tmp = "Virtual Channel: File Transfer (HTML5 Receiver) - Stream Number: $StreamNumber"; Break
									}
								"CTXGDT"	
									{
										$tmp = "Virtual Channel: Generic Data Transfer - Stream Number: $StreamNumber"; Break
									}
								"CTXPFWD"	
									{
										$tmp = "Virtual Channel: Port Forwarding - Stream Number: $StreamNumber"; Break
									}
								"CTXMM"		
									{
										$tmp = "Virtual Channel: Remote Audio and Video Extensions (RAVE) - Stream Number: $StreamNumber"; Break
									}
								"CTXTUI"	
									{
										$tmp = "Virtual Channel: Transparent UI Integration/Logon Status - Stream Number: $StreamNumber"; Break
									}
								"CTXTWN"	
									{
										$tmp = "Virtual Channel: TWAIN Redirection - Stream Number: $StreamNumber"; Break
									}
								"CTXGUSB"	
									{
										$tmp = "Virtual Channel: USB - Stream Number: $StreamNumber"; Break
									}
								"CTXZLFK"	
									{
										$tmp = "Virtual Channel: Zero Latency Font and Keyboard - Stream Number: $StreamNumber"; Break
									}
								"CTXZLC"	
									{
										$tmp = "Virtual Channel: Zero Latency Data Channel - Stream Number: $StreamNumber"; Break
									}
								"CTXCCM"	
									{
										$tmp = "Virtual Channel: Client COM Port Mapping - Stream Number: $StreamNumber"; Break
									}
								"CTXCPM"	
									{
										$tmp = "Virtual Channel: Client Printer Mapping - Stream Number: $StreamNumber"; Break
									}
								"CTXCOM1"	
									{
										$tmp = "Virtual Channel: Legacy Client Printer Mapping (COM1) - Stream Number: $StreamNumber"; Break
									}
								"CTXCOM2"	
									{
										$tmp = "Virtual Channel: Legacy Client Printer Mapping (COM2) - Stream Number: $StreamNumber"; Break
									}
								"CTXLPT1"	
									{
										$tmp = "Virtual Channel: Legacy Client Printer Mapping (LPT1) - Stream Number: $StreamNumber"; Break
									}
								"CTXLPT2"	
									{
										$tmp = "Virtual Channel: Legacy Client Printer Mapping (LPT2) - Stream Number: $StreamNumber"; Break
									}
								Default		
									{
										#assume a custom virtual channel
										$tmp = "Virtual Channel: $($ChannelName) - Stream Number: $StreamNumber"; Break
									}
							}
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = "";
								Value = $tmp;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								"",$htmlbold,
								$tmp,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting "`t`t`t`t`t`t`t`t`t   " $tmp
							}
						}
						$tmp = $Null
						$Values = $Null
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Port Redirection"
					If((validStateProp $Setting ClientComPortsAutoConnection State ) -and ($Setting.ClientComPortsAutoConnection.State -ne "NotConfigured"))
					{
						$txt = "ICA\Port Redirection\Auto connect client COM ports"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ClientComPortsAutoConnection.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ClientComPortsAutoConnection.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ClientComPortsAutoConnection.State 
						}
					}
					If((validStateProp $Setting ClientLptPortsAutoConnection State ) -and ($Setting.ClientLptPortsAutoConnection.State -ne "NotConfigured"))
					{
						$txt = "ICA\Port Redirection\Auto connect client LPT ports"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ClientLptPortsAutoConnection.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ClientLptPortsAutoConnection.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ClientLptPortsAutoConnection.State 
						}
					}
					If((validStateProp $Setting ClientComPortRedirection State ) -and ($Setting.ClientComPortRedirection.State -ne "NotConfigured"))
					{
						$txt = "ICA\Port Redirection\Client COM port redirection"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ClientComPortRedirection.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ClientComPortRedirection.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ClientComPortRedirection.State 
						}
					}
					If((validStateProp $Setting ClientLptPortRedirection State ) -and ($Setting.ClientLptPortRedirection.State -ne "NotConfigured"))
					{
						$txt = "ICA\Port Redirection\Client LPT port redirection"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ClientLptPortRedirection.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ClientLptPortRedirection.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ClientLptPortRedirection.State 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Printing"
					If((validStateProp $Setting ClientPrinterRedirection State ) -and ($Setting.ClientPrinterRedirection.State -ne "NotConfigured"))
					{
						$txt = "ICA\Printing\Client printer redirection"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ClientPrinterRedirection.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ClientPrinterRedirection.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ClientPrinterRedirection.State 
						}
					}
					If((validStateProp $Setting DefaultClientPrinter State ) -and ($Setting.DefaultClientPrinter.State -ne "NotConfigured"))
					{
						$txt = "ICA\Printing\Default printer - Choose client's Default printer"
						$tmp = ""
						Switch ($Setting.DefaultClientPrinter.Value)
						{
							"ClientDefault"	{$tmp = "Set Default printer to the client's main printer"; Break}
							"DoNotAdjust"	{$tmp = "Do not adjust the user's Default printer"; Break}
							Default			{$tmp = "Default printer could not be determined: $($Setting.DefaultClientPrinter.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp
						}
						$tmp = $Null
					}
					If((validStateProp $Setting PrinterAssignments State ) -and ($Setting.PrinterAssignments.State -ne "NotConfigured"))
					{
						If($Setting.PrinterAssignments.State -eq "Enabled")
						{
							$txt = "ICA\Printing\Printer assignments"
							$PrinterAssign = Get-ChildItem -path "$($xDriveName):\User\$($Policy.PolicyName)\Settings\ICA\Printing\PrinterAssignments" 4>$Null
							If($? -and $Null -ne $PrinterAssign)
							{
								$PrinterAssignments = $PrinterAssign.Contents
								ForEach($PrinterAssignment in $PrinterAssignments)
								{
									$Client = @()
									$DefaultPrinter = ""
									$SessionPrinters = @()
									$tmp1 = ""
									$tmp2 = ""
									$tmp3 = ""
									
									ForEach($Filter in $PrinterAssignment.Filters)
									{
										$Client += "$($Filter); "
									}
									
									Switch ($PrinterAssignment.DefaultPrinterOption)
									{
										"ClientDefault"		{$DefaultPrinter = "Client main printer"; Break}
										"NotConfigured"		{$DefaultPrinter = "<Not set>"; Break}
										"DoNotAdjust"		{$DefaultPrinter = "Do not adjust"; Break}
										"SpecificPrinter"	{$DefaultPrinter = $PrinterAssignment.SpecificDefaultPrinter; Break}
										Default				{$DefaultPrinter = "<Not set>"; Break}
									}
									
									ForEach($SessionPrinter in $PrinterAssignment.SessionPrinters)
									{
										$SessionPrinters += $SessionPrinter
									}
									
									$tmp1 = "Client Names/IP's: $($Client)"
									$tmp2 = "Default Printer  : $($DefaultPrinter)"
									$tmp3 = "Session Printers : $($SessionPrinters)"
									If($MSWord -or $PDF)
									{
										$SettingsWordTable += @{
										Text = $txt;
										Value = $tmp1;
										}
										
										$SettingsWordTable += @{
										Text = "";
										Value = $tmp2;
										}
										
										$SettingsWordTable += @{
										Text = "";
										Value = $tmp3;
										}
									}
									ElseIf($HTML)
									{
										$rowdata += @(,(
										$txt,$htmlbold,
										$tmp1,$htmlwhite))
										
										$rowdata += @(,(
										"",$htmlbold,
										$tmp2,$htmlwhite))
										
										$rowdata += @(,(
										"",$htmlbold,
										$tmp3,$htmlwhite))
									}
									ElseIf($Text)
									{
										OutputPolicySetting $txt $tmp1
										OutputPolicySetting "`t`t`t`t" $tmp2
										OutputPolicySetting "`t`t`t`t" $tmp3
									}
									$tmp1 = $Null
									$tmp2 = $Null
									$tmp3 = $Null
								}
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.PrinterAssignments.State;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.PrinterAssignments.State,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.PrinterAssignments.State 
							}
						}
					}
					If((validStateProp $Setting AutoCreationEventLogPreference State ) -and ($Setting.AutoCreationEventLogPreference.State -ne "NotConfigured"))
					{
						$txt = "ICA\Printing\Printer auto-creation event log preference"
						$tmp = ""
						Switch ($Setting.AutoCreationEventLogPreference.Value)
						{
							"LogErrorsOnly"			{$tmp = "Log errors only"; Break}
							"LogErrorsAndWarnings"	{$tmp = "Log errors and warnings"; Break}
							"DoNotLog"				{$tmp = "Do not log errors or warnings"; Break}
							Default					{$tmp = "Printer auto-creation event log preference could not be determined: $($Setting.AutoCreationEventLogPreference.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp
						}
						$tmp = $Null
					}
					If((validStateProp $Setting SessionPrinters State ) -and ($Setting.SessionPrinters.State -ne "NotConfigured"))
					{
						$txt = "ICA\Printing\Session printers"
						If(validStateProp $Setting SessionPrinters Values )
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = "";
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								"",$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt ""
							}
							$valArray = $Setting.SessionPrinters.Values
							$tmp = ""
							ForEach($printer in $valArray)
							{
								$prArray = $printer.Split(',')
								ForEach($element in $prArray)
								{
									If($element.SubString(0, 2) -eq "\\")
									{
										$index = $element.SubString(2).IndexOf('\')
										If($index -ge 0)
										{
											$server = $element.SubString(0, $index + 2)
											$share  = $element.SubString($index + 3)
											$tmp = "Server: $($server)"
											If($MSWord -or $PDF)
											{
												$SettingsWordTable += @{
												Text = "";
												Value = $tmp;
												}
											}
											ElseIf($HTML)
											{
												$rowdata += @(,(
												"",$htmlbold,
												$tmp,$htmlwhite))
											}
											ElseIf($Text)
											{
												OutputPolicySetting "`t`t`t     " $tmp
											}
											$tmp = "Shared Name: $($share)"
											If($MSWord -or $PDF)
											{
												$SettingsWordTable += @{
												Text = "";
												Value = $tmp;
												}
											}
											ElseIf($HTML)
											{
												$rowdata += @(,(
												"",$htmlbold,
												$tmp,$htmlwhite))
											}
											ElseIf($Text)
											{
												OutputPolicySetting "`t`t`t     " $tmp
											}
										}
										$index = $Null
									}
									Else
									{
										$tmp1 = $element.SubString(0, 4)
										$tmp = Get-PrinterModifiedSettings $tmp1 $element
										If(![String]::IsNullOrEmpty($tmp))
										{
											If($MSWord -or $PDF)
											{
												$SettingsWordTable += @{
												Text = "";
												Value = $tmp;
												}
											}
											ElseIf($HTML)
											{
												$rowdata += @(,(
												"",$htmlbold,
												$tmp,$htmlwhite))
											}
											ElseIf($Text)
											{
												OutputPolicySetting "`t`t`t     " $tmp
											}
										}
										$tmp1 = $Null
										$tmp = $Null
									}
								}
							}

							$valArray = $Null
							$prArray = $Null
							$tmp = $Null
						}
						Else
						{
							$tmp = "No Session printers were found"
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $tmp;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$tmp,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $tmp
							}
						}
					}
					If((validStateProp $Setting WaitForPrintersToBeCreated State ) -and ($Setting.WaitForPrintersToBeCreated.State -ne "NotConfigured"))
					{
						$txt = "ICA\Printing\Wait for printers to be created (server desktop)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.WaitForPrintersToBeCreated.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.WaitForPrintersToBeCreated.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.WaitForPrintersToBeCreated.State 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Printing\Client Printers"
					If((validStateProp $Setting ClientPrinterAutoCreation State ) -and ($Setting.ClientPrinterAutoCreation.State -ne "NotConfigured"))
					{
						$txt = "ICA\Printing\Client Printers\Auto-create client printers"
						$tmp = ""
						Switch ($Setting.ClientPrinterAutoCreation.Value)
						{
							"DoNotAutoCreate"		{$tmp = "Do not auto-create client printers"; Break}
							"DefaultPrinterOnly"	{$tmp = "Auto-create the client's Default printer only"; Break}
							"LocalPrintersOnly"		{$tmp = "Auto-create local (non-network) client printers only"; Break}
							"AllPrinters"			{$tmp = "Auto-create all client printers"; Break}
							Default					{$tmp = "Auto-create client printers could not be determined: $($Setting.ClientPrinterAutoCreation.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp
						}
						$tmp = $Null
					}
					If((validStateProp $Setting GenericUniversalPrinterAutoCreation State ) -and ($Setting.GenericUniversalPrinterAutoCreation.State -ne "NotConfigured"))
					{
						$txt = "ICA\Printing\Client Printers\Auto-create generic universal printer"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.GenericUniversalPrinterAutoCreation.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.GenericUniversalPrinterAutoCreation.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.GenericUniversalPrinterAutoCreation.State 
						}
					}
					If((validStateProp $Setting AutoCreatePDFPrinter State ) -and ($Setting.AutoCreatePDFPrinter.State -ne "NotConfigured"))
					{
						$txt = "ICA\Printing\Client Printers\Auto-create PDF Universal Printer"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.AutoCreatePDFPrinter.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.AutoCreatePDFPrinter.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.AutoCreatePDFPrinter.State 
						}
					}
					If((validStateProp $Setting ClientPrinterNames State ) -and ($Setting.ClientPrinterNames.State -ne "NotConfigured"))
					{
						$txt = "ICA\Printing\Client Printers\Client printer names"
						$tmp = ""
						Switch ($Setting.ClientPrinterNames.Value)
						{
							"StandardPrinterNames"	{$tmp = "Standard printer names"; Break}
							"LegacyPrinterNames"	{$tmp = "Legacy printer names"; Break}
							Default					{$tmp = "Client printer names could not be determined: $($Setting.ClientPrinterNames.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
						$tmp = $Null
					}
					If((validStateProp $Setting DirectConnectionsToPrintServers State ) -and ($Setting.DirectConnectionsToPrintServers.State -ne "NotConfigured"))
					{
						$txt = "ICA\Printing\Client Printers\Direct connections to print servers"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.DirectConnectionsToPrintServers.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.DirectConnectionsToPrintServers.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.DirectConnectionsToPrintServers.State 
						}
					}
					If((validStateProp $Setting PrinterDriverMappings State ) -and ($Setting.PrinterDriverMappings.State -ne "NotConfigured"))
					{
						$txt = "ICA\Printing\Client Printers\Printer driver mapping and compatibility"
						If(validStateProp $Setting PrinterDriverMappings Values )
						{
							$array = $Setting.PrinterDriverMappings.Values
							$tmp = $array[0]
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $tmp;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$tmp,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $tmp
							}
							
							$cnt = -1
							ForEach($element in $array)
							{
								$cnt++
								
								If($cnt -ne 0)
								{
									$Items = $element.Split(',')
									$DriverName = $Items[0]
									$Action = $Items[1]
									If($Action -match 'Replace=')
									{
										$ServerDriver = $Action.substring($Action.indexof("=")+1)
										$Action = "Replace "
									}
									Else
									{
										$ServerDriver = ""
										If($Action -eq "Allow")
										{
											$Action = "Allow "
										}
										ElseIf($Action -eq "Deny")
										{
											$Action = "Do not create "
										}
										ElseIf($Action -eq "UPD_Only")
										{
											$Action = "Create with universal driver "
										}
									}
									$tmp = "Driver Name: $($DriverName)"
									If($MSWord -or $PDF)
									{
										$SettingsWordTable += @{
										Text = "";
										Value = $tmp;
										}
									}
									ElseIf($HTML)
									{
										$rowdata += @(,(
										"",$htmlbold,
										$tmp,$htmlwhite))
									}
									ElseIf($Text)
									{
										OutputPolicySetting "`t`t`t`t`t`t`t`t     " $tmp
									}
									$tmp = "Action     : $($Action)"
									If($MSWord -or $PDF)
									{
										$SettingsWordTable += @{
										Text = "";
										Value = $tmp;
										}
									}
									ElseIf($HTML)
									{
										$rowdata += @(,(
										"",$htmlbold,
										$tmp,$htmlwhite))
									}
									ElseIf($Text)
									{
										OutputPolicySetting "`t`t`t`t`t`t`t`t     " $tmp
									}
									$tmp = "Settings   : "
									If($MSWord -or $PDF)
									{
										$SettingsWordTable += @{
										Text = "";
										Value = $tmp;
										}
									}
									ElseIf($HTML)
									{
										$rowdata += @(,(
										"",$htmlbold,
										$tmp,$htmlwhite))
									}
									ElseIf($Text)
									{
										OutputPolicySetting "`t`t`t`t`t`t`t`t     " $tmp
									}
									If($Items.count -gt 2)
									{
										[int]$BeginAt = 2
										[int]$EndAt = $Items.count
										for ($i=$BeginAt;$i -lt $EndAt; $i++) 
										{
											$tmp2 = $Items[$i].SubString(0, 4)
											$tmp = Get-PrinterModifiedSettings $tmp2 $Items[$i]
											If(![String]::IsNullOrEmpty($tmp))
											{
												If($MSWord -or $PDF)
												{
													$SettingsWordTable += @{
													Text = "";
													Value = $tmp;
													}
												}
												ElseIf($HTML)
												{
													$rowdata += @(,(
													"",$htmlbold,
													$tmp,$htmlwhite))
												}
												ElseIf($Text)
												{
													OutputPolicySetting "`t`t`t`t`t`t`t`t     " $tmp
												}
											}
										}
									}
									Else
									{
										$tmp = "Unmodified "
										If($MSWord -or $PDF)
										{
											$SettingsWordTable += @{
											Text = "";
											Value = $tmp;
											}
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											"",$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting "`t`t`t`t`t`t`t`t     " $tmp
										}
									}

									If(![String]::IsNullOrEmpty($ServerDriver))
									{
										$tmp = "Server Driver: $($ServerDriver)"
										If($MSWord -or $PDF)
										{
											$SettingsWordTable += @{
											Text = "";
											Value = $tmp;
											}
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											"",$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting "`t`t`t`t`t`t`t`t     " $tmp
										}
									}
									$tmp = $Null
								}
							}
						}
						Else
						{
							$tmp = "No Printer driver mapping and compatibility were found"
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $tmp;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$tmp,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $tmp
							}
						}
					}
					If((validStateProp $Setting PrinterPropertiesRetention State ) -and ($Setting.PrinterPropertiesRetention.State -ne "NotConfigured"))
					{
						$txt = "ICA\Printing\Client Printers\Printer properties retention"
						$tmp = ""
						Switch ($Setting.PrinterPropertiesRetention.Value)
						{
							"SavedOnClientDevice"	{$tmp = "Saved on the client device only"; Break}
							"RetainedInUserProfile"	{$tmp = "Retained in user profile only"; Break}
							"FallbackToProfile"		{$tmp = "Held in profile only if not saved on client"; Break}
							"DoNotRetain"			{$tmp = "Do not retain printer properties"; Break}
							Default					{$tmp = "Printer properties retention could not be determined: $($Setting.PrinterPropertiesRetention.Value)"; Break}
						}

						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
						$tmp = $Null
					}
					If((validStateProp $Setting RetainedAndRestoredClientPrinters State ) -and ($Setting.RetainedAndRestoredClientPrinters.State -ne "NotConfigured"))
					{
						$txt = "ICA\Printing\Client Printers\Retained and restored client printers"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.RetainedAndRestoredClientPrinters.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.RetainedAndRestoredClientPrinters.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.RetainedAndRestoredClientPrinters.State 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Printing\Drivers"
					If((validStateProp $Setting InboxDriverAutoInstallation State ) -and ($Setting.InboxDriverAutoInstallation.State -ne "NotConfigured"))
					{
						$txt = "ICA\Printing\Drivers\Automatic installation of in-box printer drivers"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.InboxDriverAutoInstallation.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.InboxDriverAutoInstallation.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.InboxDriverAutoInstallation.State 
						}
					}
					If((validStateProp $Setting UniversalDriverPriority State ) -and ($Setting.UniversalDriverPriority.State -ne "NotConfigured"))
					{
						$txt = "ICA\Printing\Drivers\Universal driver preference"
						$Values = $Setting.UniversalDriverPriority.Value.Split(';')
						$tmp = ""
						$cnt = 0
						ForEach($Value in $Values)
						{
							If($Null -eq $Value)
							{
								$Value = ''
							}
							$cnt++
							$tmp = "$($Value)"
							If($cnt -eq 1)
							{
								If($MSWord -or $PDF)
								{
									$SettingsWordTable += @{
									Text = $txt;
									Value = $tmp;
									}
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									$txt,$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting $txt $tmp 
								}
							}
							Else
							{
								If($MSWord -or $PDF)
								{
									$SettingsWordTable += @{
									Text = "";
									Value = $tmp;
									}
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									"",$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting "`t`t`t`t`t`t" $tmp
								}
							}
						}
						$tmp = $Null
						$Values = $Null
					}
					If((validStateProp $Setting UniversalPrintDriverUsage State ) -and ($Setting.UniversalPrintDriverUsage.State -ne "NotConfigured"))
					{
						$txt = "ICA\Printing\Drivers\Universal print driver usage"
						$tmp = ""
						Switch ($Setting.UniversalPrintDriverUsage.Value)
						{
							"SpecificOnly"			{$tmp = "Use only printer model specific drivers"; Break}
							"UpdOnly"				{$tmp = "Use universal printing only"; Break}
							"FallbackToUpd"			{$tmp = "Use universal printing only if requested driver is unavailable"; Break}
							"FallbackToSpecific"	{$tmp = "Use printer model specific drivers only if universal printing is unavailable"; Break}
							Default					{$tmp = "Universal print driver usage could not be determined: $($Setting.UniversalPrintDriverUsage.Value)"; Break}
						}

						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
						$tmp = $Null
					}
					
					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Printing\Universal Print Server"
					If((validStateProp $Setting UpcSslCipherSuite State ) -and ($Setting.UpcSslCipherSuite.State -ne "NotConfigured"))
					{
						#Added V2.23
						$txt = "ICA\Printing\Universal Print Server\SSL Cipher Suite"
						Switch ($Setting.UpcSslCipherSuite.Value)
						{
							"All"	{$tmp = "All"; Break}
							"COM"	{$tmp = "COM"; Break}
							"GOV"	{$tmp = "GOV"; Break}
							Default	{$tmp = "Universal Print Server SSL Cipher Suite value could not be determined: $($Setting.UpcSslCipherSuite.Value)"; Break}
						}
						
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
					}
					If((validStateProp $Setting UpcSslComplianceMode State ) -and ($Setting.UpcSslComplianceMode.State -ne "NotConfigured"))
					{
						#Added V2.23
						$txt = "ICA\Printing\Universal Print Server\SSL Compliance Mode"
						Switch ($Setting.UpcSslComplianceMode.Value)
						{
							"None"		{$tmp = "None"; Break}
							"SP800_52"	{$tmp = "SP800-52"; Break}
							Default		{$tmp = "Universal Print Server SSL Compliance Mode value could not be determined: $($Setting.UpcSslComplianceMode.Value)"; Break}
						}
						
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
					}
					If((validStateProp $Setting UpcSslEnable State ) -and ($Setting.UpcSslEnable.State -ne "NotConfigured"))
					{
						$txt = "ICA\Printing\Universal Print Server\SSL Enabled"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.UpcSslEnable.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.UpcSslEnable.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.UpcSslEnable.State 
						}
					}
					If((validStateProp $Setting UpcSslFips State ) -and ($Setting.UpcSslFips.State -ne "NotConfigured"))
					{
						$txt = "ICA\Printing\Universal Print Server\SSL FIPS Mode"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.UpcSslFips.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.UpcSslFips.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.UpcSslFips.State 
						}
					}
					If((validStateProp $Setting UpcSslProtocolVersion State ) -and ($Setting.UpcSslProtocolVersion.State -ne "NotConfigured"))
					{
						#Added V2.23
						$txt = "ICA\Printing\Universal Print Server\SSL Protocol Version"
						Switch ($Setting.UpcSslProtocolVersion.Value)
						{
							"All"	{$tmp = "All"; Break}
							"TLS1"	{$tmp = "TLSv1"; Break}
							"TLS11"	{$tmp = "TLSv1.1"; Break}
							"TLS12"	{$tmp = "TLSv1.2"; Break}
							Default	{$tmp = "Universal Print Server SSL Protocol Version value could not be determined: $($Setting.UpcSslProtocolVersion.Value)"; Break}
						}
						
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
					}
					If((validStateProp $Setting UpcSslCgpPort State ) -and ($Setting.UpcSslCgpPort.State -ne "NotConfigured"))
					{
						#Added V2.23
						$txt = "ICA\Printing\Universal Print Server\SSL Universal Print Server encrypted print data stream (CGP) port"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.UpcSslCgpPort.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.UpcSslCgpPort.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.UpcSslCgpPort.Value 
						}
					}
					If((validStateProp $Setting UpcSslHttpsPort State ) -and ($Setting.UpcSslHttpsPort.State -ne "NotConfigured"))
					{
						#Added V2.23
						$txt = "ICA\Printing\Universal Print Server\SSL Universal Print Server encrypted web service (HTTPS/SOAP) port"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.UpcSslHttpsPort.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.UpcSslHttpsPort.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.UpcSslHttpsPort.Value 
						}
					}
					If((validStateProp $Setting UpsEnable State ) -and ($Setting.UpsEnable.State -ne "NotConfigured"))
					{
						$txt = "ICA\Printing\Universal Print Server\Universal Print Server enable"
						If($Setting.UpsEnable.State)
						{
							$tmp = ""
						}
						Else
						{
							$tmp = "Disabled"
						}
						Switch ($Setting.UpsEnable.Value)
						{
							"UpsEnabledWithFallback"	{$tmp = "Enabled with fallback to Windows' native remote printing"; Break}
							"UpsOnlyEnabled"			{$tmp = "Enabled with no fallback to Windows' native remote printing"; Break}
							"UpsDisabled"				{$tmp = "Disabled"; Break} #added V2.20
							Default						{$tmp = "Universal Print Server enable value could not be determined: $($Setting.UpsEnable.Value)"; Break}
						}
						
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
					}
					If((validStateProp $Setting UpsCgpPort State ) -and ($Setting.UpsCgpPort.State -ne "NotConfigured"))
					{
						$txt = "ICA\Printing\Universal Print Server\Universal Print Server print data stream (CGP) port"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.UpsCgpPort.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.UpsCgpPort.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.UpsCgpPort.Value 
						}
					}
					If((validStateProp $Setting UpsPrintStreamInputBandwidthLimit State ) -and ($Setting.UpsPrintStreamInputBandwidthLimit.State -ne "NotConfigured"))
					{
						$txt = "ICA\Printing\Universal Print Server\Universal Print Server print stream input bandwidth limit (Kbps)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.UpsPrintStreamInputBandwidthLimit.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.UpsPrintStreamInputBandwidthLimit.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.UpsPrintStreamInputBandwidthLimit.Value 
						}
					}
					If((validStateProp $Setting UpsHttpPort State ) -and ($Setting.UpsHttpPort.State -ne "NotConfigured"))
					{
						$txt = "ICA\Printing\Universal Print Server\Universal Print Server web service (HTTP/SOAP) port"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.UpsHttpPort.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.UpsHttpPort.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.UpsHttpPort.Value 
						}
					}
					If((validStateProp $Setting LoadBalancedPrintServers State ) -and ($Setting.LoadBalancedPrintServers.State -ne "NotConfigured"))
					{
						$txt = "ICA\Printing\Universal Print Server\Universal Print Servers for load balancing"
						If(validStateProp $Setting LoadBalancedPrintServers Values )
						{
							$array = $Setting.LoadBalancedPrintServers.Values
							$tmp = $array[0]
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $tmp;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$tmp,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $tmp 
							}

							$txt = ""
							$cnt = -1
							
							ForEach($element in $array)
							{
								$cnt++
								
								If($cnt -ne 0)
								{
									$tmp = "$($element) "
									If($MSWord -or $PDF)
									{
										$SettingsWordTable += @{
										Text = "";
										Value = $tmp;
										}
									}
									ElseIf($HTML)
									{
										$rowdata += @(,(
										"",$htmlbold,
										$tmp,$htmlwhite))
									}
									ElseIf($Text)
									{
										OutputPolicySetting "`t`t`t`t`t`t`t`t`t      " $tmp
									}
								}
							}
							$array = $Null
							$tmp = $Null
						}
						Else
						{
							$tmp = "No Universal Print Servers for load balancing were found"
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $tmp;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$tmp,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $tmp 
							}
						}
					}
					If((validStateProp $Setting PrintServersOutOfServiceThreshold State ) -and ($Setting.PrintServersOutOfServiceThreshold.State -ne "NotConfigured"))
					{
						$txt = "ICA\Printing\Universal Print Server\Universal Print Servers out-of-service threshold (seconds)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.PrintServersOutOfServiceThreshold.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.PrintServersOutOfServiceThreshold.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.PrintServersOutOfServiceThreshold.Value 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Printing\Universal Printing"
					If((validStateProp $Setting EMFProcessingMode State ) -and ($Setting.EMFProcessingMode.State -ne "NotConfigured"))
					{
						$txt = "ICA\Printing\Universal Printing\Universal printing EMF processing mode"
						$tmp = ""
						Switch ($Setting.EMFProcessingMode.Value)
						{
							"ReprocessEMFsForPrinter"	{$tmp = "Reprocess EMFs for printer"; Break}
							"SpoolDirectlyToPrinter"	{$tmp = "Spool directly to printer"; Break}
							Default						{$tmp = "Universal printing EMF processing mode could not be determined: $($Setting.EMFProcessingMode.Value)"; Break}
						}
						 
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
						$tmp = $Null
					}
					If((validStateProp $Setting ImageCompressionLimit State ) -and ($Setting.ImageCompressionLimit.State -ne "NotConfigured"))
					{
						$txt = "ICA\Printing\Universal Printing\Universal printing image compression limit"
						$tmp = ""
						Switch ($Setting.ImageCompressionLimit.Value)
						{
							"NoCompression"			{$tmp = "No compression"; Break}
							"LosslessCompression"	{$tmp = "Best quality (lossless compression)"; Break}
							"MinimumCompression"	{$tmp = "High quality"; Break}
							"MediumCompression"		{$tmp = "Standard quality"; Break}
							"MaximumCompression"	{$tmp = "Reduced quality (maximum compression)"; Break}
							Default					{$tmp = "Universal printing image compression limit could not be determined: $($Setting.ImageCompressionLimit.Value)"; Break}
						}
						
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
						$tmp = $Null
					}
					If((validStateProp $Setting UPDCompressionDefaults State ) -and ($Setting.UPDCompressionDefaults.State -ne "NotConfigured"))
					{
						$txt = "ICA\Printing\Universal Printing\Universal printing optimization defaults"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = "";
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							"",$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt "" 
						}
						
						$TmpArray = $Setting.UPDCompressionDefaults.Value.Split(';')
						$tmp = ""
						ForEach($Thing in $TmpArray)
						{
							$TestLabel = $Thing.substring(0, $Thing.indexof("="))
							$TestSetting = $Thing.substring($Thing.indexof("=")+1)
							$TxtLabel = ""
							$TxtSetting = ""
							Switch($TestLabel)
							{
								"ImageCompression"
								{
									$TxtLabel = "Desired image quality:"
									Switch($TestSetting)
									{
										"StandardQuality"	{$TxtSetting = "Standard quality"; Break}
										"BestQuality"		{$TxtSetting = "Best quality (lossless compression)"; Break}
										"HighQuality"		{$TxtSetting = "High quality"; Break}
										"ReducedQuality"	{$TxtSetting = "Reduced quality (maximum compression)"; Break}
									}
								}
								"HeavyweightCompression"
								{
									$TxtLabel = "Enable heavyweight compression:"
									If($TestSetting -eq "True")
									{
										$TxtSetting = "Yes"
									}
									Else
									{
										$TxtSetting = "No"
									}
								}
								"ImageCaching"
								{
									$TxtLabel = "Allow caching of embedded images:"
									If($TestSetting -eq "True")
									{
										$TxtSetting = "Yes"
									}
									Else
									{
										$TxtSetting = "No"
									}
								}
								"FontCaching"
								{
									$TxtLabel = "Allow caching of embedded fonts:"
									If($TestSetting -eq "True")
									{
										$TxtSetting = "Yes"
									}
									Else
									{
										$TxtSetting = "No"
									}
								}
								"AllowNonAdminsToModify"
								{
									$TxtLabel = "Allow non-administrators to modify these settings:"
									If($TestSetting -eq "True")
									{
										$TxtSetting = "Yes"
									}
									Else
									{
										$TxtSetting = "No"
									}
								}
							}
							$tmp = "$($TxtLabel) $TxtSetting "
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = "";
								Value = $tmp;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								"",$htmlbold,
								$tmp,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting "`t`t`t`t`t`t`t`t`t" $tmp
							}
						}
						$TmpArray = $Null
						$tmp = $Null
						$TestLabel = $Null
						$TestSetting = $Null
						$TxtLabel = $Null
						$TxtSetting = $Null
					}
					If((validStateProp $Setting UniversalPrintingPreviewPreference State ) -and ($Setting.UniversalPrintingPreviewPreference.State -ne "NotConfigured"))
					{
						$txt = "ICA\Printing\Universal Printing\Universal printing preview preference"
						$tmp = ""
						Switch ($Setting.UniversalPrintingPreviewPreference.Value)
						{
							"NoPrintPreview"		{$tmp = "Do not use print preview for auto-created or generic universal printers"; Break}
							"AutoCreatedOnly"		{$tmp = "Use print preview for auto-created printers only"; Break}
							"GenericOnly"			{$tmp = "Use print preview for generic universal printers only"; Break}
							"AutoCreatedAndGeneric"	{$tmp = "Use print preview for both auto-created and generic universal printers"; Break}
							Default					{$tmp = "Universal printing preview preference could not be determined: $($Setting.UniversalPrintingPreviewPreference.Value)"; Break}
						}
						
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
						$tmp = $Null
					}
					If((validStateProp $Setting DPILimit State ) -and ($Setting.DPILimit.State -ne "NotConfigured"))
					{
						$txt = "ICA\Printing\Universal Printing\Universal printing print quality limit"
						$tmp = ""
						Switch ($Setting.DPILimit.Value)
						{
							"Draft"				{$tmp = "Draft (150 DPI)"; Break}
							"LowResolution"		{$tmp = "Low Resolution (300 DPI)"; Break}
							"MediumResolution"	{$tmp = "Medium Resolution (600 DPI)"; Break}
							"HighResolution"	{$tmp = "High Resolution (1200 DPI)"; Break}
							"Unlimited"			{$tmp = "No Limit"; Break}
							Default				{$tmp = "Universal printing print quality limit could not be determined: $($Setting.DPILimit.Value)"; Break}
						}
						
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
						$tmp = $Null
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Security"
					If((validStateProp $Setting MinimumEncryptionLevel State ) -and ($Setting.MinimumEncryptionLevel.State -ne "NotConfigured"))
					{
						$txt = "ICA\Security\SecureICA minimum encryption level" 
						$tmp = ""
						Switch ($Setting.MinimumEncryptionLevel.Value)
						{
							"Unknown"	{$tmp = "Unknown encryption"; Break}
							"Basic"		{$tmp = "Basic"; Break}
							"LogOn"		{$tmp = "RC5 (128 bit) logon only"; Break}
							"Bits40"	{$tmp = "RC5 (40 bit)"; Break}
							"Bits56"	{$tmp = "RC5 (56 bit)"; Break}
							"Bits128"	{$tmp = "RC5 (128 bit)"; Break}
							Default		{$tmp = "SecureICA minimum encryption level could not be determined: $($Setting.MinimumEncryptionLevel.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Server Limits"
					If((validStateProp $Setting IdleTimerInterval State ) -and ($Setting.IdleTimerInterval.State -ne "NotConfigured"))
					{
						$txt = "ICA\Server Limits\Server idle timer interval (milliseconds)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.IdleTimerInterval.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.IdleTimerInterval.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.IdleTimerInterval.Value 
						}
					}
					
					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Session Interactivity"
					If((validStateProp $Setting LossTolerantThresholds State ) -and ($Setting.LossTolerantThresholds.State -ne "NotConfigured"))
					{
						$txt = "ICA\Session Interactivity\Loss Tolerant Mode Thresholds"
						#added in 2.33 for CVAD 2003
						<#
						Value=		Threshold Type             Threshold Value
						loss,n; 	Packet Loss Percentage     n
						latency,n;	Round Trip Latency (ms)    nnn
						#>
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = "";
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							"",$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt ""
						}
						$Values = $Setting.LossTolerantThresholds.Value.Split(';')
						$tmp = ""
						ForEach($Value in $Values)
						{
							If($Value -eq "")
							{
								Continue
							}
							
							$tmparray = $Value.Split(",")
							$ThresholdType  = $tmparray[0]
							$ThresholdValue = $tmparray[1]
							
							If($ThresholdType -eq "")
							{
								Continue
							}
							
							Switch ($ThresholdType)
							{
								"loss"	
									{
										$tmp = "Threshold Type: Packet Loss Percentage     - Threshold Value: $ThresholdValue"; Break
									}
								"latency"	
									{
										$tmp = "Threshold Type: Round Trip Latency (ms)    - Threshold Value: $ThresholdValue"; Break
									}
								Default		
									{
										$tmp = "Unknown Values: Threshold Type: $ThresholdType - Threshold Value: $ThresholdValue"; Break
									}
							}
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = "";
								Value = $tmp;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								"",$htmlbold,
								$tmp,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting "`t`t`t`t`t`t       " $tmp
							}
						}
						$tmp = $Null
						$Values = $Null
					}
					
					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Session Limits"
					If((validStateProp $Setting SessionDisconnectTimer State ) -and ($Setting.SessionDisconnectTimer.State -ne "NotConfigured"))
					{
						$txt = "ICA\Session Limits\Disconnected session timer"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.SessionDisconnectTimer.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.SessionDisconnectTimer.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.SessionDisconnectTimer.State 
						}
					}
					If((validStateProp $Setting SessionDisconnectTimerInterval State ) -and ($Setting.SessionDisconnectTimerInterval.State -ne "NotConfigured"))
					{
						$txt = "ICA\Session Limits\Disconnected session timer interval (minutes)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.SessionDisconnectTimerInterval.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.SessionDisconnectTimerInterval.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.SessionDisconnectTimerInterval.Value 
						}
					}
					If((validStateProp $Setting SessionConnectionTimer State ) -and ($Setting.SessionConnectionTimer.State -ne "NotConfigured"))
					{
						$txt = "ICA\Session Limits\Session connection timer"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.SessionConnectionTimer.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.SessionConnectionTimer.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.SessionConnectionTimer.State 
						}
					}
					If((validStateProp $Setting SessionConnectionTimerInterval State ) -and ($Setting.SessionConnectionTimerInterval.State -ne "NotConfigured"))
					{
						$txt = "ICA\Session Limits\Session connection timer interval (minutes)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.SessionConnectionTimerInterval.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.SessionConnectionTimerInterval.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.SessionConnectionTimerInterval.Value 
						}
					}
					If((validStateProp $Setting SessionIdleTimer State ) -and ($Setting.SessionIdleTimer.State -ne "NotConfigured"))
					{
						$txt = "ICA\Session Limits\Session idle timer"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.SessionIdleTimer.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.SessionIdleTimer.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.SessionIdleTimer.State 
						}
					}
					If((validStateProp $Setting SessionIdleTimerInterval State ) -and ($Setting.SessionIdleTimerInterval.State -ne "NotConfigured"))
					{
						$txt = "ICA\Session Limits\Session idle timer interval (minutes)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.SessionIdleTimerInterval.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.SessionIdleTimerInterval.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.SessionIdleTimerInterval.Value 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Session Watermark"
					If((validStateProp $Setting EnableSessionWatermark State ) -and ($Setting.EnableSessionWatermark.State -ne "NotConfigured"))
					{
						#New in 7.17
						$txt = "ICA\Session Watermark\Enable session watermark"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.EnableSessionWatermark.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.EnableSessionWatermark.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.EnableSessionWatermark.State 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Session Watermark\Watermark Content"
					If((validStateProp $Setting WatermarkIncludeClientIPAddress State ) -and ($Setting.WatermarkIncludeClientIPAddress.State -ne "NotConfigured"))
					{
						#New in 7.17
						$txt = "ICA\Session Watermark\Watermark Content\Include client IP address"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.WatermarkIncludeClientIPAddress.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.WatermarkIncludeClientIPAddress.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.WatermarkIncludeClientIPAddress.State 
						}
					}
					If((validStateProp $Setting WatermarkIncludeConnectTime State ) -and ($Setting.WatermarkIncludeConnectTime.State -ne "NotConfigured"))
					{
						#New in 7.17
						$txt = "ICA\Session Watermark\Watermark Content\Include connection time"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.WatermarkIncludeConnectTime.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.WatermarkIncludeConnectTime.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.WatermarkIncludeConnectTime.State 
						}
					}
					If((validStateProp $Setting WatermarkIncludeLogonUsername State ) -and ($Setting.WatermarkIncludeLogonUsername.State -ne "NotConfigured"))
					{
						#New in 7.17
						$txt = "ICA\Session Watermark\Watermark Content\Include logon user name"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.WatermarkIncludeLogonUsername.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.WatermarkIncludeLogonUsername.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.WatermarkIncludeLogonUsername.State 
						}
					}
					If((validStateProp $Setting WatermarkIncludeVDAHostName State ) -and ($Setting.WatermarkIncludeVDAHostName.State -ne "NotConfigured"))
					{
						#New in 7.17
						$txt = "ICA\Session Watermark\Watermark Content\Include VDA host name"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.WatermarkIncludeVDAHostName.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.WatermarkIncludeVDAHostName.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.WatermarkIncludeVDAHostName.State 
						}
					}
					If((validStateProp $Setting WatermarkIncludeVDAIPAddress State ) -and ($Setting.WatermarkIncludeVDAIPAddress.State -ne "NotConfigured"))
					{
						#New in 7.17
						$txt = "ICA\Session Watermark\Watermark Content\Include VDA IP address"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.WatermarkIncludeVDAIPAddress.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.WatermarkIncludeVDAIPAddress.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.WatermarkIncludeVDAIPAddress.State 
						}
					}
					If((validStateProp $Setting WatermarkCustomText State ) -and ($Setting.WatermarkCustomText.State -ne "NotConfigured"))
					{
						#New in 7.17
						$txt = "ICA\Session Watermark\Watermark Content\Watermark custom text"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.WatermarkCustomText.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.WatermarkCustomText.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.WatermarkCustomText.Value 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Session Watermark\Watermark Style"
					If((validStateProp $Setting WatermarkStyle State ) -and ($Setting.WatermarkStyle.State -ne "NotConfigured"))
					{
						#New in 7.17
						$txt = "ICA\Session Watermark\Watermark Style\Session watermark style"
						$tmp = ""
						Switch ($Setting.WatermarkStyle.Value)
						{
							"StyleMultiple"	{$tmp = "Multiple"; Break}
							"StyleSingle"	{$tmp = "Single"; Break}
							Default			{$tmp = "Session watermark style could not be determined: $($Setting.WatermarkStyle.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp
						}
						$tmp = $Null
					}
					If((validStateProp $Setting WatermarkTransparency State ) -and ($Setting.WatermarkTransparency.State -ne "NotConfigured"))
					{
						#New in 7.17
						$txt = "ICA\Session Watermark\Watermark Style\Watermark transparency"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.WatermarkTransparency.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.WatermarkTransparency.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.WatermarkTransparency.Value 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Session Reliability"
					If((validStateProp $Setting SessionReliabilityConnections State ) -and ($Setting.SessionReliabilityConnections.State -ne "NotConfigured"))
					{
						$txt = "ICA\Session Reliability\Session reliability connections"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.SessionReliabilityConnections.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.SessionReliabilityConnections.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.SessionReliabilityConnections.State 
						}
					}
					If((validStateProp $Setting SessionReliabilityPort State ) -and ($Setting.SessionReliabilityPort.State -ne "NotConfigured"))
					{
						$txt = "ICA\Session Reliability\Session reliability port number"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.SessionReliabilityPort.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.SessionReliabilityPort.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.SessionReliabilityPort.Value 
						}
					}
					If((validStateProp $Setting SessionReliabilityTimeout State ) -and ($Setting.SessionReliabilityTimeout.State -ne "NotConfigured"))
					{
						$txt = "ICA\Session Reliability\Session reliability timeout (seconds)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.SessionReliabilityTimeout.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.SessionReliabilityTimeout.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.SessionReliabilityTimeout.Value 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Time Zone Control"
					If((validStateProp $Setting LocalTimeEstimation State ) -and ($Setting.LocalTimeEstimation.State -ne "NotConfigured"))
					{
						$txt = "ICA\Time Zone Control\Estimate local time for legacy clients"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.LocalTimeEstimation.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.LocalTimeEstimation.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.LocalTimeEstimation.State 
						}
					}
					If((validStateProp $Setting RestoreServerTime State ) -and ($Setting.RestoreServerTime.State -ne "NotConfigured"))
					{
						#added in 1906
						$txt = "ICA\Time Zone Control\Restore Desktop OS time zone on session disconnect or logoff"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.RestoreServerTime.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.RestoreServerTime.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.RestoreServerTime.State 
						}
					}
					If((validStateProp $Setting SessionTimeZone State ) -and ($Setting.SessionTimeZone.State -ne "NotConfigured"))
					{
						$txt = "ICA\Time Zone Control\Use local time of client"
						$tmp = ""
						Switch ($Setting.SessionTimeZone.Value)
						{
							"UseServerTimeZone"	{$tmp = "Use server time zone"; Break}
							"UseClientTimeZone"	{$tmp = "Use client time zone"; Break}
							Default				{$tmp = "Use local time of client could not be determined: $($Setting.SessionTimeZone.Value)"; Break}
						}
						
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
						$tmp = $Null
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\TWAIN Devices"
					If((validStateProp $Setting TwainRedirection State ) -and ($Setting.TwainRedirection.State -ne "NotConfigured"))
					{
						$txt = "ICA\TWAIN devices\Client TWAIN device redirection"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.TwainRedirection.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.TwainRedirection.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.TwainRedirection.State 
						}
					}
					If((validStateProp $Setting TwainCompressionLevel State ) -and ($Setting.TwainCompressionLevel.State -ne "NotConfigured"))
					{
						$txt = "ICA\TWAIN devices\TWAIN compression level"
						Switch ($Setting.TwainCompressionLevel.Value)
						{
							"None"		{$tmp = "None"; Break}
							"Low"		{$tmp = "Low"; Break}
							"Medium"	{$tmp = "Medium"; Break}
							"High"		{$tmp = "High"; Break}
							Default		{$tmp = "TWAIN compression level could not be determined: $($Setting.TwainCompressionLevel.Value)"; Break}
						}

						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
						$tmp = $Null
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Bidirectional Content Redirection"
					If((validStateProp $Setting AllowURLRedirection State ) -and ($Setting.AllowURLRedirection.State -ne "NotConfigured"))
					{
						$txt = "ICA\Bidirectional Content Redirection\Allow Bidirectional Content Redirection"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.AllowURLRedirection.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.AllowURLRedirection.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.AllowURLRedirection.State 
						}
					}
					If((validStateProp $Setting AllowedClientURLs State ) -and ($Setting.AllowedClientURLs.State -ne "NotConfigured"))
					{
						$txt = "ICA\Bidirectional Content Redirection\Allowed URLs to be redirected to Client"
						$array = $Setting.AllowedClientURLs.Value.Split(';')
						$tmp = $array[0]
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}

						$txt = ""
						$cnt = -1
						ForEach($element in $array)
						{
							$cnt++
							
							If($cnt -ne 0)
							{
								$tmp = "$($element) "
								If($MSWord -or $PDF)
								{
									$SettingsWordTable += @{
									Text = "";
									Value = $tmp;
									}
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									"",$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting "`t`t`t`t`t`t" $tmp
								}
							}
						}
						$array = $Null
						$tmp = $Null
					}
					If((validStateProp $Setting AllowedVDAURLs State ) -and ($Setting.AllowedVDAURLs.State -ne "NotConfigured"))
					{
						$txt = "ICA\Bidirectional Content Redirection\Allowed URLs to be redirected to VDA"
						$array = $Setting.AllowedVDAURLs.Value.Split(';')
						$tmp = $array[0]
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}

						$txt = ""
						$cnt = -1
						ForEach($element in $array)
						{
							$cnt++
							
							If($cnt -ne 0)
							{
								$tmp = "$($element) "
								If($MSWord -or $PDF)
								{
									$SettingsWordTable += @{
									Text = "";
									Value = $tmp;
									}
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									"",$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting "`t`t`t`t`t`t" $tmp
								}
							}
						}
						$array = $Null
						$tmp = $Null
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\USB Devices"
					If((validStateProp $Setting ClientUsbDeviceOptimizationRules State ) -and ($Setting.ClientUsbDeviceOptimizationRules.State -ne "NotConfigured"))
					{
						$txt = "ICA\USB devices\Client USB device optimization rules"
						If(validStateProp $Setting ClientUsbDeviceOptimizationRules Values )
						{
							$array = $Setting.ClientUsbDeviceOptimizationRules.Values
							$tmp = $array[0]
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $tmp;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$tmp,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $tmp 
							}

							$txt = ""
							$cnt = -1
							ForEach($element in $array)
							{
								$cnt++
								
								If($cnt -ne 0)
								{
									$tmp = "$($element) "
									If($MSWord -or $PDF)
									{
										$SettingsWordTable += @{
										Text = "";
										Value = $tmp;
										}
									}
									ElseIf($HTML)
									{
										$rowdata += @(,(
										"",$htmlbold,
										$tmp,$htmlwhite))
									}
									ElseIf($Text)
									{
										OutputPolicySetting "`t`t`t`t`t`t    " $tmp
									}
								}
							}
							$array = $Null
							$tmp = $Null
						}
						Else
						{
							$tmp = "No Client USB device optimization rules were found"
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $tmp;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$tmp,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $tmp 
							}
						}
					}
					If((validStateProp $Setting UsbDeviceRedirection State ) -and ($Setting.UsbDeviceRedirection.State -ne "NotConfigured"))
					{
						$txt = "ICA\USB devices\Client USB device redirection"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.UsbDeviceRedirection.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.UsbDeviceRedirection.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.UsbDeviceRedirection.State 
						}
					}
					If((validStateProp $Setting UsbDeviceRedirectionRules State ) -and ($Setting.UsbDeviceRedirectionRules.State -ne "NotConfigured"))
					{
						$txt = "ICA\USB devices\Client USB device redirection rules"
						If(validStateProp $Setting UsbDeviceRedirectionRules Values )
						{
							$array = $Setting.UsbDeviceRedirectionRules.Values
							$tmp = $array[0]
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $tmp;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$tmp,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $tmp 
							}

							$txt = ""
							$cnt = -1
							ForEach($element in $array)
							{
								$cnt++
								
								If($cnt -ne 0)
								{
									$tmp = "$($element) "
									If($MSWord -or $PDF)
									{
										$SettingsWordTable += @{
										Text = "";
										Value = $tmp;
										}
									}
									ElseIf($HTML)
									{
										$rowdata += @(,(
										"",$htmlbold,
										$tmp,$htmlwhite))
									}
									ElseIf($Text)
									{
										OutputPolicySetting "`t`t`t`t`t`t   " $tmp
									}
								}
							}
							$array = $Null
							$tmp = $Null
						}
						Else
						{
							$tmp = "No Client USB device redirections rules were found"
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $tmp;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$tmp,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $tmp 
							}
						}
					}
					If((validStateProp $Setting UsbPlugAndPlayRedirection State ) -and ($Setting.UsbPlugAndPlayRedirection.State -ne "NotConfigured"))
					{
						$txt = "ICA\USB devices\Client USB Plug and Play device redirection"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.UsbPlugAndPlayRedirection.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.UsbPlugAndPlayRedirection.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.UsbPlugAndPlayRedirection.State 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Visual Display"
					If((validStateProp $Setting PreferredColorDepthForSimpleGraphics State ) -and ($Setting.PreferredColorDepthForSimpleGraphics.State -ne "NotConfigured"))
					{
						$txt = "ICA\Visual Display\Preferred color depth for simple graphics"
						$tmp = ""
						Switch ($Setting.PreferredColorDepthForSimpleGraphics.Value)
						{
							"ColorDepth24Bit"	{$tmp = "24 bits per pixel"; Break}
							"ColorDepth16Bit"	{$tmp = "16 bits per pixel"; Break}
							"ColorDepth8Bit"	{$tmp = "8 bits per pixel"; Break}
							"Default"			{$tmp = "Preferred color depth for simple graphics could not be determined: $($Setting.PreferredColorDepthForSimpleGraphics.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
					}
					If((validStateProp $Setting FramesPerSecond State ) -and ($Setting.FramesPerSecond.State -ne "NotConfigured"))
					{
						$txt = "ICA\Visual Display\Target frame rate (fps)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.FramesPerSecond.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.FramesPerSecond.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.FramesPerSecond.Value 
						}
					}
					If((validStateProp $Setting VisualQuality State ) -and ($Setting.VisualQuality.State -ne "NotConfigured"))
					{
						$txt = "ICA\Visual Display\Visual quality"
						$tmp = ""
						Switch ($Setting.VisualQuality.Value)
						{
							"BuildToLossless"	{$tmp = "Build to Lossless"; Break}
							"AlwaysLossless"	{$tmp = "Always Lossless"; Break}
							"High"				{$tmp = "High"; Break}
							"Medium"			{$tmp = "Medium"; Break}
							"Low"				{$tmp = "Low"; Break}
							"Default"			{$tmp = "Visual quality could not be determined: $($Setting.VisualQuality.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Visual Display\Moving Images"
					If((validStateProp $Setting MinimumAdaptiveDisplayJpegQuality State ) -and ($Setting.MinimumAdaptiveDisplayJpegQuality.State -ne "NotConfigured"))
					{
						$txt = "ICA\Visual Display\Moving Images\Minimum image quality"
						$tmp = ""
						Switch ($Setting.MinimumAdaptiveDisplayJpegQuality.Value)
						{
							"UltraHigh"	{$tmp = "Ultra high"; Break}
							"VeryHigh"  {$tmp = "Very high"; Break}
							"High"      {$tmp = "High"; Break}
							"Normal"    {$tmp = "Normal"; Break}
							"Low"       {$tmp = "Low"; Break}
							Default		{$tmp = "Minimum image quality could not be determined: $($Setting.MinimumAdaptiveDisplayJpegQuality.Value)"; Break}
						}
						
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
						$tmp = $Null
					}
					If((validStateProp $Setting MovingImageCompressionConfiguration State ) -and ($Setting.MovingImageCompressionConfiguration.State -ne "NotConfigured"))
					{
						$txt = "ICA\Visual Display\Moving Images\Moving image compression"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.MovingImageCompressionConfiguration.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.MovingImageCompressionConfiguration.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.MovingImageCompressionConfiguration.State 
						}
					}
					If((validStateProp $Setting ProgressiveCompressionLevel State ) -and ($Setting.ProgressiveCompressionLevel.State -ne "NotConfigured"))
					{
						$txt = "ICA\Visual Display\Moving Images\Progressive compression level"
						$tmp = ""
						Switch ($Setting.ProgressiveCompressionLevel.Value)
						{
							"UltraHigh" {$tmp = "Ultra high"; Break}
							"VeryHigh"  {$tmp = "Very high"; Break}
							"High"      {$tmp = "High"; Break}
							"Normal"    {$tmp = "Normal"; Break}
							"Low"       {$tmp = "Low"; Break}
							"None"      {$tmp = "None"; Break}
							Default		{$tmp = "Progressive compression level could not be determined: $($Setting.ProgressiveCompressionLevel.Value)"; Break}
						}
						
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
						$tmp = $Null
					}
					If((validStateProp $Setting ProgressiveCompressionThreshold State ) -and ($Setting.ProgressiveCompressionThreshold.State -ne "NotConfigured"))
					{
						$txt = "ICA\Visual Display\Moving Images\Progressive compression threshold value (Kbps)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ProgressiveCompressionThreshold.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ProgressiveCompressionThreshold.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ProgressiveCompressionThreshold.Value 
						}
					}
					If((validStateProp $Setting TargetedMinimumFramesPerSecond State ) -and ($Setting.TargetedMinimumFramesPerSecond.State -ne "NotConfigured"))
					{
						$txt = "ICA\Visual Display\Moving Images\Target Minimum Frame Rate (fps)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.TargetedMinimumFramesPerSecond.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.TargetedMinimumFramesPerSecond.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.TargetedMinimumFramesPerSecond.Value 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\Visual Display\Still Images"
					If((validStateProp $Setting ExtraColorCompression State ) -and ($Setting.ExtraColorCompression.State -ne "NotConfigured"))
					{
						$txt = "ICA\Visual Display\Still Images\Extra Color Compression"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExtraColorCompression.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExtraColorCompression.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExtraColorCompression.State 
						}
					}
					If((validStateProp $Setting ExtraColorCompressionThreshold State ) -and ($Setting.ExtraColorCompressionThreshold.State -ne "NotConfigured"))
					{
						$txt = "ICA\Visual Display\Still Images\Extra Color Compression Threshold (Kbps)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExtraColorCompressionThreshold.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExtraColorCompressionThreshold.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExtraColorCompressionThreshold.Value 
						}
					}
					If((validStateProp $Setting ProgressiveHeavyweightCompression State ) -and ($Setting.ProgressiveHeavyweightCompression.State -ne "NotConfigured"))
					{
						$txt = "ICA\Visual Display\Still Images\Heavyweight compression"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ProgressiveHeavyweightCompression.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ProgressiveHeavyweightCompression.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ProgressiveHeavyweightCompression.State 
						}
					}
					If((validStateProp $Setting LossyCompressionLevel State ) -and ($Setting.LossyCompressionLevel.State -ne "NotConfigured"))
					{
						$txt = "ICA\Visual Display\Still Images\Lossy compression level"
						$tmp = ""
						Switch ($Setting.LossyCompressionLevel.Value)
						{
							"None"		{$tmp = "None"; Break}
							"Low"		{$tmp = "Low"; Break}
							"Medium"	{$tmp = "Medium"; Break}
							"High"		{$tmp = "High"; Break}
							Default		{$tmp = "Lossy compression level could not be determined: $($Setting.LossyCompressionLevel.Value)"; Break}
						}
						
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
						$tmp = $Null
					}
					If((validStateProp $Setting LossyCompressionThreshold State ) -and ($Setting.LossyCompressionThreshold.State -ne "NotConfigured"))
					{
						$txt = "ICA\Visual Display\Still Images\Lossy compression threshold value (Kbps)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.LossyCompressionThreshold.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.LossyCompressionThreshold.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.LossyCompressionThreshold.Value 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tICA\WebSockets"
					If((validStateProp $Setting AcceptWebSocketsConnections State ) -and ($Setting.AcceptWebSocketsConnections.State -ne "NotConfigured"))
					{
						$txt = "ICA\WebSockets\WebSockets connections"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.AcceptWebSocketsConnections.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.AcceptWebSocketsConnections.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.AcceptWebSocketsConnections.State 
						}
					}
					If((validStateProp $Setting WebSocketsPort State ) -and ($Setting.WebSocketsPort.State -ne "NotConfigured"))
					{
						$txt = "ICA\WebSockets\WebSockets port number"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.WebSocketsPort.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.WebSocketsPort.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.WebSocketsPort.Value 
						}
					}
					If((validStateProp $Setting WSTrustedOriginServerList State ) -and ($Setting.WSTrustedOriginServerList.State -ne "NotConfigured"))
					{
						$txt = "ICA\WebSockets\WebSockets trusted origin server list"
						$tmpArray = $Setting.WSTrustedOriginServerList.Value.Split(",")
						$tmp = ""
						$cnt = 0
						ForEach($Thing in $tmpArray)
						{
							$cnt++
							$tmp = "$($Thing)"
							If($cnt -eq 1)
							{
								If($MSWord -or $PDF)
								{
									$SettingsWordTable += @{
									Text = $txt;
									Value = $tmp;
									}
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									$txt,$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting $txt $tmp
								}
							}
							Else
							{
								If($MSWord -or $PDF)
								{
									$SettingsWordTable += @{
									Text = "";
									Value = $tmp;
									}
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									"",$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting "`t`t`t`t`t`t    " $tmp
								}
							}
						}
						$tmpArray = $Null
						$tmp = $Null
					}
					
					Write-Verbose "$(Get-Date -Format G): `t`t`tLoad Management"
					If((validStateProp $Setting ConcurrentLogonsTolerance State ) -and ($Setting.ConcurrentLogonsTolerance.State -ne "NotConfigured"))
					{
						$txt = "Load Management\Concurrent logons tolerance"
						If($Setting.ConcurrentLogonsTolerance.State -eq "Enabled")
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.ConcurrentLogonsTolerance.Value;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.ConcurrentLogonsTolerance.Value,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.ConcurrentLogonsTolerance.Value 
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.ConcurrentLogonsTolerance.State;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.ConcurrentLogonsTolerance.State,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.ConcurrentLogonsTolerance.State 
							}
						}
					}
					If((validStateProp $Setting CPUUsage State ) -and ($Setting.CPUUsage.State -ne "NotConfigured"))
					{
						$txt = "Load Management\CPU usage"
						$tmp = ""
						If($Setting.CPUUsage.State -eq "Enabled")
						{
							If($Setting.CPUUsage.Value -eq -1)
							{
								$tmp = "Disabled"
							}
							Else
							{
								$tmp = "Report full load $($Setting.CPUUsage.Value)(%)"
							}
						}
						Else
						{
							$tmp = "Disabled"
						}
						If($MSWord -or $PDF)
						{
							If($Setting.CPUUsage.State -eq "Enabled")
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $tmp;
								}
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp
						}
					}
					If((validStateProp $Setting CPUUsageExcludedProcessPriority State ) -and ($Setting.CPUUsageExcludedProcessPriority.State -ne "NotConfigured"))
					{
						$txt = "Load Management\CPU usage excluded process priority"
						If($Setting.CPUUsageExcludedProcessPriority.State -eq "Enabled")
						{
							$tmp = ""
							Switch ($Setting.CPUUsageExcludedProcessPriority.Value)
							{
								"BelowNormalOrLow"	{$tmp = "Below Normal or Low"; Break}
								"Low"				{$tmp = "Low"; Break}
								Default				{$tmp = "CPU usage excluded process priority could not be determined: $($Setting.CPUUsageExcludedProcessPriority.Value)"; Break}
							}
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $tmp;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$tmp,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $tmp 
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.CPUUsageExcludedProcessPriority.State;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.CPUUsageExcludedProcessPriority.State,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.CPUUsageExcludedProcessPriority.State 
							}
						}
					}
					If((validStateProp $Setting DiskUsage State ) -and ($Setting.DiskUsage.State -ne "NotConfigured"))
					{
						$txt = "Load Management\Disk usage"
						$tmp = ""
						If($Setting.DiskUsage.State -eq "Enabled")
						{
							If($Setting.DiskUsage.Value -eq -1)
							{
								$tmp = "Disabled"
							}
							Else
							{
								$tmp = "Report 75% load (disk queue length): $($Setting.DiskUsage.Value)"
							}
						}
						Else
						{
							$tmp = "Disabled"
						}
						
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
					}
					If((validStateProp $Setting MaximumNumberOfSessions State ) -and ($Setting.MaximumNumberOfSessions.State -ne "NotConfigured"))
					{
						If($Setting.MaximumNumberOfSessions.State -eq "Enabled")
						{
							$txt = "Load Management\Maximum number of sessions - Limit"
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.MaximumNumberOfSessions.Value;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.MaximumNumberOfSessions.Value,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.MaximumNumberOfSessions.Value 
							}
						}
						Else
						{
							$txt = "Load Management\Maximum number of sessions"
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.MaximumNumberOfSessions.Value;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.MaximumNumberOfSessions.Value,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.MaximumNumberOfSessions.Value 
							}
						}
					}
					If((validStateProp $Setting MemoryUsage State ) -and ($Setting.MemoryUsage.State -ne "NotConfigured"))
					{
						$txt = "Load Management\Memory usage"
						$tmp = ""
						If($Setting.MemoryUsage.State -eq "Enabled")
						{
							If($Setting.MemoryUsage.Value -eq -1)
							{
								$tmp = "Disabled"
							}
							Else
							{
								$tmp = "Report full load (%): $($Setting.MemoryUsage.Value)"
							}
						}
						Else
						{
							$tmp = "Disabled"
						}
						
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
					}
					If((validStateProp $Setting MemoryUsageBaseLoad State ) -and ($Setting.MemoryUsageBaseLoad.State -ne "NotConfigured"))
					{
						$txt = "Load Management\Memory usage base load"
						$tmp = ""
						If($Setting.MemoryUsageBaseLoad.State -eq "Enabled")
						{
							$tmp = "Report zero load (MBs): $($Setting.MemoryUsageBaseLoad.Value)"
						}
						Else
						{
							$tmp = "Disabled"
						}
						
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management"
					If((validStateProp $Setting PSForFoldersEnabled State ) -and ($Setting.PSForFoldersEnabled.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Enable profile streaming for folders" #added in 2012
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.PSForFoldersEnabled.State;
							}
						}
						If($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.PSForFoldersEnabled.State,$htmlwhite))
						}
						If($Text)
						{
							OutputPolicySetting $txt $Setting.PSForFoldersEnabled.State
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\Advanced settings"
					If((validStateProp $Setting CEIPEnabled State ) -and ($Setting.CEIPEnabled.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Advanced settings\Customer Experience Improvement Program"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.CEIPEnabled.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.CEIPEnabled.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.CEIPEnabled.State
						}
					}
					If((validStateProp $Setting DisableDynamicConfig State ) -and ($Setting.DisableDynamicConfig.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Advanced settings\Disable automatic configuration"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.DisableDynamicConfig.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.DisableDynamicConfig.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.DisableDynamicConfig.State
						}
					}
					If((validStateProp $Setting CredBasedAccessEnabled State ) -and ($Setting.CredBasedAccessEnabled.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Advanced settings\Enable credential-based access to user stores"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.CredBasedAccessEnabled.State;
							}
						}
						If($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.CredBasedAccessEnabled.State,$htmlwhite))
						}
						If($Text)
						{
							OutputPolicySetting $txt $Setting.CredBasedAccessEnabled.State
						}
					}
					If((validStateProp $Setting FSLogixProfileContainerSupport State ) -and ($Setting.FSLogixProfileContainerSupport.State -ne "NotConfigured"))
					{
						#new in CVAD 2003
						#added in V2.33
						$txt = "Profile Management\Advanced settings\Enable multi-session write-back for profile containers" #renamed in 2103
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.FSLogixProfileContainerSupport.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.FSLogixProfileContainerSupport.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.FSLogixProfileContainerSupport.State
						}
					}
					If((validStateProp $Setting OutlookSearchRoamingEnabled State ) -and ($Setting.OutlookSearchRoamingEnabled.State -ne "NotConfigured"))
					{
						#new in 7.18
						$txt = "Profile Management\Advanced settings\Enable search index roaming for Outlook"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.OutlookSearchRoamingEnabled.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.OutlookSearchRoamingEnabled.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.OutlookSearchRoamingEnabled.State
						}
					}
					If((validStateProp $Setting LogoffRatherThanTempProfile State ) -and ($Setting.LogoffRatherThanTempProfile.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Advanced settings\Log off user if a problem is encountered"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.LogoffRatherThanTempProfile.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.LogoffRatherThanTempProfile.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.LogoffRatherThanTempProfile.State
						}
					}
					If((validStateProp $Setting OutlookSearchRoamingConcurrentSession_Part State ) -and ($Setting.OutlookSearchRoamingConcurrentSession_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Advanced settings\Maximum number of VHDX disks for storing Outlook OST files"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.OutlookSearchRoamingConcurrentSession_Part.Value;
							}
						}
						If($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.OutlookSearchRoamingConcurrentSession_Part.Value,$htmlwhite))
						}
						If($Text)
						{
							OutputPolicySetting $txt $Setting.OutlookSearchRoamingConcurrentSession_Part.Value 
						}
					}
					If((validStateProp $Setting LoadRetries_Part State ) -and ($Setting.LoadRetries_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Advanced settings\Number of retries when accessing locked files"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.LoadRetries_Part.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.LoadRetries_Part.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.LoadRetries_Part.Value 
						}
					}
					If((validStateProp $Setting OutlookEdbBackupEnabled State ) -and ($Setting.OutlookEdbBackupEnabled.State -ne "NotConfigured"))
					{
						#V2.28 new in CVAD 1909
						$txt = "Profile Management\Advanced settings\Outlook search index database - backup and restore"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.OutlookEdbBackupEnabled.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.OutlookEdbBackupEnabled.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.OutlookEdbBackupEnabled.State
						}
					}
					If((validStateProp $Setting ProcessCookieFiles State ) -and ($Setting.ProcessCookieFiles.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Advanced settings\Process Internet cookie files on logoff"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ProcessCookieFiles.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ProcessCookieFiles.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ProcessCookieFiles.State
						}
					}
					If((validStateProp $Setting MultiSiteReplication_Part State ) -and ($Setting.MultiSiteReplication_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Advanced settings\Replicate user stores - Paths to replicate a user store"
						If(validStateProp $Setting MultiSiteReplication_Part Values )
						{
							$tmpArray = $Setting.MultiSiteReplication_Part.Values
							$tmp = ""
							$cnt = 0
							ForEach($Thing in $TmpArray)
							{
								If($Null -eq $Thing)
								{
									$Thing = ''
								}
								$cnt++
								$tmp = "$($Thing) "
								If($cnt -eq 1)
								{
									If($MSWord -or $PDF)
									{
										$SettingsWordTable += @{
										Text = $txt;
										Value = $tmp;
										}
									}
									If($HTML)
									{
										$rowdata += @(,(
										$txt,$htmlbold,
										$tmp,$htmlwhite))
									}
									If($Text)
									{
										OutputPolicySetting $txt $tmp
									}
								}
								Else
								{
									If($MSWord -or $PDF)
									{
										$SettingsWordTable += @{
										Text = "";
										Value = $tmp;
										}
									}
									If($HTML)
									{
										$rowdata += @(,(
										"",$htmlbold,
										$tmp,$htmlwhite))
									}
									If($Text)
									{
										OutputPolicySetting "`t`t`t`t`t`t`t`t`t`t`t    " $tmp
									}
								}
								$txt = ""
							}
							$TmpArray = $Null
							$tmp = $Null
						}
						Else
						{
							$tmp = "No Paths to replicate a user store were found"
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $tmp;
								}
							}
							If($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$tmp,$htmlwhite))
							}
							If($Text)
							{
								OutputPolicySetting $txt $tmp
							}
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\Basic settings"
					If((validStateProp $Setting PSMidSessionWriteBack State ) -and ($Setting.PSMidSessionWriteBack.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Basic settings\Active write back"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.PSMidSessionWriteBack.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.PSMidSessionWriteBack.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.PSMidSessionWriteBack.State
						}
					}
					If((validStateProp $Setting PSMidSessionWriteBackReg State ) -and ($Setting.PSMidSessionWriteBackReg.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Basic settings\Active write back registry"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.PSMidSessionWriteBackReg.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.PSMidSessionWriteBackReg.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.PSMidSessionWriteBack.State
						}
					}
					If((validStateProp $Setting ServiceActive State ) -and ($Setting.ServiceActive.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Basic settings\Enable Profile management"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ServiceActive.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ServiceActive.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ServiceActive.State
						}
					}
					If((validStateProp $Setting ExcludedGroups_Part State ) -and ($Setting.ExcludedGroups_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Basic settings\Excluded groups"
						If($Setting.ExcludedGroups_Part.State -eq "Enabled")
						{
							If(validStateProp $Setting ExcludedGroups_Part Values )
							{
								$tmpArray = $Setting.ExcludedGroups_Part.Values
								$tmp = ""
								$cnt = 0
								ForEach($Thing in $tmpArray)
								{
									$cnt++
									$tmp = "$($Thing)"
									If($cnt -eq 1)
									{
										If($MSWord -or $PDF)
										{
											$SettingsWordTable += @{
											Text = $txt;
											Value = $tmp;
											}
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											$txt,$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting $txt $tmp
										}
									}
									Else
									{
										If($MSWord -or $PDF)
										{
											$SettingsWordTable += @{
											Text = "";
											Value = $tmp;
											}
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											"",$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting "`t`t`t`t`t`t " $tmp
										}
									}
								}
								$tmpArray = $Null
								$tmp = $Null
							}
							Else
							{
								$tmp = "No Excluded groups were found"
								If($MSWord -or $PDF)
								{
									$SettingsWordTable += @{
									Text = $txt;
									Value = $tmp;
									}
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									$txt,$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting $txt $tmp
								}
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.ExcludedGroups_Part.State;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.ExcludedGroups_Part.State,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.ExcludedGroups_Part.State
							}
						}
					}
					If((validStateProp $Setting MigrateUserStore_Part State ) -and ($Setting.MigrateUserStore_Part.State -ne "NotConfigured"))
					{
						#V2.28 new in CVAD 1909
						$txt = "Profile Management\Basic settings\Migrate user store"
						If($Setting.MigrateUserStore_Part.State -eq "Enabled" -and $Setting.MigrateUserStore_Part.Value -eq "")
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = "Disabled";
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								"Disabled",$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt "Disabled"
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.MigrateUserStore_Part.Value;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.MigrateUserStore_Part.Value,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.MigrateUserStore_Part.Value 
							}
						}
					}
					If((validStateProp $Setting OfflineSupport State ) -and ($Setting.OfflineSupport.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Basic settings\Offline profile support"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.OfflineSupport.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.OfflineSupport.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.OfflineSupport.State
						}
					}
					If((validStateProp $Setting DATPath_Part State ) -and ($Setting.DATPath_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Basic settings\Path to user store"
						If($Setting.DATPath_Part.State -eq "Enabled" -and $Setting.DATPath_Part.Value -eq "")
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = "Disabled";
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								"Disabled",$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt "Disabled"
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.DATPath_Part.Value;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.DATPath_Part.Value,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.DATPath_Part.Value 
							}
						}
					}
					If((validStateProp $Setting ProcessAdmins State ) -and ($Setting.ProcessAdmins.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Basic settings\Process logons of local administrators"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ProcessAdmins.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ProcessAdmins.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ProcessAdmins.State
						}
					}
					If((validStateProp $Setting ProcessedGroups_Part State ) -and ($Setting.ProcessedGroups_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Basic settings\Processed groups"
						If($Setting.ProcessedGroups_Part.State -eq "Enabled")
						{
							If(validStateProp $Setting ProcessedGroups_Part Values )
							{
								$tmpArray = $Setting.ProcessedGroups_Part.Values
								$tmp = ""
								$cnt = 0
								ForEach($Thing in $tmpArray)
								{
									$cnt++
									$tmp = "$($Thing)"
									If($cnt -eq 1)
									{
										If($MSWord -or $PDF)
										{
											$SettingsWordTable += @{
											Text = $txt;
											Value = $tmp;
											}
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											$txt,$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting $txt $tmp
										}
									}
									Else
									{
										If($MSWord -or $PDF)
										{
											$SettingsWordTable += @{
											Text = "";
											Value = $tmp;
											}
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											"",$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting "`t`t`t`t`t`t  " $tmp
										}
									}
								}
								$tmpArray = $Null
								$tmp = $Null
							}
							Else
							{
								$tmp = "No Processed groups were found"
								If($MSWord -or $PDF)
								{
									$SettingsWordTable += @{
									Text = $txt;
									Value = $tmp;
									}
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									$txt,$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting $txt $tmp
								}
							}
						}	
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.ProcessedGroups_Part.State;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.ProcessedGroups_Part.State,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.ProcessedGroups_Part.State
							}
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\Citrix Virtual Apps Optimization settings"
					If((validStateProp $Setting XenAppOptimizationEnabled State ) -and ($Setting.XenAppOptimizationEnabled.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Citrix Virtual Apps Optimization settings\Enable Citrix Virtual Apps Optimization"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.XenAppOptimizationEnabled.State;
							}
						}
						If($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.XenAppOptimizationEnabled.State,$htmlwhite))
						}
						If($Text)
						{
							OutputPolicySetting $txt $Setting.XenAppOptimizationEnabled.State
						}
					}
					If((validStateProp $Setting XenAppOptimizationDefinitionPathData State ) -and ($Setting.XenAppOptimizationDefinitionPathData.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Citrix Virtual Apps Optimization settings\Path to Citrix Virtual Apps optimization definitions:"
						If($Setting.XenAppOptimizationDefinitionPathData.State -eq "Enabled" -and $Setting.XenAppOptimizationDefinitionPathData.Value -eq "")
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = "Disabled";
								}
							}
							If($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								"Disabled",$htmlwhite))
							}
							If($Text)
							{
								OutputPolicySetting $txt "Disabled"
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.XenAppOptimizationDefinitionPathData.Value;
								}
							}
							If($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.XenAppOptimizationDefinitionPathData.Value,$htmlwhite))
							}
							If($Text)
							{
								OutputPolicySetting $txt $Setting.XenAppOptimizationDefinitionPathData.Value 
							}
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\Cross-Platform settings"
					If((validStateProp $Setting CPUserGroups_Part State ) -and ($Setting.CPUserGroups_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Cross-Platform settings\Cross-platform settings user groups"
						If($Setting.CPUserGroups_Part.State -eq "Enabled")
						{
							If(validStateProp $Setting CPUserGroups_Part Values )
							{
								$tmpArray = $Setting.CPUserGroups_Part.Values
								$tmp = ""
								$cnt = 0
								ForEach($Thing in $tmpArray)
								{
									$cnt++
									$tmp = "$($Thing)"
									If($cnt -eq 1)
									{
										If($MSWord -or $PDF)
										{
											$SettingsWordTable += @{
											Text = $txt;
											Value = $tmp;
											}
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											$txt,$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting $txt $tmp
										}
									}
									Else
									{
										If($MSWord -or $PDF)
										{
											$SettingsWordTable += @{
											Text = "";
											Value = $tmp;
											}
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											"",$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting "`t`t`t`t`t`t" $tmp
										}
									}
								}
								$tmpArray = $Null
								$tmp = $Null
							}
							Else
							{
								$tmp = "No Cross-platform settings user groups were found"
								If($MSWord -or $PDF)
								{
									$SettingsWordTable += @{
									Text = $txt;
									Value = $tmp;
									}
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									$txt,$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting $txt $tmp
								}
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.CPUserGroups_Part.State;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.CPUserGroups_Part.State,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.CPUserGroups_Part.State
							}
						}
					}
					If((validStateProp $Setting CPEnable State ) -and ($Setting.CPEnable.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Cross-Platform settings\Enable cross-platform settings"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.CPEnable.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.CPEnable.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.CPEnable.State
						}
					}
					If((validStateProp $Setting CPSchemaPathData State ) -and ($Setting.CPSchemaPathData.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Cross-Platform settings\Path to cross-platform definitions"
						If($Setting.CPSchemaPathData.State -eq "Enabled" -and $Setting.CPSchemaPathData.Value -eq "")
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = "Disabled";
								}
							}
							ELseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								"Disabled",$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt "Disabled"
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.CPSchemaPathData.Value;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.CPSchemaPathData.Value,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.CPSchemaPathData.Value 
							}
						}
					}
					If((validStateProp $Setting CPPathData State ) -and ($Setting.CPPathData.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Cross-Platform settings\Path to cross-platform settings store"
						If($Setting.CPPathData.State -eq "Enabled" -and $Setting.CPPathData.Value -eq "")
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = "Disabled";
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								"Disabled",$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt "Disabled"
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.CPPathData.Value;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.CPPathData.Value,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.CPPathData.Value 
							}
						}
					}
					If((validStateProp $Setting CPMigrationFromBaseProfileToCPStore State ) -and ($Setting.CPMigrationFromBaseProfileToCPStore.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Cross-Platform settings\Source for creating cross-platform settings"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.CPMigrationFromBaseProfileToCPStore.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.CPMigrationFromBaseProfileToCPStore.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.CPMigrationFromBaseProfileToCPStore.State
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\File deduplication"
					If((validStateProp $Setting SharedStoreFileExclusionList_Part State ) -and ($Setting.SharedStoreFileExclusionList_Part.State -ne "NotConfigured"))
					{
						#added in CVAD 2209
						$txt = "Profile Management\File deduplication\Files to exclude from the shared store"
						If($Setting.SharedStoreFileExclusionList_Part.State -eq "Enabled")
						{
							If(validStateProp $Setting SharedStoreFileExclusionList_Part Values )
							{
								$tmpArray = $Setting.SharedStoreFileExclusionList_Part.Values
								$tmp = ""
								$cnt = 0
								ForEach($Thing in $tmpArray)
								{
									$cnt++
									$tmp = "$($Thing)"
									If($cnt -eq 1)
									{
										If($MSWord -or $PDF)
										{
											$SettingsWordTable += @{
											Text = $txt;
											Value = $tmp;
											}
										}
										If($HTML)
										{
											$rowdata += @(,(
											$txt,$htmlbold,
											$tmp,$htmlwhite))
										}
										If($Text)
										{
											OutputPolicySetting $txt $tmp
										}
									}
									Else
									{
										If($MSWord -or $PDF)
										{
											$SettingsWordTable += @{
											Text = "";
											Value = $tmp;
											}
										}
										If($HTML)
										{
											$rowdata += @(,(
											"",$htmlbold,
											$tmp,$htmlwhite))
										}
										If($Text)
										{
											OutputPolicySetting "`t`t`t`t`t`t" $tmp
										}
									}
								}
								$tmpArray = $Null
								$tmp = $Null
							}
							Else
							{
								$tmp = "No Files to exclude from the shared store were found"
								If($MSWord -or $PDF)
								{
									$SettingsWordTable += @{
									Text = $txt;
									Value = $tmp;
									}
								}
								If($HTML)
								{
									$rowdata += @(,(
									$txt,$htmlbold,
									$tmp,$htmlwhite))
								}
								If($Text)
								{
									OutputPolicySetting $txt $tmp
								}
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.SharedStoreFileExclusionList_Part.State;
								}
							}
							If($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.SharedStoreFileExclusionList_Part.State,$htmlwhite))
							}
							If($Text)
							{
								OutputPolicySetting $txt $Setting.SharedStoreFileExclusionList_Part.State
							}
						}
					}
					If((validStateProp $Setting SharedStoreFileInclusionList_Part State ) -and ($Setting.SharedStoreFileInclusionList_Part.State -ne "NotConfigured"))
					{
						#added in CVAD 2209
						$txt = "Profile Management\File deduplication\Files to include from the shared store"
						If($Setting.SharedStoreFileInclusionList_Part.State -eq "Enabled")
						{
							If(validStateProp $Setting SharedStoreFileInclusionList_Part Values )
							{
								$tmpArray = $Setting.SharedStoreFileInclusionList_Part.Values
								$tmp = ""
								$cnt = 0
								ForEach($Thing in $tmpArray)
								{
									$cnt++
									$tmp = "$($Thing)"
									If($cnt -eq 1)
									{
										If($MSWord -or $PDF)
										{
											$SettingsWordTable += @{
											Text = $txt;
											Value = $tmp;
											}
										}
										If($HTML)
										{
											$rowdata += @(,(
											$txt,$htmlbold,
											$tmp,$htmlwhite))
										}
										If($Text)
										{
											OutputPolicySetting $txt $tmp
										}
									}
									Else
									{
										If($MSWord -or $PDF)
										{
											$SettingsWordTable += @{
											Text = "";
											Value = $tmp;
											}
										}
										If($HTML)
										{
											$rowdata += @(,(
											"",$htmlbold,
											$tmp,$htmlwhite))
										}
										If($Text)
										{
											OutputPolicySetting "`t`t`t`t`t`t" $tmp
										}
									}
								}
								$tmpArray = $Null
								$tmp = $Null
							}
							Else
							{
								$tmp = "No Files to include from the shared store were found"
								If($MSWord -or $PDF)
								{
									$SettingsWordTable += @{
									Text = $txt;
									Value = $tmp;
									}
								}
								If($HTML)
								{
									$rowdata += @(,(
									$txt,$htmlbold,
									$tmp,$htmlwhite))
								}
								If($Text)
								{
									OutputPolicySetting $txt $tmp
								}
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.SharedStoreFileInclusionList_Part.State;
								}
							}
							If($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.SharedStoreFileInclusionList_Part.State,$htmlwhite))
							}
							If($Text)
							{
								OutputPolicySetting $txt $Setting.SharedStoreFileInclusionList_Part.State
							}
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\File system"
					#added for version 7.15
					If((validStateProp $Setting LogonExclusionCheck_Part State ) -and ($Setting.LogonExclusionCheck_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Logon Exclusion Check"
						$tmp = ""
						Switch ($Setting.LogonExclusionCheck_Part.Value)
						{
							"Disable"	{$tmp = "Synchronize excluded files or folders"; Break}
							"Ignore"	{$tmp = "Ignore excluded files or folders"; Break}
							"Delete"	{$tmp = "Delete excluded files or folders"; Break}
							Default		{$tmp = "Logon exclusion check could not be determined: $($Setting.LogonExclusionCheck_Part.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
					}
					If((validStateProp $Setting LargeFileHandlingList_Part State ) -and ($Setting.LargeFileHandlingList_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Large File Handling List - Files to be created as symbolic links"
						If($Setting.LargeFileHandlingList_Part.State -eq "Enabled")
						{
							If(validStateProp $Setting LargeFileHandlingList_Part Values )
							{
								$tmpArray = $Setting.LargeFileHandlingList_Part.Values
								$tmp = ""
								$cnt = 0
								ForEach($Thing in $tmpArray)
								{
									$cnt++
									$tmp = "$($Thing)"
									If($cnt -eq 1)
									{
										If($MSWord -or $PDF)
										{
											$SettingsWordTable += @{
											Text = $txt;
											Value = $tmp;
											}
										}
										If($HTML)
										{
											$rowdata += @(,(
											$txt,$htmlbold,
											$tmp,$htmlwhite))
										}
										If($Text)
										{
											OutputPolicySetting $txt $tmp
										}
									}
									Else
									{
										If($MSWord -or $PDF)
										{
											$SettingsWordTable += @{
											Text = "";
											Value = $tmp;
											}
										}
										If($HTML)
										{
											$rowdata += @(,(
											"",$htmlbold,
											$tmp,$htmlwhite))
										}
										If($Text)
										{
											OutputPolicySetting "`t`t`t`t`t`t`t`t`t`t`t       " $tmp
										}
									}
								}
								$tmpArray = $Null
								$tmp = $Null
							}
							Else
							{
								$tmp = "No Large File Handling List - Files to be created as symbolic links were found"
								If($MSWord -or $PDF)
								{
									$SettingsWordTable += @{
									Text = $txt;
									Value = $tmp;
									}
								}
								If($HTML)
								{
									$rowdata += @(,(
									$txt,$htmlbold,
									$tmp,$htmlwhite))
								}
								If($Text)
								{
									OutputPolicySetting $txt $tmp
								}
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.LargeFileHandlingList_Part.State;
								}
							}
							If($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.LargeFileHandlingList_Part.State,$htmlwhite))
							}
							If($Text)
							{
								OutputPolicySetting $txt $Setting.LargeFileHandlingList_Part_Part.State
							}
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\File system\Default Exclusions"
					If((validStateProp $Setting DefaultExclusionListSyncDir State ) -and ($Setting.DefaultExclusionListSyncDir.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Default Exclusions\Enable Default Exclusion List - directories"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.DefaultExclusionListSyncDir.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.DefaultExclusionListSyncDir.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.DefaultExclusionListSyncDir.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir01 State ) -and ($Setting.ExclusionDefaultDir01.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Default Exclusions\UPM - !ctx_internetcache!"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir01.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir01.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir01.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir02 State ) -and ($Setting.ExclusionDefaultDir02.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Default Exclusions\UPM - !ctx_localappdata!\Google\Chrome\User Data\Default\Cache"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir02.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir02.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir02.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir03 State ) -and ($Setting.ExclusionDefaultDir03.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Default Exclusions\UPM - !ctx_localappdata!\Google\Chrome\User Data\Default\Cache Theme Images"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir03.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir03.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir03.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir04 State ) -and ($Setting.ExclusionDefaultDir04.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Default Exclusions\UPM - !ctx_localappdata!\Google\Chrome\User Data\Default\JumpListIcons"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir04.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir04.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir04.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir05 State ) -and ($Setting.ExclusionDefaultDir05.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Default Exclusions\UPM - !ctx_localappdata!\Google\Chrome\User Data\Default\JumpListIconsOld"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir05.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir05.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir05.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir06 State ) -and ($Setting.ExclusionDefaultDir06.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Default Exclusions\UPM - !ctx_localappdata!\GroupPolicy"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir06.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir06.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir06.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir07 State ) -and ($Setting.ExclusionDefaultDir07.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Default Exclusions\UPM - !ctx_localappdata!\Microsoft\AppV"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir07.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir07.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir07.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir08 State ) -and ($Setting.ExclusionDefaultDir08.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Default Exclusions\UPM - !ctx_localappdata!\Microsoft\Messenger"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir08.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir08.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir08.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir09 State ) -and ($Setting.ExclusionDefaultDir09.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Default Exclusions\UPM - !ctx_localappdata!\Microsoft\Office\15.0\Lync\Tracing"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir09.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir09.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir09.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir10 State ) -and ($Setting.ExclusionDefaultDir10.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Default Exclusions\UPM - !ctx_localappdata!\Microsoft\OneNote"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir10.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir10.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir10.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir11 State ) -and ($Setting.ExclusionDefaultDir11.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Default Exclusions\UPM - !ctx_localappdata!\Microsoft\Outlook"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir11.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir11.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir11.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir12 State ) -and ($Setting.ExclusionDefaultDir12.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Default Exclusions\UPM - !ctx_localappdata!\Microsoft\Terminal Server Client"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir12.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir12.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir12.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir13 State ) -and ($Setting.ExclusionDefaultDir13.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Default Exclusions\UPM - !ctx_localappdata!\Microsoft\UEV"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir13.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir13.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir13.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir14 State ) -and ($Setting.ExclusionDefaultDir14.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Default Exclusions\UPM - !ctx_localappdata!\Microsoft\Windows Live"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir14.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir14.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir14.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir15 State ) -and ($Setting.ExclusionDefaultDir15.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Default Exclusions\UPM - !ctx_localappdata!\Microsoft\Windows Live Contacts"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir15.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir15.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir15.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir16 State ) -and ($Setting.ExclusionDefaultDir16.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Default Exclusions\UPM - !ctx_localappdata!\Microsoft\Windows\Application Shortcuts"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir16.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir16.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir16.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir17 State ) -and ($Setting.ExclusionDefaultDir17.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Default Exclusions\UPM - !ctx_localappdata!\Microsoft\Windows\Burn"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir17.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir17.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir17.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir18 State ) -and ($Setting.ExclusionDefaultDir18.State -ne "NotConfigured"))
					{
						#fixed 3-Mar-2017 thanks to Esther Barthel
						$txt = "Profile Management\File system\Default Exclusions\UPM - !ctx_localappdata!\Microsoft\Windows\CD Burning"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir18.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir18.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir18.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir19 State ) -and ($Setting.ExclusionDefaultDir19.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Default Exclusions\UPM - !ctx_localappdata!\Microsoft\Windows\Notifications"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir19.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir19.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir19.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir20 State ) -and ($Setting.ExclusionDefaultDir20.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Default Exclusions\UPM - !ctx_localappdata!\Packages"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir20.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir20.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir20.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir21 State ) -and ($Setting.ExclusionDefaultDir21.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Default Exclusions\UPM - !ctx_localappdata!\Sun"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir21.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir21.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir21.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir22 State ) -and ($Setting.ExclusionDefaultDir22.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Default Exclusions\UPM - !ctx_localappdata!\Windows Live"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir22.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir22.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir22.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir23 State ) -and ($Setting.ExclusionDefaultDir23.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Default Exclusions\UPM - !ctx_localsettings!\Temp"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir23.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir23.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir23.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir24 State ) -and ($Setting.ExclusionDefaultDir24.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Default Exclusions\UPM - !ctx_roamingappdata!\Microsoft\AppV\Client\Catalog"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir24.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir24.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir24.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir25 State ) -and ($Setting.ExclusionDefaultDir25.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Default Exclusions\UPM - !ctx_roamingappdata!\Sun\Java\Deployment\cache"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir25.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir25.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir25.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir26 State ) -and ($Setting.ExclusionDefaultDir26.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Default Exclusions\UPM - !ctx_roamingappdata!\Sun\Java\Deployment\log"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir26.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir26.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir26.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir27 State ) -and ($Setting.ExclusionDefaultDir27.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Default Exclusions\UPM - !ctx_roamingappdata!\Sun\Java\Deployment\tmp"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir27.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir27.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir27.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir28 State ) -and ($Setting.ExclusionDefaultDir28.State -ne "NotConfigured"))
					{
						$txt = 'Profile Management\File system\Default Exclusions\UPM - $Recycle.Bin'
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir28.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir28.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir28.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir29 State ) -and ($Setting.ExclusionDefaultDir29.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Default Exclusions\UPM - AppData\LocalLow"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir29.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir29.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir29.State
						}
					}
					If((validStateProp $Setting ExclusionDefaultDir30 State ) -and ($Setting.ExclusionDefaultDir30.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Default Exclusions\UPM - Tracing"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultDir30.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultDir30.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultDir30.State
						}
					}
					
					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\File system\Exclusions"
					If((validStateProp $Setting ExclusionListSyncDir_Part State ) -and ($Setting.ExclusionListSyncDir_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Exclusions\Exclusion list - directories"
						If($Setting.ExclusionListSyncDir_Part.State -eq "Enabled")
						{
							If(validStateProp $Setting ExclusionListSyncDir_Part Values )
							{
								$tmpArray = $Setting.ExclusionListSyncDir_Part.Values
								$tmp = ""
								$cnt = 0
								ForEach($Thing in $tmpArray)
								{
									$cnt++
									$tmp = "$($Thing)"
									If($cnt -eq 1)
									{
										If($MSWord -or $PDF)
										{
											$SettingsWordTable += @{
											Text = $txt;
											Value = $tmp;
											}
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											$txt,$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting $txt $tmp
										}
									}
									Else
									{
										If($MSWord -or $PDF)
										{
											$SettingsWordTable += @{
											Text = "";
											Value = $tmp;
											}
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											"",$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting "`t`t`t`t`t`t`t`t      " $tmp
										}
									}
								}
								$tmpArray = $Null
								$tmp = $Null
							}
							Else
							{
								$tmp = "No Exclusion list - directories were found"
								If($MSWord -or $PDF)
								{
									$SettingsWordTable += @{
									Text = $txt;
									Value = $tmp;
									}
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									$txt,$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting $txt $tmp
								}
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.ExclusionListSyncDir_Part.State;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.ExclusionListSyncDir_Part.State,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.ExclusionListSyncDir_Part.State
							}
						}
					}
					If((validStateProp $Setting ExclusionListSyncFiles_Part State ) -and ($Setting.ExclusionListSyncFiles_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Exclusions\Exclusion list - files"
						If($Setting.ExclusionListSyncFiles_Part.State -eq "Enabled")
						{
							If(validStateProp $Setting ExclusionListSyncFiles_Part Values )
							{
								$tmpArray = $Setting.ExclusionListSyncFiles_Part.Values
								$tmp = ""
								$cnt = 0
								ForEach($Thing in $tmpArray)
								{
									$cnt++
									$tmp = "$($Thing)"
									If($cnt -eq 1)
									{
										If($MSWord -or $PDF)
										{
											$SettingsWordTable += @{
											Text = $txt;
											Value = $tmp;
											}
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											$txt,$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting $txt $tmp
										}
									}
									Else
									{
										If($MSWord -or $PDF)
										{
											$SettingsWordTable += @{
											Text = "";
											Value = $tmp;
											}
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											"",$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting "`t`t`t`t`t`t`t`t" $tmp
										}
									}
								}
								$tmpArray = $Null
								$tmp = $Null
							}
							Else
							{
								$tmp = "No Exclusion list - files were found"
								If($MSWord -or $PDF)
								{
									$SettingsWordTable += @{
									Text = $txt;
									Value = $tmp;
									}
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									$txt,$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting $txt $tmp
								}
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.ExclusionListSyncFiles_Part.State;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.ExclusionListSyncFiles_Part.State,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.ExclusionListSyncFiles_Part.State
							}
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\File system\Synchronization"
					If((validStateProp $Setting SyncDirList_Part State ) -and ($Setting.SyncDirList_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Synchronization\Directories to synchronize"
						If($Setting.SyncDirList_Part.State -eq "Enabled")
						{
							If(validStateProp $Setting SyncDirList_Part Values )
							{
								$tmpArray = $Setting.SyncDirList_Part.Values
								$tmp = ""
								$cnt = 0
								ForEach($Thing in $tmpArray)
								{
									$cnt++
									$tmp = "$($Thing)"
									If($cnt -eq 1)
									{
										If($MSWord -or $PDF)
										{
											$SettingsWordTable += @{
											Text = $txt;
											Value = $tmp;
											}
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											$txt,$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting $txt $tmp
										}
									}
									Else
									{
										If($MSWord -or $PDF)
										{
											$SettingsWordTable += @{
											Text = "";
											Value = $tmp;
											}
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											"",$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting "`t`t`t`t`t`t`t`t`t " $tmp
										}
									}
								}
								$tmpArray = $Null
								$tmp = $Null
							}
							Else
							{
								$tmp = "No Directories to synchronize were found"
								If($MSWord -or $PDF)
								{
									$SettingsWordTable += @{
									Text = $txt;
									Value = $tmp;
									}
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									$txt,$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting $txt $tmp
								}
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.SyncDirList_Part.State;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.SyncDirList_Part.State,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.SyncDirList_Part.State
							}
						}
					}
					If((validStateProp $Setting SyncFileList_Part State ) -and ($Setting.SyncFileList_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Synchronization\Files to synchronize"
						If($Setting.SyncFileList_Part.State -eq "Enabled")
						{
							If(validStateProp $Setting SyncFileList_Part Values )
							{
								$tmpArray = $Setting.SyncFileList_Part.Values
								$tmp = ""
								$cnt = 0
								ForEach($Thing in $tmpArray)
								{
									$cnt++
									$tmp = "$($Thing)"
									If($cnt -eq 1)
									{
										If($MSWord -or $PDF)
										{
											$SettingsWordTable += @{
											Text = $txt;
											Value = $tmp;
											}
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											$txt,$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting $txt $tmp
										}
									}
									Else
									{
										If($MSWord -or $PDF)
										{
											$SettingsWordTable += @{
											Text = "";
											Value = $tmp;
											}
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											"",$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting "`t`t`t`t`t`t" $tmp
										}
									}
								}
								$tmpArray = $Null
								$tmp = $Null
							}
							Else
							{
								$tmp = "No Files to synchronize were found"
								If($MSWord -or $PDF)
								{
									$SettingsWordTable += @{
									Text = $txt;
									Value = $tmp;
									}
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									$txt,$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting $txt $tmp
								}
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.SyncFileList_Part.State;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.SyncFileList_Part.State,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.SyncFileList_Part.State
							}
						}
					}
					If((validStateProp $Setting MirrorFoldersList_Part State ) -and ($Setting.MirrorFoldersList_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Synchronization\Folders to mirror"
						If($Setting.MirrorFoldersList_Part.State -eq "Enabled")
						{
							If(validStateProp $Setting MirrorFoldersList_Part Values )
							{
								$tmpArray = $Setting.MirrorFoldersList_Part.Values
								$tmp = ""
								$cnt = 0
								ForEach($Thing in $tmpArray)
								{
									$cnt++
									$tmp = "$($Thing)"
									If($cnt -eq 1)
									{
										If($MSWord -or $PDF)
										{
											$SettingsWordTable += @{
											Text = $txt;
											Value = $tmp;
											}
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											$txt,$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting $txt $tmp
										}
									}
									Else
									{
										If($MSWord -or $PDF)
										{
											$SettingsWordTable += @{
											Text = "";
											Value = $tmp;
											}
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											"",$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting "`t`t`t`t`t`t`t`t" $tmp
										}
									}
								}
								$tmpArray = $Null
								$tmp = $Null
							}
							Else
							{
								$tmp = "No Folders to mirror were found"
								If($MSWord -or $PDF)
								{
									$SettingsWordTable += @{
									Text = $txt;
									Value = $tmp;
									}
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									$txt,$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting $txt $tmp
								}
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.MirrorFoldersList_Part.State;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.MirrorFoldersList_Part.State,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.MirrorFoldersList_Part.State
							}
						}
					}
					If((validStateProp $Setting ProfileContainer_Part State ) -and ($Setting.ProfileContainer_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\File system\Synchronization\Profile container - List of folders to be contained in profile disk"
						If($Setting.ProfileContainer_Part.State -eq "Enabled")
						{
							If(validStateProp $Setting ProfileContainer_Part Values )
							{
								$tmpArray = $Setting.ProfileContainer_Part.Values
								$tmp = ""
								$cnt = 0
								ForEach($Thing in $tmpArray)
								{
									$cnt++
									$tmp = "$($Thing)"
									If($cnt -eq 1)
									{
										If($MSWord -or $PDF)
										{
											$SettingsWordTable += @{
											Text = $txt;
											Value = $tmp;
											}
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											$txt,$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting $txt $tmp
										}
									}
									Else
									{
										If($MSWord -or $PDF)
										{
											$SettingsWordTable += @{
											Text = "";
											Value = $tmp;
											}
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											"",$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting "`t`t`t`t`t`t`t`t`t`t`t`t`t`t  " $tmp
										}
									}
								}
								$tmpArray = $Null
								$tmp = $Null
							}
							Else
							{
								$tmp = "No Directories to synchronize were found"
								If($MSWord -or $PDF)
								{
									$SettingsWordTable += @{
									Text = $txt;
									Value = $tmp;
									}
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									$txt,$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting $txt $tmp
								}
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.ProfileContainer_Part.State;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.ProfileContainer_Part.State,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.ProfileContainer_Part.State
							}
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\Folder Redirection"
					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\Folder Redirection\AppData(Roaming)"
					If((validStateProp $Setting FRAppDataPath_Part State ) -and ($Setting.FRAppDataPath_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Folder Redirection\AppData(Roaming)\AppData(Roaming) path"
						If($Setting.FRAppDataPath_Part.State -eq "Enabled" -and $Setting.FRAppDataPath_Part.Value -eq "")
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = "Disabled";
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								"Disabled",$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt "Disabled"
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.FRAppDataPath_Part.Value;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.FRAppDataPath_Part.Value,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.FRAppDataPath_Part.Value 
							}
						}
					}
					If((validStateProp $Setting FRAppData_Part State ) -and ($Setting.FRAppData_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Folder Redirection\AppData(Roaming)\Redirection settings for AppData(Roaming)"
						$tmp = ""
						Switch ($Setting.FRAppData_Part.Value)
						{
							"RedirectUncPath"	{$tmp = "Redirect to the following UNC path"; Break}
							Default 			{$tmp = "Redirection settings for AppData(Roaming) cannot be determined: $($Setting.FRAppData_Part.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\Folder Redirection\Common settings"
					If((validStateProp $Setting FRAdminAccess_Part State ) -and ($Setting.FRAdminAccess_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Folder Redirection\Common settings\Grant administrator access"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.FRAdminAccess_Part.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.FRAdminAccess_Part.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.FRAdminAccess_Part.State
						}
					}
					If((validStateProp $Setting FRIncDomainName_Part State ) -and ($Setting.FRIncDomainName_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Folder Redirection\Common settings\Include domain name"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.FRIncDomainName_Part.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.FRIncDomainName_Part.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.FRIncDomainName_Part.State
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\Folder Redirection\Contacts"
					If((validStateProp $Setting FRContactsPath_Part State ) -and ($Setting.FRContactsPath_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Folder Redirection\Contacts\Contacts path"
						If($Setting.FRContactsPath_Part.State -eq "Enabled" -and $Setting.FRContactsPath_Part.Value -eq "")
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = "Disabled";
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								"Disabled",$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt "Disabled"
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.FRContactsPath_Part.Value;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.FRContactsPath_Part.Value,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.FRContactsPath_Part.Value 
							}
						}
					}
					If((validStateProp $Setting FRContacts_Part State ) -and ($Setting.FRContacts_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Folder Redirection\Contacts\Redirection settings for Contacts"
						$tmp = ""
						Switch ($Setting.FRContacts_Part.Value)
						{
							"RedirectUncPath"	{$tmp = "Redirect to the following UNC path"; Break}
							Default 			{$tmp = "Redirection settings for Contacts cannot be determined: $($Setting.FRContacts_Part.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\Folder Redirection\Desktop"
					If((validStateProp $Setting FRDesktopPath_Part State ) -and ($Setting.FRDesktopPath_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Folder Redirection\Desktop\Desktop path"
						If($Setting.FRDesktopPath_Part.State -eq "Enabled" -and $Setting.FRDesktopPath_Part.Value -eq "")
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = "Disabled";
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								"Disabled",$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt "Disabled"
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.FRDesktopPath_Part.Value;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.FRDesktopPath_Part.Value,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.FRDesktopPath_Part.Value 
							}
						}
					}
					If((validStateProp $Setting FRDesktop_Part State ) -and ($Setting.FRDesktop_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Folder Redirection\Desktop\Redirection settings for Desktop"
						$tmp = ""
						Switch ($Setting.FRDesktop_Part.Value)
						{
							"RedirectUncPath"	{$tmp = "Redirect to the following UNC path"; Break}
							Default 			{$tmp = "Redirection settings for Desktop cannot be determined: $($Setting.FRDesktop_Part.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\Folder Redirection\Documents"
					If((validStateProp $Setting FRDocumentsPath_Part State ) -and ($Setting.FRDocumentsPath_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Folder Redirection\Documents\Documents path"
						If($Setting.FRDocumentsPath_Part.State -eq "Enabled" -and $Setting.FRDocumentsPath_Part.Value -eq "")
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = "Disabled";
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								"Disabled",$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt "Disabled"
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.FRDocumentsPath_Part.Value;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.FRDocumentsPath_Part.Value,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.FRDocumentsPath_Part.Value 
							}
						}
					}
					If((validStateProp $Setting FRDocuments_Part State ) -and ($Setting.FRDocuments_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Folder Redirection\Documents\Redirection settings for Documents"
						$tmp = ""
						Switch ($Setting.FRDocuments_Part.Value)
						{
							"RedirectUncPath"		{$tmp = "Redirect to the following UNC path"; Break}
							"RedirectRelativeHome"	{$tmp = "Redirect to the users' home directory"; Break}
							Default 				{$tmp = "Redirection settings for Documents cannot be determined: $($Setting.FRDocuments_Part.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\Folder Redirection\Downloads"
					If((validStateProp $Setting FRDownloadsPath_Part State ) -and ($Setting.FRDownloadsPath_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Folder Redirection\Downloads\Downloads path"
						If($Setting.FRDownloadsPath_Part.State -eq "Enabled" -and $Setting.FRDownloadsPath_Part.Value -eq "")
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = "Disabled";
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								"Disabled",$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt "Disabled"
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.FRDownloadsPath_Part.Value;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.FRDownloadsPath_Part.Value,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.FRDownloadsPath_Part.Value 
							}
						}
					}
					If((validStateProp $Setting FRDownloads_Part State ) -and ($Setting.FRDownloads_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Folder Redirection\Downloads\Redirection settings for Downloads"
						$tmp = ""
						Switch ($Setting.FRDownloads_Part.Value)
						{
							"RedirectUncPath"	{$tmp = "Redirect to the following UNC path"; Break}
							Default 			{$tmp = "Redirection settings for Downloads cannot be determined: $($Setting.FRDownloads_Part.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\Folder Redirection\Favorites"
					If((validStateProp $Setting FRFavoritesPath_Part State ) -and ($Setting.FRFavoritesPath_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Folder Redirection\Favorites\Favorites path"
						If($Setting.FRFavoritesPath_Part.State -eq "Enabled" -and $Setting.FRFavoritesPath_Part.Value -eq "")
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = "Disabled";
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								"Disabled",$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt "Disabled"
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.FRFavoritesPath_Part.Value;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.FRFavoritesPath_Part.Value,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.FRFavoritesPath_Part.Value 
							}
						}
					}
					If((validStateProp $Setting FRFavorites_Part State ) -and ($Setting.FRFavorites_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Folder Redirection\Favorites\Redirection settings for Favorites"
						$tmp = ""
						Switch ($Setting.FRFavorites_Part.Value)
						{
							"RedirectUncPath"	{$tmp = "Redirect to the following UNC path"; Break}
							Default 			{$tmp = "Redirection settings for Favorites cannot be determined: $($Setting.FRFavorites_Part.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\Folder Redirection\Links"
					If((validStateProp $Setting FRLinksPath_Part State ) -and ($Setting.FRLinksPath_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Folder Redirection\Links\Links path"
						If($Setting.FRLinksPath_Part.State -eq "Enabled" -and $Setting.FRLinksPath_Part.Value -eq "")
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = "Disabled";
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								"Disabled",$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt "Disabled"
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.FRLinksPath_Part.Value;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.FRLinksPath_Part.Value,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.FRLinksPath_Part.Value 
							}
						}
					}
					If((validStateProp $Setting FRLinks_Part State ) -and ($Setting.FRLinks_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Folder Redirection\Links\Redirection settings for Links"
						$tmp = ""
						Switch ($Setting.FRLinks_Part.Value)
						{
							"RedirectUncPath"	{$tmp = "Redirect to the following UNC path"; Break}
							Default 			{$tmp = "Redirection settings for Links cannot be determined: $($Setting.FRLinks_Part.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\Folder Redirection\Music"
					If((validStateProp $Setting FRMusicPath_Part State ) -and ($Setting.FRMusicPath_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Folder Redirection\Music\Music path"
						If($Setting.FRMusicPath_Part.State -eq "Enabled" -and $Setting.FRMusicPath_Part.Value -eq "")
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = "Disabled";
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								"Disabled",$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt "Disabled"
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.FRMusicPath_Part.Value;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.FRMusicPath_Part.Value,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.FRMusicPath_Part.Value 
							}
						}
					}
					If((validStateProp $Setting FRMusic_Part State ) -and ($Setting.FRMusic_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Folder Redirection\Music\Redirection settings for Music"
						$tmp = ""
						Switch ($Setting.FRMusic_Part.Value)
						{
							"RedirectUncPath"			{$tmp = "Redirect to the following UNC path"; Break}
							"RedirectRelativeDocuments" {$tmp = "Redirect relative to Documents folder"; Break}
							Default 					{$tmp = "Redirection settings for Music cannot be determined: $($Setting.FRMusic_Part.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\Folder Redirection\Pictures"
					If((validStateProp $Setting FRPicturesPath_Part State ) -and ($Setting.FRPicturesPath_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Folder Redirection\Pictures\Pictures path"
						If($Setting.FRPicturesPath_Part.State -eq "Enabled" -and $Setting.FRPicturesPath_Part.Value -eq "")
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = "Disabled";
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								"Disabled",$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt "Disabled"
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.FRPicturesPath_Part.Value;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.FRPicturesPath_Part.Value,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.FRPicturesPath_Part.Value 
							}
						}
					}
					If((validStateProp $Setting FRPictures_Part State ) -and ($Setting.FRPictures_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Folder Redirection\Pictures\Redirection settings for Pictures"
						$tmp = ""
						Switch ($Setting.FRPictures_Part.Value)
						{
							"RedirectUncPath"			{$tmp = "Redirect to the following UNC path"; Break}
							"RedirectRelativeDocuments" {$tmp = "Redirect relative to Documents folder"; Break}
							Default 					{$tmp = "Redirection settings for Pictures cannot be determined: $($Setting.FRPictures_Part.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\Folder Redirection\Saved Games"
					If((validStateProp $Setting FRSavedGames_Part State ) -and ($Setting.FRSavedGames_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Folder Redirection\Saved Games\Redirection settings for Saved Games"
						$tmp = ""
						Switch ($Setting.FRSavedGames_Part.Value)
						{
							"RedirectUncPath"	{$tmp = "Redirect to the following UNC path"; Break}
							Default 			{$tmp = "Redirection settings for Saved Games cannot be determined: $($Setting.FRSavedGames_Part.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
					}
					If((validStateProp $Setting FRSavedGamesPath_Part State ) -and ($Setting.FRSavedGamesPath_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Folder Redirection\Saved Games\Saved Games path"
						If($Setting.FRSavedGamesPath_Part.State -eq "Enabled" -and $Setting.FRSavedGamesPath_Part.Value -eq "")
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = "Disabled";
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								"Disabled",$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt "Disabled"
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.FRSavedGamesPath_Part.Value;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.FRSavedGamesPath_Part.Value,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.FRSavedGamesPath_Part.Value 
							}
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\Folder Redirection\Searches"
					If((validStateProp $Setting FRSearches_Part State ) -and ($Setting.FRSearches_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Folder Redirection\Searches\Redirection settings for Searches"
						$tmp = ""
						Switch ($Setting.FRSearches_Part.Value)
						{
							"RedirectUncPath"	{$tmp = "Redirect to the following UNC path"; Break}
							Default 			{$tmp = "Redirection settings for Searches cannot be determined: $($Setting.FRSearches_Part.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
					}
					If((validStateProp $Setting FRSearchesPath_Part State ) -and ($Setting.FRSearchesPath_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Folder Redirection\Searches\Searches path"
						If($Setting.FRSearchesPath_Part.State -eq "Enabled" -and $Setting.FRSearchesPath_Part.Value -eq "")
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = "Disabled";
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								"Disabled",$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt "Disabled"
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.FRSearchesPath_Part.Value;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.FRSearchesPath_Part.Value,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.FRSearchesPath_Part.Value 
							}
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\Folder Redirection\Start Menu"
					If((validStateProp $Setting FRStartMenu_Part State ) -and ($Setting.FRStartMenu_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Folder Redirection\Start Menu\Redirection settings for Start Menu"
						$tmp = ""
						Switch ($Setting.FRStartMenu_Part.Value)
						{
							"RedirectUncPath"	{$tmp = "Redirect to the following UNC path"; Break}
							Default 			{$tmp = "Redirection settings for Start Menu cannot be determined: $($Setting.FRStartMenu_Part.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
					}
					If((validStateProp $Setting FRStartMenuPath_Part State ) -and ($Setting.FRStartMenuPath_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Folder Redirection\Start Menu\Start Menu path"
						If($Setting.FRStartMenuPath_Part.State -eq "Enabled" -and $Setting.FRStartMenuPath_Part.Value -eq "")
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = "Disabled";
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								"Disabled",$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt "Disabled"
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.FRStartMenuPath_Part.Value;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.FRStartMenuPath_Part.Value,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.FRStartMenuPath_Part.Value 
							}
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\Folder Redirection\Videos"
					If((validStateProp $Setting FRVideos_Part State ) -and ($Setting.FRVideos_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Folder Redirection\Videos\Redirection settings for Videos"
						$tmp = ""
						Switch ($Setting.FRVideos_Part.Value)
						{
							"RedirectUncPath"			{$tmp = "Redirect to the following UNC path"; Break}
							"RedirectRelativeDocuments" {$tmp = "Redirect relative to Documents folder"; Break}
							Default 					{$tmp = "Redirection settings for Videos cannot be determined: $($Setting.FRVideos_Part.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
					}
					If((validStateProp $Setting FRVideosPath_Part State ) -and ($Setting.FRVideosPath_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Folder Redirection\Videos\Videos path"
						If($Setting.FRVideosPath_Part.State -eq "Enabled" -and $Setting.FRVideosPath_Part.Value -eq "")
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = "Disabled";
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								"Disabled",$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt "Disabled"
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.FRVideosPath_Part.Value;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.FRVideosPath_Part.Value,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.FRVideosPath_Part.Value 
							}
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\Log settings"
					If((validStateProp $Setting LogLevel_ActiveDirectoryActions State ) -and ($Setting.LogLevel_ActiveDirectoryActions.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Log settings\Active Directory actions"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.LogLevel_ActiveDirectoryActions.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.LogLevel_ActiveDirectoryActions.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.LogLevel_ActiveDirectoryActions.State
						}
					}
					If((validStateProp $Setting LogLevel_Information State ) -and ($Setting.LogLevel_Information.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Log settings\Common information"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.LogLevel_Information.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.LogLevel_Information.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.LogLevel_Information.State
						}
					}
					If((validStateProp $Setting LogLevel_Warnings State ) -and ($Setting.LogLevel_Warnings.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Log settings\Common warnings"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.LogLevel_Warnings.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.LogLevel_Warnings.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.LogLevel_Warnings.State
						}
					}
					If((validStateProp $Setting DebugMode State ) -and ($Setting.DebugMode.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Log settings\Enable logging"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.DebugMode.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.DebugMode.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.DebugMode.State
						}
					}
					If((validStateProp $Setting LogLevel_FileSystemActions State ) -and ($Setting.LogLevel_FileSystemActions.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Log settings\File system actions"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.LogLevel_FileSystemActions.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.LogLevel_FileSystemActions.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.LogLevel_FileSystemActions.State
						}
					}
					If((validStateProp $Setting LogLevel_FileSystemNotification State ) -and ($Setting.LogLevel_FileSystemNotification.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Log settings\File system notifications"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.LogLevel_FileSystemNotification.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.LogLevel_FileSystemNotification.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.LogLevel_FileSystemNotification.State
						}
					}
					If((validStateProp $Setting LogLevel_Logoff State ) -and ($Setting.LogLevel_Logoff.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Log settings\Logoff"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.LogLevel_Logoff.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.LogLevel_Logoff.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.LogLevel_Logoff.State
						}
					}
					If((validStateProp $Setting LogLevel_Logon State ) -and ($Setting.LogLevel_Logon.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Log settings\Logon"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.LogLevel_Logon.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.LogLevel_Logon.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.LogLevel_Logon.State
						}
					}
					If((validStateProp $Setting MaxLogSize_Part State ) -and ($Setting.MaxLogSize_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Log settings\Maximum size of the log file (bytes)"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.MaxLogSize_Part.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.MaxLogSize_Part.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.MaxLogSize_Part.Value 
						}
					}
					If((validStateProp $Setting DebugFilePath_Part State ) -and ($Setting.DebugFilePath_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Log settings\Path to log file"
						If($Setting.DebugFilePath_Part.State -eq "Enabled" -and $Setting.DebugFilePath_Part.Value -eq "")
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = "Disabled";
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								"Disabled",$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt "Disabled"
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.DebugFilePath_Part.Value;
								}
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.DebugFilePath_Part.Value,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.DebugFilePath_Part.Value 
							}
						}
					}
					If((validStateProp $Setting LogLevel_UserName State ) -and ($Setting.LogLevel_UserName.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Log settings\Personalized user information"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.LogLevel_UserName.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.LogLevel_UserName.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.LogLevel_UserName.State
						}
					}
					If((validStateProp $Setting LogLevel_PolicyUserLogon State ) -and ($Setting.LogLevel_PolicyUserLogon.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Log settings\Policy values at logon and logoff"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.LogLevel_PolicyUserLogon.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.LogLevel_PolicyUserLogon.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.LogLevel_PolicyUserLogon.State
						}
					}
					If((validStateProp $Setting LogLevel_RegistryActions State ) -and ($Setting.LogLevel_RegistryActions.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Log settings\Registry actions"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.LogLevel_RegistryActions.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.LogLevel_RegistryActions.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.LogLevel_RegistryActions.State
						}
					}
					If((validStateProp $Setting LogLevel_RegistryDifference State ) -and ($Setting.LogLevel_RegistryDifference.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Log settings\Registry differences at logoff"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.LogLevel_RegistryDifference.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.LogLevel_RegistryDifference.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.LogLevel_RegistryDifference.State
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\Profile container settings"
					If((validStateProp $Setting ProfileContainerLocalCache State ) -and ($Setting.ProfileContainerLocalCache.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Profile container settings\Enable local caching for profile containers"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ProfileContainerLocalCache.State;
							}
						}
						If($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ProfileContainerLocalCache.State,$htmlwhite))
						}
						If($Text)
						{
							OutputPolicySetting $txt $Setting.ProfileContainerLocalCache.State
						}
					}
					If((validStateProp $Setting ProfileContainerExclusionListDir_Part State ) -and ($Setting.ProfileContainerExclusionListDir_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Profile container settings\Folders to exclude in profile container"
						If($Setting.ProfileContainerExclusionListDir_Part.State -eq "Enabled")
						{
							If(validStateProp $Setting ProfileContainerExclusionListDir_Part Values )
							{
								$tmpArray = $Setting.ProfileContainerExclusionListDir_Part.Values
								$tmp = ""
								$cnt = 0
								ForEach($Thing in $tmpArray)
								{
									$cnt++
									$tmp = "$($Thing)"
									If($cnt -eq 1)
									{
										If($MSWord -or $PDF)
										{
											$WordTableRowHash = @{
											Text = $txt;
											Value = $tmp;
											}
											$SettingsWordTable += $WordTableRowHash;
										}
										If($HTML)
										{
											$rowdata += @(,(
											$txt,$htmlbold,
											$tmp,$htmlwhite))
										}
										If($Text)
										{
											OutputPolicySetting $txt $tmp
										}
									}
									Else
									{
										If($MSWord -or $PDF)
										{
											$WordTableRowHash = @{
											Text = "";
											Value = $tmp;
											}
											$SettingsWordTable += $WordTableRowHash;
										}
										If($HTML)
										{
											$rowdata += @(,(
											"",$htmlbold,
											$tmp,$htmlwhite))
										}
										If($Text)
										{
											OutputPolicySetting "`t`t`t`t`t`t`t`t`t`t     " $tmp
										}
									}
								}
								$tmpArray = $Null
								$tmp = $Null
							}
							Else
							{
								$tmp = "No Exclusion list was found"
								If($MSWord -or $PDF)
								{
									$WordTableRowHash = @{
									Text = $txt;
									Value = $tmp;
									}
									$SettingsWordTable += $WordTableRowHash;
								}
								If($HTML)
								{
									$rowdata += @(,(
									$txt,$htmlbold,
									$tmp,$htmlwhite))
								}
								If($Text)
								{
									OutputPolicySetting $txt $tmp
								}
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$WordTableRowHash = @{
								Text = $txt;
								Value = $Setting.ProfileContainerExclusionListDir_Part.State;
								}
								$SettingsWordTable += $WordTableRowHash;
							}
							If($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.ProfileContainerExclusionListDir_Part.State,$htmlwhite))
							}
							If($Text)
							{
								OutputPolicySetting $txt $Setting.ProfileContainerExclusionListDir_Part.State
							}
						}
					}
					If((validStateProp $Setting ProfileContainerInclusionListDir_Part State ) -and ($Setting.ProfileContainerInclusionListDir_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Profile container settings\Folders to include in profile container"
						If($Setting.ProfileContainerInclusionListDir_Part.State -eq "Enabled")
						{
							If(validStateProp $Setting ProfileContainerInclusionListDir_Part Values )
							{
								$tmpArray = $Setting.ProfileContainerInclusionListDir_Part.Values
								$tmp = ""
								$cnt = 0
								ForEach($Thing in $tmpArray)
								{
									$cnt++
									$tmp = "$($Thing)"
									If($cnt -eq 1)
									{
										If($MSWord -or $PDF)
										{
											$WordTableRowHash = @{
											Text = $txt;
											Value = $tmp;
											}
											$SettingsWordTable += $WordTableRowHash;
										}
										If($HTML)
										{
											$rowdata += @(,(
											$txt,$htmlbold,
											$tmp,$htmlwhite))
										}
										If($Text)
										{
											OutputPolicySetting $txt $tmp
										}
									}
									Else
									{
										If($MSWord -or $PDF)
										{
											$WordTableRowHash = @{
											Text = "";
											Value = $tmp;
											}
											$SettingsWordTable += $WordTableRowHash;
										}
										If($HTML)
										{
											$rowdata += @(,(
											"",$htmlbold,
											$tmp,$htmlwhite))
										}
										If($Text)
										{
											OutputPolicySetting "`t`t`t`t`t`t`t`t`t`t     " $tmp
										}
									}
								}
								$tmpArray = $Null
								$tmp = $Null
							}
							Else
							{
								$tmp = "No Exclusion list was found"
								If($MSWord -or $PDF)
								{
									$WordTableRowHash = @{
									Text = $txt;
									Value = $tmp;
									}
									$SettingsWordTable += $WordTableRowHash;
								}
								If($HTML)
								{
									$rowdata += @(,(
									$txt,$htmlbold,
									$tmp,$htmlwhite))
								}
								If($Text)
								{
									OutputPolicySetting $txt $tmp
								}
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$WordTableRowHash = @{
								Text = $txt;
								Value = $Setting.ProfileContainerInclusionListDir_Part.State;
								}
								$SettingsWordTable += $WordTableRowHash;
							}
							If($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.ProfileContainerInclusionListDir_Part.State,$htmlwhite))
							}
							If($Text)
							{
								OutputPolicySetting $txt $Setting.ProfileContainerInclusionListDir_Part.State
							}
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\Profile handling"
					If((validStateProp $Setting ApplicationProfilesAutoMigration State ) -and ($Setting.ApplicationProfilesAutoMigration.State -ne "NotConfigured"))
					{
						#V2.28 new in CVAD 1909
						$txt = "Profile Management\Profile handling\Automatic migration of existing application profiles"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ApplicationProfilesAutoMigration.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ApplicationProfilesAutoMigration.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ApplicationProfilesAutoMigration.State
						}
					}
					If((validStateProp $Setting ProfileDeleteDelay_Part State ) -and ($Setting.ProfileDeleteDelay_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Profile handling\Delay before deleting cached profiles"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.ProfileDeleteDelay_Part.Value;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ProfileDeleteDelay_Part.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ProfileDeleteDelay_Part.Value 
						}
					}
					If((validStateProp $Setting DeleteCachedProfilesOnLogoff State ) -and ($Setting.DeleteCachedProfilesOnLogoff.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Profile handling\Delete locally cached profiles on logoff"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.DeleteCachedProfilesOnLogoff.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.DeleteCachedProfilesOnLogoff.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.DeleteCachedProfilesOnLogoff.State
						}
					}
					If((validStateProp $Setting LocalProfileConflictHandling_Part State ) -and ($Setting.LocalProfileConflictHandling_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Profile handling\Local profile conflict handling"
						$tmp = ""
						Switch ($Setting.LocalProfileConflictHandling_Part.Value)
						{
							"Use"		{$tmp = "Use local profile"; Break}
							"Delete"	{$tmp = "Delete local profile"; Break}
							"Rename"	{$tmp = "Rename local profile"; Break}
							Default		{$tmp = "Local profile conflict handling could not be determined: $($Setting.LocalProfileConflictHandling_Part.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
					}
					If((validStateProp $Setting MigrateWindowsProfilesToUserStore_Part State ) -and ($Setting.MigrateWindowsProfilesToUserStore_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Profile handling\Migration of existing profiles"
						$tmp = ""
						Switch ($Setting.MigrateWindowsProfilesToUserStore_Part.Value)
						{
							"All"		{$tmp = "Local and Roaming"; Break}
							"Local"		{$tmp = "Local"; Break}
							"Roaming"	{$tmp = "Roaming"; Break}
							"None"		{$tmp = "None"; Break}
							Default		{$tmp = "Migration of existing profiles could not be determined: $($Setting.MigrateWindowsProfilesToUserStore_Part.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $tmp;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
					}
					If((validStateProp $Setting TemplateProfilePath State ) -and ($Setting.TemplateProfilePath.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Profile handling\Path to the template profile"
						If($Setting.TemplateProfilePath.State -eq "Enabled" -and $Setting.TemplateProfilePath.Value -eq "")
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = "Disabled";
								}
							}
							If($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								"Disabled",$htmlwhite))
							}
							If($Text)
							{
								OutputPolicySetting $txt "Disabled"
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$SettingsWordTable += @{
								Text = $txt;
								Value = $Setting.TemplateProfilePath.Value;
								}
							}
							If($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.TemplateProfilePath.Value,$htmlwhite))
							}
							If($Text)
							{
								OutputPolicySetting $txt $Setting.TemplateProfilePath.Value 
							}
						}
					}
					If((validStateProp $Setting TemplateProfileOverridesLocalProfile State ) -and ($Setting.TemplateProfileOverridesLocalProfile.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Profile handling\Template profile overrides local profile"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.TemplateProfileOverridesLocalProfile.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.TemplateProfileOverridesLocalProfile.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.TemplateProfileOverridesLocalProfile.State
						}
					}
					If((validStateProp $Setting TemplateProfileOverridesRoamingProfile State ) -and ($Setting.TemplateProfileOverridesRoamingProfile.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Profile handling\Template profile overrides roaming profile"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.TemplateProfileOverridesRoamingProfile.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.TemplateProfileOverridesRoamingProfile.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.TemplateProfileOverridesRoamingProfile.State
						}
					}
					If((validStateProp $Setting TemplateProfileIsMandatory State ) -and ($Setting.TemplateProfileIsMandatory.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Profile handling\Template profile used as a Citrix mandatory profile for all logons"
						If($MSWord -or $PDF)
						{
							$SettingsWordTable += @{
							Text = $txt;
							Value = $Setting.TemplateProfileIsMandatory.State;
							}
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.TemplateProfileIsMandatory.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.TemplateProfileIsMandatory.State 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\Registry"
					If((validStateProp $Setting ExclusionList_Part State ) -and ($Setting.ExclusionList_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Registry\Exclusion list"
						If($Setting.ExclusionList_Part.State -eq "Enabled")
						{
							If(validStateProp $Setting ExclusionList_Part Values )
							{
								$tmpArray = $Setting.ExclusionList_Part.Values
								$tmp = ""
								$cnt = 0
								ForEach($Thing in $tmpArray)
								{
									$cnt++
									$tmp = "$($Thing)"
									If($cnt -eq 1)
									{
										If($MSWord -or $PDF)
										{
											$WordTableRowHash = @{
											Text = $txt;
											Value = $tmp;
											}
											$SettingsWordTable += $WordTableRowHash;
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											$txt,$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting $txt $tmp
										}
									}
									Else
									{
										If($MSWord -or $PDF)
										{
											$WordTableRowHash = @{
											Text = "";
											Value = $tmp;
											}
											$SettingsWordTable += $WordTableRowHash;
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											"",$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting "`t`t`t`t`t  " $tmp
										}
									}
								}
								$tmpArray = $Null
								$tmp = $Null
							}
							Else
							{
								$tmp = "No Exclusion list was found"
								If($MSWord -or $PDF)
								{
									$WordTableRowHash = @{
									Text = $txt;
									Value = $tmp;
									}
									$SettingsWordTable += $WordTableRowHash;
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									$txt,$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting $txt $tmp
								}
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$WordTableRowHash = @{
								Text = $txt;
								Value = $Setting.ExclusionList_Part.State;
								}
								$SettingsWordTable += $WordTableRowHash;
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.ExclusionList_Part.State,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.ExclusionList_Part.State
							}
						}
					}
					If((validStateProp $Setting IncludeListRegistry_Part State ) -and ($Setting.IncludeListRegistry_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Registry\Inclusion list"
						If($Setting.IncludeListRegistry_Part.State -eq "Enabled")
						{
							If(validStateProp $Setting IncludeListRegistry_Part Values )
							{
								$tmpArray = $Setting.IncludeListRegistry_Part.Values
								$tmp = ""
								$cnt = 0
								ForEach($Thing in $tmpArray)
								{
									$cnt++
									$tmp = "$($Thing)"
									If($cnt -eq 1)
									{
										If($MSWord -or $PDF)
										{
											$WordTableRowHash = @{
											Text = $txt;
											Value = $tmp;
											}
											$SettingsWordTable += $WordTableRowHash;
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											$txt,$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting $txt $tmp
										}
									}
									Else
									{
										If($MSWord -or $PDF)
										{
											$WordTableRowHash = @{
											Text = "";
											Value = $tmp;
											}
											$SettingsWordTable += $WordTableRowHash;
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											"",$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting "`t`t`t`t`t  " $tmp
										}
									}
								}
								$tmpArray = $Null
								$tmp = $Null
							}
							Else
							{
								$tmp = "No Inclusion list were found"
								If($MSWord -or $PDF)
								{
									$WordTableRowHash = @{
									Text = $txt;
									Value = $tmp;
									}
									$SettingsWordTable += $WordTableRowHash;
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									$txt,$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting $txt $tmp
								}
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$WordTableRowHash = @{
								Text = $txt;
								Value = $Setting.IncludeList_Part.State;
								}
								$SettingsWordTable += $WordTableRowHash;
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.IncludeList_Part.State,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.IncludeList_Part.State
							}
						}
					}
					If((validStateProp $Setting LastKnownGoodRegistry State ) -and ($Setting.LastKnownGoodRegistry.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Registry\NTUSER.DAT backup"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.LastKnownGoodRegistry.State;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.LastKnownGoodRegistry.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.LastKnownGoodRegistry.State 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\Registry\Default Exclusions"
					If((validStateProp $Setting DefaultExclusionList State ) -and ($Setting.DefaultExclusionList.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Registry\Enable Default Exclusion list"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.DefaultExclusionList.State;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.DefaultExclusionList.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.DefaultExclusionList.State 
						}
					}
					If((validStateProp $Setting ExclusionDefaultReg01 State ) -and ($Setting.ExclusionDefaultReg01.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Registry\UPM - Software\Microsoft\AppV\Client\Integration"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultReg01.State;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultReg01.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultReg01.State 
						}
					}
					If((validStateProp $Setting ExclusionDefaultReg02 State ) -and ($Setting.ExclusionDefaultReg02.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Registry\UPM - Software\Microsoft\AppV\Client\Publishing"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultReg02.State;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultReg02.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultReg02.State 
						}
					}
					If((validStateProp $Setting ExclusionDefaultReg03 State ) -and ($Setting.ExclusionDefaultReg03.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Registry\UPM - Software\Microsoft\Speech_OneCore"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.ExclusionDefaultReg03.State;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ExclusionDefaultReg03.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ExclusionDefaultReg03.State 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\Streamed user profiles"
					If((validStateProp $Setting PSAlwaysCache State ) -and ($Setting.PSAlwaysCache.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Streamed user profiles\Always cache"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.PSAlwaysCache.State;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.PSAlwaysCache.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.PSAlwaysCache.State 
						}
					}
					If((validStateProp $Setting PSAlwaysCache_Part State ) -and ($Setting.PSAlwaysCache_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Streamed user profiles\Always cache size (MB)"
						If($Setting.PSAlwaysCache_Part.State -eq "Enabled")
						{
							If($MSWord -or $PDF)
							{
								$WordTableRowHash = @{
								Text = $txt;
								Value = $Setting.PSAlwaysCache_Part.Value;
								}
								$SettingsWordTable += $WordTableRowHash;
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.PSAlwaysCache_Part.Value,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.PSAlwaysCache_Part.Value 
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$WordTableRowHash = @{
								Text = $txt;
								Value = $Setting.PSAlwaysCache_Part.State;
								}
								$SettingsWordTable += $WordTableRowHash;
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.PSAlwaysCache_Part.State,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.PSAlwaysCache_Part.State 
							}
						}
					}
					If((validStateProp $Setting PSEnabled State ) -and ($Setting.PSEnabled.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Streamed user profiles\Profile streaming"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.PSEnabled.State;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.PSEnabled.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.PSEnabled.State 
						}
					}
					If((validStateProp $Setting StreamingExclusionList_Part State ) -and ($Setting.StreamingExclusionList_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Streamed user profiles\Profile Streaming Exclusion list - directories"
						If($Setting.StreamingExclusionList_Part.State -eq "Enabled")
						{
							If(validStateProp $Setting StreamingExclusionList_Part Values )
							{
								$tmpArray = $Setting.StreamingExclusionList_Part.Values.Split(",")
								$tmp = ""
								$cnt = 0
								ForEach($Thing in $tmpArray)
								{
									$cnt++
									$tmp = "$($Thing)"
									If($cnt -eq 1)
									{
										If($MSWord -or $PDF)
										{
											$WordTableRowHash = @{
											Text = $txt;
											Value = $tmp;
											}
											$SettingsWordTable += $WordTableRowHash;
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											$txt,$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting $txt $tmp
										}
									}
									Else
									{
										If($MSWord -or $PDF)
										{
											$WordTableRowHash = @{
											Text = "";
											Value = $tmp;
											}
											$SettingsWordTable += $WordTableRowHash;
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											"",$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting "`t`t`t`t`t`t`t`t`t`t`t" $tmp
										}
									}
								}
								$tmpArray = $Null
								$tmp = $Null
							}
							Else
							{
								$tmp = "No Profile Streaming Exclusion list - directories were found"
								If($MSWord -or $PDF)
								{
									$WordTableRowHash = @{
									Text = $txt;
									Value = $tmp;
									}
									$SettingsWordTable += $WordTableRowHash;
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									$txt,$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting $txt $tmp
								}
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$WordTableRowHash = @{
								Text = $txt;
								Value = $Setting.StreamingExclusionList_Part.State;
								}
								$SettingsWordTable += $WordTableRowHash;
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.StreamingExclusionList_Part.State,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.StreamingExclusionList_Part.State 
							}
						}
					}
					If((validStateProp $Setting PSUserGroups_Part State ) -and ($Setting.PSUserGroups_Part.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Streamed user profiles\Streamed user profile groups"
						If($Setting.PSUserGroups_Part.State -eq "Enabled")
						{
							If(validStateProp $Setting PSUserGroups_Part Values )
							{
								$tmpArray = $Setting.PSUserGroups_Part.Values.Split(",")
								$tmp = ""
								$cnt = 0
								ForEach($Thing in $tmpArray)
								{
									$cnt++
									$tmp = "$($Thing)"
									If($cnt -eq 1)
									{
										If($MSWord -or $PDF)
										{
											$WordTableRowHash = @{
											Text = $txt;
											Value = $tmp;
											}
											$SettingsWordTable += $WordTableRowHash;
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											$txt,$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting $txt $tmp
										}
									}
									Else
									{
										If($MSWord -or $PDF)
										{
											$WordTableRowHash = @{
											Text = "";
											Value = $tmp;
											}
											$SettingsWordTable += $WordTableRowHash;
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											"",$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting "`t`t`t`t`t`t`t`t      " $tmp
										}
									}
								}
								$tmpArray = $Null
								$tmp = $Null
							}
							Else
							{
								$tmp = "No Streamed user profile groups were found"
								If($MSWord -or $PDF)
								{
									$WordTableRowHash = @{
									Text = $txt;
									Value = $tmp;
									}
									$SettingsWordTable += $WordTableRowHash;
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									$txt,$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting $txt $tmp
								}
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$WordTableRowHash = @{
								Text = $txt;
								Value = $Setting.PSUserGroups_Part.State;
								}
								$SettingsWordTable += $WordTableRowHash;
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.PSUserGroups_Part.State,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.PSUserGroups_Part.State 
							}
						}
					}
					If((validStateProp $Setting PSPendingLockTimeout State ) -and ($Setting.PSPendingLockTimeout.State -ne "NotConfigured"))
					{
						$txt = "Profile Management\Streamed user profiles\Timeout for pending area lock files (days)"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.PSPendingLockTimeout.Value;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.PSPendingLockTimeout.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.PSPendingLockTimeout.Value 
						}
					}
					Write-Verbose "$(Get-Date -Format G): `t`t`tProfile Management\Citrix Virtual Apps Optimization settings"
					If((validStateProp $Setting XenAppOptimizationEnable State ) -and ($Setting.XenAppOptimizationEnable.State -ne "NotConfigured"))
					{
						#new in 7.16 and renamed in 1808
						$txt = "Profile Management\Citrix Virtual Apps Optimization settings\Enable Citrix Virtual Apps Optimization"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.XenAppOptimizationEnable.State;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.XenAppOptimizationEnable.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.XenAppOptimizationEnable.State
						}
					}
					If((validStateProp $Setting XenAppOptimizationDefinitionPathData State ) -and ($Setting.XenAppOptimizationDefinitionPathData.State -ne "NotConfigured"))
					{
						#new in 7.16 and renamed in 1808
						$txt = "Profile Management\Citrix Virtual Apps Optimization settings\Path to Citrix Virtual Apps optimization definitions:"
						If($Setting.XenAppOptimizationDefinitionPathData.State -eq "Enabled" -and $Setting.XenAppOptimizationDefinitionPathData.Value -eq "")
						{
							If($MSWord -or $PDF)
							{
								$WordTableRowHash = @{
								Text = $txt;
								Value = "Disabled";
								}
								$SettingsWordTable += $WordTableRowHash;
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								"Disabled",$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt "Disabled" 
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$WordTableRowHash = @{
								Text = $txt;
								Value = $Setting.XenAppOptimizationDefinitionPathData.Value;
								}
								$SettingsWordTable += $WordTableRowHash;
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.XenAppOptimizationDefinitionPathData.Value,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.XenAppOptimizationDefinitionPathData.Value 
							}
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tReceiver"
					If((validStateProp $Setting StorefrontAccountsList State ) -and ($Setting.StorefrontAccountsList.State -ne "NotConfigured"))
					{
						$txt = "Receiver\Storefront accounts list"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = "";
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							"",$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt ""
						}
						$txt = ""
						If(validStateProp $Setting StorefrontAccountsList Values )
						{
							$cnt = 0
							$tmpArray = $Setting.StorefrontAccountsList.Values
							ForEach($Thing in $TmpArray)
							{
								$cnt++
								$xxx = """$($Thing)"""
								[array]$tmp = $xxx.Split(";").replace('"','')
								$tmp1 = "Name : $($tmp[0])"
								$tmp2 = "URL  : $($tmp[1])"
								$tmp3 = "State: $($tmp[2])"
								$tmp4 = "Desc : $($tmp[3])"
								If($MSWord -or $PDF)
								{
									$WordTableRowHash = @{
									Text = $txt;
									Value = $tmp1;
									}
									$SettingsWordTable += $WordTableRowHash
									
									$WordTableRowHash = @{
									Text = $txt;
									Value = $tmp2;
									}
									$SettingsWordTable += $WordTableRowHash
									
									$WordTableRowHash = @{
									Text = $txt;
									Value = $tmp3;
									}
									$SettingsWordTable += $WordTableRowHash
									
									$WordTableRowHash = @{
									Text = $txt;
									Value = $tmp4;
									}
									$SettingsWordTable += $WordTableRowHash
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									$txt,$htmlbold,
									$tmp1,$htmlwhite))
									
									$rowdata += @(,(
									$txt,$htmlbold,
									$tmp2,$htmlwhite))
									
									$rowdata += @(,(
									$txt,$htmlbold,
									$tmp3,$htmlwhite))
									
									$rowdata += @(,(
									$txt,$htmlbold,
									$tmp4,$htmlwhite))
								}
								ElseIf($Text)
								{
									$txt = "`t`t`t`t "
									OutputPolicySetting $txt $tmp1
									OutputPolicySetting $txt $tmp2
									OutputPolicySetting $txt $tmp3
									OutputPolicySetting $txt $tmp4
								}
								
								If($cnt -gt 1)
								{
									$tmp = " "
									If($MSWord -or $PDF)
									{
										$WordTableRowHash = @{
										Text = "";
										Value = $tmp;
										}
										$SettingsWordTable += $WordTableRowHash;
									}
									ElseIf($HTML)
									{
										$rowdata += @(,(
										"",$htmlbold,
										"",$htmlwhite))
									}
									ElseIf($Text)
									{
										OutputPolicySetting "`t`t`t`t`t`t" $tmp
									}
								}
								$xxx = $Null
								$tmp = $Null
								$tmp1 = $Null
								$tmp2 = $Null
								$tmp3 = $Null
								$tmp4 = $Null
							}
							$TmpArray = $Null
							$tmp = $Null
						}
						Else
						{
							$tmp = "No Storefront accounts list were found"
							If($MSWord -or $PDF)
							{
								$WordTableRowHash = @{
								Text = "";
								Value = $tmp;
								}
								$SettingsWordTable += $WordTableRowHash;
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								"",$htmlbold,
								"",$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting "`t`t`t`t`t`t" $tmp
							}
						}
					}

					#UPL added in 2.31
					Write-Verbose "$(Get-Date -Format G): `t`t`tUser Personalization Layer"
					If((validStateProp $Setting UplRepositoryPath State ) -and ($Setting.UplRepositoryPath.State -ne "NotConfigured"))
					{
						$txt = "User Personalization Layer\User Layer Repository Path"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.UplRepositoryPath.Value;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.UplRepositoryPath.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.UplRepositoryPath.Value 
						}
					}
					If((validStateProp $Setting UplUserLayerSizeInGb State ) -and ($Setting.UplUserLayerSizeInGb.State -ne "NotConfigured"))
					{
						$txt = "User Personalization Layer\User Layer Size in GB"
						$UPLSize = 0
						If($Setting.UplUserLayerSizeInGb.Value -eq 0)
						{
							$UPLSize = 10
						}
						Else
						{
							$UPLSize = $Setting.UplUserLayerSizeInGb.Value
						}
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $UPLSize;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$UPLSize,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $UPLSize 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tVirtual Delivery Agent Settings"
					If((validStateProp $Setting ControllerRegistrationIPv6Netmask State ) -and ($Setting.ControllerRegistrationIPv6Netmask.State -ne "NotConfigured"))
					{
						#AD specific setting
						$txt = "Virtual Delivery Agent Settings\Controller registration IPv6 netmask"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.ControllerRegistrationIPv6Netmask.Value;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ControllerRegistrationIPv6Netmask.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ControllerRegistrationIPv6Netmask.Value 
						}
					}
					If((validStateProp $Setting ControllerRegistrationPort State ) -and ($Setting.ControllerRegistrationPort.State -ne "NotConfigured"))
					{
						#AD specific setting
						$txt = "Virtual Delivery Agent Settings\Controller registration port"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.ControllerRegistrationPort.Value;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ControllerRegistrationPort.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ControllerRegistrationPort.Value 
						}
					}
					If((validStateProp $Setting ControllerSIDs State ) -and ($Setting.ControllerSIDs.State -ne "NotConfigured"))
					{
						#AD specific setting
						$txt = "Virtual Delivery Agent Settings\Controller SIDs"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.ControllerSIDs.Value;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ControllerSIDs.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ControllerSIDs.Value 
						}
					}
					If((validStateProp $Setting Controllers State ) -and ($Setting.Controllers.State -ne "NotConfigured"))
					{
						#AD specific setting
						$txt = "Virtual Delivery Agent Settings\Controllers"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.Controllers.Value;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.Controllers.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.Controllers.Value 
						}
					}
					If((validStateProp $Setting EnableAutoUpdateOfControllers State ) -and ($Setting.EnableAutoUpdateOfControllers.State -ne "NotConfigured"))
					{
						$txt = "Virtual Delivery Agent Settings\Enable auto update of Controllers"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.EnableAutoUpdateOfControllers.State;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.EnableAutoUpdateOfControllers.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.EnableAutoUpdateOfControllers.State 
						}
					}
					
					Write-Verbose "$(Get-Date -Format G): `t`t`tVirtual Delivery Agent Settings\CPU Usage Monitoring"
					If((validStateProp $Setting CPUUsageMonitoring_Enable State ) -and ($Setting.CPUUsageMonitoring_Enable.State -ne "NotConfigured"))
					{
						$txt = "Virtual Delivery Agent Settings\CPU Usage Monitoring\Enable Monitoring"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.CPUUsageMonitoring_Enable.State;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.CPUUsageMonitoring_Enable.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.CPUUsageMonitoring_Enable.State 
						}
					}
					If((validStateProp $Setting CPUUsageMonitoring_Period State ) -and ($Setting.CPUUsageMonitoring_Period.State -ne "NotConfigured"))
					{
						$txt = "Virtual Delivery Agent Settings\CPU Usage Monitoring\Monitoring Period (seconds)"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.CPUUsageMonitoring_Period.Value;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.CPUUsageMonitoring_Period.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.CPUUsageMonitoring_Period.Value 
						}
					}
					If((validStateProp $Setting CPUUsageMonitoring_Threshold State ) -and ($Setting.CPUUsageMonitoring_Threshold.State -ne "NotConfigured"))
					{
						$txt = "Virtual Delivery Agent Settings\CPU Usage Monitoring\Threshold (percent)"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.CPUUsageMonitoring_Threshold.Value;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.CPUUsageMonitoring_Threshold.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.CPUUsageMonitoring_Threshold.Value 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tVirtual Delivery Agent Settings\HDX3DPro"
					If((validStateProp $Setting EnableLossless State ) -and ($Setting.EnableLossless.State -ne "NotConfigured"))
					{
						$txt = "Virtual Delivery Agent Settings\HDX3DPro\Enable lossless"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.EnableLossless.State;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.EnableLossless.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.EnableLossless.State 
						}
					}
					If((validStateProp $Setting ProGraphicsObj State ) -and ($Setting.ProGraphicsObj.State -ne "NotConfigured"))
					{
						$txt = "Virtual Delivery Agent Settings\HDX3DPro\HDX3DPro quality settings"
						$tmp = ""
						$xMin = [math]::floor($Setting.ProGraphicsObj.Value%65536).ToString()
						$xMax = [math]::floor($Setting.ProGraphicsObj.Value/65536).ToString()
						[string]$tmp = "Minimum: $($xMin) Maximum: $($xMax)"
						
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $tmp;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp 
						}
						$tmp = $Null
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tVirtual Delivery Agent Settings\ICA Latency Monitoring"
					If((validStateProp $Setting ICALatencyMonitoring_Enable State ) -and ($Setting.ICALatencyMonitoring_Enable.State -ne "NotConfigured"))
					{
						$txt = "Virtual Delivery Agent Settings\ICA Latency Monitoring\Enable Monitoring"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.ICALatencyMonitoring_Enable.State;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ICALatencyMonitoring_Enable.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ICALatencyMonitoring_Enable.State 
						}
					}
					If((validStateProp $Setting ICALatencyMonitoring_Period State ) -and ($Setting.ICALatencyMonitoring_Period.State -ne "NotConfigured"))
					{
						$txt = "Virtual Delivery Agent Settings\ICA Latency Monitoring\Monitoring Period seconds"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.ICALatencyMonitoring_Period.Value;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ICALatencyMonitoring_Period.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ICALatencyMonitoring_Period.Value 
						}
					}
					If((validStateProp $Setting ICALatencyMonitoring_Threshold State ) -and ($Setting.ICALatencyMonitoring_Threshold.State -ne "NotConfigured"))
					{
						$txt = "Virtual Delivery Agent Settings\ICA Latency Monitoring\Threshold milliseconds"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.ICALatencyMonitoring_Threshold.Value;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ICALatencyMonitoring_Threshold.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ICALatencyMonitoring_Threshold.Value 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tVirtual Delivery Agent Settings\Monitoring"
					If((validStateProp $Setting SelectedFailureLevel State ) -and ($Setting.SelectedFailureLevel.State -ne "NotConfigured"))
					{
						$txt = "Virtual Delivery Agent Settings\Monitoring\Enable monitoring of application failures"
						$tmp = ""
						Switch ($Setting.SelectedFailureLevel.Value)
						{
							"None"	{$tmp = "None"; Break}
							"Both"	{$tmp = "Both application errors and faults"; Break}
							"Fault"	{$tmp = "Application faults only"; Break}
							"Error"	{$tmp = "Application errors only"; Break}
							Default	{$tmp = "Enable monitoring of application failures could not be determined: $($Setting.SelectedFailureLevel.Value)"; Break}
						}
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $tmp;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$tmp,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $tmp
						}
					}
					If((validStateProp $Setting EnableWorkstationVDAFaultMonitoring State ) -and ($Setting.EnableWorkstationVDAFaultMonitoring.State -ne "NotConfigured"))
					{
						$txt = "Virtual Delivery Agent Settings\Monitoring\Enable monitoring of application failures on Desktop OS VDAs"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.EnableWorkstationVDAFaultMonitoring.State;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.EnableWorkstationVDAFaultMonitoring.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.EnableWorkstationVDAFaultMonitoring.State 
						}
					}
					If((validStateProp $Setting EnableProcessMonitoring State ) -and ($Setting.EnableProcessMonitoring.State -ne "NotConfigured"))
					{
						$txt = "Virtual Delivery Agent Settings\Monitoring\Enable process monitoring"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.EnableProcessMonitoring.State;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.EnableProcessMonitoring.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.EnableProcessMonitoring.State 
						}
					}
					If((validStateProp $Setting EnableResourceMonitoring State ) -and ($Setting.EnableResourceMonitoring.State -ne "NotConfigured"))
					{
						$txt = "Virtual Delivery Agent Settings\Monitoring\Enable resource monitoring"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.EnableResourceMonitoring.State;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.EnableResourceMonitoring.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.EnableResourceMonitoring.State 
						}
					}
					If((validStateProp $Setting AppFailureExclusionList State ) -and ($Setting.AppFailureExclusionList.State -ne "NotConfigured"))
					{
						$txt = "Virtual Delivery Agent Settings\Monitoring\List of applications excluded from failure monitoring"
						If($Setting.StreamingExclusionList_Part.State -eq "Enabled")
						{
							If(validStateProp $Setting AppFailureExclusionList Value )
							{
								$tmpArray = $Setting.AppFailureExclusionList.Value.Split(",")
								$tmp = ""
								$cnt = 0
								ForEach($Thing in $tmpArray)
								{
									$cnt++
									$tmp = "$($Thing)"
									If($cnt -eq 1)
									{
										If($MSWord -or $PDF)
										{
											$WordTableRowHash = @{
											Text = $txt;
											Value = $tmp;
											}
											$SettingsWordTable += $WordTableRowHash;
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											$txt,$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting $txt $tmp
										}
									}
									Else
									{
										If($MSWord -or $PDF)
										{
											$WordTableRowHash = @{
											Text = "";
											Value = $tmp;
											}
											$SettingsWordTable += $WordTableRowHash;
										}
										ElseIf($HTML)
										{
											$rowdata += @(,(
											"",$htmlbold,
											$tmp,$htmlwhite))
										}
										ElseIf($Text)
										{
											OutputPolicySetting "`t`t`t`t`t`t`t`t`t`t`t`t" $tmp
										}
									}
								}
								$tmpArray = $Null
								$tmp = $Null
							}
							Else
							{
								$tmp = "No List of applications excluded from failure monitoring were found"
								If($MSWord -or $PDF)
								{
									$WordTableRowHash = @{
									Text = $txt;
									Value = $tmp;
									}
									$SettingsWordTable += $WordTableRowHash;
								}
								ElseIf($HTML)
								{
									$rowdata += @(,(
									$txt,$htmlbold,
									$tmp,$htmlwhite))
								}
								ElseIf($Text)
								{
									OutputPolicySetting $txt $tmp
								}
							}
						}
						Else
						{
							If($MSWord -or $PDF)
							{
								$WordTableRowHash = @{
								Text = $txt;
								Value = $Setting.AppFailureExclusionList.State;
								}
								$SettingsWordTable += $WordTableRowHash;
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$Setting.AppFailureExclusionList.State,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $Setting.AppFailureExclusionList.State 
							}
						}
					}	
					If((validStateProp $Setting OnlyUseIPv6ControllerRegistration State ) -and ($Setting.OnlyUseIPv6ControllerRegistration.State -ne "NotConfigured"))
					{
						#AD specific setting
						$txt = "Virtual Delivery Agent Settings\Only use IPv6 Controller registration"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.OnlyUseIPv6ControllerRegistration.State;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.OnlyUseIPv6ControllerRegistration.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.OnlyUseIPv6ControllerRegistration.State 
						}
					}
					If((validStateProp $Setting SiteGUID State ) -and ($Setting.SiteGUID.State -ne "NotConfigured"))
					{
						#AD specific setting
						$txt = "Virtual Delivery Agent Settings\Site GUID"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.SiteGUID.Value;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.SiteGUID.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.SiteGUID.Value 
						}
					}
					
					Write-Verbose "$(Get-Date -Format G): `t`t`tVirtual Delivery Agent Settings\Profile Load Time Monitoring"
					If((validStateProp $Setting ProfileLoadTimeMonitoring_Enable State ) -and ($Setting.ProfileLoadTimeMonitoring_Enable.State -ne "NotConfigured"))
					{
						$txt = "Virtual Delivery Agent Settings\Profile Load Time Monitoring\Enable Monitoring"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.ProfileLoadTimeMonitoring_Enable.State;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ProfileLoadTimeMonitoring_Enable.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ProfileLoadTimeMonitoring_Enable.State 
						}
					}
					If((validStateProp $Setting ProfileLoadTimeMonitoring_Threshold State ) -and ($Setting.ProfileLoadTimeMonitoring_Threshold.State -ne "NotConfigured"))
					{
						$txt = "Virtual Delivery Agent Settings\Profile Load Time Monitoring\Threshold seconds"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.ProfileLoadTimeMonitoring_Threshold.Value;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.ProfileLoadTimeMonitoring_Threshold.Value,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.ProfileLoadTimeMonitoring_Threshold.Value 
						}
					}

					Write-Verbose "$(Get-Date -Format G): `t`t`tVirtual IP"
					If((validStateProp $Setting VirtualLoopbackSupport State ) -and ($Setting.VirtualLoopbackSupport.State -ne "NotConfigured"))
					{
						$txt = "Virtual IP\Virtual IP loopback support"
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.VirtualLoopbackSupport.State;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						ElseIf($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.VirtualLoopbackSupport.State,$htmlwhite))
						}
						ElseIf($Text)
						{
							OutputPolicySetting $txt $Setting.VirtualLoopbackSupport.State 
						}
					}
					If((validStateProp $Setting VirtualLoopbackPrograms State ) -and ($Setting.VirtualLoopbackPrograms.State -ne "NotConfigured"))
					{
						$txt = "Virtual IP\Virtual IP virtual loopback programs list"
						If((validStateProp $Setting VirtualLoopbackPrograms State ) -and ($Setting.VirtualLoopbackPrograms.State -ne "NotConfigured"))
						{
							$tmpArray = $Setting.VirtualLoopbackPrograms.Values
							$array = $Null
							$tmp = ""
							$cnt = 0
							ForEach($Thing in $TmpArray)
							{
								If($Null -eq $Thing)
								{
									$Thing = ''
								}
								$cnt++
								$tmp = "$($Thing) "
								If($cnt -eq 1)
								{
									If($MSWord -or $PDF)
									{
										$WordTableRowHash = @{
										Text = $txt;
										Value = $tmp;
										}
										$SettingsWordTable += $WordTableRowHash;
									}
									ElseIf($HTML)
									{
										$rowdata += @(,(
										$txt,$htmlbold,
										$tmp,$htmlwhite))
									}
									ElseIf($Text)
									{
										OutputPolicySetting $txt $tmp
									}
								}
								Else
								{
									If($MSWord -or $PDF)
									{
										$WordTableRowHash = @{
										Text = "";
										Value = $tmp;
										}
										$SettingsWordTable += $WordTableRowHash;
									}
									ElseIf($HTML)
									{
										$rowdata += @(,(
										"",$htmlbold,
										$tmp,$htmlwhite))
									}
									ElseIf($Text)
									{
										OutputPolicySetting "`t`t`t`t`t`t    " $tmp
									}
								}
							}
							$TmpArray = $Null
							$tmp = $Null
						}
						Else
						{
							$tmp = "No Virtual IP virtual loopback programs list were found"
							If($MSWord -or $PDF)
							{
								$WordTableRowHash = @{
								Text = $txt;
								Value = $tmp;
								}
								$SettingsWordTable += $WordTableRowHash;
							}
							ElseIf($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$tmp,$htmlwhite))
							}
							ElseIf($Text)
							{
								OutputPolicySetting $txt $tmp
							}
						}
					}
				}

				Write-Verbose "$(Get-Date -Format G): `t`t`tWorkspace Environment Management"
				If((validStateProp $Setting WemCloudConnectorList State ) -and ($Setting.WemCloudConnectorList.State -ne "NotConfigured"))
				{
					$txt = "Workspace Environment Management\Citrix Cloud Connectors" #addedin 2103
					If($Setting.WemCloudConnectorList.State -eq "Enabled")
					{
						If(validStateProp $Setting WemCloudConnectorList Values )
						{
							$tmpArray = $Setting.WemCloudConnectorList.Values.Split(",")
							$tmp = ""
							$cnt = 0
							ForEach($Thing in $tmpArray)
							{
								$cnt++
								$tmp = "$($Thing)"
								If($cnt -eq 1)
								{
									If($MSWord -or $PDF)
									{
										$WordTableRowHash = @{
										Text = $txt;
										Value = $tmp;
										}
										$SettingsWordTable += $WordTableRowHash;
									}
									If($HTML)
									{
										$rowdata += @(,(
										$txt,$htmlbold,
										$tmp,$htmlwhite))
									}
									If($Text)
									{
										OutputPolicySetting $txt $tmp
									}
								}
								Else
								{
									If($MSWord -or $PDF)
									{
										$WordTableRowHash = @{
										Text = "";
										Value = $tmp;
										}
										$SettingsWordTable += $WordTableRowHash;
									}
									If($HTML)
									{
										$rowdata += @(,(
										"",$htmlbold,
										$tmp,$htmlwhite))
									}
									If($Text)
									{
										OutputPolicySetting "`t`t`t`t`t`t`t" $tmp
									}
								}
							}
							$tmpArray = $Null
							$tmp = $Null
						}
						Else
						{
							$tmp = "No Citrix Cloud Connectors were found"
							If($MSWord -or $PDF)
							{
								$WordTableRowHash = @{
								Text = $txt;
								Value = $tmp;
								}
								$SettingsWordTable += $WordTableRowHash;
							}
							If($HTML)
							{
								$rowdata += @(,(
								$txt,$htmlbold,
								$tmp,$htmlwhite))
							}
							If($Text)
							{
								OutputPolicySetting $txt $tmp
							}
						}
					}
					Else
					{
						If($MSWord -or $PDF)
						{
							$WordTableRowHash = @{
							Text = $txt;
							Value = $Setting.WemCloudConnectorList.State;
							}
							$SettingsWordTable += $WordTableRowHash;
						}
						If($HTML)
						{
							$rowdata += @(,(
							$txt,$htmlbold,
							$Setting.WemCloudConnectorList.State,$htmlwhite))
						}
						If($Text)
						{
							OutputPolicySetting $txt $Setting.WemCloudConnectorList.State 
						}
					}
				}

				If($MSWord -or $PDF)
				{
					If($SettingsWordTable.Count -gt 0) #V2.10 don't process if array is empty
					{
						$Table = AddWordTable -Hashtable $SettingsWordTable `
						-Columns  Text,Value `
						-Headers  "Setting Key","Value"`
						-Format $wdTableGrid `
						-AutoFit $wdAutoFitFixed;

						SetWordCellFormat -Collection $Table -Size 9 -BackgroundColor $wdColorWhite
						SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

						$Table.Columns.Item(1).Width = 300;
						$Table.Columns.Item(2).Width = 200;

						$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)
					}
					Else
					{
						#V2.10 state there are no policy settings
						WriteWordLine 0 1 "There are no policy settings"
					}
					FindWordDocumentEnd
					$Table = $Null
				}
				ElseIf($Text)
				{
					Line 0 ""
				}
				ElseIf($HTML)
				{
					If($rowdata.count -gt 0)
					{
						$columnHeaders = @(
						'Setting Key',($global:htmlsb),
						'Value',($global:htmlsb))

						$msg = ""
						$columnWidths = @("400","300")
						FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "700"
					}
				}
			}
			Else
			{
				$txt = "Unable to retrieve settings"
				If($MSWord -or $PDF)
				{
					WriteWordLine 0 1 $txt
				}
				ElseIf($Text)
				{
					Line 2 $txt
				}
				ElseIf($HTML)
				{
					WriteHTMLLine 0 1 $txt
				}
			}
			$Filter = $Null
			$Settings = $Null
			Write-Verbose "$(Get-Date -Format G): `t`tFinished $($Policy.PolicyName)"
			Write-Verbose "$(Get-Date -Format G): "
		}
	}
	ElseIf(!$?)
	{
		Write-Warning "Citrix Policy information could not be retrieved"
	}
	Else
	{
		Write-Warning "No results Returned for Citrix Policy information"
	}
	
	$CtxPolicies = $Null
	
	If($xDriveName -ne "LocalFarmGPO")
	{
		Write-Verbose "$(Get-Date -Format G): `tRemoving $($xDriveName) PSDrive"
		Remove-PSDrive -Name $xDriveName -EA 0 4>$Null
	}
	Write-Verbose "$(Get-Date -Format G): "
}

Function OutputPolicySetting
{
	Param([string] $outputText, [string] $outputData)

	If($outputText -ne "")
	{
		$xLength = $outputText.Length
		If($outputText.Substring($xLength-2,2) -ne ": ")
		{
			$outputText += ": "
		}
	}
	Line 2 $outputText $outputData
}

Function Get-PrinterModifiedSettings
{
	Param([string]$Value, [string]$xelement)
	
	[string]$ReturnStr = ""

	Switch ($Value)
	{
		"copi" 
		{
			$txt="Copies: "
			$index = $xelement.SubString(0).IndexOf('=')
			If($index -ge 0)
			{
				$tmp2 = $xelement.SubString($index + 1)
				$ReturnStr = "$txt $tmp2"
			}
		}
		"coll"
		{
			$txt="Collate: "
			$index = $xelement.SubString(0).IndexOf('=')
			If($index -ge 0)
			{
				$tmp2 = $xelement.SubString($index + 1)
				$ReturnStr = "$txt $tmp2"
			}
		}
		"scal"
		{
			$txt="Scale (%): "
			$index = $xelement.SubString(0).IndexOf('=')
			If($index -ge 0)
			{
				$tmp2 = $xelement.SubString($index + 1)
				$ReturnStr = "$txt $tmp2"
			}
		}
		"colo"
		{
			$txt="Color: "
			$index = $xelement.SubString(0).IndexOf('=')
			If($index -ge 0)
			{
				$tmp1 = $xelement.SubString($index + 1)
				Switch ($tmp1)
				{
					1		{$tmp2 = "Monochrome"; Break}
					2		{$tmp2 = "Color"; Break}
					Default	{$tmp2 = "Color could not be determined: $($xelement) "; Break}
				}
				$ReturnStr = "$txt $tmp2"
			}
		}
		"prin"
		{
			$txt="Print Quality: "
			$index = $xelement.SubString(0).IndexOf('=')
			If($index -ge 0)
			{
				$tmp1 = $xelement.SubString($index + 1)
				Switch ($tmp1)
				{
					-1		{$tmp2 = "150 dpi"; Break}
					-2		{$tmp2 = "300 dpi"; Break}
					-3		{$tmp2 = "600 dpi"; Break}
					-4		{$tmp2 = "1200 dpi"; Break}
					Default {$tmp2 = "Custom...X resolution: $tmp1"; Break}
				}
				$ReturnStr = "$txt $tmp2"
			}
		}
		"yres"
		{
			$txt="Y resolution: "
			$index = $xelement.SubString(0).IndexOf('=')
			If($index -ge 0)
			{
				$tmp2 = $xelement.SubString($index + 1)
				$ReturnStr = "$txt $tmp2"
			}
		}
		"orie"
		{
			$txt="Orientation: "
			$index = $xelement.SubString(0).IndexOf('=')
			If($index -ge 0)
			{
				$tmp1 = $xelement.SubString($index + 1)
				Switch ($tmp1)
				{
					"portrait"  {$tmp2 = "Portrait"; Break}
					"landscape" {$tmp2 = "Landscape"; Break}
					Default		{$tmp2 = "Orientation could not be determined: $($xelement) ; Break"}
				}
				$ReturnStr = "$txt $tmp2"
			}
		}
		"dupl"
		{
			$txt="Duplex: "
			$index = $xelement.SubString(0).IndexOf('=')
			If($index -ge 0)
			{
				$tmp1 = $xelement.SubString($index + 1)
				Switch ($tmp1)
				{
					1		{$tmp2 = "Simplex"; Break}
					2		{$tmp2 = "Vertical"; Break}
					3		{$tmp2 = "Horizontal"; Break}
					Default	{$tmp2 = "Duplex could not be determined: $($xelement) "; Break}
				}
				$ReturnStr = "$txt $tmp2"
			}
		}
		"pape"
		{
			$txt="Paper Size: "
			$index = $xelement.SubString(0).IndexOf('=')
			If($index -ge 0)
			{
				$tmp1 = $xelement.SubString($index + 1)
				Switch ($tmp1)
				{
					1   {$tmp2 = "Letter"; Break}
					2   {$tmp2 = "Letter Small"; Break}
					3   {$tmp2 = "Tabloid"; Break}
					4   {$tmp2 = "Ledger"; Break}
					5   {$tmp2 = "Legal"; Break}
					6   {$tmp2 = "Statement"; Break}
					7   {$tmp2 = "Executive"; Break}
					8   {$tmp2 = "A3"; Break}
					9   {$tmp2 = "A4"; Break}
					10  {$tmp2 = "A4 Small"; Break}
					11  {$tmp2 = "A5"; Break}
					12  {$tmp2 = "B4 (JIS)"; Break}
					13  {$tmp2 = "B5 (JIS)"; Break}
					14  {$tmp2 = "Folio"; Break}
					15  {$tmp2 = "Quarto"; Break}
					16  {$tmp2 = "10X14"; Break}
					17  {$tmp2 = "11X17"; Break}
					18  {$tmp2 = "Note"; Break}
					19  {$tmp2 = "Envelope #9"; Break}
					20  {$tmp2 = "Envelope #10"; Break}
					21  {$tmp2 = "Envelope #11"; Break}
					22  {$tmp2 = "Envelope #12"; Break}
					23  {$tmp2 = "Envelope #14"; Break}
					24  {$tmp2 = "C Size Sheet"; Break}
					25  {$tmp2 = "D Size Sheet"; Break}
					26  {$tmp2 = "E Size Sheet"; Break}
					27  {$tmp2 = "Envelope DL"; Break}
					28  {$tmp2 = "Envelope C5"; Break}
					29  {$tmp2 = "Envelope C3"; Break}
					30  {$tmp2 = "Envelope C4"; Break}
					31  {$tmp2 = "Envelope C6"; Break}
					32  {$tmp2 = "Envelope C65"; Break}
					33  {$tmp2 = "Envelope B4"; Break}
					34  {$tmp2 = "Envelope B5"; Break}
					35  {$tmp2 = "Envelope B6"; Break}
					36  {$tmp2 = "Envelope Italy"; Break}
					37  {$tmp2 = "Envelope Monarch"; Break}
					38  {$tmp2 = "Envelope Personal"; Break}
					39  {$tmp2 = "US Std Fanfold"; Break}
					40  {$tmp2 = "German Std Fanfold"; Break}
					41  {$tmp2 = "German Legal Fanfold"; Break}
					42  {$tmp2 = "B4 (ISO)"; Break}
					43  {$tmp2 = "Japanese Postcard"; Break}
					44  {$tmp2 = "9X11"; Break}
					45  {$tmp2 = "10X11"; Break}
					46  {$tmp2 = "15X11"; Break}
					47  {$tmp2 = "Envelope Invite"; Break}
					48  {$tmp2 = "Reserved - DO NOT USE"; Break}
					49  {$tmp2 = "Reserved - DO NOT USE"; Break}
					50  {$tmp2 = "Letter Extra"; Break}
					51  {$tmp2 = "Legal Extra"; Break}
					52  {$tmp2 = "Tabloid Extra"; Break}
					53  {$tmp2 = "A4 Extra"; Break}
					54  {$tmp2 = "Letter Transverse"; Break}
					55  {$tmp2 = "A4 Transverse"; Break}
					56  {$tmp2 = "Letter Extra Transverse"; Break}
					57  {$tmp2 = "A Plus"; Break}
					58  {$tmp2 = "B Plus"; Break}
					59  {$tmp2 = "Letter Plus"; Break}
					60  {$tmp2 = "A4 Plus"; Break}
					61  {$tmp2 = "A5 Transverse"; Break}
					62  {$tmp2 = "B5 (JIS) Transverse"; Break}
					63  {$tmp2 = "A3 Extra"; Break}
					64  {$tmp2 = "A5 Extra"; Break}
					65  {$tmp2 = "B5 (ISO) Extra"; Break}
					66  {$tmp2 = "A2"; Break}
					67  {$tmp2 = "A3 Transverse"; Break}
					68  {$tmp2 = "A3 Extra Transverse"; Break}
					69  {$tmp2 = "Japanese Double Postcard"; Break}
					70  {$tmp2 = "A6"; Break}
					71  {$tmp2 = "Japanese Envelope Kaku #2"; Break}
					72  {$tmp2 = "Japanese Envelope Kaku #3"; Break}
					73  {$tmp2 = "Japanese Envelope Chou #3"; Break}
					74  {$tmp2 = "Japanese Envelope Chou #4"; Break}
					75  {$tmp2 = "Letter Rotated"; Break}
					76  {$tmp2 = "A3 Rotated"; Break}
					77  {$tmp2 = "A4 Rotated"; Break}
					78  {$tmp2 = "A5 Rotated"; Break}
					79  {$tmp2 = "B4 (JIS) Rotated"; Break}
					80  {$tmp2 = "B5 (JIS) Rotated"; Break}
					81  {$tmp2 = "Japanese Postcard Rotated"; Break}
					82  {$tmp2 = "Double Japanese Postcard Rotated"; Break}
					83  {$tmp2 = "A6 Rotated"; Break}
					84  {$tmp2 = "Japanese Envelope Kaku #2 Rotated"; Break}
					85  {$tmp2 = "Japanese Envelope Kaku #3 Rotated"; Break}
					86  {$tmp2 = "Japanese Envelope Chou #3 Rotated"; Break}
					87  {$tmp2 = "Japanese Envelope Chou #4 Rotated"; Break}
					88  {$tmp2 = "B6 (JIS)"; Break}
					89  {$tmp2 = "B6 (JIS) Rotated"; Break}
					90  {$tmp2 = "12X11"; Break}
					91  {$tmp2 = "Japanese Envelope You #4"; Break}
					92  {$tmp2 = "Japanese Envelope You #4 Rotated"; Break}
					93  {$tmp2 = "PRC 16K"; Break}
					94  {$tmp2 = "PRC 32K"; Break}
					95  {$tmp2 = "PRC 32K(Big)"; Break}
					96  {$tmp2 = "PRC Envelope #1"; Break}
					97  {$tmp2 = "PRC Envelope #2"; Break}
					98  {$tmp2 = "PRC Envelope #3"; Break}
					99  {$tmp2 = "PRC Envelope #4"; Break}
					100 {$tmp2 = "PRC Envelope #5"; Break}
					101 {$tmp2 = "PRC Envelope #6"; Break}
					102 {$tmp2 = "PRC Envelope #7"; Break}
					103 {$tmp2 = "PRC Envelope #8"; Break}
					104 {$tmp2 = "PRC Envelope #9"; Break}
					105 {$tmp2 = "PRC Envelope #10"; Break}
					106 {$tmp2 = "PRC 16K Rotated"; Break}
					107 {$tmp2 = "PRC 32K Rotated"; Break}
					108 {$tmp2 = "PRC 32K(Big) Rotated"; Break}
					109 {$tmp2 = "PRC Envelope #1 Rotated"; Break}
					110 {$tmp2 = "PRC Envelope #2 Rotated"; Break}
					111 {$tmp2 = "PRC Envelope #3 Rotated"; Break}
					112 {$tmp2 = "PRC Envelope #4 Rotated"; Break}
					113 {$tmp2 = "PRC Envelope #5 Rotated"; Break}
					114 {$tmp2 = "PRC Envelope #6 Rotated"; Break}
					115 {$tmp2 = "PRC Envelope #7 Rotated"; Break}
					116 {$tmp2 = "PRC Envelope #8 Rotated"; Break}
					117 {$tmp2 = "PRC Envelope #9 Rotated"; Break}
					Default {$tmp2 = "Paper Size could not be determined: $($xelement) "; Break}
				}
				$ReturnStr = "$txt $tmp2"
			}
		}
		"form"
		{
			$txt="Form Name: "
			$index = $xelement.SubString(0).IndexOf('=')
			If($index -ge 0)
			{
				$tmp2 = $xelement.SubString($index + 1)
				If($tmp2.length -gt 0)
				{
					$ReturnStr = "$txt $tmp2"
				}
			}
		}
		"true"
		{
			$txt="TrueType: "
			$index = $xelement.SubString(0).IndexOf('=')
			If($index -ge 0)
			{
				$tmp1 = $xelement.SubString($index + 1)
				Switch ($tmp1)
				{
					1		{$tmp2 = "Bitmap"; Break}
					2		{$tmp2 = "Download"; Break}
					3		{$tmp2 = "Substitute"; Break}
					4		{$tmp2 = "Outline"; Break}
					Default	{$tmp2 = "TrueType could not be determined: $($xelement) "; Break}
				}
			}
			$ReturnStr = "$txt $tmp2"
		}
		"mode" 
		{
			$txt="Printer Model: "
			$index = $xelement.SubString(0).IndexOf('=')
			If($index -ge 0)
			{
				$tmp2 = $xelement.SubString($index + 1)
				$ReturnStr = "$txt $tmp2"
			}
		}
		"loca" 
		{
			$txt="Location: "
			$index = $xelement.SubString(0).IndexOf('=')
			If($index -ge 0)
			{
				$tmp2 = $xelement.SubString($index + 1)
				If($tmp2.length -gt 0)
				{
					$ReturnStr = "$txt $tmp2"
				}
			}
		}
		Default {$ReturnStr = "Session printer setting could not be determined: $($xelement) "}
	}
	Return $ReturnStr
}

Function GetCtxGPOsInAD
{
	#thanks to the Citrix Engineering Team for pointers and for Michael B. Smith for creating the function
	#updated 07-Nov-13 to work in a Windows Workgroup environment
	Write-Verbose "$(Get-Date -Format G): Testing for an Active Directory environment"
	$root = [ADSI]"LDAP://RootDSE"
	If([String]::IsNullOrEmpty($root.PSBase.Name))
	{
		Write-Verbose "$(Get-Date -Format G): `tNot in an Active Directory environment"
		$root = $Null
		$xArray = @()
	}
	Else
	{
		Write-Verbose "$(Get-Date -Format G): `tIn an Active Directory environment"
		$domainNC = $root.defaultNamingContext.ToString()
		$root = $Null
		$xArray = @()

		$domain = $domainNC.Replace( 'DC=', '' ).Replace( ',', '.' )
		Write-Verbose "$(Get-Date -Format G): `tSearching \\$($domain)\sysvol\$($domain)\Policies"
		$sysvolFiles = @()
		$sysvolFiles = Get-ChildItem -Recurse ( '\\' + $domain  + '\sysvol\' + $domain + '\Policies' ) -EA 0
		If($sysvolFiles.Count -eq 0)
		{
			Write-Verbose "$(Get-Date -Format G): `tSearch timed out. Retrying. Searching \\ + $($domain)\sysvol\$($domain)\Policies a second time."
			$sysvolFiles = Get-ChildItem -Recurse ( '\\' + $domain  + '\sysvol\' + $domain + '\Policies' ) -EA 0
		}
		ForEach( $file in $sysvolFiles )
		{
			If( -not $file.PSIsContainer )
			{
				#$file.FullName  ### name of the policy file
				If( $file.FullName -like "*\Citrix\GroupPolicy\Policies.gpf" )
				{
					#"have match " + $file.FullName ### name of the Citrix policies file
					$array = $file.FullName.Split( '\' )
					If( $array.Length -gt 7 )
					{
						$gp = $array[ 6 ].ToString()
						$gpObject = [ADSI]( "LDAP://" + "CN=" + $gp + ",CN=Policies,CN=System," + $domainNC )
						If(!$xArray.Contains($gpObject.DisplayName))
						{
							$xArray += $gpObject.DisplayName	### name of the group policy object
						}
					}
				}
			}
		}
	}
	Return ,$xArray
}
#endregion

#region Configuration Logging functions
Function ProcessConfigLogging
{
	#do not show config logging if not Details AND
	# if XenDesktop must be Platinum or Enterprise OR
	# if XenApp must be Platinum or Enterprise

	If($Logging)
	{
		Write-Verbose "$(Get-Date -Format G): Processing Configuration Logging"
		$txt1 = "Logging"
		If($MSword -or $PDF)
		{
			$Selection.InsertNewPage()
			WriteWordLine 1 0 $txt1
		}
		ElseIf($Text)
		{
			Line 0 $txt1
			Line 0 ""
		}
		ElseIf($HTML)
		{
			WriteHTMLLine 1 0 $txt1
		}
		
		If(($Script:XDSite2.ProductCode -eq "XDT" -and ($Script:XDSite2.ProductEdition -eq "PLT" -or $Script:XDSite2.ProductEdition -eq "ENT")) -or `
		($Script:XDSite2.ProductCode -eq "MPS" -and ($Script:XDSite2.ProductEdition -eq "PLT" -or $Script:XDSite2.ProductEdition -eq "ENT")))
		{
			#preferences
			Write-Verbose "$(Get-Date -Format G): `tConfiguration Logging Preferences"
			$results = Get-XDLogging @XDParams1
			
			If($? -and $Null -ne $results)
			{
				OutputConfigLogPreferences $results
			}
			Else
			{
				$txt = "Configuration Logging Preferences could not be retrieved."
				OutputWarning $txt
			}
			
			Write-Verbose "$(Get-Date -Format G): `tConfiguration Logging Details"
			$ConfigLogItems = Get-LogHighLevelOperation @XDParams2 -Filter {StartTime -ge $StartDate -and EndTime -le $EndDate} -SortBy "-StartTime"
			If($? -and $Null -ne $ConfigLogItems)
			{
				OutputConfigLog $ConfigLogItems
			}
			ElseIf($? -and ($Null -eq $ConfigLogItems))
			{
				$txt = "There are no Configuration Logging actions recorded for $($StartDate) through $($EndDate)."
				OutputNotice $txt
			}
			Else
			{
				$txt = "Configuration Logging information could not be retrieved."
				OutputWarning $txt
			}
			Write-Verbose "$(Get-Date -Format G): "
		}
		Else
		{
			$txt = "Not licensed for Configuration Logging"
			OutputNotice $txt
			Write-Verbose "$(Get-Date -Format G): "
		}
	}
}

Function OutputConfigLogPreferences 
{
	#2-Mar-2017 Fix bug reported by P. Ewing

	Param([object] $Preferences)
	
	Write-Verbose "$(Get-Date -Format G): `t`tOutput Configuration Logging Preferences"
	
	$LogSQLServerPrincipalName = ""
	$LogSQLServerMirrorName = "Not Configured"
	$LogDatabaseName = ""
	[string]$dbsize = "Unable to determine database size"
	$LogDBs = Get-LogDataStore @XDParams1

	If($? -and ($Null -ne $LogDBs))
	{
		ForEach($LogDB in $LogDBs)
		{
			If($LogDB.DataStore -eq "Logging")
			{
				$tmp = $LogDB.ConnectionString
				$csitems = $tmp.Split(';')
				ForEach($csitem in $csitems)
				{
					$Pair = $csitem.split('=').trimstart()
					Switch ($Pair[0])
					{
						"Server"				{$LogSQLServerPrincipalName = $Pair[1]; Break}
						"Data Source"			{$LogSQLServerPrincipalName = $Pair[1]; Break}
						"Failover Partner"		{$LogSQLServerMirrorName = $Pair[1]; Break}
						"MultiSubnetFailover"	{$LogSQLServerMirrorName = ""; Break}
						"Database"				{$LogDatabaseName = $Pair[1]; Break}
						"Initial Catalog"		{$LogDatabaseName = $Pair[1]; Break}
					}
				}
			}
		}
	}
	Else
	{
		Write-Warning "Unable to retrieve Configuration Logging Database settings"
	}

	#get database size
	
	If($Script:SQLServerLoaded)
	{
		$SQLsrv = new-Object Microsoft.SqlServer.Management.Smo.Server("$($LogSQLServerPrincipalName)")
		$db = New-Object Microsoft.SqlServer.Management.Smo.Database
		$db = $SQLsrv.Databases.Item("$($LogDatabaseName)")
		[string]$dbsize = "Unable to determine" -f $db.size
		If($Null -ne $db.size)
		{
			[string]$dbsize = "{0:F2} MB" -f $db.size
		}
		ElseIf($Null -eq $db.size -and $LogSQLServerMirrorName -ne "Not Configured")
		{
			$SQLsrv = new-Object Microsoft.SqlServer.Management.Smo.Server("$($LogSQLServerMirrorName)")
			$db = New-Object Microsoft.SqlServer.Management.Smo.Database
			$db = $SQLsrv.Databases.Item("$($LogDatabaseName)")
			If($Null -ne $db.size)
			{
				[string]$dbsize = "{0:F2} MB" -f $db.size
			}
		}
	}
	
	If($Preferences.Enabled -eq "Enabled" -or $Preferences.Enabled -eq "Mandatory")
	{
		$PrefEnabled = "Enabled"
	}
	Else
	{
		$PrefEnabled = "Disabled"
	}
	
	If($Preferences.AllowDisconnectedDatabase -eq $True)
	{
		$PrefSecurity = "Selected"
	}
	Else
	{
		$PrefSecurity = "Not Selected"
	}
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Configuration Logging settings"
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = $PrefEnabled; Value = ""; }) > $Null
		$ScriptInformation.Add(@{Data = "   Logging database"; Value = ""; }) > $Null
		$ScriptInformation.Add(@{Data = "      Database size"; Value = $dbsize; }) > $Null
		$ScriptInformation.Add(@{Data = "      Server location"; Value = $LogSQLServerPrincipalName; }) > $Null
		$ScriptInformation.Add(@{Data = "      Database name"; Value = $LogDatabaseName; }) > $Null
		$ScriptInformation.Add(@{Data = "   Security"; Value = ""; }) > $Null
		$ScriptInformation.Add(@{Data = "      Allow changes when the database is disconnected"; Value = $PrefSecurity; }) > $Null
		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitContent;

		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	ElseIf($Text)
	{
		Line 1 "Configuration Logging settings"
		Line 1 $PrefEnabled
		Line 2 "Logging database"
		Line 3 "Database size`t: " $dbsize
		Line 3 "Server location`t: " $LogSQLServerPrincipalName
		Line 3 "Database name`t: " $LogDatabaseName
		Line 3 "Security"
		Line 4 "Allow changes when the database is disconnected: " $PrefSecurity
		Line 0 ""
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 2 0 "Configuration Logging settings"
		$rowdata = @()
		$columnHeaders = @($PrefEnabled,($global:htmlsb),"",$htmlwhite)
		$rowdata += @(,('   Logging database',($global:htmlsb),"",$htmlwhite))
		$rowdata += @(,('      Database size',($global:htmlsb),$dbsize,$htmlwhite))
		$rowdata += @(,('      Server location',($global:htmlsb),$LogSQLServerPrincipalName,$htmlwhite))
		$rowdata += @(,('      Database name',($global:htmlsb),$LogDatabaseName,$htmlwhite))
		$rowdata += @(,('   Security',($global:htmlsb),"",$htmlwhite))
		$rowdata += @(,('      Allow changes when the database is disconnected',($global:htmlsb),$PrefSecurity,$htmlwhite))
		
		$msg = ""
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders
	}
}

Function OutputConfigLog
{
	Param([object] $ConfigLogItems)
	
	Write-Verbose "$(Get-Date -Format G): `t`tOutput Configuration Logging Details"
	$txt2 = " For date range $($StartDate) through $($EndDate)"

	If($MSword -or $PDF)
	{
		$Selection.InsertNewPage()
		WriteWordLine 0 0 $txt2
		[System.Collections.Hashtable[]] $ItemsWordTable = @()
	}
	ElseIf($Text)
	{
		Line 0 $txt2
		Line 0 ""
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 0 0 $txt2
		$rowdata = @()
	}
	
	ForEach($Item in $ConfigLogItems)
	{
		$Tmp = $Null
		If($Item.IsSuccessful)
		{
			$Tmp = "Success"
		}
		Else
		{
			$Tmp = "Failed"
		}
		
		If($MSWord -or $PDF)
		{
			$ItemsWordTable += @{ 
			Admin = $Item.User;
			MainTask = $Item.Text;
			Start = $Item.StartTime;
			End = $Item.EndTime;
			Status = $tmp;
			}
		}
		ElseIf($Text)
		{
			Line 1 "Administrator`t: " $Item.User
			Line 1 "Main task`t: " $Item.Text
			Line 1 "Start`t`t: " $Item.StartTime
			Line 1 "End`t`t: " $Item.EndTime
			Line 1 "Status`t`t: " $Tmp
			Line 0 ""
		}
		ElseIf($HTML)
		{
			$rowdata += @(,(
			$Item.User,$htmlwhite,
			$Item.Text,$htmlwhite,
			$Item.StartTime,$htmlwhite,
			$Item.EndTime,$htmlwhite,
			$Tmp,$htmlwhite
			))
		}
	}

	If($MSWord -or $PDF)
	{
		$Table = AddWordTable -Hashtable $ItemsWordTable `
		-Columns Admin,MainTask,Start,End,Status `
		-Headers  "Administrator", "Main task", "Start", "End", "Status" `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table -Size 9 -BackgroundColor $wdColorWhite
		SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 120;
		$Table.Columns.Item(2).Width = 210;
		$Table.Columns.Item(3).Width = 60;
		$Table.Columns.Item(4).Width = 60;
		$Table.Columns.Item(5).Width = 50;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 " "
	}
	ElseIf($HTML)
	{
		$columnHeaders = @(
		'Administrator',($global:htmlsb),
		'Main task',($global:htmlsb),
		'Start',($global:htmlsb),
		'End',($global:htmlsb),
		'Status',($global:htmlsb))

		$msg = ""
		$columnWidths = @("120","300","65","65","50")
		FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "600"
	}
}
#endregion

#region site configuration functions
Function ProcessConfiguration
{
	Write-Verbose "$(Get-Date -Format G): Process Configuration Settings"
	OutputSiteSettings
	OutputCEIPSetting
	OutputDatastores
	Write-Verbose "$(Get-Date -Format G): "
}

Function OutputSiteSettings
{
	Write-Verbose "$(Get-Date -Format G): `tSee if StoreFront is installed on the Controller(s)"
	$DefaultStoreFrontAddress = ""
	If(Get-SFIsStoreFrontInstalled @XDParams1)
	{
		$tmp = Get-SFCluster @XDParams1
		If($? -and ($Null -ne $tmp))
		{
			$DefaultStoreFrontAddress = $tmp.Url
		}
		Else
		{
			Write-Warning "Unable to retrieve StoreFront Cluster information"
		}	
	}

	#added in V2.14
	#https://developer-docs.citrix.com/projects/delivery-controller-sdk/en/latest/Broker/Set-BrokerSite/
	Switch ($Script:XDSite1.ColorDepth)
	{
		"FourBit"		{$xColorDepth = "4bit - 16 colors"; Break}
		"EightBit"		{$xColorDepth = "8bit - 256 colors"; Break}
		"SixteenBit"	{$xColorDepth = "16bit - High color"; Break}
		"TwentyFourBit"	{$xColorDepth = "24bit - True color"; Break}
		Default			{$xColorDepth = "Unable to determine Color Depth: $($Script:XDSite1.ColorDepth)"; Break}
	}
	Switch ($Script:XDSite1.DefaultMinimumFunctionalLevel)
	{
		"L5" 	{$xVDAVersion = "5.6 FP1 (Windows XP and Windows Vista)"; Break}
		"L7"	{$xVDAVersion = "7.0 (or newer)"; Break}
		"L7_6"	{$xVDAVersion = "7.6 (or newer)"; Break}
		"L7_7"	{$xVDAVersion = "7.7 (or newer)"; Break}
		"L7_8"	{$xVDAVersion = "7.8 (or newer)"; Break}
		"L7_9"	{$xVDAVersion = "7.9 (or newer)"; Break}
		"L7_20"	{$xVDAVersion = "1811 (or newer)"; Break}
		"L7_25"	{$xVDAVersion = "2003 (or newer)"; Break}
		Default {$xVDAVersion = "Unable to determine VDA version: $($Script:XDSite1.DefaultMinimumFunctionalLevel)"; Break}
	}

	Write-Verbose "$(Get-Date -Format G): `tOutput Site Settings"
	If($MSWord -or $PDF)
	{
		$Selection.InsertNewPage()
		WriteWordLine 1 0 "Configuration"
		WriteWordLine 2 0 "Site Settings"
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "Site name"; Value = $XDSiteName; }) > $Null
		$ScriptInformation.Add(@{Data = "Default StoreFront address"; Value = $DefaultStoreFrontAddress; }) > $Null
		#added in V2.14
		$ScriptInformation.Add(@{Data = "Base OU"; Value = $Script:XDSite1.BaseOU; }) > $Null
		$ScriptInformation.Add(@{Data = "Color Depth"; Value = $xColorDepth; }) > $Null
		If(validObject $Script:XDSite1 ConnectionLeasingEnabled)
		{
			$ScriptInformation.Add(@{Data = "Connection Leasing Enabled"; Value = $Script:XDSite1.ConnectionLeasingEnabled.ToString(); }) > $Null
		}
		$ScriptInformation.Add(@{Data = "Default Minimum Functional Level"; Value = $xVDAVersion; }) > $Null
		$ScriptInformation.Add(@{Data = "DNS Resolution Enabled"; Value = $Script:XDSite1.DnsResolutionEnabled.ToString(); }) > $Null
		If(validObject $Script:XDSite1 IsSecondaryBroker)
		{
			$ScriptInformation.Add(@{Data = "Is Secondary Broker"; Value = $Script:XDSite1.IsSecondaryBroker.ToString(); }) > $Null
		}
		If(validObject $Script:XDSite1 LocalHostCacheEnabled)
		{
			$ScriptInformation.Add(@{Data = "Local Host Cache Enabled"; Value = $Script:XDSite1.LocalHostCacheEnabled.ToString(); }) > $Null
		}
		If(validObject $Script:XDSite1 ReuseMachinesWithoutShutdownInOutageAllowed)
		{
			$ScriptInformation.Add(@{Data = "Reuse Machines Without Shutdown in Outage Allowed"; Value = $Script:XDSite1.ReuseMachinesWithoutShutdownInOutageAllowed.ToString(); }) > $Null
		}
		$ScriptInformation.Add(@{Data = "Secure ICA Required"; Value = $Script:XDSite1.SecureIcaRequired.ToString(); }) > $Null
		$ScriptInformation.Add(@{Data = "Trust Managed Anonymous XML Service Requests"; Value = $Script:XDSite1.TrustManagedAnonymousXmlServiceRequests.ToString(); }) > $Null
		$ScriptInformation.Add(@{Data = "Trust Requests Sent to the XML Service Port"; Value = $Script:XDSite1.TrustRequestsSentToTheXmlServicePort.ToString(); }) > $Null
		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitContent;

		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	ElseIf($Text)
	{
		Line 0 "Configuration"
		Line 0 ""
		Line 0 "Site Settings"
		Line 0 ""
		Line 1 "Site name`t`t`t`t`t`t: " $XDSiteName
		Line 1 "Default StoreFront address`t`t`t`t: " $DefaultStoreFrontAddress
		#added in V2.14
		Line 1 "Base OU`t`t`t`t`t`t`t: " $Script:XDSite1.BaseOU
		Line 1 "Color Depth`t`t`t`t`t`t: " $xColorDepth
		If(validObject $Script:XDSite1 ConnectionLeasingEnabled)
		{
			Line 1 "Connection Leasing Enabled`t`t`t`t: " $Script:XDSite1.ConnectionLeasingEnabled.ToString()
		}
		Line 1 "Default Minimum Functional Level`t`t`t: " $xVDAVersion
		Line 1 "DNS Resolution Enabled`t`t`t`t`t: " $Script:XDSite1.DnsResolutionEnabled.ToString()
		If(validObject $Script:XDSite1 IsSecondaryBroker)
		{
			Line 1 "Is Secondary Broker`t`t`t`t`t: " $Script:XDSite1.IsSecondaryBroker.ToString()
		}
		If(validObject $Script:XDSite1 LocalHostCacheEnabled)
		{
			Line 1 "Local Host Cache Enabled`t`t`t`t: " $Script:XDSite1.LocalHostCacheEnabled.ToString()
		}
		If(validObject $Script:XDSite1 ReuseMachinesWithoutShutdownInOutageAllowed)
		{
			Line 1 "Reuse Machines Without Shutdown in Outage Allowed`t: " $Script:XDSite1.ReuseMachinesWithoutShutdownInOutageAllowed.ToString()
		}
		Line 1 "Secure ICA Required`t`t`t`t`t: " $Script:XDSite1.SecureIcaRequired.ToString()
		Line 1 "Trust Managed Anonymous XML Service Requests`t`t: " $Script:XDSite1.TrustManagedAnonymousXmlServiceRequests.ToString()
		Line 1 "Trust Requests Sent to the XML Service Port`t`t: " $Script:XDSite1.TrustRequestsSentToTheXmlServicePort.ToString()
		Line 0 ""
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 1 0 "Configuration"
		WriteHTMLLine 2 0 "Site Settings"
		$rowdata = @()
		$columnHeaders = @("Site name",($global:htmlsb),$XDSiteName,$htmlwhite)
		$rowdata += @(,('Default StoreFront address',($global:htmlsb),$DefaultStoreFrontAddress,$htmlwhite))
		$rowdata += @(,("Base OU",($global:htmlsb),$Script:XDSite1.BaseOU,$htmlwhite))
		$rowdata += @(,("Color Depth",($global:htmlsb),$xColorDepth,$htmlwhite))
		If(validObject $Script:XDSite1 ConnectionLeasingEnabled)
		{
			$rowdata += @(,("Connection Leasing Enabled",($global:htmlsb),$Script:XDSite1.ConnectionLeasingEnabled.ToString(),$htmlwhite))
		}
		$rowdata += @(,("Default Minimum Functional Level",($global:htmlsb),$xVDAVersion,$htmlwhite))
		$rowdata += @(,("DNS Resolution Enabled",($global:htmlsb),$Script:XDSite1.DnsResolutionEnabled.ToString(),$htmlwhite))
		If(validObject $Script:XDSite1 IsSecondaryBroker)
		{
			$rowdata += @(,("Is Secondary Broker",($global:htmlsb),$Script:XDSite1.IsSecondaryBroker.ToString(),$htmlwhite))
		}
		If(validObject $Script:XDSite1 LocalHostCacheEnabled)
		{
			$rowdata += @(,("Local Host Cache Enabled",($global:htmlsb),$Script:XDSite1.LocalHostCacheEnabled.ToString(),$htmlwhite))
		}
		If(validObject $Script:XDSite1 ReuseMachinesWithoutShutdownInOutageAllowed)
		{
			$rowdata += @(,("Reuse Machines Without Shutdown in Outage Allowed",($global:htmlsb),$Script:XDSite1.ReuseMachinesWithoutShutdownInOutageAllowed.ToString(),$htmlwhite))
		}
		$rowdata += @(,("Secure ICA Required",($global:htmlsb),$Script:XDSite1.SecureIcaRequired.ToString(),$htmlwhite))
		$rowdata += @(,("Trust Managed Anonymous XML Service Requests",($global:htmlsb),$Script:XDSite1.TrustManagedAnonymousXmlServiceRequests.ToString(),$htmlwhite))
		$rowdata += @(,("Trust Requests Sent to the XML Service Port",($global:htmlsb),$Script:XDSite1.TrustRequestsSentToTheXmlServicePort.ToString(),$htmlwhite))
		
		$msg = ""
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders
	}
	
	$results = Get-ProvServiceConfigurationData @XDParams2
	
	If($? -and $null -ne $results)
	{
		If($MSWord -or $PDF)
		{
			WriteWordLine 3 0 "Site Provisioning Settings"
			[System.Collections.Hashtable[]] $ItemsWordTable = @()
		}
		ElseIf($Text)
		{
			Line 0 "Site Provisioning Settings"
		}
		ElseIf($HTML)
		{
			WriteHTMLLine 3 0 "Site Provisioning Settings"
			$rowdata = @()
		}
		
		ForEach($result in $results)
		{
			If($MSWord -or $PDF)
			{
				$ItemsWordTable += @{ 
				Name  = $result.name;
				Value = $result.value;
				}
			}
			ElseIf($Text)
			{
				Line 1 "Name : " $result.name
				Line 1 "Value: " $result.value
				Line 0 ""
			}
			ElseIf($HTML)
			{
				$rowdata += @(,(
				$result.name,$htmlwhite,
				$result.value,$htmlwhite
				))
			}
		}

		If($MSWord -or $PDF)
		{
			$Table = AddWordTable -Hashtable $ItemsWordTable `
			-Columns Name,Value `
			-Headers "Name", "Value" `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitContent;

			SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 " "
		}
		ElseIf($HTML)
		{
			$columnHeaders = @(
			'Name',($global:htmlsb),
			'Value',($global:htmlsb))

			$msg = ""
			FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders
			WriteHTMLLine 0 0 ""
		}
	}
	Else
	{
		#don't care
	}
}

Function OutputCEIPSetting
{
	Write-Verbose "$(Get-Date -Format G): `tProcessing Customer Experience Improvement Program"
	
	#V2.10 initialize $CEIP in case of error with Get-AnalyticsSite
	$CEIP = "Unable to retrieve CEIP information"
	$Results = Get-AnalyticsSite @XDParams1
	If($? -and ($Null -ne $Results))
	{
		If($Results.Enabled)
		{
			$CEIP = "You are currently participating in the Customer Experience Improvement Program"
		}
		Else
		{
			$CEIP = "You are not currently participating in the Customer Experience Improvement Program"
		}
	}
	Else
	{
		Write-Warning "Unable to retrieve CEIP information"
	}	

	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Product Support"
		$CEIPWordTable = @()
		$CEIPWordTable += @{CEIP = $CEIP;}
		
		$Table = AddWordTable -Hashtable $CEIPWordTable `
		-Columns CEIP `
		-Headers "Citrix Customer Experience Improvement Program" `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitContent;

		SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null

		WriteWordLine 0 0 ""
	}
	ElseIf($Text)
	{
		Line 0 "Product Support"
		Line 0 ""
		Line 1 "Citrix Customer Experience Improvement Program: " $CEIP
		Line 0 ""
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 2 0 "Product Support"
		$rowdata = @()
		$rowdata += @(,($CEIP,$htmlwhite))

		$columnHeaders = @(
		'Citrix Customer Experience Improvement Program',($global:htmlsb))

		$msg = ""
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders
	}
}

Function GetSQLVersion
{
	Param([object]$SQLsrv)

	#V1.40 add SQL 2017
	#V1.40 add more info to the Default message
	$Major = $SQLsrv.VersionMajor
	$Minor = $SQLsrv.VersionMinor
	$SQLVer = ""
	$SQLEdition = $SQLsrv.EngineEdition
	Switch ($Major)
	{
		8						{$SQLVer = "SQL Server 2000"; Break}
		9						{$SQLVer = "SQL Server 2005"; Break}
		{10 -and $Minor -eq 0}	{$SQLVer = "SQL Server 2008"} #can't do break here
		{10 -and $Minor -eq 50}	{$SQLVer = "SQL Server 2008 R2"} #can't do break here #V2.12 fix from 5 to 50
		11						{$SQLVer = "SQL Server 2012"; Break}
		12						{$SQLVer = "SQL Server 2014"; Break}
		13						{$SQLVer = "SQL Server 2016"; Break}
		14						{$SQLVer = "SQL Server 2017"; Break}
		15						{$SQLVer = "SQL Server 2019"; Break}
		Default					{$SQLVer = "Unable to determine SQL Server version. Major: $($Major) Minor: $($Minor) Edition: $($SQLEdition)"; Break}
	}

	Return "$($SQLVer) $($SQLEdition)"
}

Function GetDBCompatibilityLevel
{
	Param([string]$DBCompat, [object]$SQLsrv)
	#9-Jul-2022 add support for SQL Server 2022

	$Major = $SQLsrv.VersionMajor
	
	<#
		https://www.spiria.com/en/blog/web-applications/understanding-sql-server-compatibility-levels
		
		Database Compatibility Level	Description
		160								SQL Server 2022
		150								SQL Server 2019
		140								SQL Server 2017
		130								SQL Server 2016	
		120								SQL Server 2014	
		110								SQL Server 2012	
		100								SQL Server 2008 
		90								SQL Server 2005	
		80								SQL Server 2000	
	#>

	$tmp = ""
	Switch($DBCompat)
	{
		"160"			{$tmp = "SQL Server 2022"; Break}
		"150"			{$tmp = "SQL Server 2019"; Break}
		"140"			{$tmp = "SQL Server 2017"; Break}
		"130"			{$tmp = "SQL Server 2016"; Break}
		"120"			{$tmp = "SQL Server 2014"; Break}
		"110"			{$tmp = "SQL Server 2012"; Break}
		"100"			{$tmp = "SQL Server 2008"; Break}
		"90"			{$tmp = "SQL Server 2005"; Break}
		"80"			{$tmp = "SQL Server 2000"; Break}
		"Version150"	{$tmp = "SQL Server 2019"; Break}
		"Version140"	{$tmp = "SQL Server 2017"; Break}
		"Version130"	{$tmp = "SQL Server 2016"; Break}
		"Version120"	{$tmp = "SQL Server 2014"; Break}
		"Version110"	{$tmp = "SQL Server 2012"; Break}
		"Version100"	{$tmp = "SQL Server 2008"; Break}
		"Version90"		{$tmp = "SQL Server 2005"; Break}
		"Version80"		{$tmp = "SQL Server 2000"; Break}
		Default			{$tmp = "Unable to determine Database Compatibility Level: $DBCompat"}
	}
	
	#now do a specific test for Azure SQL
	#https://docs.microsoft.com/en-us/sql/t-sql/statements/alter-database-transact-sql-compatibility-level?view=sql-server-2017
	
	If($Major -eq 12 -and `
	(($DBCompat -eq 130 -or $DBCompat -eq "Version130") -or `
	($DBCompat -eq 140 -or $DBCompat -eq "Version140") -or `
	($DBCompat -eq 150 -or $DBCompat -eq "Version150") -or `
	($DBCompat -eq 160 -or $DBCompat -eq "Version160")))
	{
		$tmp = "Azure SQL Database"
	}
	
	Return $tmp
}

Function OutputDatastores
{
	#2-Mar-2017 Fix bug reported by P. Ewing
	#2-Apr-2021 Fix bugs reported M. Foster
	#4-Jul-2022 Fix bug reported by James Rankin
	
	#line starts with server=SQLServerName;
	#only need what is between the = and ;
	
	#24-Jun-2017 add Database Size to the output
	#25-Jun-2017 add checking if the SQL Server assembly loaded before calculating the database size
	
	#add get IP address for each SQL Server name
	Write-Verbose "$(Get-Date -Format G): `tRetrieving database connection data"
	Write-Verbose "$(Get-Date -Format G): `t`tConfiguration database"
	[string]$ConfigSQLServerPrincipalName = ""
	[string]$ConfigSQLServerMirrorName = "Not Configured"
	[string]$ConfigDatabaseName = ""
	[string]$ConfigDBSize = "Unable to determine"
	[string]$ConfigDBReadCommittedSnapshot = "Unable to determine"
	[string]$ConfigDBSQLVersion = "Unable to determine"
	[string]$ConfigSQLServerPrincipalNameIPAddress = ""
	[string]$ConfigSQLServerMirrorNameIPAddress = ""
	$SQLServerNames = @()
	
	$ConfigDBs = Get-ConfigDBConnection @XDParams1

	If($? -and ($Null -ne $ConfigDBs))
	{
		$tmp = $ConfigDBs
		$csitems = $tmp.Split(';')
		ForEach($csitem in $csitems)
		{
			$Pair = $csitem.split('=').trimstart()
			Switch ($Pair[0])
			{
				"Server"				{$ConfigSQLServerPrincipalName = $Pair[1]; Break}
				"Data Source"			{$ConfigSQLServerPrincipalName = $Pair[1]; Break}
				"Failover Partner"		{$ConfigSQLServerMirrorName = $Pair[1]; Break}
				"MultiSubnetFailover"	{$ConfigSQLServerMirrorName = ""; Break}
				"Database"				{$ConfigDatabaseName = $Pair[1]; Break}
				"Initial Catalog"		{$ConfigDatabaseName = $Pair[1]; Break}
			}
		}

		If($ConfigSQLServerPrincipalName.Contains("\"))
		{
			$ConfigSQLServerPrincipalNameIPAddress = Get-IPAddress $ConfigSQLServerPrincipalName.Substring(0,$ConfigSQLServerPrincipalName.IndexOf("\"))
			#add in V2.40 get hardware info for the sql server(s)
			$SQLServerNames += $ConfigSQLServerPrincipalName.Substring(0,$ConfigSQLServerPrincipalName.IndexOf("\"))
		}
		ElseIf($ConfigSQLServerPrincipalName.Contains(",")) #3.35
		{
			$ConfigSQLServerPrincipalNameIPAddress = Get-IPAddress $ConfigSQLServerPrincipalName.Substring(0,$ConfigSQLServerPrincipalName.IndexOf(","))
			#add in V2.40 get hardware info for the sql server(s)
			$SQLServerNames += $ConfigSQLServerPrincipalName.Substring(0,$ConfigSQLServerPrincipalName.IndexOf(","))
		}
		ElseIf($ConfigSQLServerPrincipalName -like "*tcp://*")
		{
			#looking for tcp://servername.domain.tld:port
			$x = $ConfigSQLServerPrincipalName.LastIndexOf("/") + 1 #to get past the //
			$y = $ConfigSQLServerPrincipalName.LastIndexOf(":")
			$len = ($y - $x)
			$ConfigSQLServerPrincipalNameIPAddress = Get-IPAddress $ConfigSQLServerPrincipalName.Substring($x, $len)
			$SQLServerNames += $ConfigSQLServerPrincipalName.Substring($x, $len)
		}
		Else
		{
			$ConfigSQLServerPrincipalNameIPAddress = Get-IPAddress $ConfigSQLServerPrincipalName
			#add in V2.40 get hardware info for the sql server(s)
			$SQLServerNames += $ConfigSQLServerPrincipalName
		}

		If($ConfigSQLServerMirrorName -ne "Not Configured")
		{
			If($ConfigSQLServerMirrorName.Contains("\"))
			{
				$ConfigSQLServerMirrorNameIPAddress = Get-IPAddress $ConfigSQLServerMirrorName.Substring(0,$ConfigSQLServerMirrorName.IndexOf("\"))
				#add in V2.40 get hardware info for the sql server(s)
				$SQLServerNames += $ConfigSQLServerMirrorName.Substring(0,$ConfigSQLServerMirrorName.IndexOf("\"))
			}
			ElseIf($ConfigSQLServerMirrorName.Contains(",")) #3.35
			{
				$ConfigSQLServerMirrorNameIPAddress = Get-IPAddress $ConfigSQLServerMirrorName.Substring(0,$ConfigSQLServerMirrorName.IndexOf(","))
				#add in V2.40 get hardware info for the sql server(s)
				$SQLServerNames += $ConfigSQLServerMirrorName.Substring(0,$ConfigSQLServerMirrorName.IndexOf(","))
			}
			ElseIf($ConfigSQLServerMirrorName -like "*tcp://*")
			{
				#looking for tcp://servername.domain.tld:port
				$x = $ConfigSQLServerMirrorName.LastIndexOf("/") + 1 #to get past the //
				$y = $ConfigSQLServerMirrorName.LastIndexOf(":")
				$len = ($y - $x)
				$ConfigSQLServerMirrorNameIPAddress = Get-IPAddress $ConfigSQLServerMirrorName.Substring($x, $len)
				$SQLServerNames += $ConfigSQLServerMirrorName.Substring($x, $len)
			}
			Else
			{
				$ConfigSQLServerMirrorNameIPAddress = Get-IPAddress $ConfigSQLServerMirrorName
				#add in V2.40 get hardware info for the sql server(s)
				$SQLServerNames += $ConfigSQLServerMirrorName
			}
		}
		Else
		{
			$ConfigSQLServerMirrorNameIPAddress = "-"
		}
		
		If($Script:SQLServerLoaded)
		{
			$SQLsrv = new-Object Microsoft.SqlServer.Management.Smo.Server("$($ConfigSQLServerPrincipalName)")
			$Configdb = New-Object Microsoft.SqlServer.Management.Smo.Database
			
			try
			{
				$Configdb = $SQLsrv.Databases.Item("$($ConfigDatabaseName)")

				[string]$Configdbsize = "Unable to determine" -f $Configdb.size
				If($Null -ne $Configdb.size)
				{
					[string]$Configdbsize = "{0:F2} MB" -f $Configdb.size
				}
				ElseIf($Null -eq $Configdb.size -and $ConfigSQLServerMirrorName -ne "Not Configured")
				{
					$SQLsrv = new-Object Microsoft.SqlServer.Management.Smo.Server("$($ConfigSQLServerMirrorName)")
					$Configdb = New-Object Microsoft.SqlServer.Management.Smo.Database
					$Configdb = $SQLsrv.Databases.Item("$($ConfigDatabaseName)")
					If($Null -ne $Configdb.size)
					{
						[string]$Configdbsize = "{0:F2} MB" -f $Configdb.size
					}
				}
				
				$ConfigDBParent 									= $Configdb.Parent
				$ConfigDBCollation 									= $Configdb.Collation
				$ConfigDBSQLVersion 								= GetSQLVersion $SQLsrv
				$ConfigDBCompatibilityLevel 						= GetDBCompatibilityLevel $Configdb.CompatibilityLevel $SQLsrv
				$ConfigDBCreateDate 								= $Configdb.CreateDate.ToString()

				If($Configdb.IsReadCommittedSnapshotOn)
				{
					$ConfigDBReadCommittedSnapshot = "Enabled"
				}
				Else
				{
					$ConfigDBReadCommittedSnapshot = "Disabled"
				}

				$ConfigDBLastBackupDate 	= $Configdb.LastBackupDate.ToString()
				$ConfigDBLastLogBackupDate 	= $Configdb.LastLogBackupDate.ToString()
				$ConfigDBRecoveryModel 		= $Configdb.RecoveryModel

				If(![String]::IsNullOrEmpty($Configdb.AvailabilityGroupName))
				{
					$ConfigDBAvailabilityGroupName 						= $Configdb.AvailabilityGroupName
					$ConfigDBAvailabilityDatabaseSynchronizationState 	= $Configdb.AvailabilityDatabaseSynchronizationState
				}
				Else
				{
					$ConfigDBAvailabilityGroupName 						= "-"
					$ConfigDBAvailabilityDatabaseSynchronizationState 	= "-"
				}
				
				If($Configdb.IsMirroringEnabled)
				{
					$ConfigDBMirroringPartner			= $Configdb.MirroringPartner
					If($Configdb.MirroringPartner.Contains("\"))
					{
						$ConfigDBMirroringPartnerIPAddress = Get-IPAddress $Configdb.MirroringPartner.Substring(0,$Configdb.MirroringPartner.IndexOf("\"))
						#add in V2.40 get hardware info for the sql server(s)
						$SQLServerNames += $Configdb.MirroringPartner.Substring(0,$Configdb.MirroringPartner.IndexOf("\"))
					}
					ElseIf($Configdb.MirroringPartner.Contains(",")) #3.35
					{
						$ConfigDBMirroringPartnerIPAddress = Get-IPAddress $Configdb.MirroringPartner.Substring(0,$Configdb.MirroringPartner.IndexOf(","))
						#add in V2.40 get hardware info for the sql server(s)
						$SQLServerNames += $Configdb.MirroringPartner.Substring(0,$Configdb.MirroringPartner.IndexOf(","))
					}
					ElseIf($Configdb.MirroringPartner -like "*tcp://*")
					{
						#looking for tcp://servername.domain.tld:port
						$x = $Configdb.MirroringPartner.LastIndexOf("/") + 1 #to get past the //
						$y = $Configdb.MirroringPartner.LastIndexOf(":")
						$len = ($y - $x)
						$ConfigDBMirroringPartnerIPAddress = Get-IPAddress $Configdb.MirroringPartner.Substring($x, $len)
						$SQLServerNames += $Configdb.MirroringPartner.Substring($x, $len)
					}
					Else
					{
						$ConfigDBMirroringPartnerIPAddress = Get-IPAddress $Configdb.MirroringPartner
						#add in V2.40 get hardware info for the sql server(s)
						$SQLServerNames += $Configdb.MirroringPartner
					}
					$ConfigDBMirroringPartnerInstance	= $Configdb.MirroringPartnerInstance
					$ConfigDBMirroringSafetyLevel		= $Configdb.MirroringSafetyLevel
					$ConfigDBMirroringStatus			= $Configdb.MirroringStatus
					$ConfigDBMirroringWitness			= $Configdb.MirroringWitness
					If($Configdb.MirroringWitness.Contains("\"))
					{
						$ConfigDBMirroringWitnessIPAddress = Get-IPAddress $Configdb.MirroringWitness.Substring(0,$Configdb.MirroringWitness.IndexOf("\"))
						#add in V2.40 get hardware info for the sql server(s)
						$SQLServerNames += $Configdb.MirroringWitness.Substring(0,$Configdb.MirroringWitness.IndexOf("\"))
					}
					ElseIf($Configdb.MirroringWitness.Contains(",")) #3.35
					{
						$ConfigDBMirroringWitnessIPAddress = Get-IPAddress $Configdb.MirroringWitness.Substring(0,$Configdb.MirroringWitness.IndexOf(","))
						#add in V2.40 get hardware info for the sql server(s)
						$SQLServerNames += $Configdb.MirroringWitness.Substring(0,$Configdb.MirroringWitness.IndexOf(","))
					}
					ElseIf($Configdb.MirroringWitness -like "*tcp://*")
					{
						#looking for tcp://servername.domain.tld:port
						$x = $Configdb.MirroringWitness.LastIndexOf("/") + 1 #to get past the //
						$y = $Configdb.MirroringWitness.LastIndexOf(":")
						$len = ($y - $x)
						$ConfigDBMirroringWitnessIPAddress = Get-IPAddress $Configdb.MirroringWitness.Substring($x, $len)
						$SQLServerNames += $Configdb.MirroringWitness.Substring($x, $len)
					}
					Else
					{
						$ConfigDBMirroringWitnessIPAddress = Get-IPAddress $Configdb.MirroringWitness
						#add in V2.40 get hardware info for the sql server(s)
						$SQLServerNames += $Configdb.MirroringWitness
					}
					$ConfigDBMirroringWitnessStatus		= $Configdb.MirroringWitnessStatus
				}
				Else
				{
					$ConfigDBMirroringPartner			= "-"
					$ConfigDBMirroringPartnerIPAddress	= "-"
					$ConfigDBMirroringPartnerInstance	= "-"
					$ConfigDBMirroringSafetyLevel		= "-"
					$ConfigDBMirroringStatus			= "-"
					$ConfigDBMirroringWitness			= "-"
					$ConfigDBMirroringWitnessIPAddress	= "-"
					$ConfigDBMirroringWitnessStatus		= "-"
				}
				
				#check for log backup status
				If($ConfigDBRecoveryModel -eq "Simple")
				{
					If($ConfigDBLastLogBackupDate -eq "1/1/0001 12:00:00 AM")
					{
						$ConfigDBLastLogBackupDate = "Log backup not needed for Simple Recovery Model"
					}
				}
				ElseIf($ConfigDBRecoveryModel -eq "Full")
				{
					If($ConfigDBLastLogBackupDate -eq "1/1/0001 12:00:00 AM")
					{
						$ConfigDBLastLogBackupDate = "Log backup not detected for Full Recovery Model"
					}
				}
				
				#check for database backup
				If($ConfigDBLastBackupDate -eq "1/1/0001 12:00:00 AM")
				{
					$ConfigDBLastBackupDate = "Database backup not detected"
				}
			}
			
			catch
			{
				$Failure = $Error[0].Exception.Message
				Write-Warning $Failure
				$Configdbsize                                     = "Failed to connect to $($ConfigDatabaseName)"
				$ConfigDBParent 			                      = "Unable to obtain"
				$ConfigDBCollation 			                      = "Unable to obtain"
				$ConfigDBSQLVersion 		                      = "Unable to obtain"
				$ConfigDBCompatibilityLevel                       = "Unable to obtain"
				$ConfigDBCreateDate 		                      = "Unable to obtain"
				$ConfigDBReadCommittedSnapshot                    = "Unable to obtain"
				$ConfigDBLastBackupDate 	                      = "Unable to obtain"
				$ConfigDBLastLogBackupDate 	                      = "Unable to obtain"
				$ConfigDBRecoveryModel 	                          = "Unable to obtain"
				$ConfigDBAvailabilityGroupName 					  = "Unable to obtain"
				$ConfigDBAvailabilityDatabaseSynchronizationState = "Unable to obtain" 
				$ConfigDBMirroringPartner			              = "Unable to obtain"
				$ConfigDBMirroringPartnerIPAddress	              = "Unable to obtain"
				$ConfigDBMirroringPartnerInstance	              = "Unable to obtain"
				$ConfigDBMirroringSafetyLevel		              = "Unable to obtain"
				$ConfigDBMirroringStatus			              = "Unable to obtain"
				$ConfigDBMirroringWitness			              = "Unable to obtain"
				$ConfigDBMirroringWitnessIPAddress	              = "Unable to obtain"
				$ConfigDBMirroringWitnessStatus		              = "Unable to obtain"
				
			}
		}
	}
	Else
	{
		Write-Warning "Unable to retrieve Configuration Database settings"
	}

	Write-Verbose "$(Get-Date -Format G): `t`tConfiguration Logging database"
	[string]$LogSQLServerPrincipalName          = ""
	[string]$LogSQLServerMirrorName             = "Not Configured"
	[string]$LogDatabaseName                    = ""
	[string]$LogDBSize                          = "Unable to determine"
	[string]$LogDBReadCommittedSnapshot         = "Unable to determine"
	[string]$LogDBSQLVersion                    = "Unable to determine"
	[string]$LogSQLServerPrincipalNameIPAddress = ""
	[string]$LogSQLServerMirrorNameIPAddress    = ""
	
	$LogDBs = Get-LogDataStore @XDParams1

	If($? -and ($Null -ne $LogDBs))
	{
		ForEach($LogDB in $LogDBs)
		{
			If($LogDB.DataStore -eq "Logging")
			{
				$tmp = $LogDB.ConnectionString
				$csitems = $tmp.Split(';')
				ForEach($csitem in $csitems)
				{
					$Pair = $csitem.split('=').trimstart()
					Switch ($Pair[0])
					{
						"Server"				{$LogSQLServerPrincipalName = $Pair[1]; Break}
						"Data Source"			{$LogSQLServerPrincipalName = $Pair[1]; Break}
						"Failover Partner"		{$LogSQLServerMirrorName = $Pair[1]; Break}
						"MultiSubnetFailover"	{$LogSQLServerMirrorName = ""; Break}
						"Database"				{$LogDatabaseName = $Pair[1]; Break}
						"Initial Catalog"		{$LogDatabaseName = $Pair[1]; Break}
					}
				}
			}
		}

		If($LogSQLServerPrincipalName.Contains("\"))
		{
			$LogSQLServerPrincipalNameIPAddress = Get-IPAddress $LogSQLServerPrincipalName.Substring(0,$LogSQLServerPrincipalName.IndexOf("\"))
			#add in V2.40 get hardware info for the sql server(s)
			$SQLServerNames += $LogSQLServerPrincipalName.Substring(0,$LogSQLServerPrincipalName.IndexOf("\"))
		}
		ElseIf($LogSQLServerPrincipalName.Contains(",")) #3.35
		{
			$LogSQLServerPrincipalNameIPAddress = Get-IPAddress $LogSQLServerPrincipalName.Substring(0,$LogSQLServerPrincipalName.IndexOf(","))
			#add in V2.40 get hardware info for the sql server(s)
			$SQLServerNames += $LogSQLServerPrincipalName.Substring(0,$LogSQLServerPrincipalName.IndexOf(","))
		}
		ElseIf($LogSQLServerPrincipalName -like "*tcp://*")
		{
			#looking for tcp://servername.domain.tld:port
			$x = $LogSQLServerPrincipalName.LastIndexOf("/") + 1 #to get past the //
			$y = $LogSQLServerPrincipalName.LastIndexOf(":")
			$len = ($y - $x)
			$LogSQLServerPrincipalNameIPAddress = Get-IPAddress $LogSQLServerPrincipalName.Substring($x, $len)
			$SQLServerNames += $LogSQLServerPrincipalName.Substring($x, $len)
		}
		Else
		{
			$LogSQLServerPrincipalNameIPAddress = Get-IPAddress $LogSQLServerPrincipalName
			#add in V2.40 get hardware info for the sql server(s)
			$SQLServerNames += $LogSQLServerPrincipalName
		}

		If($LogSQLServerMirrorName -ne "Not Configured")
		{
			If($LogSQLServerMirrorName.Contains("\"))
			{
				$LogSQLServerMirrorNameIPAddress = Get-IPAddress $LogSQLServerMirrorName.Substring(0,$LogSQLServerMirrorName.IndexOf("\"))
				#add in V2.40 get hardware info for the sql server(s)
				$SQLServerNames += $LogSQLServerMirrorName.Substring(0,$LogSQLServerMirrorName.IndexOf("\"))
			}
			ElseIf($LogSQLServerMirrorName.Contains(",")) #3.35
			{
				$LogSQLServerMirrorNameIPAddress = Get-IPAddress $LogSQLServerMirrorName.Substring(0,$LogSQLServerMirrorName.IndexOf(","))
				#add in V2.40 get hardware info for the sql server(s)
				$SQLServerNames += $LogSQLServerMirrorName.Substring(0,$LogSQLServerMirrorName.IndexOf(","))
			}
			ElseIf($LogSQLServerMirrorName -like "*tcp://*")
			{
				#looking for tcp://servername.domain.tld:port
				$x = $LogSQLServerMirrorName.LastIndexOf("/") + 1 #to get past the //
				$y = $LogSQLServerMirrorName.LastIndexOf(":")
				$len = ($y - $x)
				$LogSQLServerMirrorNameIPAddress = Get-IPAddress $LogSQLServerMirrorName.Substring($x, $len)
				$SQLServerNames += $LogSQLServerMirrorName.Substring($x, $len)
			}
			Else
			{
				$LogSQLServerMirrorNameIPAddress = Get-IPAddress $LogSQLServerMirrorName
				#add in V2.40 get hardware info for the sql server(s)
				$SQLServerNames += $LogSQLServerMirrorName
			}
		}
		Else
		{
			$LogSQLServerMirrorNameIPAddress = "-"
		}
		
		If($Script:SQLServerLoaded)
		{
			$SQLsrv = new-Object Microsoft.SqlServer.Management.Smo.Server("$($LogSQLServerPrincipalName)")
			$Logdb = New-Object Microsoft.SqlServer.Management.Smo.Database
			
			try
			{
				$Logdb = $SQLsrv.Databases.Item("$($LogDatabaseName)")

				[string]$Logdbsize = "Unable to determine" -f $Logdb.size
				If($Null -ne $Logdb.size)
				{
					[string]$Logdbsize = "{0:F2} MB" -f $Logdb.size
				}
				ElseIf($Null -eq $Logdb.size -and $LogSQLServerMirrorName -ne "Not Configured")
				{
					$SQLsrv = new-Object Microsoft.SqlServer.Management.Smo.Server("$($LogSQLServerMirrorName)")
					$Logdb = New-Object Microsoft.SqlServer.Management.Smo.Database
					$Logdb = $SQLsrv.Databases.Item("$($LogDatabaseName)")
					If($Null -ne $Logdb.size)
					{
						[string]$Logdbsize = "{0:F2} MB" -f $Logdb.size
					}
				}

				$LogDBParent			 = $LogDB.Parent
				$LogDBCollation			 = $LogDB.Collation
				$LogDBSQLVersion		 = GetSQLVersion $SQLsrv
				$LogDBCompatibilityLevel = GetDBCompatibilityLevel $LogDB.CompatibilityLevel $SQLsrv
				$LogDBCreateDate		 = $LogDB.CreateDate.ToString()

				If($LogDB.IsReadCommittedSnapshotOn)
				{
					$LogDBReadCommittedSnapshot = "Enabled"
				}
				Else
				{
					$LogDBReadCommittedSnapshot = "Disabled"
				}

				$LogDBLastBackupDate 	= $LogDB.LastBackupDate.ToString()
				$LogDBLastLogBackupDate	= $LogDB.LastLogBackupDate.ToString()
				$LogDBRecoveryModel 	= $LogDB.RecoveryModel

				If(![String]::IsNullOrEmpty($LogDB.AvailabilityGroupName))
				{
					$LogDBAvailabilityGroupName 					= $LogDB.AvailabilityGroupName
					$LogDBAvailabilityDatabaseSynchronizationState 	= $LogDB.AvailabilityDatabaseSynchronizationState
				}
				Else
				{
					$LogDBAvailabilityGroupName 					= "-"
					$LogDBAvailabilityDatabaseSynchronizationState 	= "-"
				}
				
				If($LogDB.IsMirroringEnabled)
				{
					$LogDBMirroringPartner			= $LogDB.MirroringPartner
					If($Logdb.MirroringPartner.Contains("\"))
					{
						$LogDBMirroringPartnerIPAddress = Get-IPAddress $Logdb.MirroringPartner.Substring(0,$Logdb.MirroringPartner.IndexOf("\"))
						#add in V2.40 get hardware info for the sql server(s)
						$SQLServerNames += $Logdb.MirroringPartner.Substring(0,$Logdb.MirroringPartner.IndexOf("\"))
					}
					ElseIf($Logdb.MirroringPartner.Contains(",")) #3.35
					{
						$LogDBMirroringPartnerIPAddress = Get-IPAddress $Logdb.MirroringPartner.Substring(0,$Logdb.MirroringPartner.IndexOf(","))
						#add in V2.40 get hardware info for the sql server(s)
						$SQLServerNames += $Logdb.MirroringPartner.Substring(0,$Logdb.MirroringPartner.IndexOf(","))
					}
					ElseIf($Logdb.MirroringPartner -like "*tcp://*")
					{
						#looking for tcp://servername.domain.tld:port
						$x = $Logdb.MirroringPartner.LastIndexOf("/") + 1 #to get past the //
						$y = $Logdb.MirroringPartner.LastIndexOf(":")
						$len = ($y - $x)
						$LogDBMirroringPartnerIPAddress = Get-IPAddress $Logdb.MirroringPartner.Substring($x, $len)
						$SQLServerNames += $Logdb.MirroringPartner.Substring($x, $len)
					}
					Else
					{
						$LogDBMirroringPartnerIPAddress = Get-IPAddress $Logdb.MirroringPartner
						#add in V2.40 get hardware info for the sql server(s)
						$SQLServerNames += $Logdb.MirroringPartner
					}
					$LogDBMirroringPartnerInstance	= $LogDB.MirroringPartnerInstance
					$LogDBMirroringSafetyLevel		= $LogDB.MirroringSafetyLevel
					$LogDBMirroringStatus			= $LogDB.MirroringStatus
					$LogDBMirroringWitness			= $LogDB.MirroringWitness
					If($Logdb.MirroringWitness.Contains("\"))
					{
						$LogDBMirroringWitnessIPAddress = Get-IPAddress $Logdb.MirroringWitness.Substring(0,$Logdb.MirroringWitness.IndexOf("\"))
						#add in V2.40 get hardware info for the sql server(s)
						$SQLServerNames += $Logdb.MirroringWitness.Substring(0,$Logdb.MirroringWitness.IndexOf("\"))
					}
					ElseIf($Logdb.MirroringWitness.Contains(",")) #3.35
					{
						$LogDBMirroringWitnessIPAddress = Get-IPAddress $Logdb.MirroringWitness.Substring(0,$Logdb.MirroringWitness.IndexOf(","))
						#add in V2.40 get hardware info for the sql server(s)
						$SQLServerNames += $Logdb.MirroringWitness.Substring(0,$Logdb.MirroringWitness.IndexOf(","))
					}
					ElseIf($Logdb.MirroringWitness -like "*tcp://*")
					{
						#looking for tcp://servername.domain.tld:port
						$x = $Logdb.MirroringWitness.LastIndexOf("/") + 1 #to get past the //
						$y = $Logdb.MirroringWitness.LastIndexOf(":")
						$len = ($y - $x)
						$LogDBMirroringWitnessIPAddress = Get-IPAddress $Logdb.MirroringWitness.Substring($x, $len)
						$SQLServerNames += $Logdb.MirroringWitness.Substring($x, $len)
					}
					Else
					{
						$LogDBMirroringWitnessIPAddress = Get-IPAddress $Logdb.MirroringWitness
						#add in V2.40 get hardware info for the sql server(s)
						$SQLServerNames += $Logdb.MirroringWitness
					}
					$LogDBMirroringWitnessStatus	= $LogDB.MirroringWitnessStatus
				}
				Else
				{
					$LogDBMirroringPartner			= "-"
					$LogDBMirroringPartnerIPAddress	= "-"
					$LogDBMirroringPartnerInstance	= "-"
					$LogDBMirroringSafetyLevel		= "-"
					$LogDBMirroringStatus			= "-"
					$LogDBMirroringWitness			= "-"
					$LogDBMirroringWitnessIPAddress	= "-"
					$LogDBMirroringWitnessStatus	= "-"
				}

				#check for log backup status
				If($LogDBRecoveryModel -eq "Simple")
				{
					If($LogDBLastLogBackupDate -eq "1/1/0001 12:00:00 AM")
					{
						$LogDBLastLogBackupDate = "Log backup not needed for Simple Recovery Model"
					}
				}
				ElseIf($LogDBRecoveryModel -eq "Full")
				{
					If($LogDBLastLogBackupDate -eq "1/1/0001 12:00:00 AM")
					{
						$LogDBLastLogBackupDate = "Log backup not detected for Full Recovery Model"
					}
				}
				
				#check for database backup
				If($LogDBLastBackupDate -eq "1/1/0001 12:00:00 AM")
				{
					$LogDBLastBackupDate = "Database backup not detected"
				}
			}

			catch
			{
				$Failure = $Error[0].Exception.Message
				Write-Warning $Failure
				$Logdbsize                                     = "Failed to connect to $($LogDatabaseName)"
				$LogDBParent 			                       = "Unable to obtain"
				$LogDBCollation 			                   = "Unable to obtain"
				$LogDBSQLVersion 		                       = "Unable to obtain"
				$LogDBCompatibilityLevel                       = "Unable to obtain"
				$LogDBCreateDate 		                       = "Unable to obtain"
				$LogDBReadCommittedSnapshot                    = "Unable to obtain"
				$LogDBLastBackupDate 	                       = "Unable to obtain"
				$LogDBLastLogBackupDate 	                   = "Unable to obtain"
				$LogDBRecoveryModel 	                       = "Unable to obtain"
				$LogDBAvailabilityGroupName 			       = "Unable to obtain"
				$LogDBAvailabilityDatabaseSynchronizationState = "Unable to obtain" 
				$LogDBMirroringPartner			               = "Unable to obtain"
				$LogDBMirroringPartnerIPAddress	               = "Unable to obtain"
				$LogDBMirroringPartnerInstance	               = "Unable to obtain"
				$LogDBMirroringSafetyLevel		               = "Unable to obtain"
				$LogDBMirroringStatus			               = "Unable to obtain"
				$LogDBMirroringWitness			               = "Unable to obtain"
				$LogDBMirroringWitnessIPAddress	               = "Unable to obtain"
				$LogDBMirroringWitnessStatus		           = "Unable to obtain"
				
			}
		}
	}
	Else
	{
		Write-Warning "Unable to retrieve Configuration Logging Database settings"
	}

	Write-Verbose "$(Get-Date -Format G): `t`tMonitoring database"
	[string]$MonitorSQLServerPrincipalName          = ""
	[string]$MonitorSQLServerMirrorName             = "Not Configured"
	[string]$MonitorDatabaseName                    = ""
	[string]$MonitorDBSize                          = "Unable to determine"
	[string]$MonitorDBReadCommittedSnapshot         = "Unable to determine"
	[string]$MonitorDBSQLVersion                    = "Unable to determine"
	[string]$MonitorCollectHotfix                   = "Disabled"
	[string]$MonitorDataCollection                  = "Disabled"
	[string]$MonitorDetailedSQL                     = "Disabled"
	[string]$MonitorSQLServerPrincipalNameIPAddress = ""
	[string]$MonitorSQLServerMirrorNameIPAddress    = ""
	
	$MonitorDBs = Get-MonitorDataStore @XDParams1

	If($? -and ($Null -ne $MonitorDBs))
	{
		ForEach($MonitorDB in $MonitorDBs)
		{
			If($MonitorDB.DataStore -eq "Monitor")
			{
				$tmp = $MonitorDB.ConnectionString
				$csitems = $tmp.Split(';')
				ForEach($csitem in $csitems)
				{
					$Pair = $csitem.split('=').trimstart()
					Switch ($Pair[0])
					{
						"Server"				{$MonitorSQLServerPrincipalName = $Pair[1]; Break}
						"Data Source"			{$MonitorSQLServerPrincipalName = $Pair[1]; Break}
						"Failover Partner"		{$MonitorSQLServerMirrorName = $Pair[1]; Break}
						"MultiSubnetFailover"	{$MonitorSQLServerMirrorName = ""; Break}
						"Database"				{$MonitorDatabaseName = $Pair[1]; Break}
						"Initial Catalog"		{$MonitorDatabaseName = $Pair[1]; Break}
					}
				}
			}
		}

		If($MonitorSQLServerPrincipalName.Contains("\"))
		{
			$MonitorSQLServerPrincipalNameIPAddress = Get-IPAddress $MonitorSQLServerPrincipalName.Substring(0,$MonitorSQLServerPrincipalName.IndexOf("\"))
			#add in V2.40 get hardware info for the sql server(s)
			$SQLServerNames += $MonitorSQLServerPrincipalName.Substring(0,$MonitorSQLServerPrincipalName.IndexOf("\"))
		}
		ElseIf($MonitorSQLServerPrincipalName.Contains(",")) #3.35
		{
			$MonitorSQLServerPrincipalNameIPAddress = Get-IPAddress $MonitorSQLServerPrincipalName.Substring(0,$MonitorSQLServerPrincipalName.IndexOf(","))
			#add in V2.40 get hardware info for the sql server(s)
			$SQLServerNames += $MonitorSQLServerPrincipalName.Substring(0,$MonitorSQLServerPrincipalName.IndexOf(","))
		}
		ElseIf($MonitorSQLServerPrincipalName -like "*tcp://*")
		{
			#looking for tcp://servername.domain.tld:port
			$x = $MonitorSQLServerPrincipalName.LastIndexOf("/") + 1 #to get past the //
			$y = $MonitorSQLServerPrincipalName.LastIndexOf(":")
			$len = ($y - $x)
			$MonitorSQLServerPrincipalNameIPAddress = Get-IPAddress $MonitorSQLServerPrincipalName.Substring($x, $len)
			$SQLServerNames += $MonitorSQLServerPrincipalName.Substring($x, $len)
		}
		Else
		{
			$MonitorSQLServerPrincipalNameIPAddress = Get-IPAddress $MonitorSQLServerPrincipalName
			#add in V2.40 get hardware info for the sql server(s)
			$SQLServerNames += $MonitorSQLServerPrincipalName
		}

		If($MonitorSQLServerMirrorName -ne "Not Configured")
		{
			If($MonitorSQLServerMirrorName.Contains("\"))
			{
				$MonitorSQLServerMirrorNameIPAddress = Get-IPAddress $MonitorSQLServerMirrorName.Substring(0,$MonitorSQLServerMirrorName.IndexOf("\"))
				#add in V2.40 get hardware info for the sql server(s)
				$SQLServerNames += $MonitorSQLServerMirrorName.Substring(0,$MonitorSQLServerMirrorName.IndexOf("\"))
			}
			ElseIf($MonitorSQLServerMirrorName.Contains(",")) #3.35
			{
				$MonitorSQLServerMirrorNameIPAddress = Get-IPAddress $MonitorSQLServerMirrorName.Substring(0,$MonitorSQLServerMirrorName.IndexOf(","))
				#add in V2.40 get hardware info for the sql server(s)
				$SQLServerNames += $MonitorSQLServerMirrorName.Substring(0,$MonitorSQLServerMirrorName.IndexOf(","))
			}
			ElseIf($MonitorSQLServerMirrorName -like "*tcp://*")
			{
				#looking for tcp://servername.domain.tld:port
				$x = $MonitorSQLServerMirrorName.LastIndexOf("/") + 1 #to get past the //
				$y = $MonitorSQLServerMirrorName.LastIndexOf(":")
				$len = ($y - $x)
				$MonitorSQLServerMirrorNameIPAddress = Get-IPAddress $MonitorSQLServerMirrorName.Substring($x, $len)
				$SQLServerNames += $MonitorSQLServerMirrorName.Substring($x, $len)
			}
			Else
			{
				$MonitorSQLServerMirrorNameIPAddress = Get-IPAddress $MonitorSQLServerMirrorName
				#add in V2.40 get hardware info for the sql server(s)
				$SQLServerNames += $MonitorSQLServerMirrorName
			}
		}
		Else
		{
			$MonitorSQLServerMirrorNameIPAddress = "-"
		}
		
		If($Script:SQLServerLoaded)
		{
			$SQLsrv = new-Object Microsoft.SqlServer.Management.Smo.Server("$($MonitorSQLServerPrincipalName)")
			$Monitordb = New-Object Microsoft.SqlServer.Management.Smo.Database
			
			try
			{
				$Monitordb = $SQLsrv.Databases.Item("$($MonitorDatabaseName)")
				
				[string]$Monitordbsize = "Unable to determine" -f $Monitordb.size
				If($Null -ne $Monitordb.size)
				{
					[string]$Monitordbsize = "{0:F2} MB" -f $Monitordb.size
				}
				ElseIf($Null -eq $Monitordb.size -and $MonitorSQLServerMirrorName -ne "Not Configured")
				{
					$SQLsrv = new-Object Microsoft.SqlServer.Management.Smo.Server("$($MonitorSQLServerMirrorName)")
					$Monitordb = New-Object Microsoft.SqlServer.Management.Smo.Database
					$Monitordb = $SQLsrv.Databases.Item("$($MonitorDatabaseName)")
					If($Null -ne $Monitordb.size)
					{
						[string]$Monitordbsize = "{0:F2} MB" -f $Monitordb.size
					}
				}

				$MonitorDBParent 				= $MonitorDB.Parent
				$MonitorDBCollation 			= $MonitorDB.Collation
				$MonitorDBSQLVersion 			= GetSQLVersion $SQLsrv
				$MonitorDBCompatibilityLevel	= GetDBCompatibilityLevel $MonitorDB.CompatibilityLevel $SQLsrv
				$MonitorDBCreateDate 			= $MonitorDB.CreateDate.ToString()

				If($MonitorDB.IsReadCommittedSnapshotOn)
				{
					$MonitorDBReadCommittedSnapshot = "Enabled"
				}
				Else
				{
					$MonitorDBReadCommittedSnapshot = "Disabled"
				}

				$MonitorDBLastBackupDate 	= $MonitorDB.LastBackupDate.ToString()
				$MonitorDBLastLogBackupDate	= $MonitorDB.LastLogBackupDate.ToString()
				$MonitorDBRecoveryModel 	= $MonitorDB.RecoveryModel

				If(![String]::IsNullOrEmpty($MonitorDB.AvailabilityGroupName))
				{
					$MonitorDBAvailabilityGroupName 					= $MonitorDB.AvailabilityGroupName
					$MonitorDBAvailabilityDatabaseSynchronizationState 	= $MonitorDB.AvailabilityDatabaseSynchronizationState
				}
				Else
				{
					$MonitorDBAvailabilityGroupName 					= "-"
					$MonitorDBAvailabilityDatabaseSynchronizationState 	= "-"
				}
				
				If($MonitorDB.IsMirroringEnabled)
				{
					$MonitorDBMirroringPartner			= $MonitorDB.MirroringPartner
					If($Monitordb.MirroringPartner.Contains("\"))
					{
						$MonitorDBMirroringPartnerIPAddress = Get-IPAddress $Monitordb.MirroringPartner.Substring(0,$Monitordb.MirroringPartner.IndexOf("\"))
						#add in V2.40 get hardware info for the sql server(s)
						$SQLServerNames += $Monitordb.MirroringPartner.Substring(0,$Monitordb.MirroringPartner.IndexOf("\"))
					}
					ElseIf($Monitordb.MirroringPartner.Contains(",")) #3.35
					{
						$MonitorDBMirroringPartnerIPAddress = Get-IPAddress $Monitordb.MirroringPartner.Substring(0,$Monitordb.MirroringPartner.IndexOf(","))
						#add in V2.40 get hardware info for the sql server(s)
						$SQLServerNames += $Monitordb.MirroringPartner.Substring(0,$Monitordb.MirroringPartner.IndexOf(","))
					}
					ElseIf($Monitordb.MirroringPartner -like "*tcp://*")
					{
						#looking for tcp://servername.domain.tld:port
						$x = $Monitordb.MirroringPartner.LastIndexOf("/") + 1 #to get past the //
						$y = $Monitordb.MirroringPartner.LastIndexOf(":")
						$len = ($y - $x)
						$MonitorDBMirroringPartnerIPAddress = Get-IPAddress $Monitordb.MirroringPartner.Substring($x, $len)
						$SQLServerNames += $Monitordb.MirroringPartner.Substring($x, $len)
					}
					Else
					{
						$MonitorDBMirroringPartnerIPAddress = Get-IPAddress $Monitordb.MirroringPartner
						#add in V2.40 get hardware info for the sql server(s)
						$SQLServerNames += $Monitordb.MirroringPartner
					}
					$MonitorDBMirroringPartnerInstance	= $MonitorDB.MirroringPartnerInstance
					$MonitorDBMirroringSafetyLevel		= $MonitorDB.MirroringSafetyLevel
					$MonitorDBMirroringStatus			= $MonitorDB.MirroringStatus
					$MonitorDBMirroringWitness			= $MonitorDB.MirroringWitness
					If($Monitordb.MirroringWitness.Contains("\"))
					{
						$MonitorDBMirroringWitnessIPAddress = Get-IPAddress $MonitorDB.MirroringWitness.Substring(0,$MonitorDB.MirroringWitness.IndexOf("\"))
						#add in V2.40 get hardware info for the sql server(s)
						$SQLServerNames += $MonitorDB.MirroringWitness.Substring(0,$MonitorDB.MirroringWitness.IndexOf("\"))
					}
					ElseIf($Monitordb.MirroringWitness.Contains(",")) #3.35
					{
						$MonitorDBMirroringWitnessIPAddress = Get-IPAddress $MonitorDB.MirroringWitness.Substring(0,$MonitorDB.MirroringWitness.IndexOf(","))
						#add in V2.40 get hardware info for the sql server(s)
						$SQLServerNames += $MonitorDB.MirroringWitness.Substring(0,$MonitorDB.MirroringWitness.IndexOf(","))
					}
					ElseIf($Monitordb.MirroringWitness -like "*tcp://*")
					{
						#looking for tcp://servername.domain.tld:port
						$x = $Monitordb.MirroringWitness.LastIndexOf("/") + 1 #to get past the //
						$y = $Monitordb.MirroringWitness.LastIndexOf(":")
						$len = ($y - $x)
						$MonitorDBMirroringWitnessIPAddress = Get-IPAddress $Monitordb.MirroringWitness.Substring($x, $len)
						$SQLServerNames += $Monitordb.MirroringWitness.Substring($x, $len)
					}
					Else
					{
						$MonitorDBMirroringWitnessIPAddress = Get-IPAddress $MonitorDB.MirroringWitness
						#add in V2.40 get hardware info for the sql server(s)
						$SQLServerNames += $MonitorDB.MirroringWitness
					}
					$MonitorDBMirroringWitnessStatus	= $MonitorDB.MirroringWitnessStatus
				}
				Else
				{
					$MonitorDBMirroringPartner			= "-"
					$MonitorDBMirroringPartnerIPAddress	= "-"
					$MonitorDBMirroringPartnerInstance	= "-"
					$MonitorDBMirroringSafetyLevel		= "-"
					$MonitorDBMirroringStatus			= "-"
					$MonitorDBMirroringWitness			= "-"
					$MonitorDBMirroringWitnessIPAddress	= "-"
					$MonitorDBMirroringWitnessStatus	= "-"
				}

				#check for log backup status
				If($MonitorDBRecoveryModel -eq "Simple")
				{
					If($MonitorDBLastLogBackupDate -eq "1/1/0001 12:00:00 AM")
					{
						$MonitorDBLastLogBackupDate = "Log backup not needed for Simple Recovery Model"
					}
				}
				ElseIf($MonitorDBRecoveryModel -eq "Full")
				{
					If($MonitorDBLastLogBackupDate -eq "1/1/0001 12:00:00 AM")
					{
						$MonitorDBLastLogBackupDate = "Log backup not detected for Full Recovery Model"
					}
				}
				
				#check for database backup
				If($MonitorDBLastBackupDate -eq "1/1/0001 12:00:00 AM")
				{
					$MonitorDBLastBackupDate = "Database backup not detected"
				}
			}
			
			catch
			{
				$Failure = $Error[0].Exception.Message
				Write-Warning $Failure
				$Monitordbsize                                     = "Failed to connect to $($MonitorDatabaseName)"
				$MonitorDBParent 			                       = "Unable to obtain"
				$MonitorDBCollation 			                   = "Unable to obtain"
				$MonitorDBSQLVersion 		                       = "Unable to obtain"
				$MonitorDBCompatibilityLevel                       = "Unable to obtain"
				$MonitorDBCreateDate 		                       = "Unable to obtain"
				$MonitorDBReadCommittedSnapshot                    = "Unable to obtain"
				$MonitorDBLastBackupDate 	                       = "Unable to obtain"
				$MonitorDBLastLogBackupDate                        = "Unable to obtain"
				$MonitorDBRecoveryModel 	                       = "Unable to obtain"
				$MonitorDBAvailabilityGroupName 			       = "Unable to obtain"
				$MonitorDBAvailabilityDatabaseSynchronizationState = "Unable to obtain" 
				$MonitorDBMirroringPartner			               = "Unable to obtain"
				$MonitorDBMirroringPartnerIPAddress	               = "Unable to obtain"
				$MonitorDBMirroringPartnerInstance	               = "Unable to obtain"
				$MonitorDBMirroringSafetyLevel		               = "Unable to obtain"
				$MonitorDBMirroringStatus			               = "Unable to obtain"
				$MonitorDBMirroringWitness			               = "Unable to obtain"
				$MonitorDBMirroringWitnessIPAddress	               = "Unable to obtain"
				$MonitorDBMirroringWitnessStatus		           = "Unable to obtain"
			}

		}
		
		$MonitorConfig = $Null
		$MonitorConfig = Get-MonitorConfiguration @XDParams1
		
		If($? -and $Null -ne $MonitorConfig)
		{
			If($MonitorConfig.CollectHotfixDataEnabled)
			{
				$MonitorCollectHotfix = "Enabled"
			}
			Else
			{
				$MonitorCollectHotfix = "Disabled"
			}

			If($MonitorConfig.DataCollectionEnabled)
			{
				$MonitorDataCollection = "Enabled"
			}
			Else
			{
				$MonitorDataCollection = "Disabled"
			}

			If($MonitorConfig.DetailedSqlOutputEnabled)
			{
				$MonitorDetailedSQL = "Enabled"
			}
			Else
			{
				$MonitorDetailedSQL = "Disabled"
			}
		}
	}
	Else
	{
		Write-Warning "Unable to retrieve Monitoring Database settings"
	}

	Write-Verbose "$(Get-Date -Format G): `tOutput Datastores"
	If($Script:SQLServerLoaded)
	{
		If([String]::IsNullOrEmpty( $ConfigDatabaseName))
		{
			$ConfigDatabaseName = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $ConfigDBAvailabilityDatabaseSynchronizationState))
		{
			$ConfigDBAvailabilityDatabaseSynchronizationState = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $ConfigDBAvailabilityGroupName))
		{
			$ConfigDBAvailabilityGroupName = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $ConfigDBCollation))
		{
			$ConfigDBCollation = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $ConfigDBCompatibilityLevel))
		{
			$ConfigDBCompatibilityLevel = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $ConfigDBCreateDate))
		{
			$ConfigDBCreateDate = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $ConfigDBSize))
		{
			$ConfigDBSize = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $ConfigDBLastBackupDate))
		{
			$ConfigDBLastBackupDate = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $ConfigDBLastLogBackupDate))
		{
			$ConfigDBLastLogBackupDate = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $ConfigSQLServerMirrorName))
		{
			$ConfigSQLServerMirrorName = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $ConfigSQLServerMirrorNameIPAddress))
		{
			$ConfigSQLServerMirrorNameIPAddress = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $ConfigDBMirroringPartner))
		{
			$ConfigDBMirroringPartner = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $ConfigDBMirroringPartnerIPAddress))
		{
			$ConfigDBMirroringPartnerIPAddress = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $ConfigDBMirroringPartnerInstance))
		{
			$ConfigDBMirroringPartnerInstance = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $ConfigDBMirroringSafetyLevel))
		{
			$ConfigDBMirroringSafetyLevel = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $ConfigDBMirroringStatus))
		{
			$ConfigDBMirroringStatus = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $ConfigDBMirroringWitness))
		{
			$ConfigDBMirroringWitness = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $ConfigDBMirroringWitnessIPAddress))
		{
			$ConfigDBMirroringWitnessIPAddress = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $ConfigDBMirroringWitnessStatus))
		{
			$ConfigDBMirroringWitnessStatus = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $ConfigDBParent))
		{
			$ConfigDBParent = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $ConfigDBReadCommittedSnapshot))
		{
			$ConfigDBReadCommittedSnapshot = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $ConfigDBRecoveryModel))
		{
			$ConfigDBRecoveryModel = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $ConfigSQLServerPrincipalName))
		{
			$ConfigSQLServerPrincipalName = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $ConfigSQLServerPrincipalNameIPAddress))
		{
			$ConfigSQLServerPrincipalNameIPAddress = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $ConfigDBSQLVersion))
		{
			$ConfigDBSQLVersion = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $LogDatabaseName))
		{
			$LogDatabaseName = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $LogDBAvailabilityDatabaseSynchronizationState))
		{
			$LogDBAvailabilityDatabaseSynchronizationState = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $LogDBAvailabilityGroupName))
		{
			$LogDBAvailabilityGroupName = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $LogDBCollation))
		{
			$LogDBCollation = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $LogDBCompatibilityLevel))
		{
			$LogDBCompatibilityLevel = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $LogDBCreateDate))
		{
			$LogDBCreateDate = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $LogDBSize))
		{
			$LogDBSize = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $LogDBLastBackupDate))
		{
			$LogDBLastBackupDate = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $LogDBLastLogBackupDate))
		{
			$LogDBLastLogBackupDate = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $LogSQLServerMirrorName))
		{
			$LogSQLServerMirrorName = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $LogSQLServerMirrorNameIPAddress))
		{
			$LogSQLServerMirrorNameIPAddress = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $LogDBMirroringPartner))
		{
			$LogDBMirroringPartner = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $LogDBMirroringPartnerIPAddress))
		{
			$LogDBMirroringPartnerIPAddress = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $LogDBMirroringPartnerInstance))
		{
			$LogDBMirroringPartnerInstance = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $LogDBMirroringSafetyLevel))
		{
			$LogDBMirroringSafetyLevel = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $LogDBMirroringStatus))
		{
			$LogDBMirroringStatus = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $LogDBMirroringWitness))
		{
			$LogDBMirroringWitness = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $LogDBMirroringWitnessIPAddress))
		{
			$LogDBMirroringWitnessIPAddress = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $LogDBMirroringWitnessStatus))
		{
			$LogDBMirroringWitnessStatus = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $LogDBParent))
		{
			$LogDBParent = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $LogDBReadCommittedSnapshot))
		{
			$LogDBReadCommittedSnapshot = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $LogDBRecoveryModel))
		{
			$LogDBRecoveryModel = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $LogSQLServerPrincipalName))
		{
			$LogSQLServerPrincipalName = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $LogSQLServerPrincipalNameIPAddress))
		{
			$LogSQLServerPrincipalNameIPAddress = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $LogDBSQLVersion))
		{
			$LogDBSQLVersion = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $MonitorDatabaseName))
		{
			$MonitorDatabaseName = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $MonitorDBAvailabilityDatabaseSynchronizationState))
		{
			$MonitorDBAvailabilityDatabaseSynchronizationState = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $MonitorDBAvailabilityGroupName))
		{
			$MonitorDBAvailabilityGroupName = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $MonitorDBCollation))
		{
			$MonitorDBCollation = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $MonitorDBCompatibilityLevel))
		{
			$MonitorDBCompatibilityLevel = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $MonitorDBCreateDate))
		{
			$MonitorDBCreateDate = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $MonitorDBSize))
		{
			$MonitorDBSize = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $MonitorDBLastBackupDate))
		{
			$MonitorDBLastBackupDate = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $MonitorDBLastLogBackupDate))
		{
			$MonitorDBLastLogBackupDate = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $MonitorSQLServerMirrorName))
		{
			$MonitorSQLServerMirrorName = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $MonitorSQLServerMirrorNameIPAddress))
		{
			$MonitorSQLServerMirrorNameIPAddress = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $MonitorDBMirroringPartner))
		{
			$MonitorDBMirroringPartner = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $MonitorDBMirroringPartnerIPAddress))
		{
			$MonitorDBMirroringPartnerIPAddress = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $MonitorDBMirroringPartnerInstance))
		{
			$MonitorDBMirroringPartnerInstance = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $MonitorDBMirroringSafetyLevel))
		{
			$MonitorDBMirroringSafetyLevel = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $MonitorDBMirroringStatus))
		{
			$MonitorDBMirroringStatus = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $MonitorDBMirroringWitness))
		{
			$MonitorDBMirroringWitness = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $MonitorDBMirroringWitnessIPAddress))
		{
			$MonitorDBMirroringWitnessIPAddress = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $MonitorDBMirroringWitnessStatus))
		{
			$MonitorDBMirroringWitnessStatus = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $MonitorDBParent))
		{
			$MonitorDBParent = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $MonitorDBReadCommittedSnapshot))
		{
			$MonitorDBReadCommittedSnapshot = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $MonitorDBRecoveryModel))
		{
			$MonitorDBRecoveryModel = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $MonitorSQLServerPrincipalName))
		{
			$MonitorSQLServerPrincipalName = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $MonitorSQLServerPrincipalNameIPAddress))
		{
			$MonitorSQLServerPrincipalNameIPAddress = "Unable to determine"
		}
		If([String]::IsNullOrEmpty( $MonitorDBSQLVersion))
		{
			$MonitorDBSQLVersion = "Unable to determine"
		}
		
		If($MSWord -or $PDF)
		{
			WriteWordLine 2 0 "Datastores"
			$ScriptInformation = New-Object System.Collections.ArrayList
			$ScriptInformation.Add(@{Data = "Datastore"; Value = "Site"; }) > $Null
			$ScriptInformation.Add(@{Data = "Database Name"; Value = $ConfigDatabaseName; }) > $Null
			$ScriptInformation.Add(@{Data = "Availability Database Synchronization State"; Value = $ConfigDBAvailabilityDatabaseSynchronizationState; }) > $Null
			$ScriptInformation.Add(@{Data = "Availability Group Name"; Value = $ConfigDBAvailabilityGroupName; }) > $Null
			$ScriptInformation.Add(@{Data = "Collation"; Value = $ConfigDBCollation; }) > $Null
			$ScriptInformation.Add(@{Data = "Compatibility Level"; Value = $ConfigDBCompatibilityLevel; }) > $Null
			$ScriptInformation.Add(@{Data = "Create Date"; Value = $ConfigDBCreateDate; }) > $Null
			$ScriptInformation.Add(@{Data = "Database Size"; Value = $ConfigDBSize; }) > $Null
			$ScriptInformation.Add(@{Data = "Last Backup Date"; Value = $ConfigDBLastBackupDate; }) > $Null
			$ScriptInformation.Add(@{Data = "Last Log Backup Date"; Value = $ConfigDBLastLogBackupDate; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirror Server Address"; Value = $ConfigSQLServerMirrorName; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirror Server IP Address"; Value = $ConfigSQLServerMirrorNameIPAddress; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirroring Partner"; Value = $ConfigDBMirroringPartner; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirroring Partner IP Address"; Value = $ConfigDBMirroringPartnerIPAddress; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirroring Partner Instance"; Value = $ConfigDBMirroringPartnerInstance; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirroring Safety Level"; Value = $ConfigDBMirroringSafetyLevel; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirroring Status"; Value = $ConfigDBMirroringStatus; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirroring Witness"; Value = $ConfigDBMirroringWitness; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirroring Witness IP Address"; Value = $ConfigDBMirroringWitnessIPAddress; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirroring Witness Status"; Value = $ConfigDBMirroringWitnessStatus; }) > $Null
			$ScriptInformation.Add(@{Data = "Parent"; Value = $ConfigDBParent; }) > $Null
			$ScriptInformation.Add(@{Data = "Read-Committed Snapshot"; Value = $ConfigDBReadCommittedSnapshot; }) > $Null
			$ScriptInformation.Add(@{Data = "Recovery Model"; Value = $ConfigDBRecoveryModel; }) > $Null
			$ScriptInformation.Add(@{Data = "Server Address"; Value = $ConfigSQLServerPrincipalName; }) > $Null
			$ScriptInformation.Add(@{Data = "Server IP Address"; Value = $ConfigSQLServerPrincipalNameIPAddress; }) > $Null
			$ScriptInformation.Add(@{Data = "SQL Server Version"; Value = $ConfigDBSQLVersion; }) > $Null
			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 250;
			$Table.Columns.Item(2).Width = 250;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""

			$ScriptInformation = New-Object System.Collections.ArrayList
			$ScriptInformation.Add(@{Data = "Datastore"; Value = "Logging"; }) > $Null
			$ScriptInformation.Add(@{Data = "Database Name"; Value = $LogDatabaseName; }) > $Null
			$ScriptInformation.Add(@{Data = "Availability Database Synchronization State"; Value = $LogDBAvailabilityDatabaseSynchronizationState; }) > $Null
			$ScriptInformation.Add(@{Data = "Availability Group Name"; Value = $LogDBAvailabilityGroupName; }) > $Null
			$ScriptInformation.Add(@{Data = "Collation"; Value = $LogDBCollation; }) > $Null
			$ScriptInformation.Add(@{Data = "Compatibility Level"; Value = $LogDBCompatibilityLevel; }) > $Null
			$ScriptInformation.Add(@{Data = "Create Date"; Value = $LogDBCreateDate; }) > $Null
			$ScriptInformation.Add(@{Data = "Database Size"; Value = $LogDBSize; }) > $Null
			$ScriptInformation.Add(@{Data = "Last Backup Date"; Value = $LogDBLastBackupDate; }) > $Null
			$ScriptInformation.Add(@{Data = "Last Log Backup Date"; Value = $LogDBLastLogBackupDate; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirror Server Address"; Value = $LogSQLServerMirrorName; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirror Server IP Address"; Value = $LogSQLServerMirrorNameIPAddress; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirroring Partner"; Value = $LogDBMirroringPartner; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirroring Partner IP Address"; Value = $LogDBMirroringPartnerIPAddress; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirroring Partner Instance"; Value = $LogDBMirroringPartnerInstance; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirroring Safety Level"; Value = $LogDBMirroringSafetyLevel; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirroring Status"; Value = $LogDBMirroringStatus; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirroring Witness"; Value = $LogDBMirroringWitness; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirroring Witness IP Address"; Value = $LogDBMirroringWitnessIPAddress; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirroring Witness Status"; Value = $LogDBMirroringWitnessStatus; }) > $Null
			$ScriptInformation.Add(@{Data = "Parent"; Value = $LogDBParent; }) > $Null
			$ScriptInformation.Add(@{Data = "Read-Committed Snapshot"; Value = $LogDBReadCommittedSnapshot; }) > $Null
			$ScriptInformation.Add(@{Data = "Recovery Model"; Value = $LogDBRecoveryModel; }) > $Null
			$ScriptInformation.Add(@{Data = "Server Address"; Value = $LogSQLServerPrincipalName; }) > $Null
			$ScriptInformation.Add(@{Data = "Server IP Address"; Value = $LogSQLServerPrincipalNameIPAddress; }) > $Null
			$ScriptInformation.Add(@{Data = "SQL Server Version"; Value = $LogDBSQLVersion; }) > $Null
			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 250;
			$Table.Columns.Item(2).Width = 250;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""

			$ScriptInformation = New-Object System.Collections.ArrayList
			$ScriptInformation.Add(@{Data = "Datastore"; Value = "Monitoring"; }) > $Null
			$ScriptInformation.Add(@{Data = "Database Name"; Value = $MonitorDatabaseName; }) > $Null
			$ScriptInformation.Add(@{Data = "Availability Database Synchronization State"; Value = $MonitorDBAvailabilityDatabaseSynchronizationState; }) > $Null
			$ScriptInformation.Add(@{Data = "Availability Group Name"; Value = $MonitorDBAvailabilityGroupName; }) > $Null
			$ScriptInformation.Add(@{Data = "Collation"; Value = $MonitorDBCollation; }) > $Null
			$ScriptInformation.Add(@{Data = "Compatibility Level"; Value = $MonitorDBCompatibilityLevel; }) > $Null
			$ScriptInformation.Add(@{Data = "Create Date"; Value = $MonitorDBCreateDate; }) > $Null
			$ScriptInformation.Add(@{Data = "Database Size"; Value = $MonitorDBSize; }) > $Null
			$ScriptInformation.Add(@{Data = "Last Backup Date"; Value = $MonitorDBLastBackupDate; }) > $Null
			$ScriptInformation.Add(@{Data = "Last Log Backup Date"; Value = $MonitorDBLastLogBackupDate; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirror Server Address"; Value = $MonitorSQLServerMirrorName; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirror Server IP Address"; Value = $MonitorSQLServerMirrorNameIPAddress; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirroring Partner"; Value = $MonitorDBMirroringPartner; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirroring Partner IP Address"; Value = $MonitorDBMirroringPartnerIPAddress; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirroring Partner Instance"; Value = $MonitorDBMirroringPartnerInstance; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirroring Safety Level"; Value = $MonitorDBMirroringSafetyLevel; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirroring Status"; Value = $MonitorDBMirroringStatus; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirroring Witness"; Value = $MonitorDBMirroringWitness; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirroring Witness IP Address"; Value = $MonitorDBMirroringWitnessIPAddress; }) > $Null
			$ScriptInformation.Add(@{Data = "Mirroring Witness Status"; Value = $MonitorDBMirroringWitnessStatus; }) > $Null
			$ScriptInformation.Add(@{Data = "Parent"; Value = $MonitorDBParent; }) > $Null
			$ScriptInformation.Add(@{Data = "Read-Committed Snapshot"; Value = $MonitorDBReadCommittedSnapshot; }) > $Null
			$ScriptInformation.Add(@{Data = "Recovery Model"; Value = $MonitorDBRecoveryModel; }) > $Null
			$ScriptInformation.Add(@{Data = "Server Address"; Value = $MonitorSQLServerPrincipalName; }) > $Null
			$ScriptInformation.Add(@{Data = "Server IP Address"; Value = $MonitorSQLServerPrincipalNameIPAddress; }) > $Null
			$ScriptInformation.Add(@{Data = "SQL Server Version"; Value = $MonitorDBSQLVersion; }) > $Null
			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 250;
			$Table.Columns.Item(2).Width = 250;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""

			WriteWordLine 3 0 "Monitoring Database Details"
			$ScriptInformation = New-Object System.Collections.ArrayList
			$ScriptInformation.Add(@{Data = "Collect Hotfix Data"; Value = $MonitorCollectHotfix; }) > $Null
			$ScriptInformation.Add(@{Data = "Data Collection"; Value = $MonitorDataCollection; }) > $Null
			$ScriptInformation.Add(@{Data = "Detail SQL Output"; Value = $MonitorDetailedSQL; }) > $Null
			If($MonitorConfig.ContainsKey("EnableDayLevelGranularityProcessUtilization"))
			{
				$ScriptInformation.Add(@{Data = "Enable Day Level Granularity"; Value = $MonitorConfig.EnableDayLevelGranularityProcessUtilization; }) > $Null
			}
			If($MonitorConfig.ContainsKey("EnableHourLevelGranularityProcessUtilization"))
			{
				$ScriptInformation.Add(@{Data = "Enable Hour Level Granularity"; Value = $MonitorConfig.EnableHourLevelGranularityProcessUtilization; }) > $Null
			}
			If($MonitorConfig.ContainsKey("EnableMinLevelGranularityProcessUtilization"))
			{
				$ScriptInformation.Add(@{Data = "Enable Minute Level Granularity"; Value = $MonitorConfig.EnableMinLevelGranularityProcessUtilization; }) > $Null
			}
			$ScriptInformation.Add(@{Data = "Full Poll Start Hour"; Value = $MonitorConfig.FullPollStartHour; }) > $Null
			If($MonitorConfig.ContainsKey("MonitorQueryTimeoutSeconds"))
			{
				$ScriptInformation.Add(@{Data = "Monitor Query Timeout Seconds"; Value = $MonitorConfig.MonitorQueryTimeoutSeconds; }) > $Null
			}
			$ScriptInformation.Add(@{Data = "Resolution Poll Time Hours"; Value = $MonitorConfig.FullPollStartHour; }) > $Null
			$ScriptInformation.Add(@{Data = "Sync Poll Time Hours"; Value = $MonitorConfig.SyncPollTimeHours; }) > $Null
			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 200;
			$Table.Columns.Item(2).Width = 50;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 3 0 "Groom Retention Settings in Days"
			$ScriptInformation = New-Object System.Collections.ArrayList

			If($MonitorConfig.ContainsKey("GroomApplicationErrorsRetentionDays"))
			{
				$ScriptInformation.Add(@{Data = "Application Errors"; Value = $MonitorConfig.GroomApplicationErrorsRetentionDays; }) > $Null
			}
			If($MonitorConfig.ContainsKey("GroomApplicationFaultsRetentionDays"))
			{
				$ScriptInformation.Add(@{Data = "Application Faults"; Value = $MonitorConfig.GroomApplicationFaultsRetentionDays; }) > $Null
			}
			$ScriptInformation.Add(@{Data = "Application Instance"; Value = $MonitorConfig.GroomApplicationInstanceRetentionDays; }) > $Null
			$ScriptInformation.Add(@{Data = "Deleted"; Value = $MonitorConfig.GroomDeletedRetentionDays; }) > $Null
			$ScriptInformation.Add(@{Data = "Failures"; Value = $MonitorConfig.GroomFailuresRetentionDays; }) > $Null
			If($MonitorConfig.ContainsKey("GroomHourlyRetentionDays"))
			{
				$ScriptInformation.Add(@{Data = "Hourly Retention"; Value = $MonitorConfig.GroomHourlyRetentionDays; }) > $Null
			}
			$ScriptInformation.Add(@{Data = "Load Indexes"; Value = $MonitorConfig.GroomLoadIndexesRetentionDays; }) > $Null
			$ScriptInformation.Add(@{Data = "Machine Hotfix Log"; Value = $MonitorConfig.GroomMachineHotfixLogRetentionDays; }) > $Null
			If($MonitorConfig.ContainsKey("GroomMachineMetricDataRetentionDays"))
			{
				$ScriptInformation.Add(@{Data = "Machine Metric Data"; Value = $MonitorConfig.GroomMachineMetricDataRetentionDays; }) > $Null
			}
			If($MonitorConfig.ContainsKey("GroomMachineMetricDaySummaryDataRetentionDays"))
			{
				$ScriptInformation.Add(@{Data = "Machine Metric Day Summary"; Value = $MonitorConfig.GroomMachineMetricDaySummaryDataRetentionDays; }) > $Null
			}
			$ScriptInformation.Add(@{Data = "Minute"; Value = $MonitorConfig.GroomMinuteRetentionDays; }) > $Null
			If($MonitorConfig.ContainsKey("GroomNotificationLogRetentionDays"))
			{
				$ScriptInformation.Add(@{Data = "Notification"; Value = $MonitorConfig.GroomNotificationLogRetentionDays; }) > $Null
			}
			If($MonitorConfig.ContainsKey("GroomProcessUsageDayDataRetentionDays"))
			{
				$ScriptInformation.Add(@{Data = "Process Usage Day Data"; Value = $MonitorConfig.GroomProcessUsageDayDataRetentionDays; }) > $Null
			}
			If($MonitorConfig.ContainsKey("GroomProcessUsageHourDataRetentionDays"))
			{
				$ScriptInformation.Add(@{Data = "Process Usage Hour Data"; Value = $MonitorConfig.GroomProcessUsageHourDataRetentionDays; }) > $Null
			}
			If($MonitorConfig.ContainsKey("GroomProcessUsageMinuteDataRetentionDays"))
			{
				$ScriptInformation.Add(@{Data = "Process Usage Minute Data"; Value = $MonitorConfig.GroomProcessUsageMinuteDataRetentionDays; }) > $Null
			}
			If($MonitorConfig.ContainsKey("GroomProcessUsageRawDataRetentionDays"))
			{
				$ScriptInformation.Add(@{Data = "Process Usage Raw Data"; Value = $MonitorConfig.GroomProcessUsageRawDataRetentionDays; }) > $Null
			}
			If($MonitorConfig.ContainsKey("GroomResourceUsageDayDataRetentionDays"))
			{
				$ScriptInformation.Add(@{Data = "Resource Usage Day Data"; Value = $MonitorConfig.GroomResourceUsageDayDataRetentionDays; }) > $Null
			}
			If($MonitorConfig.ContainsKey("GroomResourceUsageHourDataRetentionDays"))
			{
				$ScriptInformation.Add(@{Data = "Resource Usage Hour Data"; Value = $MonitorConfig.GroomResourceUsageHourDataRetentionDays; }) > $Null
			}
			If($MonitorConfig.ContainsKey("GroomResourceUsageMinuteDataRetentionDays"))
			{
				$ScriptInformation.Add(@{Data = "Resource Usage Minute Data"; Value = $MonitorConfig.GroomResourceUsageMinuteDataRetentionDays; }) > $Null
			}
			If($MonitorConfig.ContainsKey("GroomResourceUsageRawDataRetentionDays"))
			{
				$ScriptInformation.Add(@{Data = "Resource Usage Raw Data"; Value = $MonitorConfig.GroomResourceUsageRawDataRetentionDays; }) > $Null
			}
			If($MonitorConfig.ContainsKey("GroomSessionMetricsDataRetentionDays"))
			{
				$ScriptInformation.Add(@{Data = "Session Metrics"; Value = $MonitorConfig.GroomSessionMetricsDataRetentionDays; }) > $Null
			}
			$ScriptInformation.Add(@{Data = "Sessions"; Value = $MonitorConfig.GroomSessionsRetentionDays; }) > $Null
			$ScriptInformation.Add(@{Data = "Summaries"; Value = $MonitorConfig.GroomSummariesRetentionDays; }) > $Null
			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 200;
			$Table.Columns.Item(2).Width = 50;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
		}
		If($Text)
		{
			Line 0 "Datastores"
			Line 0 ""
			Line 1 "Datastore: Site"
			Line 2 "Database Name`t`t`t`t`t: " $ConfigDatabaseName
			Line 2 "Availability Database Synchronization State`t: " $ConfigDBAvailabilityDatabaseSynchronizationState
			Line 2 "Availability Group Name`t`t`t`t: " $ConfigDBAvailabilityGroupName
			Line 2 "Collation`t`t`t`t`t: " $ConfigDBCollation
			Line 2 "Compatibility Level`t`t`t`t: " $ConfigDBCompatibilityLevel
			Line 2 "Create Date`t`t`t`t`t: " $ConfigDBCreateDate
			Line 2 "Database Size`t`t`t`t`t: " $ConfigDBSize
			Line 2 "Last Backup Date`t`t`t`t: " $ConfigDBLastBackupDate
			Line 2 "Last Log Backup Date`t`t`t`t: " $ConfigDBLastLogBackupDate
			Line 2 "Mirror Server Address`t`t`t`t: " $ConfigSQLServerMirrorName
			Line 2 "Mirror Server IP Address`t`t`t: " $ConfigSQLServerMirrorNameIPAddress
			Line 2 "Mirroring Partner`t`t`t`t: " $ConfigDBMirroringPartner
			Line 2 "Mirroring Partner IP Address`t`t`t: " $ConfigDBMirroringPartnerIPAddress
			Line 2 "Mirroring Partner Instance`t`t`t: " $ConfigDBMirroringPartnerInstance
			Line 2 "Mirroring Safety Level`t`t`t`t: " $ConfigDBMirroringSafetyLevel
			Line 2 "Mirroring Status`t`t`t`t: " $ConfigDBMirroringStatus
			Line 2 "Mirroring Witness`t`t`t`t: " $ConfigDBMirroringWitness
			Line 2 "Mirroring Witness IP Address`t`t`t: " $ConfigDBMirroringWitnessIPAddress
			Line 2 "Mirroring Witness Status`t`t`t: " $ConfigDBMirroringWitnessStatus
			Line 2 "Parent`t`t`t`t`t`t: " $ConfigDBParent
			Line 2 "Read-Committed Snapshot`t`t`t`t: " $ConfigDBReadCommittedSnapshot
			Line 2 "Recovery Model`t`t`t`t`t: " $ConfigDBRecoveryModel
			Line 2 "Server Address`t`t`t`t`t: " $ConfigSQLServerPrincipalName
			Line 2 "Server IP Address`t`t`t`t: " $ConfigSQLServerPrincipalNameIPAddress
			Line 2 "SQL Server Version`t`t`t`t: " $ConfigDBSQLVersion
			Line 0 ""
			Line 1 "Datastore: Logging"
			Line 2 "Database Name`t`t`t`t`t: " $LogDatabaseName
			Line 2 "Availability Database Synchronization State`t: " $LogDBAvailabilityDatabaseSynchronizationState
			Line 2 "Availability Group Name`t`t`t`t: " $LogDBAvailabilityGroupName
			Line 2 "Collation`t`t`t`t`t: " $LogDBCollation
			Line 2 "Compatibility Level`t`t`t`t: " $LogDBCompatibilityLevel
			Line 2 "Create Date`t`t`t`t`t: " $LogDBCreateDate
			Line 2 "Database Size`t`t`t`t`t: " $LogDBSize
			Line 2 "Last Backup Date`t`t`t`t: " $LogDBLastBackupDate
			Line 2 "Last Log Backup Date`t`t`t`t: " $LogDBLastLogBackupDate
			Line 2 "Mirror Server Address`t`t`t`t: " $LogSQLServerMirrorName
			Line 2 "Mirror Server IP Address`t`t`t: " $LogSQLServerMirrorNameIPAddress
			Line 2 "Mirroring Partner`t`t`t`t: " $LogDBMirroringPartner
			Line 2 "Mirroring Partner IP Address`t`t`t: " $LogDBMirroringPartnerIPAddress
			Line 2 "Mirroring Partner Instance`t`t`t: " $LogDBMirroringPartnerInstance
			Line 2 "Mirroring Safety Level`t`t`t`t: " $LogDBMirroringSafetyLevel
			Line 2 "Mirroring Status`t`t`t`t: " $LogDBMirroringStatus
			Line 2 "Mirroring Witness`t`t`t`t: " $LogDBMirroringWitness
			Line 2 "Mirroring Witness IP Address`t`t`t: " $LogDBMirroringWitnessIPAddress
			Line 2 "Mirroring Witness Status`t`t`t: " $LogDBMirroringWitnessStatus
			Line 2 "Parent`t`t`t`t`t`t: " $LogDBParent
			Line 2 "Read-Committed Snapshot`t`t`t`t: " $LogDBReadCommittedSnapshot
			Line 2 "Recovery Model`t`t`t`t`t: " $LogDBRecoveryModel
			Line 2 "Server Address`t`t`t`t`t: " $LogSQLServerPrincipalName
			Line 2 "Server IP Address`t`t`t`t: " $LogSQLServerPrincipalNameIPAddress
			Line 2 "SQL Server Version`t`t`t`t: " $LogDBSQLVersion
			Line 0 ""
			Line 1 "Datastore: Monitoring"
			Line 2 "Database Name`t`t`t`t`t: " $MonitorDatabaseName
			Line 2 "Availability Database Synchronization State`t: " $MonitorDBAvailabilityDatabaseSynchronizationState
			Line 2 "Availability Group Name`t`t`t`t: " $MonitorDBAvailabilityGroupName
			Line 2 "Collation`t`t`t`t`t: " $MonitorDBCollation
			Line 2 "Compatibility Level`t`t`t`t: " $MonitorDBCompatibilityLevel
			Line 2 "Create Date`t`t`t`t`t: " $MonitorDBCreateDate
			Line 2 "Database Size`t`t`t`t`t: " $MonitorDBSize
			Line 2 "Last Backup Date`t`t`t`t: " $MonitorDBLastBackupDate
			Line 2 "Last Log Backup Date`t`t`t`t: " $MonitorDBLastLogBackupDate
			Line 2 "Mirror Server Address`t`t`t`t: " $MonitorSQLServerMirrorName
			Line 2 "Mirror Server IP Address`t`t`t: " $MonitorSQLServerMirrorNameIPAddress
			Line 2 "Mirroring Partner`t`t`t`t: " $MonitorDBMirroringPartner
			Line 2 "Mirroring Partner IP Address`t`t`t: " $MonitorDBMirroringPartnerIPAddress
			Line 2 "Mirroring Partner Instance`t`t`t: " $MonitorDBMirroringPartnerInstance
			Line 2 "Mirroring Safety Level`t`t`t`t: " $MonitorDBMirroringSafetyLevel
			Line 2 "Mirroring Status`t`t`t`t: " $MonitorDBMirroringStatus
			Line 2 "Mirroring Witness`t`t`t`t: " $MonitorDBMirroringWitness
			Line 2 "Mirroring Witness IP Address`t`t`t: " $MonitorDBMirroringWitnessIPAddress
			Line 2 "Mirroring Witness Status`t`t`t: " $MonitorDBMirroringWitnessStatus
			Line 2 "Parent`t`t`t`t`t`t: " $MonitorDBParent
			Line 2 "Read-Committed Snapshot`t`t`t`t: " $MonitorDBReadCommittedSnapshot
			Line 2 "Recovery Model`t`t`t`t`t: " $MonitorDBRecoveryModel
			Line 2 "Server Address`t`t`t`t`t: " $MonitorSQLServerPrincipalName
			Line 2 "Server IP Address`t`t`t`t: " $MonitorSQLServerPrincipalNameIPAddress
			Line 2 "SQL Server Version`t`t`t`t: " $MonitorDBSQLVersion
			Line 0 ""

			Line 1 "Monitoring Database Details"
			Line 2 "Collect Hotfix Data`t`t: " $MonitorCollectHotfix
			Line 2 "Data Collection`t`t`t: " $MonitorDataCollection
			Line 2 "Detail SQL Output`t`t: " $MonitorDetailedSQL
			If($MonitorConfig.ContainsKey("EnableDayLevelGranularityProcessUtilization"))
			{
				Line 2 "Enable Day Level Granularity`t: " $MonitorConfig.EnableDayLevelGranularityProcessUtilization
			}
			If($MonitorConfig.ContainsKey("EnableHourLevelGranularityProcessUtilization"))
			{
				Line 2 "Enable Hour Level Granularity`t: " $MonitorConfig.EnableHourLevelGranularityProcessUtilization
			}
			If($MonitorConfig.ContainsKey("EnableMinLevelGranularityProcessUtilization"))
			{
				Line 2 "Enable Minute Level Granularity`t: " $MonitorConfig.EnableMinLevelGranularityProcessUtilization
			}
			Line 2 "Full Poll Start Hour`t`t: " $MonitorConfig.FullPollStartHour
			If($MonitorConfig.ContainsKey("MonitorQueryTimeoutSeconds"))
			{
				Line 2 "Monitor Query Timeout Seconds`t: " $MonitorConfig.MonitorQueryTimeoutSeconds
			}
			Line 2 "Resolution Poll Time Hours`t: " $MonitorConfig.FullPollStartHour
			Line 2 "Sync Poll Time Hours`t`t: " $MonitorConfig.SyncPollTimeHours
			Line 0 ""
			Line 1 "Groom Retention Settings in Days" 
			If($MonitorConfig.ContainsKey("GroomApplicationErrorsRetentionDays"))
			{
				Line 2 "Application Errors`t`t: " $MonitorConfig.GroomApplicationErrorsRetentionDays
			}
			If($MonitorConfig.ContainsKey("GroomApplicationFaultsRetentionDays"))
			{
				Line 2 "Application Faults`t`t: " $MonitorConfig.GroomApplicationFaultsRetentionDays
			}
			Line 2 "Application Instance`t`t: " $MonitorConfig.GroomApplicationInstanceRetentionDays
			Line 2 "Deleted`t`t`t`t: " $MonitorConfig.GroomDeletedRetentionDays
			Line 2 "Failures`t`t`t: " $MonitorConfig.GroomFailuresRetentionDays
			If($MonitorConfig.ContainsKey("GroomHourlyRetentionDays"))
			{
				Line 2 "Hourly Retention`t`t: " $MonitorConfig.GroomHourlyRetentionDays
			}
			Line 2 "Load Indexes`t`t`t: " $MonitorConfig.GroomLoadIndexesRetentionDays
			Line 2 "Machine Hotfix Log`t`t: " $MonitorConfig.GroomMachineHotfixLogRetentionDays
			If($MonitorConfig.ContainsKey("GroomMachineMetricDataRetentionDays"))
			{
				Line 2 "Machine Metric Data`t`t: " $MonitorConfig.GroomMachineMetricDataRetentionDays
			}
			If($MonitorConfig.ContainsKey("GroomMachineMetricDaySummaryDataRetentionDays"))
			{
				Line 2 "Machine Metric Day Summary`t: " $MonitorConfig.GroomMachineMetricDaySummaryDataRetentionDays
			}
			Line 2 "Minute`t`t`t`t: " $MonitorConfig.GroomMinuteRetentionDays
			If($MonitorConfig.ContainsKey("GroomNotificationLogRetentionDays"))
			{
				Line 2 "Notification`t`t`t: " $MonitorConfig.GroomNotificationLogRetentionDays
			}
			If($MonitorConfig.ContainsKey("GroomProcessUsageDayDataRetentionDays"))
			{
				Line 2 "Process Usage Day Data`t`t: " $MonitorConfig.GroomProcessUsageDayDataRetentionDays
			}
			If($MonitorConfig.ContainsKey("GroomProcessUsageHourDataRetentionDays"))
			{
				Line 2 "Process Usage Hour Data`t`t: " $MonitorConfig.GroomProcessUsageHourDataRetentionDays
			}
			If($MonitorConfig.ContainsKey("GroomProcessUsageMinuteDataRetentionDays"))
			{
				Line 2 "Process Usage Minute Data`t: " $MonitorConfig.GroomProcessUsageMinuteDataRetentionDays
			}
			If($MonitorConfig.ContainsKey("GroomProcessUsageRawDataRetentionDays"))
			{
				Line 2 "Process Usage Raw Data`t`t: " $MonitorConfig.GroomProcessUsageRawDataRetentionDays
			}
			If($MonitorConfig.ContainsKey("GroomResourceUsageDayDataRetentionDays"))
			{
				Line 2 "Resource Usage Day Data`t`t: " $MonitorConfig.GroomResourceUsageDayDataRetentionDays
			}
			If($MonitorConfig.ContainsKey("GroomResourceUsageHourDataRetentionDays"))
			{
				Line 2 "Resource Usage Hour Data`t: " $MonitorConfig.GroomResourceUsageHourDataRetentionDays
			}
			If($MonitorConfig.ContainsKey("GroomResourceUsageMinuteDataRetentionDays"))
			{
				Line 2 "Resource Usage Minute Data`t: " $MonitorConfig.GroomResourceUsageMinuteDataRetentionDays
			}
			If($MonitorConfig.ContainsKey("GroomResourceUsageRawDataRetentionDays"))
			{
				Line 2 "Resource Usage Raw Data`t`t: " $MonitorConfig.GroomResourceUsageRawDataRetentionDays
			}
			If($MonitorConfig.ContainsKey("GroomSessionMetricsDataRetentionDays"))
			{
				Line 2 "Session Metrics`t`t`t: " $MonitorConfig.GroomSessionMetricsDataRetentionDays
			}
			Line 2 "Sessions`t`t`t: " $MonitorConfig.GroomSessionsRetentionDays
			Line 2 "Summaries`t`t`t: " $MonitorConfig.GroomSummariesRetentionDays
			Line 0 ""
		}
		If($HTML)
		{
			WriteHTMLLine 2 0 "Datastores"
			
			$rowdata = @()
			$columnHeaders = @("Datastore",($global:htmlsb),"Site",$htmlwhite)
			$rowdata += @(,("Database Name",($global:htmlsb),$ConfigDatabaseName,$htmlwhite))
			$rowdata += @(,("Availability Database Synchronization State",($global:htmlsb),$ConfigDBAvailabilityDatabaseSynchronizationState,$htmlwhite))
			$rowdata += @(,("Availability Group Name",($global:htmlsb),$ConfigDBAvailabilityGroupName,$htmlwhite))
			$rowdata += @(,("Collation",($global:htmlsb),$ConfigDBCollation,$htmlwhite))
			$rowdata += @(,("Compatibility Level",($global:htmlsb),$ConfigDBCompatibilityLevel,$htmlwhite))
			$rowdata += @(,("Create Date",($global:htmlsb),$ConfigDBCreateDate,$htmlwhite))
			$rowdata += @(,("Database Size",($global:htmlsb),$ConfigDBSize,$htmlwhite))
			$rowdata += @(,("Last Backup Date",($global:htmlsb),$ConfigDBLastBackupDate,$htmlwhite))
			$rowdata += @(,("Last Log Backup Date",($global:htmlsb),$ConfigDBLastLogBackupDate,$htmlwhite))
			$rowdata += @(,("Mirror Server Address",($global:htmlsb),$ConfigSQLServerMirrorName,$htmlwhite))
			$rowdata += @(,("Mirror Server IP Address",($global:htmlsb),$ConfigSQLServerMirrorNameIPAddress,$htmlwhite))
			$rowdata += @(,("Mirroring Partner",($global:htmlsb),$ConfigDBMirroringPartner,$htmlwhite))
			$rowdata += @(,("Mirroring Partner IP Address",($global:htmlsb),$ConfigDBMirroringPartnerIPAddress,$htmlwhite))
			$rowdata += @(,("Mirroring Partner Instance",($global:htmlsb),$ConfigDBMirroringPartnerInstance,$htmlwhite))
			$rowdata += @(,("Mirroring Safety Level",($global:htmlsb),$ConfigDBMirroringSafetyLevel,$htmlwhite))
			$rowdata += @(,("Mirroring Status",($global:htmlsb),$ConfigDBMirroringStatus,$htmlwhite))
			$rowdata += @(,("Mirroring Witness",($global:htmlsb),$ConfigDBMirroringWitness,$htmlwhite))
			$rowdata += @(,("Mirroring Witness IP Address",($global:htmlsb),$ConfigDBMirroringWitnessIPAddress,$htmlwhite))
			$rowdata += @(,("Mirroring Witness Status",($global:htmlsb),$ConfigDBMirroringWitnessStatus,$htmlwhite))
			$rowdata += @(,("Parent",($global:htmlsb),$ConfigDBParent,$htmlwhite))
			$rowdata += @(,("Read-Committed Snapshot",($global:htmlsb),$ConfigDBReadCommittedSnapshot,$htmlwhite))
			$rowdata += @(,("Recovery Model",($global:htmlsb),$ConfigDBRecoveryModel,$htmlwhite))
			$rowdata += @(,("Server Address",($global:htmlsb),$ConfigSQLServerPrincipalName,$htmlwhite))
			$rowdata += @(,("Server IP Address",($global:htmlsb),$ConfigSQLServerPrincipalNameIPAddress,$htmlwhite))
			$rowdata += @(,("SQL Server Version",($global:htmlsb),$ConfigDBSQLVersion,$htmlwhite))
			$msg = ""
			$columnWidths = @("250","275")
			FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "525"
			WriteHTMLLine 0 0 ""
			
			$rowdata = @()
			$columnHeaders = @("Datastore",($global:htmlsb),"Logging",$htmlwhite)
			$rowdata += @(,("Database Name",($global:htmlsb),$LogDatabaseName,$htmlwhite))
			$rowdata += @(,("Availability Database Synchronization State",($global:htmlsb),$LogDBAvailabilityDatabaseSynchronizationState,$htmlwhite))
			$rowdata += @(,("Availability Group Name",($global:htmlsb),$LogDBAvailabilityGroupName,$htmlwhite))
			$rowdata += @(,("Collation",($global:htmlsb),$LogDBCollation,$htmlwhite))
			$rowdata += @(,("Compatibility Level",($global:htmlsb),$LogDBCompatibilityLevel,$htmlwhite))
			$rowdata += @(,("Create Date",($global:htmlsb),$LogDBCreateDate,$htmlwhite))
			$rowdata += @(,("Database Size",($global:htmlsb),$LogDBSize,$htmlwhite))
			$rowdata += @(,("Last Backup Date",($global:htmlsb),$LogDBLastBackupDate,$htmlwhite))
			$rowdata += @(,("Last Log Backup Date",($global:htmlsb),$LogDBLastLogBackupDate,$htmlwhite))
			$rowdata += @(,("Mirror Server Address",($global:htmlsb),$LogSQLServerMirrorName,$htmlwhite))
			$rowdata += @(,("Mirror Server IP Address",($global:htmlsb),$LogSQLServerMirrorNameIPAddress,$htmlwhite))
			$rowdata += @(,("Mirroring Partner",($global:htmlsb),$LogDBMirroringPartner,$htmlwhite))
			$rowdata += @(,("Mirroring Partner IP Address",($global:htmlsb),$LogDBMirroringPartnerIPAddress,$htmlwhite))
			$rowdata += @(,("Mirroring Partner Instance",($global:htmlsb),$LogDBMirroringPartnerInstance,$htmlwhite))
			$rowdata += @(,("Mirroring Safety Level",($global:htmlsb),$LogDBMirroringSafetyLevel,$htmlwhite))
			$rowdata += @(,("Mirroring Status",($global:htmlsb),$LogDBMirroringStatus,$htmlwhite))
			$rowdata += @(,("Mirroring Witness",($global:htmlsb),$LogDBMirroringWitness,$htmlwhite))
			$rowdata += @(,("Mirroring Witness IP Address",($global:htmlsb),$LogDBMirroringWitnessIPAddress,$htmlwhite))
			$rowdata += @(,("Mirroring Witness Status",($global:htmlsb),$LogDBMirroringWitnessStatus,$htmlwhite))
			$rowdata += @(,("Parent",($global:htmlsb),$LogDBParent,$htmlwhite))
			$rowdata += @(,("Read-Committed Snapshot",($global:htmlsb),$LogDBReadCommittedSnapshot,$htmlwhite))
			$rowdata += @(,("Recovery Model",($global:htmlsb),$LogDBRecoveryModel,$htmlwhite))
			$rowdata += @(,("Server Address",($global:htmlsb),$LogSQLServerPrincipalName,$htmlwhite))
			$rowdata += @(,("Server IP Address",($global:htmlsb),$LogSQLServerPrincipalNameIPAddress,$htmlwhite))
			$rowdata += @(,("SQL Server Version",($global:htmlsb),$LogDBSQLVersion,$htmlwhite))
			$msg = ""
			$columnWidths = @("250","275")
			FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "525"
			WriteHTMLLine 0 0 ""
			
			$rowdata = @()
			$columnHeaders = @("Datastore",($global:htmlsb),"Monitoring",$htmlwhite)
			$rowdata += @(,("Database Name",($global:htmlsb),$MonitorDatabaseName,$htmlwhite))
			$rowdata += @(,("Availability Database Synchronization State",($global:htmlsb),$MonitorDBAvailabilityDatabaseSynchronizationState,$htmlwhite))
			$rowdata += @(,("Availability Group Name",($global:htmlsb),$MonitorDBAvailabilityGroupName,$htmlwhite))
			$rowdata += @(,("Collation",($global:htmlsb),$MonitorDBCollation,$htmlwhite))
			$rowdata += @(,("Compatibility Level",($global:htmlsb),$MonitorDBCompatibilityLevel,$htmlwhite))
			$rowdata += @(,("Create Date",($global:htmlsb),$MonitorDBCreateDate,$htmlwhite))
			$rowdata += @(,("Database Size",($global:htmlsb),$MonitorDBSize,$htmlwhite))
			$rowdata += @(,("Last Backup Date",($global:htmlsb),$MonitorDBLastBackupDate,$htmlwhite))
			$rowdata += @(,("Last Log Backup Date",($global:htmlsb),$MonitorDBLastLogBackupDate,$htmlwhite))
			$rowdata += @(,("Mirror Server Address",($global:htmlsb),$MonitorSQLServerMirrorName,$htmlwhite))
			$rowdata += @(,("Mirror Server IP Address",($global:htmlsb),$MonitorSQLServerMirrorNameIPAddress,$htmlwhite))
			$rowdata += @(,("Mirroring Partner",($global:htmlsb),$MonitorDBMirroringPartner,$htmlwhite))
			$rowdata += @(,("Mirroring Partner IP Address",($global:htmlsb),$MonitorDBMirroringPartnerIPAddress,$htmlwhite))
			$rowdata += @(,("Mirroring Partner Instance",($global:htmlsb),$MonitorDBMirroringPartnerInstance,$htmlwhite))
			$rowdata += @(,("Mirroring Safety Level",($global:htmlsb),$MonitorDBMirroringSafetyLevel,$htmlwhite))
			$rowdata += @(,("Mirroring Status",($global:htmlsb),$MonitorDBMirroringStatus,$htmlwhite))
			$rowdata += @(,("Mirroring Witness",($global:htmlsb),$MonitorDBMirroringWitness,$htmlwhite))
			$rowdata += @(,("Mirroring Witness IP Address",($global:htmlsb),$MonitorDBMirroringWitnessIPAddress,$htmlwhite))
			$rowdata += @(,("Mirroring Witness Status",($global:htmlsb),$MonitorDBMirroringWitnessStatus,$htmlwhite))
			$rowdata += @(,("Parent",($global:htmlsb),$MonitorDBParent,$htmlwhite))
			$rowdata += @(,("Read-Committed Snapshot",($global:htmlsb),$MonitorDBReadCommittedSnapshot,$htmlwhite))
			$rowdata += @(,("Recovery Model",($global:htmlsb),$MonitorDBRecoveryModel,$htmlwhite))
			$rowdata += @(,("Server Address",($global:htmlsb),$MonitorSQLServerPrincipalName,$htmlwhite))
			$rowdata += @(,("Server IP Address",($global:htmlsb),$MonitorSQLServerPrincipalNameIPAddress,$htmlwhite))
			$rowdata += @(,("SQL Server Version",($global:htmlsb),$MonitorDBSQLVersion,$htmlwhite))
			$msg = ""
			$columnWidths = @("250","275")
			FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "525"
			
			WriteHTMLLine 3 0 "Monitoring Database Details"
			$rowdata = @()
			$columnHeaders = @("Collect Hotfix Data",($global:htmlsb),$MonitorCollectHotfix,$htmlwhite)
			$rowdata += @(,('Data Collection',($global:htmlsb),$MonitorDataCollection,$htmlwhite))
			$rowdata += @(,('Detail SQL Output',($global:htmlsb),$MonitorDetailedSQL,$htmlwhite))
			If($MonitorConfig.ContainsKey("EnableDayLevelGranularityProcessUtilization"))
			{
				$rowdata += @(,('Enable Day Level Granularity',($global:htmlsb),$MonitorConfig.FullPollStartHour,$htmlwhite))
			}
			If($MonitorConfig.ContainsKey("EnableHourLevelGranularityProcessUtilization"))
			{
				$rowdata += @(,('Enable Hour Level Granularity',($global:htmlsb),$MonitorConfig.FullPollStartHour,$htmlwhite))
			}
			If($MonitorConfig.ContainsKey("EnableMinLevelGranularityProcessUtilization"))
			{
				$rowdata += @(,('Enable Minute Level Granularity',($global:htmlsb),$MonitorConfig.FullPollStartHour,$htmlwhite))
			}
			$rowdata += @(,('Full Poll Start Hour',($global:htmlsb),$MonitorConfig.FullPollStartHour,$htmlwhite))
			If($MonitorConfig.ContainsKey("MonitorQueryTimeoutSeconds"))
			{
				$rowdata += @(,('Monitor Query Timeout Seconds',($global:htmlsb),$MonitorConfig.FullPollStartHour,$htmlwhite))
			}
			$rowdata += @(,('Resolution Poll Time Hours',($global:htmlsb),$MonitorConfig.FullPollStartHour,$htmlwhite))
			$rowdata += @(,('Sync Poll Time Hours',($global:htmlsb),$MonitorConfig.SyncPollTimeHours,$htmlwhite))

			$msg = ""
			$columnWidths = @("250","275")
			FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "525"
			
			WriteHTMLLine 3 0 "Groom Retention Settings in Days"
			$rowdata = @()
			$ch = $False
			If($MonitorConfig.ContainsKey("GroomApplicationErrorsRetentionDays"))
			{
				If($ch -eq $False)
				{
					$columnHeaders = @('Application Errors',($global:htmlsb),$MonitorConfig.GroomApplicationErrorsRetentionDays.ToString(),$htmlwhite)
					$ch = $True
				}
				Else
				{
					$rowdata += @(,('Application Errors',($global:htmlsb),$MonitorConfig.GroomApplicationErrorsRetentionDays.ToString(),$htmlwhite))
				}
			}
			If($MonitorConfig.ContainsKey("GroomApplicationFaultsRetentionDays"))
			{
				If($ch -eq $False)
				{
					$columnHeaders = @('Application Faults',($global:htmlsb),$MonitorConfig.GroomApplicationFaultsRetentionDays.ToString(),$htmlwhite)
					$ch = $True
				}
				Else
				{
					$rowdata += @(,('Application Faults',($global:htmlsb),$MonitorConfig.GroomApplicationFaultsRetentionDays.ToString(),$htmlwhite))
				}
			}
			If($ch -eq $False)
			{
				$columnHeaders = @('Application Instance',($global:htmlsb),$MonitorConfig.GroomApplicationInstanceRetentionDays.ToString(),$htmlwhite)
				$ch = $True
			}
			Else
			{
				$rowdata += @(,('Application Instance',($global:htmlsb),$MonitorConfig.GroomApplicationInstanceRetentionDays.ToString(),$htmlwhite))
			}
			$rowdata += @(,('Deleted',($global:htmlsb),$MonitorConfig.GroomDeletedRetentionDays.ToString(),$htmlwhite))
			$rowdata += @(,('Failures',($global:htmlsb),$MonitorConfig.GroomFailuresRetentionDays.ToString(),$htmlwhite))
			If($MonitorConfig.ContainsKey("GroomHourlyRetentionDays"))
			{
				$rowdata += @(,('Hourly Retention',($global:htmlsb),$MonitorConfig.GroomHourlyRetentionDays.ToString(),$htmlwhite))
			}
			$rowdata += @(,('Load Indexes',($global:htmlsb),$MonitorConfig.GroomLoadIndexesRetentionDays.ToString(),$htmlwhite))
			$rowdata += @(,('Machine Hotfix Log',($global:htmlsb),$MonitorConfig.GroomMachineHotfixLogRetentionDays.ToString(),$htmlwhite))
			If($MonitorConfig.ContainsKey("GroomMachineMetricDataRetentionDays"))
			{
				$rowdata += @(,('Machine Metric Data',($global:htmlsb),$MonitorConfig.GroomMachineMetricDataRetentionDays.ToString(),$htmlwhite))
			}
			If($MonitorConfig.ContainsKey("GroomMachineMetricDaySummaryDataRetentionDays"))
			{
				$rowdata += @(,('Machine Metric Day Summary',($global:htmlsb),$MonitorConfig.GroomMachineMetricDaySummaryDataRetentionDays.ToString(),$htmlwhite))
			}
			$rowdata += @(,('Minute',($global:htmlsb),$MonitorConfig.GroomMinuteRetentionDays,$htmlwhite))
			If($MonitorConfig.ContainsKey("GroomNotificationLogRetentionDays"))
			{
				$rowdata += @(,('Notification',($global:htmlsb),$MonitorConfig.GroomNotificationLogRetentionDays.ToString(),$htmlwhite))
			}
			If($MonitorConfig.ContainsKey("GroomProcessUsageDayDataRetentionDays"))
			{
				$rowdata += @(,('Process Usage Day Data',($global:htmlsb),$MonitorConfig.GroomProcessUsageDayDataRetentionDays.ToString(),$htmlwhite))
			}
			If($MonitorConfig.ContainsKey("GroomProcessUsageHourDataRetentionDays"))
			{
				$rowdata += @(,('Process Usage Hour Data',($global:htmlsb),$MonitorConfig.GroomProcessUsageHourDataRetentionDays.ToString(),$htmlwhite))
			}
			If($MonitorConfig.ContainsKey("GroomProcessUsageMinuteDataRetentionDays"))
			{
				$rowdata += @(,('Process Usage Minute Data',($global:htmlsb),$MonitorConfig.GroomProcessUsageMinuteDataRetentionDays.ToString(),$htmlwhite))
			}
			If($MonitorConfig.ContainsKey("GroomProcessUsageRawDataRetentionDays"))
			{
				$rowdata += @(,('Process Usage Raw Data',($global:htmlsb),$MonitorConfig.GroomProcessUsageRawDataRetentionDays.ToString(),$htmlwhite))
			}
			If($MonitorConfig.ContainsKey("GroomResourceUsageDayDataRetentionDays"))
			{
				$rowdata += @(,('Resource Usage Day Data',($global:htmlsb),$MonitorConfig.GroomResourceUsageDayDataRetentionDays.ToString(),$htmlwhite))
			}
			If($MonitorConfig.ContainsKey("GroomResourceUsageHourDataRetentionDays"))
			{
				$rowdata += @(,('Resource Usage Hour Data',($global:htmlsb),$MonitorConfig.GroomResourceUsageHourDataRetentionDays.ToString(),$htmlwhite))
			}
			If($MonitorConfig.ContainsKey("GroomResourceUsageMinuteDataRetentionDays"))
			{
				$rowdata += @(,('Resource Usage Minute Data',($global:htmlsb),$MonitorConfig.GroomResourceUsageMinuteDataRetentionDays.ToString(),$htmlwhite))
			}
			If($MonitorConfig.ContainsKey("GroomResourceUsageRawDataRetentionDays"))
			{
				$rowdata += @(,('Resource Usage Raw Data',($global:htmlsb),$MonitorConfig.GroomResourceUsageRawDataRetentionDays.ToString(),$htmlwhite))
			}
			If($MonitorConfig.ContainsKey("GroomSessionMetricsDataRetentionDays"))
			{
				$rowdata += @(,('Session Metrics',($global:htmlsb),$MonitorConfig.GroomSessionMetricsDataRetentionDays.ToString(),$htmlwhite))
			}
			$rowdata += @(,('Sessions',($global:htmlsb),$MonitorConfig.GroomSessionsRetentionDays.ToString(),$htmlwhite))
			$rowdata += @(,('Summaries',($global:htmlsb),$MonitorConfig.GroomSummariesRetentionDays.ToString(),$htmlwhite))

			$msg = ""
			$columnWidths = @("200","50")
			FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "250"
		}
		
		If($Hardware)
		{
			$SQLServerNames = $SQLServerNames | Sort-Object -Unique
			
			ForEach($SQLServerName in $SQLServerNames)
			{
				If($MSWord -or $PDF)
				{
					$Script:Selection.InsertNewPage()
				}
				GetComputerWMIInfo $SQLServerName
			}
		}
	}
	Else
	{
		If($MSWord -or $PDF)
		{
			WriteWordLine 2 0 "Datastores"
			WriteWordLine 0 0 "There is no Datastore information becaue the SQL Server Assembly did not load"
		}
		If($Text)
		{
			Line 0 "Datastores"
			Line 0 "There is no Datastore information becaue the SQL Server Assembly did not load"
		}
		If($HTML)
		{
			WriteHTMLLine 2 0 "Datastores"
			WriteHTMLLine 0 0 "There is no Datastore information becaue the SQL Server Assembly did not load"
		}
	}
}
#endregion

#region Administrator, Scope and Roles functions
Function ProcessAdministrators
{
	Write-Verbose "$(Get-Date -Format G): Processing Administrators"
	Write-Verbose "$(Get-Date -Format G): `tRetrieving Administrator data"
	
	$Admins = Get-AdminAdministrator @XDParams2

	If($? -and ($Null -ne $Admins))
	{
		OutputAdministrators $Admins
	}
	ElseIf($? -and ($Null -eq $Admins))
	{
		$txt = "There are no Administrators"
		OutputNotice $txt
	}
	Else
	{
		$txt = "Unable to retrieve Administrators"
		OutputWarning $txt
	}
	Write-Verbose "$(Get-Date -Format G): "
}

Function OutputAdministrators
{
	Param([object] $Admins)

	#V2.17 fix for when $Admin.Rights.ScopeName and $Admin.Rights.RoleName are arrays
	Write-Verbose "$(Get-Date -Format G): `tOutput Administrator data"
	
	ForEach($Admin in $Admins)
	{
		Switch ($Admin.Rights.RoleName)
		{
			"Delivery Group Administrator"	{$Script:TotalDeliveryGroupAdmins++}
			"Full Administrator"			{$Script:TotalFullAdmins++}
			"Help Desk Administrator"		{$Script:TotalHelpDeskAdmins++}
			"Host Administrator"			{$Script:TotalHostAdmins++}
			"Machine Catalog Administrator"	{$Script:TotalMachineCatalogAdmins++}
			"Read Only Administrator"		{$Script:TotalReadOnlyAdmins++}
			Default							{$Script:TotalCustomAdmins++}
		}
	}
	
	If($MSWord -or $PDF)
	{
		$Selection.InsertNewPage()
		WriteWordLine 1 0 "Administrators"
		$AdminsWordTable = @()
		ForEach($Admin in $Admins)
		{
			$Tmp = $Null
			$xScopeName = ""
			$xRoleName = ""

			If($Admin.Enabled)
			{
				$Tmp = "Enabled"
			}
			Else
			{
				$Tmp = "Disabled"
			}

			If($Admin.Rights.ScopeName -is [array])
            {
                $cnt = 0
                ForEach($xScope in $Admin.Rights.ScopeName)
                {
                    $cnt++
                    If($cnt -lt $Admin.Rights.ScopeName.Count)
                    {
                        $xScopeName += "$xScope; "
                    }
                    Else
                    {
                        $xScopeName += "$xScope"
                    }
                }
            }
            Else
            {
                $xScopeName = $Admin.Rights.ScopeName
            }

            If($Admin.Rights.RoleName -is [array])
            {
                $cnt = 0
                ForEach($xRole in $Admin.Rights.RoleName)
                {
                    $cnt++
                    If($cnt -lt $Admin.Rights.RoleName.Count)
                    {
                        $xRoleName += "$xRole; "
                    }
                    Else
                    {
                        $xRoleName += "$xRole"
                    }
                }
            }
            Else
            {
                $xRoleName = $Admin.Rights.RoleName
            }			

			$AdminsWordTable += @{
			Name = $Admin.Name; 
			Scope = $xScopeName; 
			Role = $xRoleName; 
			Status = $Tmp;
			}
		}

		If($AdminsWordTable.Count -eq 0)
		{
			$AdminsWordTable += @{ 
			Name = "No admins found";
			Scope = "N/A";
			Role = "N/A";
			Status = "N/A";
			}
		}

		$Table = AddWordTable -Hashtable $AdminsWordTable `
		-Columns Name, Scope, Role, Status `
		-Headers "Name", "Scope", "Role", "Status" `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitContent;

		SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
	}
	ElseIf($Text)
	{
		Line 0 "Administrators"
		Line 0 ""
		ForEach($Admin in $Admins)
		{
			Line 1 "Name`t: " $Admin.Name
			If($Admin.Rights.ScopeName -is [array])
            {
				Line 1 "Scope`t: " $Admin.Rights.ScopeName[0]
				$cnt = -1
				ForEach($xScope in $Admin.Rights.ScopeName)
				{
					$cnt++
					If($cnt -gt 0)
					{
						Line 2 "  " $Admin.Rights.ScopeName[$cnt]
					}
				}
			}
			Else
			{
				Line 1 "Scope`t: " $Admin.Rights.ScopeName
			}
			If($Admin.Rights.RoleName -is [array])
            {
				Line 1 "Role`t: " $Admin.Rights.RoleName[0]
				$cnt = -1
				ForEach($xRole in $Admin.Rights.RoleName)
				{
					$cnt++
					If($cnt -gt 0)
					{
						Line 2 "  " $Admin.Rights.RoleName[$cnt]
					}
				}
			}
			Else
			{
				Line 1 "Role`t: " $Admin.Rights.RoleName
			}
			Line 1 "Status`t: " -NoNewLine
			If($Admin.Enabled)
			{
				Line 0 "Enabled"
			}
			Else
			{
				Line 0 "Disabled"
			}
			Line 0 ""
		}
	}
	ElseIf($HTML)
	{
		$rowdata = @()
		WriteHTMLLine 1 0 "Administrators"
		ForEach($Admin in $Admins)
		{
			$xType = ""
			If($Admin.Enabled)
			{
				$xType = "Enabled"
			}
			Else
			{
				$xType = "Disabled"
			}
			
			If($Admin.Rights.ScopeName -is [array])
            {
                $xScopeName = ""
                $cnt = 0
                ForEach($xScope in $Admin.Rights.ScopeName)
                {
                    $cnt++
                    If($cnt -lt $Admin.Rights.ScopeName.Count)
                    {
                        $xScopeName += "$xScope; "
                    }
                    Else
                    {
                        $xScopeName += "$xScope"
                    }
                }
            }
            Else
            {
                $xScopeName = $Admin.Rights.ScopeName
            }

            If($Admin.Rights.RoleName -is [array])
            {
                $xRoleName = ""
                $cnt = 0
                ForEach($xRole in $Admin.Rights.RoleName)
                {
                    $cnt++
                    If($cnt -lt $Admin.Rights.RoleName.Count)
                    {
                        $xRoleName += "$xRole; "
                    }
                    Else
                    {
                        $xRoleName += "$xRole"
                    }
                }
            }
            Else
            {
                $xRoleName = $Admin.Rights.RoleName
            }			
			
			$rowdata += @(,(
			$Admin.Name,$htmlwhite,
			$xScopeName,$htmlwhite,
			$xRoleName,$htmlwhite,
			$xType,$htmlwhite))
		}
		$columnHeaders = @(
		'Name',($global:htmlsb),
		'Scope',($global:htmlsb),
		'Role',($global:htmlsb),
		'Status',($global:htmlsb))

		$msg = ""
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders
	}
}

Function ProcessScopes
{
	Write-Verbose "$(Get-Date -Format G): Processing Administrator Scopes"
	$Scopes = Get-AdminScope @XDParams2 -SortBy Name
	
	If($? -and ($Null -ne $Scopes))
	{
		OutputScopes $Scopes
		If($Administrators)
		{
			OutputScopeObjects $Scopes
			OutputScopeAdministrators $Scopes
		}
	}
	ElseIf($? -and ($Null -eq $Scopes))
	{
		$txt = "There are no Administrator Scopes"
		OutputNotice $txt
	}
	Else
	{
		$txt = "Unable to retrieve Administrator Scopes"
		OutputWarning $txt
	}
	Write-Verbose "$(Get-Date -Format G): "
}

Function OutputScopes
{
	Param([object] $Scopes)
	
	Write-Verbose "$(Get-Date -Format G): `tOutput Scopes"
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Administrative Scopes"
		$ScopesWordTable = @()
		ForEach($Scope in $Scopes)
		{
			$ScopesWordTable += @{ 
			Name = $Scope.Name; 
			Description = $Scope.Description;
			}
		}
		$Table = AddWordTable -Hashtable $ScopesWordTable `
		-Columns Name, Description `
		-Headers "Name", "Description" `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitContent;

		SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
	}
	ElseIf($Text)
	{
		Line 0 "Administrative Scopes"
		Line 0 ""
		ForEach($Scope in $Scopes)
		{
			Line 1 "Name`t`t: " $Scope.Name
			Line 1 "Description`t: " $Scope.Description
			Line 0 ""
		}
	}
	ElseIf($HTML)
	{
		$rowdata = @()
		WriteHTMLLine 2 0 "Administrative Scopes"
		ForEach($Scope in $Scopes)
		{
			$rowdata += @(,(
			$Scope.Name,$htmlwhite,
			$Scope.Description,$htmlwhite))
		}
		$columnHeaders = @(
		'Name',($global:htmlsb),
		'Description',($global:htmlsb))

		$msg = ""
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders
	}
}

Function OutputScopeObjects
{
	Param([object] $Scopes)
	
	Write-Verbose "$(Get-Date -Format G): `t`tOutput Scope Objects"

	If($MSWord -or $PDF)
	{
		$Selection.InsertNewPage()
		
		ForEach($Scope in $Scopes)
		{
			WriteWordLine 3 0 "Scope Objects for $($Scope.Name)"

			$Results = GetScopeDG $Scope
			
			If($Results.Count -gt 0)
			{
				[System.Collections.Hashtable[]] $WordTable = @()

				WriteWordLine 4 0 "Delivery Groups"
				
				ForEach($Result in $Results)
				{
					$WordTable += @{ 
					GroupName = $Result.Name; 
					GroupDesc = $Result.Description; 
					}
				}
				$Table = AddWordTable -Hashtable $WordTable `
				-Columns GroupName, GroupDesc `
				-Headers "Name", "Description" `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 250;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
			}

			$Results = GetScopeMC $Scope

			If($Results.Count -gt 0)
			{
				[System.Collections.Hashtable[]] $WordTable = @()

				WriteWordLine 4 0 "Machine Catalogs"
				ForEach($Result in $Results)
				{
					$WordTable += @{ 
					CatalogName = $Result.Name; 
					CatalogDesc = $Result.Description; 
					}
				}
				$Table = AddWordTable -Hashtable $WordTable `
				-Columns CatalogName, CatalogDesc `
				-Headers "Name", "Description" `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 250;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
			}

			$Results = GetScopeHyp $Scope

			If($Results.Count -gt 0)
			{
				[System.Collections.Hashtable[]] $WordTable = @()

				WriteWordLine 4 0 "Hosting"
				ForEach($Result in $Results)
				{
					$WordTable += @{ 
					HypName = $Result.Name; 
					HypDesc = $Result.Description; 
					}
				}
				$Table = AddWordTable -Hashtable $WordTable `
				-Columns HypName, HypDesc `
				-Headers "Name", "Description" `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 250;
				$Table.Columns.Item(2).Width = 250;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
			}

			WriteWordLine 0 0 ""
		}
	}
	ElseIf($Text)
	{
		ForEach($Scope in $Scopes)
		{
			Line 0 "Scope Objects for $($Scope.Name)"

			$Results = GetScopeDG $Scope
			
			If($Results.Count -gt 0)
			{
				Line 0 "Delivery Groups"
				
				ForEach($Result in $Results)
				{
					Line 1 "Name: " $Result.Name
					Line 1 "Description: " $Result.Description
					Line 0 ""
				}
			}

			$Results = GetScopeMC $Scope

			If($Results.Count -gt 0)
			{
				Line 0 "Machine Catalogs"
				ForEach($Result in $Results)
				{
					Line 1 "Name: " $Result.Name
					Line 1 "Description: " $Result.Description
					Line 0 ""
				}
			}

			$Results = GetScopeHyp $Scope

			If($Results.Count -gt 0)
			{
				Line 0 "Hosting"
				ForEach($Result in $Results)
				{
					Line 1 "Name: " $Result.Name
					Line 1 "Description: " $Result.Description
					Line 0 ""
				}
			}

			Line 0 ""
		}
	}
	ElseIf($HTML)
	{
		ForEach($Scope in $Scopes)
		{
			WriteHTMLLine 3 0 "Scope Objects for $($Scope.Name)"

			$Results = GetScopeDG $Scope
			
			If($Results.Count -gt 0)
			{
				WriteHTMLLine 4 0 "Delivery Groups"
				$rowdata = @()

				ForEach($Result in $Results)
				{
					$rowdata += @(,(
					$Result.Name,$htmlwhite,
					$Result.Description,$htmlwhite))
				}
				$msg = ""
				#V2.10 added $columnHeaders
				$columnHeaders = @('Name',($global:htmlsb),'Description',($global:htmlsb))
				$ColumnWidths = @("250","250")
				FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $ColumnWidths -tablewidth "500"
			}

			$Results = GetScopeMC $Scope

			If($Results.Count -gt 0)
			{
				WriteHTMLLine 4 0 "Machine Catalogs"
				$rowdata = @()

				ForEach($Result in $Results)
				{
					$rowdata += @(,(
					$Result.Name,$htmlwhite,
					$Result.Description,$htmlwhite))
				}
				$msg = ""
				#V2.10 added $columnHeaders
				$columnHeaders = @('Name',($global:htmlsb),'Description',($global:htmlsb))
				$ColumnWidths = @("250","250")
				FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $ColumnWidths -tablewidth "500"
			}

			$Results = GetScopeHyp $Scope

			If($Results.Count -gt 0)
			{
				WriteHTMLLine 4 0 "Hosting"
				$rowdata = @()

				ForEach($Result in $Results)
				{
					$rowdata += @(,(
					$Result.Name,$htmlwhite,
					$Result.Description,$htmlwhite))
				}
				$msg = ""
				#V2.10 added $columnHeaders
				$columnHeaders = @('Name',($global:htmlsb),'Description',($global:htmlsb))
				$ColumnWidths = @("250","250")
				FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $ColumnWidths -tablewidth "500"
			}
		}
	}
}

Function GetScopeDG
{
	Param([object] $Scope)
	
	$DG = New-Object System.Collections.ArrayList
	#get delivery groups
	If($Scope.Name -eq "All")
	{
		$Results = @(Get-BrokerDesktopGroup @XDParams2 | `
		Select-Object Name, Description, Scopes | `
		Sort-Object Name -unique)
	}
	Else
	{
		$Results = @(Get-BrokerDesktopGroup @XDParams2 | `
		Select-Object Name, Description, Scopes | `
		Where-Object {$_.Scopes -like $Scope.Name} | `
		Sort-Object Name -unique)
	}
	
	If($? -and $Null -ne $Results)
	{
		ForEach($Result in $Results)
		{
			$obj = [PSCustomObject] @{
				Name        = $Result.Name			
				Description = $Result.Description			
			}
			$null = $DG.Add($obj)
		}
	}

	Return ,$DG
}

Function GetScopeMC
{
	Param([object] $Scope)
	
	#get machine catalogs
	$MC = New-Object System.Collections.ArrayList
	
	If($Scope.Name -eq "All")
	{
		$Results = @(Get-BrokerCatalog @XDParams2 | `
		Select-Object Name, Description, Scopes | `
		Sort-Object Name -unique)
	}
	Else
	{
		$Results = @(Get-BrokerCatalog @XDParams2 | `
		Select-Object Name, Description, Scopes | `
		Where-Object {$_.Scopes -like $Scope.Name} | `
		Sort-Object Name -unique)
	}

	If($? -and $Null -ne $Results)
	{
		ForEach($Result in $Results)
		{
			$obj = [PSCustomObject] @{
				Name        = $Result.Name			
				Description = $Result.Description			
			}
			$null = $MC.Add($obj)
		}
	}

	Return ,$MC
}

Function GetScopeHyp
{
	Param([object] $Scope)
	
	#get hypervisor connections
	$Hyp = New-Object System.Collections.ArrayList
	
	If($Scope.Name -eq "All")
	{
		$Results = @(Get-HypScopedObject @XDParams2 | `
		Select-Object ObjectName, Description, ScopeName | `
		Sort-Object ObjectName -unique)
	}
	Else
	{
		$Results = @(Get-HypScopedObject @XDParams2 | `
		Select-Object ObjectName, Description, ScopeName | `
		Where-Object {$_.ScopeName -like $Scope.Name} | `
		Sort-Object ObjectName -unique)
	}

	If($? -and $Null -ne $Results)
	{
		ForEach($Result in $Results)
		{
			$obj = [PSCustomObject] @{
				Name        = $Result.ObjectName			
				Description = $Result.Description			
			}
			$null = $Hyp.Add($obj)
		}
	}

	Return ,$Hyp
}

Function OutputScopeAdministrators 
{
	Param([object] $Scopes)
	Write-Verbose "$(Get-Date -Format G): `t`tOutput Scope Administrators"
	
	If($MSWord -or $PDF)
	{
		$Selection.InsertNewPage()
		
		ForEach($Scope in $Scopes)
		{
			[System.Collections.Hashtable[]] $WordTable = @()
			WriteWordLine 3 0 "Administrators for Scope: $($Scope.Name)"
			$Admins = Get-AdminAdministrator @XDParams1 | Where-Object {$_.Rights.ScopeName -Contains $Scope.Name}
			
			If($? -and $Null -ne $Admins)
			{
				ForEach($Admin in $Admins)
				{
					$xEnabled = "Disabled"
					If($Admin.Enabled)
					{
						$xEnabled = "Enabled"
					}

					$xRoleName = ""
					ForEach($Right in $Admin.Rights)
					{
						If($Right.ScopeName -eq $Scope.Name -or $Right.ScopeName -eq "All")
						{
							$xRoleName = $Right.RoleName
						}
					}
					
					$WordTable += @{ 
					AdminName = $Admin.Name; 
					Role = $xRoleName; 
					Type = $xEnabled;
					}
				}
				$Table = AddWordTable -Hashtable $WordTable `
				-Columns AdminName, Role, Type `
				-Headers "Administrator Name", "Role", "Status" `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 220;
				$Table.Columns.Item(2).Width = 225;
				$Table.Columns.Item(3).Width = 55;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			ElseIf($? -and $Null -eq $Admins)
			{
				WriteWordLine 0 0 "No administrators defined"
				WriteWordLine 0 0 ""
			}
			Else
			{
				WriteWordLine 0 0 "Unable to retrieve administrators"
				WriteWordLine 0 0 ""
			}
		}
	}
	ElseIf($Text)
	{
		ForEach($Scope in $Scopes)
		{
			Line 1 "Administrators for Scope: $($Scope.Name)"
			$Admins = Get-AdminAdministrator @XDParams1 | Where-Object {$_.Rights.ScopeName -Contains $Scope.Name}
			
			If($? -and $Null -ne $Admins)
			{
				ForEach($Admin in $Admins)
				{
					$xEnabled = "Disabled"
					If($Admin.Enabled)
					{
						$xEnabled = "Enabled"
					}

					$xRoleName = ""
					ForEach($Right in $Admin.Rights)
					{
						If($Right.ScopeName -eq $Scope.Name -or $Right.ScopeName -eq "All")
						{
							$xRoleName = $Right.RoleName
						}
					}
					
					Line 2 "Administrator Name`t: " $Admin.Name
					Line 2 "Role`t`t`t: " $xRoleName
					Line 2 "Status`t`t`t: " $xEnabled
					Line 0 ""
				}
			}
			ElseIf($? -and $Null -eq $Admins)
			{
				Line 2 "No administrators defined"
				Line 0 ""
			}
			Else
			{
				Line 2 "Unable to retrieve administrators"
				Line 0 ""
			}
		}
	}
	ElseIf($HTML)
	{
		ForEach($Scope in $Scopes)
		{
			$rowdata = @()
			WriteHTMLLine 3 0 "Administrators for Scope: $($Scope.Name)"
			$Admins = Get-AdminAdministrator @XDParams1 | Where-Object {$_.Rights.ScopeName -Contains $Scope.Name}
			
			If($? -and $Null -ne $Admins)
			{
				ForEach($Admin in $Admins)
				{
					$xEnabled = "Disabled"
					If($Admin.Enabled)
					{
						$xEnabled = "Enabled"
					}

					$xRoleName = ""
					ForEach($Right in $Admin.Rights)
					{
						If($Right.ScopeName -eq $Scope.Name -or $Right.ScopeName -eq "All")
						{
							$xRoleName = $Right.RoleName
						}
					}
					
					$rowdata += @(,(
					$Admin.Name,$htmlwhite,
					$xRoleName,$htmlwhite,
					$xEnabled,$htmlwhite))
				}
				$columnHeaders = @(
				'Administrator Name',($global:htmlsb),
				'Role',($global:htmlsb),
				'Status',($global:htmlsb))

				$msg = ""
				$columnWidths = @("220","225","55")
				FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "500"
			}
			ElseIf($? -and $Null -eq $Admins)
			{
				WriteHTMLLine 0 0 "No administrators defined"
			}
			Else
			{
				WriteHTMLLine 0 0 "Unable to retrieve administrators"
			}
		}
	}
}

Function ProcessRoles
{
	Write-Verbose "$(Get-Date -Format G): Processing Administrator Roles"
	$Roles = Get-AdminRole @XDParams2 -SortBy Name

	If($? -and ($Null -ne $Roles))
	{
		OutputRoles $Roles
		If($Administrators)
		{
			OutputRoleDefinitions $Roles
			OutputRoleAdministrators $Roles
		}
	}
	ElseIf($? -and ($Null -eq $Roles))
	{
		$txt = "There are no Administrator Roles"
		OutputNotice $txt
	}
	Else
	{
		$txt = "Unable to retrieve Administrator Roles"
		OutputWarning $txt
	}
	Write-Verbose "$(Get-Date -Format G): "
}

Function OutputRoles
{
	Param([object] $Roles)
	
	Write-Verbose "$(Get-Date -Format G): `tOutput Roles"
	If($MSWord -or $PDF)
	{
		If($Administrators)
		{
			$Selection.InsertNewPage()
		}
		WriteWordLine 2 0 "Administrative Roles"
		$RolesWordTable = @()
		ForEach($Role in $Roles)
		{
			$Tmp = $Null
			If($Role.BuiltIn)
			{
				$Tmp = "Built In"
			}
			Else
			{
				$Tmp = "Custom"
			}

			$RolesWordTable += @{ 
			Role = $Role.Name; 
			Description = $Role.Description; 
			Type = $Tmp;
			}
		}
		$Table = AddWordTable -Hashtable $RolesWordTable `
		-Columns Role, Description, Type `
		-Headers "Role", "Description", "Type" `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 150;
		$Table.Columns.Item(2).Width = 300;
		$Table.Columns.Item(3).Width = 50;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
	}
	ElseIf($Text)
	{
		Line 0 "Administrative Roles"
		Line 0 ""
		ForEach($Role in $Roles)
		{
			Line 1 "Role`t`t: " $Role.Name
			Line 1 "Description`t: " $Role.Description
			Line 1 "Type`t`t: " -NoNewLine
			If($Role.BuiltIn)
			{
				Line 0 "Built In"
			}
			Else
			{
				Line 0 "Custom"
			}
			Line 0 ""
		}
	}
	ElseIf($HTML)
	{
		$rowdata = @()
		WriteHTMLLine 2 0 "Administrative Roles"
		ForEach($Role in $Roles)
		{
			$xType = ""
			If($Role.BuiltIn)
			{
				$xType = "Built In"
			}
			Else
			{
				$xType = "Custom"
			}
			$rowdata += @(,(
			$Role.Name,$htmlwhite,
			$Role.Description,$htmlwhite,
			$xType,$htmlwhite))
		}
		$columnHeaders = @(
		'Role',($global:htmlsb),
		'Description',($global:htmlsb),
		'Type',($global:htmlsb))

		$msg = ""
		$columnWidths = @("200","350","50")
		FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "600"
	}
}

Function OutputRoleDefinitions
{
	Param([object] $Roles)
	Write-Verbose "$(Get-Date -Format G): `t`tOutput Role Definitions"
	
	If($MSWord -or $PDF)
	{
		$Selection.InsertNewPage()
		
		ForEach($Role in $Roles)
		{
			[System.Collections.Hashtable[]] $WordTable = @()
			WriteWordLine 3 0 "Role definition for $($Role.Name)"
			WriteWordLine 0 0 "Details - " $Role.Name
			WriteWordLine 0 0 $Role.Description
			$Permissions = $Role.Permissions
			$Results = GetRolePermissions $Permissions

			$comp = ""
			$x = 0
			ForEach($Result in $Results)
			{
				If($x -eq 0)
				{
					$comp = $Result.Value

					$WordTable += @{ 
					FolderName = $Result.Value; 
					Permission = $Result.Name; 
					}
				}
				Else
				{
					If($comp -eq $Result.value)
					{
						$WordTable += @{ 
						FolderName = ""; 
						Permission = $Result.Name; 
						}
					}
					Else
					{
						$comp = $Result.Value

						$WordTable += @{ 
						FolderName = $Result.Value; 
						Permission = $Result.Name; 
						}
					}
				}
				$x++
			}

			$Table = AddWordTable -Hashtable $WordTable `
			-Columns FolderName, Permission `
			-Headers "Folder Name", "Permissions" `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 100;
			$Table.Columns.Item(2).Width = 400;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""
		}
	}
	ElseIf($Text)
	{
		ForEach($Role in $Roles)
		{
			Line 0 "Role definition for $($Role.Name)"
			Line 0 "Details - " $Role.Name
			Line 0 $Role.Description
			Line 0 ""
			$Permissions = $Role.Permissions
			$Results = GetRolePermissions $Permissions

			ForEach($Result in $Results)
			{
				Line 1 "Folder Name`t: " $Result.Value
				Line 1 "Permission`t: " $Result.Name
				Line 0 ""
			}

			Line 0 ""
		}
	}
	ElseIf($HTML)
	{
		ForEach($Role in $Roles)
		{
			$rowdata = @()
			WriteHTMLLine 3 0 "Role definition for $($Role.Name)"
			WriteHTMLLine 0 0 "Details - " $Role.Name
			WriteHTMLLine 0 0 $Role.Description
			$Permissions = $Role.Permissions
			$Results = GetRolePermissions $Permissions

			$comp = ""
			$x = 0
			ForEach($Result in $Results)
			{
				If($x -eq 0)
				{
					$comp = $Result.Value
					$rowdata += @(,(
					$Result.Value,$htmlwhite,
					$Result.Name,$htmlwhite))
				}
				Else
				{
					If($comp -eq $Result.value)
					{
						$rowdata += @(,(
						"",$htmlwhite,
						$Result.Name,$htmlwhite))
					}
					Else
					{
						$comp = $Result.Value
						$rowdata += @(,(
						$Result.Value,$htmlwhite,
						$Result.Name,$htmlwhite))
					}
				}
				$x++
			}

			$columnHeaders = @(
			'Folder Name',($global:htmlsb),
			'Permissions',($global:htmlsb))

			$msg = ""
			$ColumnWidths = @("150","450")
			FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders	-fixedWidth $columnWidths -tablewidth "600"
		}
	}
}

Function GetRolePermissions
{
	Param([object] $Permissions)
	
	$Results = @{}
	
	ForEach($Permission in $Permissions)
	{
		Switch ($Permission)
		{
			"Admin_FullControl"											{$Results.Add("Manage Administrators", "Administrators")}
			"Admin_Read"												{$Results.Add("View Administrators", "Administrators")}
			"Admin_RoleControl"											{$Results.Add("Manage Administrator Custom Roles", "Administrators")}
			"Admin_ScopeControl"										{$Results.Add("Manage Administrator Scopes", "Administrators")}
			"Manage_ServiceConfigurationData"							{$Results.Add("Manage ServiceSettings", "Administrators")}
			
			"AppDisk_AddScope"											{$Results.Add("Add AppDisk to Scope", "AppDisks")}
			"AppDisk_Clone"												{$Results.Add("Create a new Version of AppDisk", "AppDisks")}
			"AppDisk_Consume"											{$Results.Add("Allow AppDisk to be added to a Delivery Group", "AppDisks")}
			"AppDisk_Create"											{$Results.Add("Create AppDisk", "AppDisks")}
			"AppDisk_Delete"											{$Results.Add("Delete AppDisk", "AppDisks")}
			"AppDisk_EditProperties"									{$Results.Add("Edit AppDisk properties", "AppDisks")}
			"AppDisk_Read"												{$Results.Add("View AppDisks", "AppDisks")}
			"AppDisk_RemoveScope"										{$Results.Add("Remove AppDisk from Scope", "AppDisks")}
			"AppDisk_Seal"												{$Results.Add("Prepare AppDisk for use", "AppDisks")}
			"AppDisk_StartAndLaunchSession"								{$Results.Add("Install Applications", "AppDisks")}

			"AppDNA_Read"												{$Results.Add("View AppDNA connections", "AppDNA")}
			"AppDNA_Write"												{$Results.Add("Manage AppDNA connections", "AppDNA")}

			"AppGroupApplications_ChangeTags"							{$Results.Add("Edit Application tags (Application Group)", "Application Groups")}
			"AppGroupApplications_ChangeUserAssignment"					{$Results.Add("Change users assigned to an application (Application Group)", "Application Groups")}
			"AppGroupApplications_Create"								{$Results.Add("Create Application (Application Group)", "Application Groups")}
			"AppGroupApplications_CreateFolder"							{$Results.Add("Create Application Folder (Application Group)", "Application Groups")}
			"AppGroupApplications_Delete"								{$Results.Add("Delete Application (Application Group)", "Application Groups")}
			"AppGroupApplications_EditFolder"							{$Results.Add("Edit Application Folder (Application Group)", "Application Groups")}
			"AppGroupApplications_EditProperties"						{$Results.Add("Edit Application Properties (Application Group)", "Application Groups")}
			"AppGroupApplications_MoveFolder"							{$Results.Add("Move Application Folder (Application Group)", "Application Groups")}
			"AppGroupApplications_Read"									{$Results.Add("View Applications (Application Group)", "Application Groups")}
			"AppGroupApplications_RemoveFolder"							{$Results.Add("Remove Application Folder (Application Group)", "Application Groups")}
			"ApplicationGroup_AddApplication"							{$Results.Add("Add Application to Application Group", "Application Groups")}
			"ApplicationGroup_AddScope"									{$Results.Add("Add Application Group to Scope", "Application Groups")}
			"ApplicationGroup_AddToDesktopGroup"						{$Results.Add("Add Delivery Group to Application Group", "Application Groups")}
			"ApplicationGroup_ChangeTags"								{$Results.Add("Change Tags on Application Group", "Application Groups")}
			"ApplicationGroup_ChangeUserAssignment"						{$Results.Add("Edit User Assignment on Application Group", "Application Groups")}
			"ApplicationGroup_Create"									{$Results.Add("Create Application Group", "Application Groups")}
			"ApplicationGroup_Delete"									{$Results.Add("Delete Application Group", "Application Groups")}
			"ApplicationGroup_EditProperties"							{$Results.Add("Edit Application Group Properties", "Application Groups")}
			"ApplicationGroup_Read"										{$Results.Add("View Application Groups", "Application Groups")}
			"ApplicationGroup_RemoveApplication"						{$Results.Add("Remove Application from Application Group", "Application Groups")}
			"ApplicationGroup_RemoveFromDesktopGroup"					{$Results.Add("Remove Delivery Group from Application Group", "Application Groups")}
			"ApplicationGroup_RemoveScope"								{$Results.Add("Remove Application Group from Scope", "Application Groups")}
			
			"AppLib_AddPackage"											{$Results.Add("Add App-V Application Libraries and Packages", "App-V")}
			"AppLib_IsolationGroup_Create"								{$Results.Add("Create App-V Isolation Group", "App-V")}
			"AppLib_IsolationGroup_Remove"								{$Results.Add("Remove App-V Isolation Groups", "App-V")}
			"AppLib_Read"												{$Results.Add("Read App-V Application Libraries and Packages", "App-V")}
			"AppLib_RemovePackage"										{$Results.Add("Remove App-V Application Libraries and Packages", "App-V")}
			"AppV_AddServer"											{$Results.Add("Add App-V publishing server", "App-V")}
			"AppV_DeleteServer"											{$Results.Add("Delete App-V publishing server", "App-V")}
			"AppV_Read"													{$Results.Add("Read App-V servers", "App-V")}
			
			"Controller_EditProperties"									{$Results.Add("Edit Controller", "Controllers")}
			"Controllers_Remove"										{$Results.Add("Remove Delivery Controller", "Controllers")}

			"Applications_AttachClientHostedApplicationToDesktopGroup"	{$Results.Add("Attach Local Access Application to Delivery Group", "Delivery Groups")}
			"Applications_ChangeMaintenanceMode"						{$Results.Add("Enable/disable maintenance mode of an Application", "Delivery Groups")}
			"Applications_ChangeTags"									{$Results.Add("Edit Application tags", "Delivery Groups")}
			"Applications_ChangeUserAssignment"							{$Results.Add("Change users assigned to an application", "Delivery Groups")}
			"Applications_Create"										{$Results.Add("Create Application", "Delivery Groups")}
			"Applications_CreateFolder"									{$Results.Add("Create Application Folder", "Delivery Groups")}
			"Applications_Delete"										{$Results.Add("Delete Application", "Delivery Groups")}
			"Applications_DetachClientHostedApplicationToDesktopGroup"	{$Results.Add("Detach Local Access Application from Delivery Group", "Delivery Groups")}
			"Applications_EditFolder"									{$Results.Add("Edit Application Folder", "Delivery Groups")}
			"Applications_EditProperties"								{$Results.Add("Edit Application Properties", "Delivery Groups")}
			"Applications_MoveFolder"									{$Results.Add("Move Application Folder", "Delivery Groups")}
			"Applications_Read"											{$Results.Add("View Applications", "Delivery Groups")}
			"Applications_RemoveFolder"									{$Results.Add("Remove Application Folder", "Delivery Groups")}
			"DesktopGroup_AddApplication"								{$Results.Add("Add Application to Delivery Group", "Delivery Groups")}
			"DesktopGroup_AddApplicationGroup"							{$Results.Add("Add Application Group to Delivery Group", "Delivery Groups")}
			"DesktopGroup_AddMachines"									{$Results.Add("Add Machines to Delivery Group", "Delivery Groups")}
			"DesktopGroup_AddScope"										{$Results.Add("Add Delivery Group to Scope", "Delivery Groups")}
			"DesktopGroup_AddWebhook"									{$Results.Add("Add Webhooks to Delivery Group", "Delivery Groups")}
			"DesktopGroup_ChangeMachineMaintenanceMode"					{$Results.Add("Enable/disable maintenance mode of a machine via Delivery Group membership", "Delivery Groups")}
			"DesktopGroup_ChangeMaintenanceMode"						{$Results.Add("Enable/disable maintenance mode of a Delivery Group", "Delivery Groups")}
			"DesktopGroup_ChangeTags"									{$Results.Add("Edit Delivery Group tags", "Delivery Groups")}
			"DesktopGroup_ChangeUserAssignment"							{$Results.Add("Change users assigned to a desktop", "Delivery Groups")}
			"DesktopGroup_Create"										{$Results.Add("Create Delivery Group", "Delivery Groups")}
			"DesktopGroup_Delete"										{$Results.Add("Delete Delivery Group", "Delivery Groups")}
			"DesktopGroup_EditProperties"								{$Results.Add("Edit Delivery Group Properties", "Delivery Groups")}
			"DesktopGroup_Machine_ChangeTags"							{$Results.Add("Edit Delivery Group machine tags", "Delivery Groups")}
			"DesktopGroup_PowerOperations_RDS"							{$Results.Add("Perform power operations on Windows Server machines via Delivery Group membership", "Delivery Groups")}
			"DesktopGroup_PowerOperations_VDI"							{$Results.Add("Perform power operations on Windows Desktop machines via Delivery Group membership", "Delivery Groups")}
			"DesktopGroup_Read"											{$Results.Add("View Delivery Groups", "Delivery Groups")}
			"DesktopGroup_RemoveApplication"							{$Results.Add("Remove Application from Delivery Group", "Delivery Groups")}
			"DesktopGroup_RemoveApplicationGroup"						{$Results.Add("Remove Application Group from Delivery Group", "Delivery Groups")}
			"DesktopGroup_RemoveDesktop"								{$Results.Add("Remove Desktop from Delivery Group", "Delivery Groups")}
			"DesktopGroup_RemoveScope"									{$Results.Add("Remove Delivery Group from Scope", "Delivery Groups")}
			"DesktopGroup_SessionManagement"							{$Results.Add("Perform session management on machines via Delivery Group membership", "Delivery Groups")}
			"Machine_ChangeTagsBase"									{$Results.Add("Edit machine tags", "Delivery Groups")}
			
			"Director_AlertPolicy_Edit"									{$Results.Add("Create\Edit\Delete Alert Policies", "Director")}
			"Director_AlertPolicy_Read"									{$Results.Add("View Alert Policies", "Director")}
			"Director_Alerts_Read"										{$Results.Add("View Alerts", "Director")}
			"Director_ApplicationDashboard"								{$Results.Add("View Applications page", "Director")}
			"Director_ClientDetails_Read"								{$Results.Add("View Client Details page", "Director")}
			"Director_ClientHelpDesk_Read"								{$Results.Add("View Client Activity Manager page", "Director")}
			"Director_CloudAnalyticsConfiguration"						{$Results.Add("Create\Edit\Remove Cloud Analytics Configurations", "Director")}
			"Director_Configuration"									{$Results.Add("View Configurations page", "Director")}
			"Director_Dashboard_Read"									{$Results.Add("View Dashboard page", "Director")}
			"Director_DesktopHardwareInformation_Edit"					{$Results.Add("Edit Machine Hardware related Broker machine command properties", "Director")}
			"Director_DiskMetrics_Edit"									{$Results.Add("Edit Disk metrics related Broker machine command properties", "Director")}
			"Director_DismissAlerts"									{$Results.Add("Dismiss Alerts", "Director")}
			"Director_EmailserverConfiguration_Edit"					{$Results.Add("Create\Edit\Remove Alert Email Server Configuration", "Director")}
			"Director_GPOData_Edit"										{$Results.Add("Edit GPO Data related Broker machine command properties", "Director")}
			"Director_GpuMetrics_Edit"									{$Results.Add("Edit Gpu metrics related Broker machine command properties", "Director")}
			"Director_HDXInformation_Edit"								{$Results.Add("Edit HDX related Broker machine command properties", "Director")}
			"Director_HDXProtocol_Edit"									{$Results.Add("Edit HDX Protocol related Broker machine command properties", "Director")}
			"Director_HelpDesk_Read"									{$Results.Add("View Activity Manager page", "Director")}
			"Director_KillApplication"									{$Results.Add("Perform Kill Application running on a machine", "Director")}
			"Director_KillApplication_Edit"								{$Results.Add("Edit Kill Application related Broker machine command properties", "Director")}
			"Director_KillProcess"										{$Results.Add("Perform Kill Process running on a machine", "Director")}
			"Director_KillProcess_Edit"									{$Results.Add("Edit Kill Process related Broker machine command properties", "Director")}
			"Director_LatencyInformation_Edit"							{$Results.Add("Edit Latency related Broker machine command properties", "Director")}
			"Director_MachineDetails_Read"								{$Results.Add("View Machine Details page", "Director")}
			"Director_MachineMetricValues_Edit"							{$Results.Add("Edit Machine metric related Broker machine command properties", "Director")}
			"Director_PersonalizationInformation_Edit"					{$Results.Add("Edit Personalization related Broker machine command properties", "Director")}
			"Director_PoliciesInformation_Edit"							{$Results.Add("Edit Policies related Broker machine command properties", "Director")}
			"Director_ProbeConfigurationActions"						{$Results.Add("Create\Edit\Remove Probe Configurations", "Director")}
			"Director_ProfileLoadData_Edit"								{$Results.Add("Edit Profile Load Data related Broker machine command properties", "Director")}
			"Director_ResetVDisk"										{$Results.Add("Perform Reset VDisk operation", "Director")}
			"Director_ResetVDisk_Edit"									{$Results.Add("Edit Reset VDisk related Broker machine command properties", "Director")}
			"Director_RoundTripInformation_Edit"						{$Results.Add("Edit Roundtrip Time related Broker machine command properties", "Director")}
			"Director_SCOM_Read"										{$Results.Add("View SCOM Notifications", "Director")}
			"Director_ShadowSession"									{$Results.Add("Perform Remote Assistance on a machine", "Director")}
			"Director_ShadowSession_Edit"								{$Results.Add("Edit Remote Assistance related Broker machine command properties", "Director")}
			"Director_SliceAndDice_Read"								{$Results.Add("View Filters page", "Director")}
			"Director_StartupMetrics_Edit"								{$Results.Add("Edit Startup related Broker machine command properties", "Director")}
			"Director_TaskManagerInformation_Edit"						{$Results.Add("Edit Task Manager related Broker machine command properties", "Director")}
			"Director_Trends_Read"										{$Results.Add("View Trends page", "Director")}
			"Director_UserDetails_Read"									{$Results.Add("View User Details page", "Director")}
			"Director_WindowsSessionId_Edit"							{$Results.Add("Edit Windows Sessionid related Broker machine command properties", "Director")}
			"UPM_Reset_Profiles"										{$Results.Add("Reset user profiles", "Director")}
			"UPM_Reset_Profiles_Edit"									{$Results.Add("Edit Reset User Profiles related Broker machine command properties", "Director")}
			
			"Hosts_AddScope"											{$Results.Add("Add Host Connection to Scope", "Hosts")}
			"Hosts_AddStorage"											{$Results.Add("Add storage to Resources", "Hosts")}
			"Hosts_ChangeMaintenanceMode"								{$Results.Add("Enable/disable maintenance mode of a Host Connection", "Hosts")}
			"Hosts_Consume"												{$Results.Add("Use Host Connection or Resources to Create Catalog", "Hosts")}
			"Hosts_CreateHost"											{$Results.Add("Add Host Connection or Resources", "Hosts")}
			"Hosts_DeleteConnection"									{$Results.Add("Delete Host Connection", "Hosts")}
			"Hosts_DeleteHost"											{$Results.Add("Delete Resources", "Hosts")}
			"Hosts_EditConnectionProperties"							{$Results.Add("Edit Host Connection properties", "Hosts")}
			"Hosts_EditHostProperties"									{$Results.Add("Edit Resources", "Hosts")}
			"Hosts_Read"												{$Results.Add("View Host Connections and Resources", "Hosts")}
			"Hosts_RemoveScope"											{$Results.Add("Remove Host Connection from Scope", "Hosts")}

			"Licensing_ChangeLicenseServer"								{$Results.Add("Change licensing server", "Licensing")}
			"Licensing_EditLicensingProperties"							{$Results.Add("Edit product edition", "Licensing")}
			"Licensing_Read"											{$Results.Add("View Licensing", "Licensing")}

			"Logging_Delete"											{$Results.Add("Delete Configuration Logs", "Logging")}
			"Logging_EditPreferences"									{$Results.Add("Edit Logging Preferences", "Logging")}
			"Logging_Read"												{$Results.Add("View Configuration Logs", "Logging")}

			"Catalog_AddMachines"										{$Results.Add("Add Machines to Machine Catalog", "Machine Catalogs")}
			"Catalog_AddScope"											{$Results.Add("Add Machine Catalog to Scope", "Machine Catalogs")}
			"Catalog_AppDNAAnalyzeMachine"								{$Results.Add("Capture AppDNA OS snapshot", "Machine Catalogs")}
			"Catalog_CancelProvTask"									{$Results.Add("Cancel Provisioning Task", "Machine Catalogs")}
			"Catalog_ChangeMachineMaintenanceMode"						{$Results.Add("Enable/disable maintenance mode of a machine via Machine Catalog membership", "Machine Catalogs")}
			"Catalog_ChangeMaintenanceMode"								{$Results.Add("Enable/disable maintenance mode on Desktop via Machine Catalog membership", "Machine Catalogs")}
			"Catalog_ChangeTags"										{$Results.Add("Edit Catalog tags", "Machine Catalogs")}
			"Catalog_ChangeUserAssignment"								{$Results.Add("Change users assigned to a machine", "Machine Catalogs")}
			"Catalog_ConsumeMachines"									{$Results.Add("Allow machines to be consumed by a Delivery Group", "Machine Catalogs")}
			"Catalog_Create"											{$Results.Add("Create Machine Catalog", "Machine Catalogs")}
			"Catalog_Delete"											{$Results.Add("Delete Machine Catalog", "Machine Catalogs")}
			"Catalog_EditProperties"									{$Results.Add("Edit Machine Catalog Properties", "Machine Catalogs")}
			"Catalog_Manage_ChangeTags"									{$Results.Add("Edit Catalog machine tags", "Machine Catalogs")}
			"Catalog_ManageAccounts"									{$Results.Add("Manage Active Directory Accounts", "Machine Catalogs")}
			"Catalog_PowerOperations_RDS"								{$Results.Add("Perform power operations on Windows Server machines via Machine Catalog membership", "Machine Catalogs")}
			"Catalog_PowerOperations_VDI"								{$Results.Add("Perform power operations on Windows Desktop machines via Machine Catalog membership", "Machine Catalogs")}
			"Catalog_Read"												{$Results.Add("View Machine Catalogs", "Machine Catalogs")}
			"Catalog_RemoveMachine"										{$Results.Add("Remove Machines from Machine Catalog", "Machine Catalogs")}
			"Catalog_RemoveScope"										{$Results.Add("Remove Machine Catalog from Scope", "Machine Catalogs")}
			"Catalog_SessionManagement"									{$Results.Add("Perform session management on machines via Machine Catalog membership", "Machine Catalogs")}
			"Catalog_UpdateMasterImage"									{$Results.Add("Perform Machine update", "Machine Catalogs")}

			"Configuration_Read"										{$Results.Add("Read Site Configuration (Configuration_Read)", "Other permissions")}
			"Configuration_Write"										{$Results.Add("Update Site Configuration (Configuration_Write)", "Other permissions")}
			"EnvTest"													{$Results.Add("Run environment tests", "Other permissions")}
			"Global_Read"												{$Results.Add("Read Site Configuration (Global_Read)", "Other permissions")}
			"Global_Write"												{$Results.Add("Update Site Configuration (Global_Write)", "Other permissions")}
			"Orchestration_RestApi"										{$Results.Add("Manage Orchestration Service REST API", "Other permissions")}
			"PerformUpgrade"											{$Results.Add("Perform upgrade", "Other permissions")}
			"Tag_Create"												{$Results.Add("Create tags", "Other permissions")}
			"Tag_Delete"												{$Results.Add("Delete tags", "Other permissions")}
			"Tag_Edit"													{$Results.Add("Edit tags", "Other permissions")}
			"Tag_Read"													{$Results.Add("Read tags", "Other permissions")}
			"Trust_ServiceKeys"											{$Results.Add("Manage Trust Service Keys", "Other permissions")}

			"Policies_Manage"											{$Results.Add("Manage Policies", "Policies")}
			"Policies_Read"												{$Results.Add("View Policies", "Policies")}

			"Storefront_Create"											{$Results.Add("Create a new StoreFront definition", "StoreFronts")}
			"Storefront_Delete"											{$Results.Add("Delete a StoreFront definition", "StoreFronts")}
			"Storefront_Read"											{$Results.Add("Read StoreFront definitions", "StoreFronts")}
			"Storefront_Update"											{$Results.Add("Update a StoreFront definition", "StoreFronts")}

			"EdgeServer_Manage"											{$Results.Add("Manage Citrix Cloud Connector", "Zones")}
			"EdgeServer_Read"											{$Results.Add("View Citrix Cloud Connector", "Zones")}
			"Zone_Create"												{$Results.Add("Create Zone", "Zones")}
			"Zone_Delete"												{$Results.Add("Delete Zone", "Zones")}
			"Zone_EditProperties"										{$Results.Add("Edit Zone", "Zones")}
			"Zone_Read"													{$Results.Add("View Zones", "Zones")}
		}
	}

	$Results = $Results.GetEnumerator() | Sort-Object Value
	Return $Results
}

Function OutputRoleAdministrators 
{
	Param([object] $Roles)
	Write-Verbose "$(Get-Date -Format G): `t`tOutput Role Administrators"
	
	If($MSWord -or $PDF)
	{
		$Selection.InsertNewPage()
		
		ForEach($Role in $Roles)
		{
			[System.Collections.Hashtable[]] $WordTable = @()
			WriteWordLine 3 0 "Administrators for Role: $($Role.Name)"
			$Admins = Get-AdminAdministrator @XDParams1 | Where-Object {$_.Rights.RoleName -Contains $Role.Name}
			
			If($? -and $Null -ne $Admins)
			{
				ForEach($Admin in $Admins)
				{
					$xEnabled = "Disabled"
					If($Admin.Enabled)
					{
						$xEnabled = "Enabled"
					}

					$xScopeName = ""
					ForEach($Right in $Admin.Rights)
					{
						If($Right.RoleName -eq $Role.Name)
						{
							$xScopeName = $Right.ScopeName
						}
					}
					
					$WordTable += @{ 
					AdminName = $Admin.Name; 
					Scope = $xScopeName; 
					Type = $xEnabled;
					}
				}
				$Table = AddWordTable -Hashtable $WordTable `
				-Columns AdminName, Scope, Type `
				-Headers "Administrator Name", "Scope", "Status" `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 220;
				$Table.Columns.Item(2).Width = 225;
				$Table.Columns.Item(3).Width = 55;

				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
				WriteWordLine 0 0 ""
			}
			ElseIf($? -and $Null -eq $Admins)
			{
				WriteWordLine 0 0 "No administrators defined"
				WriteWordLine 0 0 ""
			}
			Else
			{
				WriteWordLine 0 0 "Unable to retrieve administrators"
				WriteWordLine 0 0 ""
			}
		}
	}
	ElseIf($Text)
	{
		ForEach($Role in $Roles)
		{
			Line 1 "Administrators for Role: $($Role.Name)"
			$Admins = Get-AdminAdministrator @XDParams1 | Where-Object {$_.Rights.RoleName -Contains $Role.Name}
			
			If($? -and $Null -ne $Admins)
			{
				ForEach($Admin in $Admins)
				{
					$xEnabled = "Disabled"
					If($Admin.Enabled)
					{
						$xEnabled = "Enabled"
					}

					$xScopeName = ""
					ForEach($Right in $Admin.Rights)
					{
						If($Right.RoleName -eq $Role.Name)
						{
							$xScopeName = $Right.ScopeName
						}
					}
					
					Line 2 "Administrator Name`t: " $Admin.Name
					Line 2 "Scope`t`t`t: " $xScopeName
					Line 2 "Status`t`t`t: " $xEnabled
					Line 0 ""
				}
			}
			ElseIf($? -and $Null -eq $Admins)
			{
				Line 2 "No administrators defined"
				Line 0 ""
			}
			Else
			{
				Line 2 "Unable to retrieve administrators"
				Line 0 ""
			}
		}
	}
	ElseIf($HTML)
	{
		ForEach($Role in $Roles)
		{
			$rowdata = @()
			WriteHTMLLine 3 0 "Administrators for Role: $($Role.Name)"
			$Admins = Get-AdminAdministrator @XDParams1 | Where-Object {$_.Rights.RoleName -Contains $Role.Name}
			
			If($? -and $Null -ne $Admins)
			{
				ForEach($Admin in $Admins)
				{
					$xEnabled = "Disabled"
					If($Admin.Enabled)
					{
						$xEnabled = "Enabled"
					}

					$xScopeName = ""
					ForEach($Right in $Admin.Rights)
					{
						If($Right.RoleName -eq $Role.Name)
						{
							$xScopeName = $Right.ScopeName
						}
					}
					
					$rowdata += @(,(
					$Admin.Name,$htmlwhite,
					$xScopeName,$htmlwhite,
					$xEnabled,$htmlwhite))
				}
				$columnHeaders = @(
				'Administrator Name',($global:htmlsb),
				'Scope',($global:htmlsb),
				'Status',($global:htmlsb))

				$msg = ""
				$columnWidths = @("220","225","55")
				FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "500"
			}
			ElseIf($? -and $Null -eq $Admins)
			{
				WriteHTMLLine 0 0 "No administrators defined"
			}
			Else
			{
				WriteHTMLLine 0 0 "Unable to retrieve administrators"
			}
		}
	}
}
#endregion

#region Controllers functions
Function ProcessControllers
{
	Write-Verbose "$(Get-Date -Format G): Processing Controllers"
	Write-Verbose "$(Get-Date -Format G): `tRetrieving Controller data"
	
	#V2.22 change variable from $Controllers to $DDCs so a new parameter can be added to the script
	$DDCs = Get-BrokerController @XDParams2 -SortBy DNSName

	If($? -and ($Null -ne $DDCs))
	{
		OutputControllers $DDCs
	}
	ElseIf($? -and ($Null -eq $DDCs))
	{
		$txt = "There are no Controllers"
		OutputWarning $txt
	}
	Else
	{
		$txt = "Unable to retrieve Controllers"
		OutputWarning $txt
	}
	Write-Verbose "$(Get-Date -Format G): "
}

Function OutputControllers
{
	Param([object]$DDCs)
	
	Write-Verbose "$(Get-Date -Format G): `tOutput Controllers"
	
	#added in V2.22
	[int]$DDCCount = 0
	
	If($DDCs -is [array])
	{
		$DDCCount = $DDCs.Count
	}
	Else
	{
		$DDCCount = 1
	}
	
	If($MSWord -or $PDF)
	{
		$Selection.InsertNewPage()
		WriteWordLine 1 0 "Controllers"
	}
	ElseIf($Text)
	{
		Line 0 "Controllers"
		Line 0 ""
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 1 0 "Controllers"
	}

	#added in V2.22
	If($Controllers)
	{
		$Script:MSHotfixes = New-Object System.Collections.ArrayList	
		$Script:CtxInstalledComponents = New-Object System.Collections.ArrayList	
		$Script:WinInstalledComponents = New-Object System.Collections.ArrayList	
	}
	
	ForEach($Controller in $DDCs)
	{
		Write-Verbose "$(Get-Date -Format G): `t`tOutput Controller $($Controller.DNSName)"
		$Script:TotalControllers++
		
		If($MSWord -or $PDF)
		{
			$ScriptInformation = New-Object System.Collections.ArrayList
			$ScriptInformation.Add(@{Data = "Name"; Value = $Controller.DNSName; }) > $Null
			$ScriptInformation.Add(@{Data = "Version"; Value = $Controller.ControllerVersion; }) > $Null
			$ScriptInformation.Add(@{Data = "Last updated"; Value = $Controller.LastActivityTime; }) > $Null
			$ScriptInformation.Add(@{Data = "Registered desktops"; Value = $Controller.DesktopsRegistered.ToString(); }) > $Null
			$ScriptInformation.Add(@{Data = "State"; Value = $Controller.State; }) > $Null #added in V2.22

			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 150;
			$Table.Columns.Item(2).Width = 250;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 "" #added V2.21
		}
		ElseIf($Text)
		{
			Line 1 "Name`t`t`t: " $Controller.DNSName
			Line 1 "Version`t`t`t: " $Controller.ControllerVersion
			Line 1 "Last updated`t`t: " $Controller.LastActivityTime
			Line 1 "Registered desktops`t: " $Controller.DesktopsRegistered.ToString()
			Line 1 "State`t`t`t: " $Controller.State #added in V2.22
			Line 0 ""
		}
		ElseIf($HTML)
		{
			$rowdata = @() #moved to here in V2.22
			$columnHeaders = @("Name",($global:htmlsb),$Controller.DNSName,$htmlwhite)
			$rowdata += @(,('Version',($global:htmlsb),$Controller.ControllerVersion,$htmlwhite))
			$rowdata += @(,('Last updated',($global:htmlsb),$Controller.LastActivityTime,$htmlwhite))
			$rowdata += @(,('Registered desktops',($global:htmlsb),$Controller.DesktopsRegistered.ToString(),$htmlwhite))
			$rowdata += @(,('State',($global:htmlsb),$Controller.State,$htmlwhite)) #added in V2.22
			$msg = ""
			$columnWidths = @("150","250")
			FormatHTMLTable $msg -rowarray $rowdata -columnArray $columnheaders -fixedWidth $columnWidths -tablewidth "400"
			WriteHTMLLine 0 0 "" #added V2.21
		}
		
		If($DDCCount -eq 1) #added in V2.22
		{
			If($MSWord -or $PDF)
			{
				WriteWordLine 0 0 "Warning: There is only one delivery controller in this Site" "" $Null 0 $False $True
			}
			ElseIf($Text)
			{
				Line 0 "Warning: There is only one delivery controller in this Site"
				Line 0 ""
			}
			ElseIf($HTML)
			{
				WriteHTMLLine 0 0 "Warning: There is only one delivery controller in this Site" "" $Null 2 $htmlbold
			}
		}

		If($Controllers)
		{
			#added V2.22 get installed Microsoft Hotfixes and Updates
			Write-Verbose "$(Get-Date -Format G): `t`t`tRetrieving Microsoft hotfixes and updates"
			[bool]$GotMSHotfixes = $True
			
			Try
			{
				$results = Get-HotFix -computername $Controller.DNSName | Select-Object CSName,Caption,Description,HotFixID,InstalledBy,InstalledOn
				$MSInstalledHotfixes = $results | Sort-Object HotFixID
				$results = $Null

				#V2.23 remove ooutput from here and use only in Appendix
				ForEach($Hotfix in $MSInstalledHotfixes)
				{
					$obj1 = [PSCustomObject] @{
						HotFixID    = $Hotfix.HotFixID						
						CSName      = $Hotfix.CSName						
						Caption     = $Hotfix.Caption						
						Description = $Hotfix.Description						
						InstalledBy = $Hotfix.InstalledBy						
						InstalledOn = $Hotfix.InstalledOn						
					}
					$null = $Script:MSHotfixes.Add($obj1)
				}
			}
			
			Catch
			{
				$GotMSHotfixes = $False
			}
			
			If($GotMSHotfixes -eq $False)
			{
				If($MSWord -or $PDF)
				{
					WriteWordLine 0 0 "No installed Microsoft hotfixes or updates were found"
				}
				ElseIf($Text)
				{
					Line 1 "No installed Microsoft hotfixes or updates were found"
				}
				ElseIf($HTML)
				{
					WriteHTMLLine 0 0 "No installed Microsoft hotfixes or updates were found"
				}
			}
			
			#added V2.22 get Citrix Installed Components
			Write-Verbose "$(Get-Date -Format G): `t`t`tRetrieving Citrix Installed Components"
			[bool]$GotCtxComponents = $True
			
			If($AdminAddress -eq "LocalHost")
			{
				$results = Get-ChildItem HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall|`
				ForEach-Object{Get-ItemProperty $_.pspath}|`
				Where-Object { $_.PSObject.Properties[ 'Publisher' ] -and $_.Publisher -like 'Citrix*'}|`
				Select-Object DisplayName, DisplayVersion
			}
			Else
			{
				#First see if DDC is online
				$testresults = Test-NetConnection -ComputerName $Controller.DNSName -InformationLevel Quiet -EA 0 3>$Null
				If($testresults)
				{
					#Second, see if the remote registy service runsning
					$serviceresults = Get-Service -ComputerName $Controller.DNSName -Name "RemoteRegistry" -EA 0
					If($? -and $Null -ne $serviceresults)
					{
						If($serviceresults.Status -eq "Running")
						{
							$results = Invoke-Command -ComputerName $Controller.DNSName -ScriptBlock `
							{Get-ChildItem HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall|`
							ForEach-Object{Get-ItemProperty $_.pspath}|`
							Where-Object { $_.PSObject.Properties[ 'Publisher' ] -and $_.Publisher -like 'Citrix*'}|`
							Select-Object DisplayName, DisplayVersion}
						}
					}
					Else
					{
						$results = $Null
						$GotCtxComponents = $False
					}
				}
				Else
				{
					$results = $Null
					$GotCtxComponents = $False
				}
			}
			
			If(!$? -or $Null -eq $results)
			{
				$GotCtxComponents = $False
			}
			Else
			{
				$CtxComponents = $results
				$results = $Null
				
				If($AdminAddress -eq "LocalHost")
				{
					$results = Get-ChildItem HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall|`
					ForEach-Object{Get-ItemProperty $_.pspath}|`
					Where-Object { $_.PSObject.Properties[ 'Publisher' ] -and $_.Publisher -like 'Citrix*'}|`
					Select-Object DisplayName, DisplayVersion
				}
				Else
				{
					$results = Invoke-Command -ComputerName $Controller.DNSName -ScriptBlock `
					{Get-ChildItem HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall|`
					ForEach-Object{Get-ItemProperty $_.pspath}|`
					Where-Object { $_.PSObject.Properties[ 'Publisher' ] -and $_.Publisher -like 'Citrix*'}|`
					Select-Object DisplayName, DisplayVersion}
				}
				If($?)
				{
					$CtxComponents += $results
				}
				
				$CtxComponents = $CtxComponents | Sort-Object DisplayName
			}
			
			If($GotCtxComponents)
			{
				ForEach($Component in $CtxComponents)
				{
					$obj1 = [PSCustomObject] @{
						DisplayName    = $Component.DisplayName						
						DisplayVersion = $Component.DisplayVersion						
						DDCName        = $Controller.DNSName						
					}
					$null = $Script:CtxInstalledComponents.Add($obj1)
				}
			}
			Else
			{
				If($MSWord -or $PDF)
				{
					WriteWordLine 0 0 "No Citrix Installed Components were found"
				}
				ElseIf($Text)
				{
					Line 1 "No Citrix Installed Components were found"
				}
				ElseIf($HTML)
				{
					WriteHTMLLine 0 0 "No Citrix Installed Components were found"
				}
			}
			
			#added V2.22 get Windows installed Roles and Features
			Write-Verbose "$(Get-Date -Format G): `t`t`tRetrieving Windows installed Roles and Features"
			
			$results = Get-WindowsFeature -ComputerName $Controller.DNSName -EA 0 4> $Null
			
			If(!$?)
			{
				If($MSWord -or $PDF)
				{
					WriteWordLine 0 0 "No Windows installed Roles and Features were found"
				}
				ElseIf($Text)
				{
					Line 1 "No Windows installed Roles and Features were found"
				}
				ElseIf($HTML)
				{
					WriteHTMLLine 0 0 "No Windows installed Roles and Features were found"
				}
			}
			Else
			{
			
				$WinComponents = $results | Where-Object Installed | Select-Object DisplayName,Name,FeatureType | Sort-Object DisplayName 

				ForEach($Component in $WinComponents)
				{
					$obj1 = [PSCustomObject] @{
						DisplayName = $Component.DisplayName						
						Name        = $Component.Name						
						DDCName     = $Controller.DNSName						
						FeatureType = $Component.FeatureType						
					}
					$null = $Script:WinInstalledComponents.Add($obj1)
				}
			}
		}
		
		If($BrokerRegistryKeys)
		{
			GetControllerRegistryKeys $Controller.DNSName
			#V2.23 remove the output from here and use only in Appendix
			#Fix V2.20.1
			$Script:AllControllerRegistryItems += $Script:ControllerRegistryItems
			$Script:ControllerRegistryItems = New-Object System.Collections.ArrayList
		}
	}

	If($Hardware)
	{
		ForEach($Controller in $DDCs)
		{
			If($MSWord -or $PDF)
			{
				$Script:Selection.InsertNewPage()
			}
			GetComputerWMIInfo $Controller.DNSName
		}
	}
}

Function GetControllerRegistryKeys
{
	Param([string]$ComputerName)
	
	#2.44 put the keys in the order supplied by Citrix
	
	#look for the following registry keys and values on Controllers
		
	#Registry Key                                                      Registry Value                 
	#=================================================================================================
	
	Write-Verbose "$(Get-Date -Format G): `t`t`tGather Registry Key data"
	#Get-RegKeyToObject "HKLM:\Software\Policies\" "" $ComputerName
	
	#ConnectionLeasingSettings
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\ConnectionLeasing" "DeletionCheckItemLimitPerCycle" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\ConnectionLeasing" "EnumerationLeaseKeyMask" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\ConnectionLeasing" "LaunchRefCacheExpiryMaxMins" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\ConnectionLeasing" "LeaseExpirationTimeInMins" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\ConnectionLeasing" "LeaseMarkedDeletedTimeInMins" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\ConnectionLeasing" "MaxItemsPerSyncCycle" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\ConnectionLeasing" "MaxRetryDuringLocalCacheDeletion" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\ConnectionLeasing" "MinLeaseLifetimeFractionBeforeRefresh" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\ConnectionLeasing" "PendingFailureMaxSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\ConnectionLeasing" "SyncCleanupDelaySecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\ConnectionLeasing" "SyncIntervalSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\ConnectionLeasing" "SyncLocation" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\ConnectionLeasing" "SyncStartDelayMins" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\ConnectionLeasing" "UploadQueueIdleMaxSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\ConnectionLeasing" "UploadQueueMaxItems" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\ConnectionLeasing" "DeletionCheckItemLimitPerCycle" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\ConnectionLeasing" "EnumerationLeaseKeyMask" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\ConnectionLeasing" "LaunchRefCacheExpiryMaxMins" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\ConnectionLeasing" "LeaseExpirationTimeInMins" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\ConnectionLeasing" "LeaseMarkedDeletedTimeInMins" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\ConnectionLeasing" "MaxItemsPerSyncCycle" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\ConnectionLeasing" "MaxRetryDuringLocalCacheDeletion" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\ConnectionLeasing" "MinLeaseLifetimeFractionBeforeRefresh" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\ConnectionLeasing" "PendingFailureMaxSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\ConnectionLeasing" "SyncCleanupDelaySecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\ConnectionLeasing" "SyncIntervalSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\ConnectionLeasing" "SyncLocation" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\ConnectionLeasing" "SyncStartDelayMins" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\ConnectionLeasing" "UploadQueueIdleMaxSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\ConnectionLeasing" "UploadQueueMaxItems" $ComputerName
	
	#ConnectionLeasingState
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\ConnectionLeasing" "ApplicationChangesCurrentEnumLastUidRetrieved" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\ConnectionLeasing" "ApplicationChangesCurrentEnumStartTime" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\ConnectionLeasing" "ApplicationChangesLastCheckTime" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\ConnectionLeasing" "ApplicationDeletionLastCheckTime" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\ConnectionLeasing" "DesktopDeletionLastCheckTime" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\ConnectionLeasing" "DnsResolutionEnabled" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\ConnectionLeasing" "Enabled" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\ConnectionLeasing" "IconChangesCurrentEnumLastUidRetrieved" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\ConnectionLeasing" "IconChangesCurrentEnumStartTime" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\ConnectionLeasing" "IconChangesLastCheckTime" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\ConnectionLeasing" "IconDeletionLastCheckTime" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\ConnectionLeasing" "LeaseChangesCurrentEnumLastUidRetrieved" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\ConnectionLeasing" "LeaseChangesCurrentEnumStartTime" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\ConnectionLeasing" "LeaseChangesLastCheckTime" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\ConnectionLeasing" "LeaseDeletionLastCheckTime" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\ConnectionLeasing" "PrivateDesktopChangesCurrentEnumLastUidRetrieved" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\ConnectionLeasing" "PrivateDesktopChangesCurrentEnumStartTime" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\ConnectionLeasing" "PrivateDesktopChangesLastCheckTime" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\ConnectionLeasing" "SharedDesktopChangesCurrentEnumLastUidRetrieved" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\ConnectionLeasing" "SharedDesktopChangesCurrentEnumStartTime" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\ConnectionLeasing" "SharedDesktopChangesLastCheckTime" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\ConnectionLeasing" "SiteGuid" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\ConnectionLeasing" "WorkerChangesCurrentEnumLastUidRetrieved" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\ConnectionLeasing" "WorkerChangesCurrentEnumStartTime" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\ConnectionLeasing" "WorkerChangesLastCheckTime" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\ConnectionLeasing" "WorkerDeletionLastCheckTime" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\ConnectionLeasing" "ZoneGuid" $ComputerName

	#ControllerSettings
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "ControllerStartupRetryPeriodLimitMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "ControllerStartupRetryPeriodStartMaxMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "MinThreadPoolThreads" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "ControllerStartupRetryPeriodLimitMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "ControllerStartupRetryPeriodStartMaxMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "MinThreadPoolThreads" $ComputerName
	
	#CoreSettings
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "AllowMultipleRemotePCAssignments" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "AppProtectionAuthorizationCheckPeriodMin" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "AutoHideNonContactableSessions" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "AutoTagRuleIntervalsTimeSecs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "BrokerStartupRetryPeriodLimitMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "BrokerStartupRetryPeriodStartMaxMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "DisableActiveSessionReconnect" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "DisablePerformanceCounters" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "DisconnectOperationTimeOutSecs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "DynamicSequenceStirIntervalMins" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "ExtraSpinUpTimeSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "FirstHeartbeatDistributionWidthSecs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "FreeSessionThresholdForLoadEvaluation" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "HeartbeatDistributionWidthSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "HeartbeatPeriodMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "LaunchDelayedRetryPeriodSec" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "LaunchLicenseCheckPeriodSec" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "LaunchRetryPeriodSec" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "LicensingCacheFileLocation" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "LogoffOperationTimeOutSecs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "LogonToleranceIsHardLimit" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "MachineSinBinStayTimeSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "MaxConcurrentRegistrationUpgrades" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "MaxDisconnectWaitTimeSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "MaxHeartbeatIntervalMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "MaxLogoffWaitTimeSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "MaxPendingSessions" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "MaxRegistrationCompletionTimeSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "MaxSessionEstablishmentTimeSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "MaxTimeForPrepareSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "MaxTotalConcurrentMachineCommands" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "MaxUnconfiguredMachineAgeMinutes" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "MaxWorkers" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "MinHeartbeatPeriodMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "MinimumAcceptableVdaMajorVersion" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "MinRegistrationRecountIntervalSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "MinVdaStatusUpdatePeriodMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "NonContactableSessionGracePeriodSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "ProtectedSessionReconnectSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "RoTPublicKeysUpdateMaxDelayHours" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "SettleTimeForVdaStatusUpdateMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "SiteDynamicDataRefreshMaxShutdownMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "SiteDynamicDataRefreshPeriodMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "SupportMultipleForest" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "TestVdaCommunicationsTimeoutSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "UpdateLoadIndexThreshold" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "UseIPAddressFromWcf" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "UseLegacyLaunchZoneLogic" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "UserDrivenResetDebounceTimeSecs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "UserDrivenResetTimeoutMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "UserDrivenShutDownTimeoutMs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "UserNotify2SigningKeyLifetimeHours" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "WIRetryIntervalDuringRegistrationStateChangeSec" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "WIRetryIntervalDuringSessionStateChangeSec" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "WorkerSettingsAssessmentMinutes" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "AllowMultipleRemotePCAssignments" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "AppProtectionAuthorizationCheckPeriodMin" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "AutoHideNonContactableSessions" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "AutoTagRuleIntervalsTimeSecs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "BrokerStartupRetryPeriodLimitMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "BrokerStartupRetryPeriodStartMaxMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "DisableActiveSessionReconnect" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "DisablePerformanceCounters" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "DisconnectOperationTimeOutSecs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "DynamicSequenceStirIntervalMins" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "ExtraSpinUpTimeSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "FirstHeartbeatDistributionWidthSecs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "FreeSessionThresholdForLoadEvaluation" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "HeartbeatDistributionWidthSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "HeartbeatPeriodMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "LaunchDelayedRetryPeriodSec" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "LaunchLicenseCheckPeriodSec" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "LaunchRetryPeriodSec" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "LicensingCacheFileLocation" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "LogoffOperationTimeOutSecs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "LogonToleranceIsHardLimit" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "MachineSinBinStayTimeSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "MaxConcurrentRegistrationUpgrades" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "MaxDisconnectWaitTimeSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "MaxHeartbeatIntervalMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "MaxLogoffWaitTimeSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "MaxPendingSessions" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "MaxRegistrationCompletionTimeSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "MaxSessionEstablishmentTimeSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "MaxTimeForPrepareSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "MaxTotalConcurrentMachineCommands" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "MaxUnconfiguredMachineAgeMinutes" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "MaxWorkers" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "MinHeartbeatPeriodMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "MinimumAcceptableVdaMajorVersion" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "MinRegistrationRecountIntervalSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "MinVdaStatusUpdatePeriodMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "NonContactableSessionGracePeriodSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "ProtectedSessionReconnectSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "RoTPublicKeysUpdateMaxDelayHours" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "SettleTimeForVdaStatusUpdateMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "SiteDynamicDataRefreshMaxShutdownMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "SiteDynamicDataRefreshPeriodMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "SupportMultipleForest" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "TestVdaCommunicationsTimeoutSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "UpdateLoadIndexThreshold" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "UseIPAddressFromWcf" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "UseLegacyLaunchZoneLogic" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "UserDrivenResetDebounceTimeSecs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "UserDrivenResetTimeoutMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "UserDrivenShutDownTimeoutMs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "UserNotify2SigningKeyLifetimeHours" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "WIRetryIntervalDuringRegistrationStateChangeSec" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "WIRetryIntervalDuringSessionStateChangeSec" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "WorkerSettingsAssessmentMinutes" $ComputerName

	#DBConnectionSettings
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\DataStore\Connections\Controller" "ConnectionString" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\DataStore\Connections\Controller" "ConnectivityRetryDelaySecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\DataStore\Connections\Controller" "ForceDbConnectionFailure" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\DataStore\Connections\Controller" "HaConnectionString" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\DataStore\Connections\Controller" "MaxConnectivityLossSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\DataStore\Connections\Controller" "MaxTxRetries" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\DataStore\Connections\Controller" "MaxTxRetryIntervalMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\DataStore\Connections\Controller" "MinTxRetryIntervalMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\DataStore\Connections\Controller" "ProviderName" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\DataStore\Connections\Controller" "ReaperDeferralPeriodSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\DataStore\Connections\Controller" "SdkSqlQueryTimeoutSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\DataStore\Connections\Controller" "ConnectionString" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\DataStore\Connections\Controller" "ConnectivityRetryDelaySecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\DataStore\Connections\Controller" "ForceDbConnectionFailure" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\DataStore\Connections\Controller" "HaConnectionString" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\DataStore\Connections\Controller" "MaxConnectivityLossSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\DataStore\Connections\Controller" "MaxTxRetries" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\DataStore\Connections\Controller" "MaxTxRetryIntervalMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\DataStore\Connections\Controller" "MinTxRetryIntervalMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\DataStore\Connections\Controller" "ProviderName" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\DataStore\Connections\Controller" "ReaperDeferralPeriodSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\DataStore\Connections\Controller" "SdkSqlQueryTimeoutSecs" $ComputerName
	
	#DBConnectionState
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\DatabaseConnection" "State" $ComputerName
	
	#HostingManagementSettings
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "AutoscalePowerActionQueuingPeriodSeconds" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "BulkPowerActionBusyBufferSecs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "BulkPowerCheckingCoolOffActivePowerActionsSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "BulkPowerCheckingCoolOffSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "CompletedActionRetentionPeriodSec" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "ComplexPowerActionTimeoutSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "HclConnectionStateCachePeriodSecs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "HostingStartupRetryPeriodLimitMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "HostingStartupRetryPeriodStartMaxMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "HypervisorConnectionMaxPollFailures" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "HypervisorConnectionPollMaxPeriodSecs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "HypervisorConnectionPollPeriodSec" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "HypervisorPollForAlertsIntervalSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "LegacyPeakTransitionDisconnectedbehavior" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "MachineRecreationSinBinMinutes" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "MachineStartSinBinSeconds" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "MaxFailedRegistrationsAllowed" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "MaxNotificationThreads" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "MaxRegistrationDelayMin" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "MaxTimeBeforeStuckOnBootFaultSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "MaxTimeBeforeUnregisteredFaultSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "ParallelDesktopGroupScalingMaxThreads" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "SimplePowerActionTimeoutSecs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "SimplePowerActionTimeoutSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "StarvationBoostPeriodSec" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "AutoscalePowerActionQueuingPeriodSeconds" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "BulkPowerActionBusyBufferSecs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "BulkPowerCheckingCoolOffActivePowerActionsSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "BulkPowerCheckingCoolOffSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "CompletedActionRetentionPeriodSec" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "ComplexPowerActionTimeoutSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "HclConnectionStateCachePeriodSecs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "HostingStartupRetryPeriodLimitMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "HostingStartupRetryPeriodStartMaxMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "HypervisorConnectionMaxPollFailures" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "HypervisorConnectionPollMaxPeriodSecs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "HypervisorConnectionPollPeriodSec" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "HypervisorPollForAlertsIntervalSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "LegacyPeakTransitionDisconnectedbehavior" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "MachineRecreationSinBinMinutes" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "MachineStartSinBinSeconds" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "MaxFailedRegistrationsAllowed" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "MaxNotificationThreads" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "MaxRegistrationDelayMin" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "MaxTimeBeforeStuckOnBootFaultSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "MaxTimeBeforeUnregisteredFaultSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "ParallelDesktopGroupScalingMaxThreads" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "ParallelPowerStateReadMaxThreads" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "SimplePowerActionTimeoutSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "StarvationBoostPeriodSec" $ComputerName
	
	#ISCMSettings
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "InterServiceConfigRefreshPeriodMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "MaxMsInterServiceConnectionRetryPeriod" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "InterServiceConfigRefreshPeriodMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "MaxMsInterServiceConnectionRetryPeriod" $ComputerName

	#IdleSessionsSettings
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\IdleSessions" "AutoSessionDisconnectGracePeriodSecs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\IdleSessions" "MaxIdleSessionToTerminatePercent" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\IdleSessions" "MaxRetriesPerSession" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\IdleSessions" "MaxSessionOperationWaitTimeSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\IdleSessions" "SinBinDurationSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\IdleSessions" "AutoSessionDisconnectGracePeriodSecs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\IdleSessions" "MaxIdleSessionToTerminatePercent" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\IdleSessions" "MaxRetriesPerSession" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\IdleSessions" "MaxSessionOperationWaitTimeSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\IdleSessions" "SinBinDurationSecs" $ComputerName
	
	#LhcSettings
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\LHC" "BackgroundTaskIntervalMS" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\LHC" "ConfigSyncIntervalSeconds" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\LHC" "ElectionAbandonTimeoutMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\LHC" "ElectionHeartbeatMS" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\LHC" "ElectionMeanTimeBetweenMS" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\LHC" "ElectionTimeBeforeTakingOverMS" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\LHC" "ElectionTimeBetweenStdev" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\LHC" "ElectionWcfSendTimeoutMS" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\LHC" "ExportConfigurationChunkSize" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\LHC" "HypervisorConnectionSyncIntervalSeconds" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\LHC" "InitialOutageModeDetectionPeriod" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\LHC" "MaximumOutageModeDetectionPeriod" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\LHC" "MaxLocalDBMemorySizeMB" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\LHC" "MinimalOutageModeRecoveryPeriod" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\LHC" "MissedMessagesLimitBeforeBecomingLeader" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\LHC" "OutageModeDetectionResetPeriod" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\LHC" "OutageModeForced" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\LHC" "P2pElectionPortNumber" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\LHC" "StaRecentActivityTimespanMinutes" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\LHC" "StoreFrontRecentActivityTimespanMinutes" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\LHC" "TimeToWaitForAllPeerOutageStateInfoSeconds" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\LHC" "UnelectedUnregisterBatchSize" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\LHC" "UnelectedUnregisterPauseMS" $ComputerName
	
	#LhcState
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\LHC" "EarliestOutageModeEndTime" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\LHC" "Enabled" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\LHC" "IsElected" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\LHC" "IsOnPremStoreFrontPresent" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\LHC" "IsStaRequestReceived" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\LHC" "LastOutageModeEndTime" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\LHC" "LastOutageModeEnteredTime" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\LHC" "LeaderConnectorId" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\LHC" "LeaderFqdn" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\LHC" "OutageModeEntered" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\LHC" "OutageModeThresholdReached" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\LHC" "ResourceLocationId" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\LHC" "ResourceLocationName" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\LHC" "ZoneUid" $ComputerName #Added in 2.44

	#LoggingSettings
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\Logging" "ConnectionLogLifetimeHours" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\Logging" "HypervisorAlertLifetimeHours" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\Logging" "HypervisorSummaryReportIntervalSecs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\Logging" "LicenseConcurrencySampleIntervalSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\Logging" "LicenseUsersDataRetentionPeriodHours" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\Logging" "SlowDBAccessLogThresholdMs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\Logging" "SlowSdkDBAccessLogThresholdMs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\Logging" "TraceWcfBindings" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\Logging" "ConnectionLogLifetimeHours" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\Logging" "HypervisorAlertLifetimeHours" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\Logging" "HypervisorSummaryReportIntervalSecs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\Logging" "LicenseConcurrencySampleIntervalSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\Logging" "LicenseUsersDataRetentionPeriodHours" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\Logging" "SlowDBAccessLogThresholdMs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\Logging" "SlowSdkDBAccessLogThresholdMs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\Logging" "TraceWcfBindings" $ComputerName #Added in 2.44

	#MachineCommandQueuesSettings
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\MachineCommandQueues" "MachineCommandQueueLifetimeHours" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\MachineCommandQueues" "VdaCommandBufferExpiryTime" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\MachineCommandQueues" "VdaCommandBufferSizeLimitKB" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\MachineCommandQueues" "MachineCommandQueueLifetimeHours" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\MachineCommandQueues" "VdaCommandBufferExpiryTime" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\MachineCommandQueues" "VdaCommandBufferSizeLimitKB" $ComputerName #Added in 2.44
	
	#NameCacheSettings
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\NameCache" "DisableAutomaticDomainTrustSearch" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\NameCache" "DisableDomainCaching" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\NameCache" "DomainTrustMappingMaxThreads" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\NameCache" "DomainTrustMappingRefreshPeriodMins" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\NameCache" "MachineNameLookupTimeoutMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\NameCache" "NameRefreshExponentialBackoffMaximumMins" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\NameCache" "NameRefreshMaximumPeriodSecs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\NameCache" "NameRefreshPeriodAfterErrorMins" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\NameCache" "NameRefreshPeriodMins" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\NameCache" "OnDemandLookupCoalescePeriodMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\NameCache" "RefreshDBBatchSize" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\NameCache" "UserNameLookupTimeoutMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\NameCache" "DisableAutomaticDomainTrustSearch" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\NameCache" "DisableDomainCaching" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\NameCache" "DomainTrustMappingMaxThreads" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\NameCache" "DomainTrustMappingRefreshPeriodMins" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\NameCache" "MachineNameLookupTimeoutMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\NameCache" "NameRefreshExponentialBackoffMaximumMins" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\NameCache" "NameRefreshMaximumPeriodSecs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\NameCache" "NameRefreshPeriodAfterErrorMins" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\NameCache" "NameRefreshPeriodMins" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\NameCache" "OnDemandLookupCoalescePeriodMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\NameCache" "RefreshDBBatchSize" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\NameCache" "UserNameLookupTimeoutMs" $ComputerName

	#RebootScheduleSettings
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\RebootSchedule" "MaxActionThreads" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\RebootSchedule" "MaxShutdownDelayMin" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\RebootSchedule" "RebootCycleDataLifetimeHours" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\RebootSchedule" "ShutdownTimeoutRecovery" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\RebootSchedule" "MaxActionThreads" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\RebootSchedule" "MaxShutdownDelayMin" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\RebootSchedule" "RebootCycleDataLifetimeHours" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\RebootSchedule" "ShutdownTimeoutRecovery" $ComputerName

	#SiteServicesSettings
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\SiteServices" "ControllerKeepalivePollMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\SiteServices" "LeasePeriodSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\SiteServices" "LeaseRefreshPollAfterFailoverSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\SiteServices" "LeaseRefreshPollSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\SiteServices" "MaxControllerInactivitySecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer\SiteServices" "MaxShutdownTimeSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\SiteServices" "ControllerKeepalivePollMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\SiteServices" "LeasePeriodSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\SiteServices" "LeaseRefreshPollAfterFailoverSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\SiteServices" "LeaseRefreshPollSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\SiteServices" "MaxControllerInactivitySecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer\SiteServices" "MaxShutdownTimeSecs" $ComputerName

	#XmlServiceKeyAuthSettings
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\XmlServiceKeyAuth" "RequireXmlServiceKeyForNFuse" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\XmlServiceKeyAuth" "RequireXmlServiceKeyForSta" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\XmlServiceKeyAuth" "XmlServiceKey1" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\Broker\Service\State\XmlServiceKeyAuth" "XmlServiceKey2" $ComputerName #Added in 2.44

	#XmsSettings (not XmlSettings)
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "DisableGetPasswordExpiryInfo" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "DisableStaNfuseSecurityChecks" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "EnableXmlServiceSidEnumeration" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "LocalXmlAuthHeaderAllowedDelaySecs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "StableServerFarmDataCachePeriodSecs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "ThrottledRequestAddressMaxConcurrentTransactions" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "ThrottledRequestAddressRetryIntervalSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "ThrottledRequestAddressTimeoutSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "UnstableServerFarmDataCachePeriodSecs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "UseForwardedHeaderForSFAddress" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "UseNetworkLogon" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "XmlAuthHeaderTimeoutMs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "XmlListeners" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "XmlServicesEnableNonSsl" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "XmlServicesEnableSsl" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "XmlServicesPort" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "XmlServicesSslPort" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "XmlServicesTargetAddress" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "XmlStaIdentity" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "XmlStaRefreshableTicketLifetimeInSeconds" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "XmlStaTicketLifetimeInSeconds" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "XmlUserLookupTimeoutMs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "XmlWpnbrRequestTimeoutMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "XmsStartupRetryPeriodLimitMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Policies\Citrix\DesktopServer" "XmsStartupRetryPeriodStartMaxMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "DisableGetPasswordExpiryInfo" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "DisableStaNfuseSecurityChecks" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "EnableXmlServiceSidEnumeration" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "LocalXmlAuthHeaderAllowedDelaySecs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "StableServerFarmDataCachePeriodSecs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "ThrottledRequestAddressMaxConcurrentTransactions" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "ThrottledRequestAddressRetryIntervalSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "ThrottledRequestAddressTimeoutSecs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "UnstableServerFarmDataCachePeriodSecs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "UseForwardedHeaderForSFAddress" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "UseNetworkLogon" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "XmlAuthHeaderTimeoutMs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "XmlListeners" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "XmlServicesEnableNonSsl" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "XmlServicesEnableSsl" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "XmlServicesPort" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "XmlServicesSslPort" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "XmlServicesTargetAddress" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "XmlStaIdentity" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "XmlStaRefreshableTicketLifetimeInSeconds" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "XmlStaTicketLifetimeInSeconds" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "XmlUserLookupTimeoutMs" $ComputerName #Added in 2.44
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "XmlWpnbrRequestTimeoutMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "XmsStartupRetryPeriodLimitMs" $ComputerName
	Get-RegKeyToObject "HKLM:\Software\Citrix\DesktopServer" "XmsStartupRetryPeriodStartMaxMs" $ComputerName
	
	#WorkerProxySettings
	#nothing here
}
#endregion

#region Hosting functions
Function ProcessHosting
{
	#original work on the Hosting was done by Kenny Baldwin
	Write-Verbose "$(Get-Date -Format G): Processing Hosting"
	
	If($MSWord -or $PDF)
	{
		$Selection.InsertNewPage()
		WriteWordLine 1 0 "Hosting"
	}
	ElseIf($Text)
	{
		Line 0 "Hosting"
		Line 0 ""
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 1 0 "Hosting"
	}

	$vmstorage = @()
	$pvdstorage = @()
	$tmpstorage = @() #added V2.21
	$vmnetwork = @()
	$IntelliCache = New-Object System.Collections.ArrayList #added V2.23

	Write-Verbose "$(Get-Date -Format G): `tProcessing Hosting Units"
	$HostingUnits = Get-ChildItem @XDParams1 -path 'xdhyp:\hostingunits' 4>$Null
	If($? -and $Null -ne $HostingUnits)
	{
		ForEach($item in $HostingUnits)
		{	
			$Script:TotalHostingConnections++
			ForEach($storage in $item.Storage)
			{	
				$vmstorage += $storage.StoragePath
			}
			ForEach($storage in $item.PersonalvDiskStorage)
			{	
				$pvdstorage += $storage.StoragePath
			}
			#added temp storage in V2.21
			If( $item.AdditionalStorage.Length -gt 0 )
			{
				ForEach($storage in $item.AdditionalStorage.StorageLocations)
				{
					$tmpstorage += $storage.StoragePath
				}
			}
			#corrected in V2.21
			ForEach($network in $item.PermittedNetworks)
			{	
				$vmnetwork += $network
			}
			
			#added V2.23
			$obj1 = [PSCustomObject] @{
				hypName = $item.RootPath			
				IC      = $item.UseLocalStorageCaching			
			}
			$null = $IntelliCache.Add($obj1)
		}
	}
	ElseIf($? -and $Null -eq $HostingUnits)
	{
		$txt = "No Hosting Units found"
		OutputNotice $txt
	}
	Else
	{
		$txt = "Unable to retrieve Hosting Units"
		OutputWarning $txt
	}

	Write-Verbose "$(Get-Date -Format G): `tProcessing Hypervisors"
	#V2.10 10-feb-2018 change from xdparams1 to xdparams2 to add maxrecordcount
	$Hypervisors = Get-BrokerHypervisorConnection @XDParams2
	If($? -and $Null -ne $Hypervisors)
	{
		ForEach($Hypervisor in $Hypervisors)
		{
			$hypvmstorage = @()
			$hyppvdstorage = @()
			$hypnetwork = @()
			$hypIntelliCache = @()
			$hyptmpstorage = @()
			#V2.21 fixed bug where the comparison for $Hypervisor.Name was done incorrectly
			ForEach($storage in $vmstorage)
			{
                $tmpArray = $storage.Split("\")
                $tmpHypName = $tmpArray[2]
				If($tmpHypName -eq $Hypervisor.Name)
				{		
					$hypvmstorage += $storage		
				}
				$tmpArray = $Null
				$tmpHypName = $Null
			}
			ForEach($storage in $pvdstorage)
			{
                $tmpArray = $storage.Split("\")
                $tmpHypName = $tmpArray[2]
				If($tmpHypName -eq $Hypervisor.Name)
				{
					$hyppvdstorage += $storage		
				}
				$tmpArray = $Null
				$tmpHypName = $Null
			}
			ForEach($storage in $tmpstorage)
			{
                $tmpArray = $storage.Split("\")
                $tmpHypName = $tmpArray[2]
				If($tmpHypName -eq $Hypervisor.Name)
				{		
					$hyptmpstorage += $storage		
				}
				$tmpArray = $Null
				$tmpHypName = $Null
			}
			ForEach($network in $vmnetwork)
			{
                $tmpArray = $network.NetworkPath.Split("\")
                $tmpHypName = $tmpArray[2]
				If($tmpHypName -eq $Hypervisor.Name)
				{
					$hypnetwork += $network
				}
				$tmpArray = $Null
				$tmpHypName = $Null
			}
			#added V2.23
			ForEach($ICItem in $IntelliCache)
			{
                $tmpArray = $ICItem.hypName.Split("\")
                $tmpHypName = $tmpArray[2]
				If($tmpHypName -eq $Hypervisor.Name)
				{
					$hypIntelliCache += $ICItem
				}
				$tmpArray = $Null
				$tmpHypName = $Null
			}
			$xStorageName = ""
			ForEach($Unit in $HostingUnits)
			{
				If($Unit.HypervisorConnection.HypervisorConnectionName -eq $Hypervisor.Name)
				{
					$xStorageName = $Unit.HostingUnitName
				}
			}
			$xAddress = ""
			$xHAAddress = @()
			$xUserName = ""
			$xScopes = ""
			$xMaintMode = $False
			$xConnectionType = ""
			$xConnectionPluginID = ""
			$xState = ""
			$xZoneName = ""
			$xPowerActions = @()
			Write-Verbose "$(Get-Date -Format G): `tProcessing Hosting Connections"
			$Connections = Get-ChildItem @XDParams1 -path 'xdhyp:\connections' 4>$Null
			
			If($? -and $Null -ne $Connections)
			{
				ForEach($Connection in $Connections)
				{
					If($Connection.HypervisorConnectionName -eq $Hypervisor.Name)
					{
						$xAddress = $Connection.HypervisorAddress[0]
						ForEach($tmpaddress in $Connection.HypervisorAddress)
						{
							$xHAAddress += $tmpaddress
						}
						$xUserName = $Connection.UserName
						ForEach($Scope in $Connection.Scopes)
						{
							$xScopes += $Scope.ScopeName + "; "
						}
						$xScopes += "All"
						$xMaintMode = $Connection.MaintenanceMode
						$xConnectionType = $Connection.ConnectionType
						$xConnectionPluginID = $Connection.PluginID
						$xState = $Hypervisor.State
						$xZoneName = $Connection.ZoneName
						$xPowerActions = $Connection.metadata
					}
				}
			}
			ElseIf($? -and $Null -eq $Connections)
			{
				$txt = "No Hosting Connections found"
				OutputNotice $txt
			}
			Else
			{
				$txt = "Unable to retrieve Hosting Connections"
				OutputWarning $txt
			}
			#added V2.23 added $hypIntelliCache
			OutputHosting $Hypervisor $xConnectionType $xConnectionPluginID $xAddress $xState `
			$xUserName $xMaintMode $xStorageName $xHAAddress `
			$xPowerActions $xScopes $xZoneName $hypvmstorage `
			$hyppvdstorage $hypnetwork $hyptmpstorage $hypIntelliCache
		}
	}
	ElseIf($? -and $Null -eq $Hypervisors)
	{
		$txt = "No Hypervisors found"
		OutputNotice $txt
	}
	Else
	{
		$txt = "Unable to retrieve Hypervisors"
		OutputWarning $txt
	}
	Write-Verbose "$(Get-Date -Format G):"
}

Function OutputHosting
{
	Param([object] $Hypervisor, 
	[string] $xConnectionType, 
	[string] $xConnectionPluginID, 
	[string] $xAddress, 
	[string] $xState, 
	[string] $xUserName, 
	[bool] $xMaintMode, 
	[string] $xStorageName, 
	[array] $xHAAddress, 
	[array] $xPowerActions, 
	[string] $xScopes, 
	[string] $xZoneName, 
	[array] $hypvmstorage, 
	[array] $hyppvdstorage, 
	[array] $hypnetwork,
	[array] $hyptmpstorage,
	[array] $hypIntelliCache)

	#added V2.23 added $hypIntelliCache
	
	$xHAAddress = $xHAAddress | Sort-Object 
	
	#get array of standard storage - added in V2.21
	$HypStdStorage = @()
	ForEach($path in $hypvmstorage)
	{
		$tmp1 = $path.split("\")
		$cnt1 = $tmp1.Length
		$tmp2 = $tmp1[$cnt1-1]

		ForEach($tmp in $tmp2)
		{
			$tmp3 = $tmp.Split(".")
			$HypStdStorage += $tmp3[0]
		}
	}
	
	#get array of PvD storage - added in V2.21
	$HypPersonalvDiskStorage = @()
	ForEach($path in $HypPvDStorage)
	{
		$tmp1 = $path.split("\")
		$cnt1 = $tmp1.Length
		$tmp2 = $tmp1[$cnt1-1]

		ForEach($tmp in $tmp2)
		{
			$tmp3 = $tmp.Split(".")
			$HypPersonalvDiskStorage += $tmp3[0]
		}
	}
	
	#get array of temporary storage - added in V2.21
	$HypTempStorage = @()
	ForEach($path in $hyptmpstorage)
	{
		$tmp1 = $path.split("\")
		$cnt1 = $tmp1.Length
		$tmp2 = $tmp1[$cnt1-1]

		ForEach($tmp in $tmp2)
		{
			$tmp3 = $tmp.Split(".")
			$HypTempStorage += $tmp3[0]
		}
	}
	
	#get array of nework names - added in V2.21
	$HypNetworkName = @()
	ForEach($path in $hypnetwork.NetworkPath)
	{
		$tmp1 = $path.split("\")
		$cnt1 = $tmp1.Length
		$tmp2 = $tmp1[$cnt1-1]

		ForEach($tmp in $tmp2)
		{
			$tmp3 = $tmp.Split(".")
			$HypNetworkName += $tmp3[0]
		}
	}

	#get array of IntelliCache options - added in V2.23
	$HypICName = @()
	ForEach($item in $hypIntelliCache)
	{
		If($item.IC)
		{
			$ICState = "Enabled"
		}
		Else
		{
			$ICState = "Disabled"
		}
		$HypICName += $ICState
	}
	
	#to get all the Connection Types and PluginIDs, use Get-HypHypervisorPlugin
	#Thanks to fellow CTPs Neil Spellings, Kees Baggerman, and Trond Eirik Haavarstein for getting this info for me
	#For CVAD 1912 LTSR CU2, the values are:
	<#
		ConnectionType DisplayName                                      PluginFactoryName                 UsesCloudInfrastructure
		-------------- -----------                                      -----------------                 -----------------------
				   AWS Amazon EC2                                       AWSMachineManagerFactory                             True
		 CloudPlatform CloudPlatform                                    CloudStackMachineManagerFactory                      True
				 SCVMM Microsoft® System Center Virtual Machine Manager MicrosoftPSFactory                                  False
			   VCenter VMware vSphere®                                  VmwareFactory                                       False
			 XenServer Citrix Hypervisor®                               XenFactory                                          False
				Custom Microsoft® Azure™ Classic (Deprecated)           AzureClassicFactory                                 False
				Custom Microsoft® Azure™                                AzureRmFactory                                      False
				Custom Nutanix AHV                                      AcropolisFactory                           		    False
			 WakeOnLAN Microsoft® Configuration Manager Wake on LAN     ConfigMgrWOLMachineManagerFactory                   False
	#>
	$xxConnectionType = ""
	Switch ($xConnectionType)
	{
		"AWS"   		{$xxConnectionType = "Amazon EC2"; Break}
		"CloudPlatform"	{$xxConnectionType = "CloudPlatform"; Break}
		"SCVMM"     	{$xxConnectionType = "Microsoft System Center Virtual Machine Manager"; Break}
		"vCenter"   	{$xxConnectionType = "VMware vSphere"; Break}
		"WakeOnLAN"		{$xxConnectionType = "Microsoft Configuration Manager Wake on LAN"; Break}
		"XenServer" 	{$xxConnectionType = "Citrix Hypervisor"; Break}
		"Custom"    	{
							Switch ($xConnectionPluginID)
							{
								"AcropolisFactory"		{$xxConnectionType = "Nutanix AHV"; Break}
								"AzureRmFactory" 		{$xxConnectionType = "Microsoft Azure"; Break}
								"AzureClassicFactory"	{$xxConnectionType = "Microsoft Azure Classic"; Break}
								Default     			{$xxConnectionType = "Custom Hypervisor Type PluginID could not be determined: $($xConnectionPluginID)"; Break}
							}
							Break
						}
		Default     {$xxConnectionType = "Hypervisor Type could not be determined: $($xConnectionType)"; Break}
	}

	$xxState = ""
	If($xState -eq "On")
	{
		$xxState = "Enabled"
	}
	Else
	{
		$xxState = "Disabled"
	}

	$xxMaintMode = ""
	If($xMaintMode)
	{
		$xxMaintMode = "On"
	}
	Else
	{
		$xxMaintMode = "Off"
	}
	
	Write-Verbose "$(Get-Date -Format G): `t`t`tOutput $($Hypervisor.Name)"
	If($MSWord -or $PDF)
	{
		WriteWordLine 3 0 $Hypervisor.Name
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "Connection Name"; Value = $Hypervisor.Name; }) > $Null
		$ScriptInformation.Add(@{Data = "Type"; Value = $xxConnectionType; }) > $Null
		$ScriptInformation.Add(@{Data = "Address"; Value = $xAddress; }) > $Null
		$ScriptInformation.Add(@{Data = "State"; Value = $xxState; }) > $Null
		$ScriptInformation.Add(@{Data = "Username"; Value = $xUserName; }) > $Null
		$ScriptInformation.Add(@{Data = "Scopes"; Value = $xScopes; }) > $Null
		$ScriptInformation.Add(@{Data = "Maintenance Mode"; Value = $xxMaintMode; }) > $Null
		If((Get-ConfigServiceAddedCapability @XDParams1) -contains "ZonesSupport")
		{
			$ScriptInformation.Add(@{Data = "Zone"; Value = $xZoneName; }) > $Null
		}
		$ScriptInformation.Add(@{Data = "Storage resource name"; Value = $xStorageName; }) > $Null
		#addin V2.21
		If($HypNetworkName.Length -gt 0)
		{
			$ScriptInformation.Add(@{Data = "Networks"; Value = $HypNetworkName[0]; }) > $Null
			$cnt = -1
			ForEach($item in $HypNetworkName)
			{
				$cnt++
				
				If($cnt -gt 0)
				{
					$ScriptInformation.Add(@{Data = ""; Value = $item; }) > $Null
				}
			}
		}
		#added in V2.21
		If($HypStdStorage.Length -gt 0)
		{
			$ScriptInformation.Add(@{Data = "Standard storage"; Value = $HypStdStorage[0]; }) > $Null
			$cnt = -1
			ForEach($item in $HypStdStorage)
			{
				$cnt++
				
				If($cnt -gt 0)
				{
					$ScriptInformation.Add(@{Data = ""; Value = $item; }) > $Null
				}
			}
		}
		#added in V2.21
		If($HypPersonalvDiskStorage.Length -gt 0)
		{
			$ScriptInformation.Add(@{Data = "Personal vDisk storage"; Value = $HypPersonalvDiskStorage[0]; }) > $Null
			$cnt = -1
			ForEach($item in $HypPersonalvDiskStorage)
			{
				$cnt++
				
				If($cnt -gt 0)
				{
					$ScriptInformation.Add(@{Data = ""; Value = $item; }) > $Null
				}
			}
		}
		#added in V2.21
		If($HypTempStorage.Length -gt 0)
		{
			$ScriptInformation.Add(@{Data = "Temporary storage"; Value = $HypTempStorage[0]; }) > $Null
			$cnt = -1
			ForEach($item in $HypTempStorage)
			{
				$cnt++
				
				If($cnt -gt 0)
				{
					$ScriptInformation.Add(@{Data = ""; Value = $item; }) > $Null
				}
			}
		}
		#added in V2.23
		If($HypICName.Length -gt 0)
		{
			$ScriptInformation.Add(@{Data = "IntelliCache:"; Value = $HypICName[0]; }) > $Null
		}

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 150;
		$Table.Columns.Item(2).Width = 200;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		
		WriteWordLine 4 0 "Advanced"
		If($xHAAddress -is [array])
		{
			$ScriptInformation.Add(@{Data = "High Availability Servers"; Value = $xHAAddress[0]; }) > $Null
			$cnt = 0
			ForEach($tmpaddress in $xHAAddress)
			{
				If($cnt -gt 0)
				{
					$ScriptInformation.Add(@{Data = ""; Value = $tmpaddress; }) > $Null
				}
				$cnt++
			}
		}
		Else
		{
			$ScriptInformation.Add(@{Data = "High Availability Servers"; Value = "N/A"; }) > $Null
		}
		
		If($xPowerActions.Length -gt 0)
		{
			$ScriptInformation.Add(@{Data = "Simultaneous actions (all types) [Absolute]"; Value = $xPowerActions[0].Value; }) > $Null
			$ScriptInformation.Add(@{Data = "Simultaneous actions (all types) [Percentage]"; Value = $xPowerActions[2].Value; }) > $Null
			$ScriptInformation.Add(@{Data = "Maximum new actions per minute"; Value = $xPowerActions[1].Value; }) > $Null
			If($xPowerActions.Count -gt 5)
			{
				$ScriptInformation.Add(@{Data = "Connection options"; Value = $xPowerActions[5].Value; }) > $Null
			}
		}
		Else
		{
			$ScriptInformation.Add(@{Data = "Simultaneous actions (all types) [Absolute]"; Value = "N/A"; }) > $Null
			$ScriptInformation.Add(@{Data = "Simultaneous actions (all types) [Percentage]"; Value = "N/A"; }) > $Null
			$ScriptInformation.Add(@{Data = "Maximum new actions per minute"; Value = "N/A"; }) > $Null
			$ScriptInformation.Add(@{Data = "Connection options"; Value = "N/A"; }) > $Null
		}
		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 300;
		$Table.Columns.Item(2).Width = 200;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
	}
	ElseIf($Text)
	{
		Line 0 $Hypervisor.Name
		Line 0 ""
		Line 1 "Connection Name`t`t: " $Hypervisor.Name
		Line 1 "Type`t`t`t: " $xxConnectionType
		Line 1 "Address`t`t`t: " $xAddress
		Line 1 "State`t`t`t: " $xxState
		Line 1 "Username`t`t: " $xUserName
		Line 1 "Scopes`t`t`t: " $xScopes
		Line 1 "Maintenance Mode`t: " $xxMaintMode
		If((Get-ConfigServiceAddedCapability @XDParams1) -contains "ZonesSupport")
		{
			Line 1 "Zone`t`t`t: " $xZoneName
		}
		Line 1 "Storage resource name`t: " $xStorageName
		#addedin V2.21
		If($HypNetworkName.Length -gt 0)
		{
			Line 1 "Networks`t`t: " $HypNetworkName[0]
			$cnt = -1
			ForEach($item in $HypNetworkName)
			{
				$cnt++
				
				If($cnt -gt 0)
				{
					Line 4 "  " $item
				}
			}
		}
		#added in V2.21
		If($HypStdStorage.Length -gt 0)
		{
			Line 1 "Standard storage`t: " $HypStdStorage[0]
			$cnt = -1
			ForEach($item in $HypStdStorage)
			{
				$cnt++
				
				If($cnt -gt 0)
				{
					Line 4 "  " $item
				}
			}
		}
		#added in V2.21
		If($HypPersonalvDiskStorage.Length -gt 0)
		{
			Line 1 "Personal vDisk storage`t: " $HypPersonalvDiskStorage[0]
			$cnt = -1
			ForEach($item in $HypPersonalvDiskStorage)
			{
				$cnt++
				
				If($cnt -gt 0)
				{
					Line 4 "  " $item
				}
			}
		}
		#added in V2.21
		If($HypTempStorage.Length -gt 0)
		{
			Line 1 "Temporary storage`t: " $HypTempStorage[0]
			$cnt = -1
			ForEach($item in $HypTempStorage)
			{
				$cnt++
				
				If($cnt -gt 0)
				{
					Line 4 "  " $item
				}
			}
		}
		#added in V2.23
		If($HypICName.Length -gt 0)
		{
			Line 1 "IntelliCache`t`t: " $HypICName[0]
		}
		Line 0 ""
		
		Line 1 "Advanced"
		If($xHAAddress -is [array])
		{
			Line 2 "High Availability Servers`t`t`t: " $xHAAddress[0]

			$cnt = 0
			ForEach($tmpaddress in $xHAAddress)
			{
				If($cnt -gt 0)
				{
					Line 8 "  " $tmpaddress
				}
				$cnt++
			}
		}
		Else
		{
			Line 2 "High Availability Servers`t`t`t: N/A"
		}
		
		If($xPowerActions.Length -gt 0)
		{
			Line 2 "Simultaneous actions (all types) [Absolute]`t: " $xPowerActions[0].Value
			Line 2 "Simultaneous actions (all types) [Percentage]`t: " $xPowerActions[2].Value
			Line 2 "Maximum new actions per minute`t`t`t: " $xPowerActions[1].Value
			If($xPowerActions.Count -gt 5)
			{
				Line 2 "Connection options`t`t`t`t: " $xPowerActions[5].Value
			}
		}
		Else
		{
			Line 2 "Simultaneous actions (all types) [Absolute]`t: N/A"
			Line 2 "Simultaneous actions (all types) [Percentage]`t: N/A"
			Line 2 "Maximum new actions per minute`t`t`t: N/A"
			Line 2 "Connection options`t`t`t`t: N/A"
		}
		Line 0 ""
		
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 3 0 $Hypervisor.Name
		$rowdata = @()
		$columnHeaders = @("Connection Name",($global:htmlsb),$Hypervisor.Name,$htmlwhite)
		$rowdata += @(,('Type',($global:htmlsb),$xxConnectionType,$htmlwhite))
		$rowdata += @(,('Address',($global:htmlsb),$xAddress,$htmlwhite))
		$rowdata += @(,('State',($global:htmlsb),$xxState,$htmlwhite))
		$rowdata += @(,('Username',($global:htmlsb),$xUserName,$htmlwhite))
		$rowdata += @(,('Scopes',($global:htmlsb),$xScopes,$htmlwhite))
		$rowdata += @(,('Maintenance Mode',($global:htmlsb),$xxMaintMode,$htmlwhite))
		If((Get-ConfigServiceAddedCapability @XDParams1) -contains "ZonesSupport")
		{
			$rowdata += @(,('Zone',($global:htmlsb),$xZoneName,$htmlwhite))
		}
		$rowdata += @(,('Storage resource name',($global:htmlsb),$xStorageName,$htmlwhite))
		#added in V2.21
		If($HypNetworkName.Length -gt 0)
		{
			$rowdata += @(,('Network',($global:htmlsb),$HypNetworkName[0],$htmlwhite))
			$cnt = -1
			ForEach($item in $HypNetworkName)
			{
				$cnt++
				
				If($cnt -gt 0)
				{
					$rowdata += @(,('',($global:htmlsb),$item,$htmlwhite))
				}
			}
		}
		#added in V2.21
		If($HypStdStorage.Length -gt 0)
		{
			$rowdata += @(,('Standard storage',($global:htmlsb),$HypStdStorage[0],$htmlwhite))
			$cnt = -1
			ForEach($item in $HypStdStorage)
			{
				$cnt++
				
				If($cnt -gt 0)
				{
					$rowdata += @(,('',($global:htmlsb),$item,$htmlwhite))
				}
			}
		}
		#added in V2.21
		If($HypPersonalvDiskStorage.Length -gt 0)
		{
			$rowdata += @(,('Personal vDisk storage',($global:htmlsb),$HypPersonalvDiskStorage[0],$htmlwhite))
			$cnt = -1
			ForEach($item in $HypPersonalvDiskStorage)
			{
				$cnt++
				
				If($cnt -gt 0)
				{
					$rowdata += @(,('',($global:htmlsb),$item,$htmlwhite))
				}
			}
		}
		#added in V2.21
		If($HypTempStorage.Length -gt 0)
		{
			$rowdata += @(,('Temporary storage',($global:htmlsb),$HypTempStorage[0],$htmlwhite))
			$cnt = -1
			ForEach($item in $HypTempStorage)
			{
				$cnt++
				
				If($cnt -gt 0)
				{
					$rowdata += @(,('',($global:htmlsb),$item,$htmlwhite))
				}
			}
		}
		#added in V2.23
		If($HypICName.Length -gt 0)
		{
			$rowdata += @(,('IntelliCache:',($global:htmlsb),$HypICName[0],$htmlwhite))
		}

		$msg = ""
		$columnWidths = @("175","200")
		FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "375"
		
		WriteHTMLLine 4 0 "Advanced"
		$rowdata = @()
		If($xHAAddress -is [array])
		{
			$columnHeaders = @("High Availability Servers",($global:htmlsb),$xHAAddress[0],$htmlwhite)
			$cnt = 0
			ForEach($tmpaddress in $xHAAddress)
			{
				If($cnt -gt 0)
				{
					$rowdata += @(,('',($global:htmlsb),$tmpaddress,$htmlwhite))
				}
				$cnt++
			}
		}
		Else
		{
			$columnHeaders = @("High Availability Servers",($global:htmlsb),"N/A",$htmlwhite)
		}
		
		If($xPowerActions.Length -gt 0)
		{
			$rowdata += @(,('Simultaneous actions (all types) [Absolute]',($global:htmlsb),$xPowerActions[0].Value,$htmlwhite))
			$rowdata += @(,('Simultaneous actions (all types) [Percentage]',($global:htmlsb),$xPowerActions[2].Value,$htmlwhite))
			$rowdata += @(,('Maximum new actions per minute',($global:htmlsb),$xPowerActions[1].Value,$htmlwhite))
			If($xPowerActions.Count -gt 5)
			{
				$rowdata += @(,('Connection options',($global:htmlsb),$xPowerActions[5].Value,$htmlwhite))
			}
		}
		Else
		{
			$rowdata += @(,('Simultaneous actions (all types) [Absolute]',($global:htmlsb),"N/A",$htmlwhite))
			$rowdata += @(,('Simultaneous actions (all types) [Percentage]',($global:htmlsb),"N/A",$htmlwhite))
			$rowdata += @(,('Maximum new actions per minute',($global:htmlsb),"N/A",$htmlwhite))
			$rowdata += @(,('Connection options',($global:htmlsb),"N/A",$htmlwhite))
		}

		$msg = ""
		$columnWidths = @("350","150")
		FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "500"
	}
	
	If($Hosting)
	{	
		Write-Verbose "$(Get-Date -Format G): `tProcessing Host Administrators"
		$Admins = GetAdmins "Host" $Hypervisor.Name
		
		If($? -and ($Null -ne $Admins))
		{
			OutputAdminsForDetails $Admins
		}
		ElseIf($? -and ($Null -eq $Admins))
		{
			$txt = "There are no administrators for Host $($Hypervisor.Name)"
			OutputNotice $txt
		}
		Else
		{
			$txt = "Unable to retrieve administrators for Host $($Hypervisor.Name)"
			OutputWarning $txt
		}

		If($Script:XDSiteVersion -ge 7.23)
		{
			Write-Verbose "$(Get-Date -Format G): `tProcessing Single-session OS Data"
		}
		Else
		{
			Write-Verbose "$(Get-Date -Format G): `tProcessing Desktop OS Data"
		}
		$DesktopOSMachines = @(Get-BrokerMachine @XDParams2 -hypervisorconnectionname $Hypervisor.Name -sessionsupport "SingleSession")

		If($? -and ($Null -ne $DesktopOSMachines -and $DesktopOSMachines.Count -gt 0))
		{
			[int]$cnt = $DesktopOSMachines.Count
			
			If($MSWord -or $PDF)
			{
				$Selection.InsertNewPage()
				If($Script:XDSiteVersion -ge 7.23)
				{
					WriteWordLine 4 0 "Single-session OS Machines ($($cnt))"
				}
				Else
				{
					WriteWordLine 4 0 "Desktop OS Machines ($($cnt))"
				}
			}
			ElseIf($Text)
			{
				If($Script:XDSiteVersion -ge 7.23)
				{
					Line 0 "Single-session OS Machines ($($cnt))"
				}
				Else
				{
					Line 0 "Desktop OS Machines ($($cnt))"
				}
				Line 0 ""
			}
			ElseIf($HTML)
			{
				If($Script:XDSiteVersion -ge 7.23)
				{
					WriteHTMLLine 4 0 "Single-session OS Machines ($($cnt))"
				}
				Else
				{
					WriteHTMLLine 4 0 "Desktop OS Machines ($($cnt))"
				}
			}

			ForEach($Desktop in $DesktopOSMachines)
			{
				OutputDesktopOSMachine $Desktop
			}
		}
		ElseIf($? -and ($Null -eq $DesktopOSMachines -or $DesktopOSMachines.Count -eq 0))
		{
			If($Script:XDSiteVersion -ge 7.23)
			{
				$txt = "There are no Single-session OS Machines"
			}
			Else
			{
				$txt = "There are no Desktop OS Machines"
			}
			OutputNotice $txt
		}
		Else
		{
			If($Script:XDSiteVersion -ge 7.23)
			{
				$txt = "Unable to retrieve Single-session OS Machines"
			}
			Else
			{
				$txt = "Unable to retrieve Desktop OS Machines"
			}
			OutputWarning $txt
		}

		#updated for CVAD 1909 in V2.28
		If($Script:XDSiteVersion -ge 7.23)
		{
			Write-Verbose "$(Get-Date -Format G): `tProcessing Multi-session OS Data"
		}
		Else
		{
			Write-Verbose "$(Get-Date -Format G): `tProcessing Server OS Data"
		}
		$ServerOSMachines = @(Get-BrokerMachine @XDParams2 -hypervisorconnectionname $Hypervisor.Name -sessionsupport "MultiSession")
		
		If($? -and ($Null -ne $ServerOSMachines -and $ServerOSMachines.Count -gt 0))
		{
			[int]$cnt = $ServerOSMachines.Count

			If($MSWord -or $PDF)
			{
				$Selection.InsertNewPage()
				#updated for CVAD 1909 in V2.28
				If($Script:XDSiteVersion -ge 7.23)
				{
					WriteWordLine 4 0 "Multi-session OS Machines ($($cnt))"
				}
				Else
				{
					WriteWordLine 4 0 "Server OS Machines ($($cnt))"
				}
			}
			ElseIf($Text)
			{
				Line 0 ""
				#updated for CVAD 1909 in V2.28
				If($Script:XDSiteVersion -ge 7.23)
				{
					Line 0 "Multi-session OS Machines ($($cnt))"
				}
				Else
				{
					Line 0 "Server OS Machines ($($cnt))"
				}
				Line 0 ""
			}
			ElseIf($HTML)
			{
				#updated for CVAD 1909 in V2.28
				If($Script:XDSiteVersion -ge 7.23)
				{
					WriteHTMLLine 4 0 "Multi-session OS Machines ($($cnt))"
				}
				Else
				{
					WriteHTMLLine 4 0 "Server OS Machines ($($cnt))"
				}
			}
			
			ForEach($Server in $ServerOSMachines)
			{
				OutputServerOSMachine $Server
			}
		}
		ElseIf($? -and ($Null -eq $ServerOSMachines -or $ServerOSMachines.Count -eq 0))
		{
			#updated for CVAD 1909 in V2.28
			If($Script:XDSiteVersion -ge 7.23)
			{
				$txt = "There are no Multi-session OS Machines"
			}
			Else
			{
				$txt = "There are no Server OS Machines"
			}
			OutputNotice $txt
		}
		Else
		{
			#updated for CVAD 1909 in V2.28
			If($Script:XDSiteVersion -ge 7.23)
			{
				$txt = "Unable to retrieve Multi-session OS Machines"
			}
			Else
			{
				$txt = "Unable to retrieve Server OS Machines"
			}
			OutputWarning $txt
		}

		If($NoSessions -eq $False) #V2.27
		{
			Write-Verbose "$(Get-Date -Format G): `tProcessing Sessions Data"
			#V2.10 10-feb-2018 change from xdparams1 to xdparams2 to add maxrecordcount
			$Sessions = @(Get-BrokerSession @XDParams2 -hypervisorconnectionname $Hypervisor.Name -SortBy UserName)
			If($? -and ($Null -ne $Sessions -and $Sessions.Count -gt 0))
			{
				[int]$cnt = $Sessions.Count

				If($MSWord -or $PDF)
				{
					$Selection.InsertNewPage()
					WriteWordLine 4 0 "Sessions ($($cnt))"
				}
				ElseIf($Text)
				{
					Line 0 "Sessions ($($cnt))"
					Line 0 ""
				}
				ElseIf($HTML)
				{
					WriteHTMLLine 4 0 "Sessions ($($cnt))"
				}
				
				OutputHostingSessions $Sessions
			}
			ElseIf($? -and ($Null -eq $Sessions -or $Sessions.Count -eq 0))
			{
				$txt = "There are no Sessions"
				OutputNotice $txt
			}
			Else
			{
				$txt = "Unable to retrieve Sessions"
				OutputWarning $txt
			}

			If($MSWord -or $PDF)
			{
				#added in 3.40, add a page break after sessions
				$Selection.InsertNewPage()
			}
		}
	}
}

Function OutputDesktopOSMachine 
{
	Param([object]$Desktop)

	#updated in V2.52
	If($Desktop.DNSName)	# is there anything in the DNSName property
	{
		$tmp = $Desktop.DNSName.Split(".")
		$xDesktopName = $tmp[0]
		$tmp = $Null
	}
	ElseIf($Desktop.MachineName)	# is there anything in the MachineName property
	{
		$tmp = $Desktop.MachineName.Split("\")
		$xDesktopName = $tmp[1]
		$tmp = $Null
	}
	ElseIf($Desktop.HostedMachineName)	# is there anything in the HostedMachineName property
	{
		$xDesktopName = $Desktop.HostedMachineName
	}
	Else	# error, there is no name for the Server
	{
		$xDesktopName = "error, there was no name found for the Desktop"
	}

	Write-Verbose "$(Get-Date -Format G): `t`t`tOutput desktop $xDesktopName"

	$xMaintMode = ""
	$xUserChanges = ""
	
	Switch ($Desktop.PowerState)
	{
		"Off"			{$xPowerState = "Off"; Break}
		"On"			{$xPowerState = "On"; Break}
        "Resuming"		{$xPowerState = "Resuming"; Break}
		"Suspended"		{$xPowerState = "Suspended"; Break}
		"Suspending"	{$xPowerState = "Suspending"; Break}
		"TurningOff"	{$xPowerState = "Turning Off"; Break}
		"TurningOn"		{$xPowerState = "Turning On"; Break}
		"Unavailable"	{$xPowerState = "Unavailable"; Break}
		"Unknown"		{$xPowerState = "Unknown"; Break}
		"Unmanaged"		{$xPowerState = "Unmanaged"; Break}
		Default			{$xPowerState = "Unable to determine desktop Power State: $($Desktop.PowerState)"; Break}
	}
	
	If($MSWord -or $PDF)
	{
		If($Desktop.InMaintenanceMode)
		{
			$xMaintMode = "On"
		}
		Else
		{
			$xMaintMode = "Off"
		}
		Switch($Desktop.PersistUserChanges)
		{
			"OnLocal" {$xUserChanges = "On Local"; Break}
			"Discard" {$xUserChanges = "Discard"; Break}
			"OnPvd"   {$xUserChanges = "Personal vDisk"; Break}
			Default   {$xUserChanges = "Unknown: $($Desktop.PersistUserChanges)"; Break}
		}
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "Name"; Value = $xDesktopName; }) > $Null
		$ScriptInformation.Add(@{Data = "Machine Catalog"; Value = $Desktop.CatalogName; }) > $Null
		$ScriptInformation.Add(@{Data = "Delivery Group"; Value = $Desktop.DesktopGroupName; }) > $Null
		#fixed in 2.21
		If(![String]::IsNullOrEmpty($Desktop.AssociatedUserNames))
		{
			$cnt = -1
			ForEach($AssociatedUserName in $Desktop.AssociatedUserNames)
			{
				$cnt++
				If($cnt -eq 0)
				{
					$ScriptInformation.Add(@{Data = "User"; Value = $AssociatedUserName; }) > $Null
				}
				Else
				{
					$ScriptInformation.Add(@{Data = ""; Value = $AssociatedUserName; }) > $Null
				}
			}
		}
		$ScriptInformation.Add(@{Data = "Maintenance Mode"; Value = $xMaintMode; }) > $Null
		$ScriptInformation.Add(@{Data = "Persist User Changes"; Value = $xUserChanges; }) > $Null
		$ScriptInformation.Add(@{Data = "Power State"; Value = $xPowerState; }) > $Null
		$ScriptInformation.Add(@{Data = "Registration State"; Value = $Desktop.RegistrationState.ToString(); }) > $Null
		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 150;
		$Table.Columns.Item(2).Width = 200;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	ElseIf($Text)
	{
		Line 1 "Name`t`t`t: " $xDesktopName
		Line 1 "Machine Catalog`t`t: " $Desktop.CatalogName
		Line 1 "Delivery Group`t`t: " $Desktop.DesktopGroupName
		#fixed in 2.21
		If(![String]::IsNullOrEmpty($Desktop.AssociatedUserNames))
		{
			$cnt = -1
			ForEach($AssociatedUserName in $Desktop.AssociatedUserNames)
			{
				$cnt++
				If($cnt -eq 0)
				{
					Line 1 "User`t`t`t: " $AssociatedUserName
				}
				Else
				{
					Line 4 "  " $AssociatedUserName
				}
			}
			
		}
		If($Desktop.InMaintenanceMode)
		{
			$xMaintMode = "On"
		}
		Else
		{
			$xMaintMode = "Off"
		}
		Line 1 "Maintenance Mode`t: " $xMaintMode
		Switch($Desktop.PersistUserChanges)
		{
			"OnLocal" {$xUserChanges = "On Local"; Break}
			"Discard" {$xUserChanges = "Discard"; Break}
			"OnPvd"   {$xUserChanges = "Personal vDisk"; Break}
			Default   {$xUserChanges = "Unknown: $($Desktop.PersistUserChanges)"; Break}
		}
		Line 1 "Persist User Changes`t: " $xUserChanges
		Line 1 "Power State`t`t: " $xPowerState
		Line 1 "Registration State`t: " $Desktop.RegistrationState.ToString()
		Line 0 ""
	}
	ElseIf($HTML)
	{
		If($Desktop.InMaintenanceMode)
		{
			$xMaintMode = "On"
		}
		Else
		{
			$xMaintMode = "Off"
		}
		Switch($Desktop.PersistUserChanges)
		{
			"OnLocal" {$xUserChanges = "On Local"; Break}
			"Discard" {$xUserChanges = "Discard"; Break}
			"OnPvd"   {$xUserChanges = "Personal vDisk"; Break}
			Default   {$xUserChanges = "Unknown: $($Desktop.PersistUserChanges)"; Break}
		}

		$rowdata = @()
		$columnHeaders = @("Name",($global:htmlsb),$xDesktopName,$htmlwhite)
		$rowdata += @(,('Machine Catalog',($global:htmlsb),$Desktop.CatalogName,$htmlwhite))
		$rowdata += @(,('Delivery Group',($global:htmlsb),$Desktop.DesktopGroupName,$htmlwhite))
		#fixed in 2.21
		If(![String]::IsNullOrEmpty($Desktop.AssociatedUserNames))
		{
			$cnt = -1
			ForEach($AssociatedUserName in $Desktop.AssociatedUserNames)
			{
				$cnt++
				If($cnt -eq 0)
				{
					$rowdata += @(,('User',($global:htmlsb),$AssociatedUserName,$htmlwhite))
				}
				Else
				{
					$rowdata += @(,('',($global:htmlsb),$AssociatedUserName,$htmlwhite))
				}
			}
		}
		$rowdata += @(,('Maintenance Mode',($global:htmlsb),$xMaintMode,$htmlwhite))
		$rowdata += @(,('Persist User Changes',($global:htmlsb),$xUserChanges,$htmlwhite))
		$rowdata += @(,('Power State',($global:htmlsb),$xPowerState,$htmlwhite))
		$rowdata += @(,('Registration State',($global:htmlsb),$Desktop.RegistrationState.ToString(),$htmlwhite))

		$msg = ""
		$columnWidths = @("150","200")
		FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "350"
		WriteHTMLLine 0 0 ""
	}
}

Function OutputServerOSMachine 
{
	Param([object]$Server)
	
	#updated in V2.52
	If($Server.DNSName)	# is there anything in the DNSName property
	{
		$tmp = $Server.DNSName.Split(".")
		$xServerName = $tmp[0]
		$tmp = $Null
	}
	ElseIf($Server.MachineName)	# is there anything in the MachineName property
	{
		$tmp = $Server.MachineName.Split("\")
		$xServerName = $tmp[1]
		$tmp = $Null
	}
	ElseIf($Server.HostedMachineName)	# is there anything in the HostedMachineName property
	{
		$xServerName = $Server.HostedMachineName
	}
	Else	# error, there is no name for the Server
	{
		$xServerName = "error, there was no name found for the Server"
	}

	Write-Verbose "$(Get-Date -Format G): `t`t`tOutput server $xServerName"

	$xMaintMode = ""
	$xUserChanges = ""

	If($Server.InMaintenanceMode)
	{
		$xMaintMode = "On"
	}
	Else
	{
		$xMaintMode = "Off"
	}

	Switch($Server.PersistUserChanges)
	{
		"OnLocal" {$xUserChanges = "On Local"; Break}
		"Discard" {$xUserChanges = "Discard"; Break}
		"OnPvd"   {$xUserChanges = "Personal vDisk"; Break}
		Default   {$xUserChanges = "Unknown: $($Server.PersistUserChanges)"; Break}
	}

	Switch ($Server.PowerState)
	{
		"Off"			{$xPowerState = "Off"; Break}
		"On"			{$xPowerState = "On"; Break}
        "Resuming"		{$xPowerState = "Resuming"; Break}
		"Suspended"		{$xPowerState = "Suspended"; Break}
		"Suspending"	{$xPowerState = "Suspending"; Break}
		"TurningOff"	{$xPowerState = "Turning Off"; Break}
		"TurningOn"		{$xPowerState = "Turning On"; Break}
		"Unavailable"	{$xPowerState = "Unavailable"; Break}
		"Unknown"		{$xPowerState = "Unknown"; Break}
		"Unmanaged"		{$xPowerState = "Unmanaged"; Break}
		Default			{$xPowerState = "Unable to determine desktop Power State: $($Server.PowerState)"; Break}
	}
	
	If($MSWord -or $PDF)
	{
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "Name"; Value = $xServerName; }) > $Null
		$ScriptInformation.Add(@{Data = "Machine Catalog"; Value = $Server.CatalogName; }) > $Null
		$ScriptInformation.Add(@{Data = "Delivery Group"; Value = $Server.DesktopGroupName; }) > $Null
		#fixed in 2.21
		If(![String]::IsNullOrEmpty($Server.AssociatedUserNames))
		{
			$cnt = -1
			ForEach($AssociatedUserName in $Server.AssociatedUserNames)
			{
				If($cnt -eq 0)
				{
					$ScriptInformation.Add(@{Data = "User"; Value = $AssociatedUserName; }) > $Null
				}
				Else
				{
					$ScriptInformation.Add(@{Data = ""; Value = $AssociatedUserName; }) > $Null
				}
			}
		}
		$ScriptInformation.Add(@{Data = "Maintenance Mode"; Value = $xMaintMode; }) > $Null
		$ScriptInformation.Add(@{Data = "Persist User Changes"; Value = $xUserChanges; }) > $Null
		$ScriptInformation.Add(@{Data = "Power State"; Value = $xPowerState; }) > $Null
		$ScriptInformation.Add(@{Data = "Registration State"; Value = $Server.RegistrationState.ToString(); }) > $Null
		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 150;
		$Table.Columns.Item(2).Width = 200;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	ElseIf($Text)
	{
		Line 1 "Name`t`t`t: " $xServerName
		Line 1 "Machine Catalog`t`t: " $Server.CatalogName
		If(![String]::IsNullOrEmpty($Server.DesktopGroupName))
		{
			Line 1 "Delivery Group`t`t: " $Server.DesktopGroupName
		}
		#fixed in 2.21
		If(![String]::IsNullOrEmpty($Server.AssociatedUserNames))
		{
			$cnt = -1
			ForEach($AssociatedUserName in $Server.AssociatedUserNames)
			{
				$cnt++
				If($cnt -eq 0)
				{
					Line 1 "User`t`t`t: " $AssociatedUserName
				}
				Else
				{
					Line 4 "  " $AssociatedUserName
				}
			}
			
		}
		Line 1 "Persist User Changes`t: " $xUserChanges
		Line 1 "Power State`t`t: " $xPowerState
		Line 1 "Registration State`t: " $Server.RegistrationState.ToString()
		Line 0 ""
	}
	ElseIf($HTML)
	{
		$rowdata = @()
		$columnHeaders = @("Name",($global:htmlsb),$xServerName,$htmlwhite)
		$rowdata += @(,('Machine Catalog',($global:htmlsb),$Server.CatalogName,$htmlwhite))
		If(![String]::IsNullOrEmpty($Server.DesktopGroupName))
		{
			$rowdata += @(,('Delivery Group',($global:htmlsb),$Server.DesktopGroupName,$htmlwhite))
		}
		#fixed in 2.21
		If(![String]::IsNullOrEmpty($Server.AssociatedUserNames))
		{
			$cnt = -1
			ForEach($AssociatedUserName in $Server.AssociatedUserNames)
			{
				$cnt++
				If($cnt -eq 0)
				{
					$rowdata += @(,('User',($global:htmlsb),$AssociatedUserName,$htmlwhite))
				}
				Else
				{
					$rowdata += @(,('',($global:htmlsb),$AssociatedUserName,$htmlwhite))
				}
			}
		}
		$rowdata += @(,('Maintenance Mode',($global:htmlsb),$xMaintMode,$htmlwhite))
		$rowdata += @(,('Persist User Changes',($global:htmlsb),$xUserChanges,$htmlwhite))
		$rowdata += @(,('Power State',($global:htmlsb),$xPowerState,$htmlwhite))
		$rowdata += @(,('Registration State',($global:htmlsb),$Server.RegistrationState.ToString(),$htmlwhite))

		$msg = ""
		$columnWidths = @("150","200")
		FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "350"
		WriteHTMLLine 0 0 ""
	}
}

Function OutputHostingSessions 
{
	Param([object] $Sessions)
	
	ForEach($Session in $Sessions)
	{
		Write-Verbose "$(Get-Date -Format G): `t`t`tOutput session $($Session.UserName)"
		#V2.10 10-feb-2018 change from xdparams1 to xdparams2 to add maxrecordcount
		#V2.20 remove all the desktop code as it is not used in this function
		
		If($Session.SessionSupport -eq "SingleSession")
		{
			$xSessionType = "Single"
		}
		Else
		{
			$xSessionType = "Multi"
		}
		
		#recording status added in 2.26
		$RecordingStatus = "Not supported"
		$result = Get-BrokerSessionRecordingStatus -Session $Session.Uid -EA 0
		
		If($? -and $null -ne $result)
		{
			Switch ($result)
			{
				"SessionBeingRecorded"	{$RecordingStatus = "Session is being recorded"}
				"SessionNotRecorded"	{$RecordingStatus = "Session is not being recorded"}
				Default					{$RecordingStatus = "Unable to determine session recording status: $($result)"}
			}
		}
		ElseIf($? -and $null -eq $result)
		{
			$RecordingStatus = "No recording status found"
		}
		Else
		{
			$RecordingStatus = "Unable to determine session recording status: $($result)"
		}

		If([String]::IsNullOrEmpty($Session.ClientName))
		{
			$xClientName = "-"
		}
		Else
		{
			$xClientName = $Session.ClientName
		}
		
		If([String]::IsNullOrEmpty($Session.BrokeringTime))
		{
			$xBrokeringTime = "-"
		}
		Else
		{
			$xBrokeringTime = $Session.BrokeringTime
		}
		
		If($MSWord -or $PDF)
		{
			$ScriptInformation = New-Object System.Collections.ArrayList
			$ScriptInformation.Add(@{Data = "Current User"; Value = $Session.UserName; }) > $Null
			$ScriptInformation.Add(@{Data = "Name"; Value = $xClientName; }) > $Null
			$ScriptInformation.Add(@{Data = "Delivery Group"; Value = $Session.DesktopGroupName; }) > $Null
			$ScriptInformation.Add(@{Data = "Machine Catalog"; Value = $Session.CatalogName; }) > $Null
			$ScriptInformation.Add(@{Data = "Brokering Time"; Value = $xBrokeringTime; }) > $Null
			$ScriptInformation.Add(@{Data = "Session State"; Value = $Session.SessionState; }) > $Null
			$ScriptInformation.Add(@{Data = "Application State"; Value = $Session.AppState; }) > $Null
			$ScriptInformation.Add(@{Data = "Session Support"; Value = $xSessionType; }) > $Null
			$ScriptInformation.Add(@{Data = "Recording Status"; Value = $RecordingStatus; }) > $Null #recording status added in 2.26
			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 150;
			$Table.Columns.Item(2).Width = 200;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 ""
		}
		ElseIf($Text)
		{
			Line 1 "Current User`t`t: " $Session.UserName
			Line 1 "Name`t`t`t: " $xClientName
			Line 1 "Delivery Group`t`t: " $Session.DesktopGroupName
			Line 1 "Machine Catalog`t`t: " $Session.CatalogName
			Line 1 "Brokering Time`t`t: " $xBrokeringTime
			Line 1 "Session State`t`t: " $Session.SessionState
			Line 1 "Application State`t: " $Session.AppState
			Line 1 "Session Support`t`t: " $xSessionType
			Line 1 "Recording Status`t: " $RecordingStatus #recording status added in 2.26
			Line 0 ""
		}
		ElseIf($HTML)
		{
			$rowdata = @()
			$columnHeaders = @("Current User",($global:htmlsb),$Session.UserName,$htmlwhite)
			$rowdata += @(,('Name',($global:htmlsb),$xClientName,$htmlwhite))
			$rowdata += @(,('Delivery Group',($global:htmlsb),$Session.DesktopGroupName,$htmlwhite))
			$rowdata += @(,('Machine Catalog',($global:htmlsb),$Session.CatalogName,$htmlwhite))
			$rowdata += @(,('Brokering Time',($global:htmlsb),$xBrokeringTime,$htmlwhite))
			$rowdata += @(,('Session State',($global:htmlsb),$Session.SessionState,$htmlwhite))
			$rowdata += @(,('Application State',($global:htmlsb),$Session.AppState,$htmlwhite))
			$rowdata += @(,('Session Support',($global:htmlsb),$xSessionType,$htmlwhite))
			$rowdata += @(,('Recording Status',($global:htmlsb),$RecordingStatus,$htmlwhite)) #recording status added in 2.26

			$msg = ""
			$columnWidths = @("150","200")
			FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "350"
			WriteHTMLLine 0 0 ""
		}
	}
}
#endregion

#region Licensing functions
Function ProcessLicensing
{
	Write-Verbose "$(Get-Date -Format G): Processing Licensing"
	
	$Script:Licenses = New-Object System.Collections.ArrayList
	OutputLicensingOverview
	
	#get product license info
	Write-Verbose "$(Get-Date -Format G): `tRetrieving Licensing data"
	$LSAdminAddress = Get-LicLocation -LicenseServerAddress $Script:XDSite1.LicenseServerName -EA 0 4>$Null
	If($? -and ($Null -ne $LSAdminAddress))
	{
		$LSCertificate = Get-LicCertificate -AdminAddress $LSAdminAddress -EA 0 4>$Null
		If($? -and ($Null -ne $LSCertificate))
		{
			$LicenseAdmins = Get-LicAdministrator -AdminAddress $LSAdminAddress -CertHash $LSCertificate.CertHash -EA 0 4>$Null
			If($? -and ($Null -ne $LicenseAdmins))
			{
				OutputLicenseAdmins $LicenseAdmins
			}
			Else
			{
				$txt = "Unable to retrieve License Administrators"
				OutputWarning $txt
			}

			$ProductLicenses = Get-LicInventory -AdminAddress $LSAdminAddress -CertHash $LSCertificate.CertHash -EA 0 4>$Null
			If($? -and ($Null -ne $ProductLicenses))
			{
				OutputXendesktopLicenses $LSAdminAddress $LSCertificate $ProductLicenses
			}
			Else
			{
				$txt = "Unable to retrieve Product Licenses"
				OutputWarning $txt
			}
			
		}
		Else
		{
			$txt = "Unable to retrieve License Server Certificate"
			OutputWarning $txt
		}
	}
	Else
	{
		$txt = "Unable to retrieve License Server Admin Address"
		OutputWarning $txt
	}
	Write-Verbose "$(Get-Date -Format G): "
}

Function OutputLicensingOverview
{
	Write-Verbose "$(Get-Date -Format G): `tOutput Licensing Overview"

	#V2.15 added getting the IP address for the license server
	$LicenseServerIPAddress = Get-IPAddress $Script:XDSite1.LicenseServerName
	
	#V2.21 add getting version
	#For 64-bit OS, navigate to HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Citrix\LicenseServer\Install
	#For 32-bit OS, navigate to HKEY_LOCAL_MACHINE\SOFTWARE\Citrix\LicenseServer\Install
	#Look for REG_SZ called Version -- This key contains the License server version
	$LicenseServerVersion = $Null
	$tmparray = $Script:XDSite1.LicenseServerName.Split(".")
	$ShortLicenseServerName = $tmparray[0]
	$tmparray = $Null
	$LicenseServerVersion = Get-RegistryValue2 "HKLM:\SOFTWARE\Wow6432Node\Citrix\LicenseServer\Install" "Version" $ShortLicenseServerName
	
	If([String]::IsNullOrEmpty($LicenseServerVersion))
	{
		$LicenseServerVersion = Get-RegistryValue2 "HKLM:\SOFTWARE\Citrix\LicenseServer\Install" "Version" $ShortLicenseServerName

		If([String]::IsNullOrEmpty($LicenseServerVersion))
		{
			$LicenseServerVersion = "Unable to retrieve License Server version"
		}
	}
	
	$LicenseEditionType = ""
	$LicenseModelType = ""

	If($Script:XDSite2.ProductCode -eq "XDT")
	{
		Switch ($Script:XDSite2.ProductEdition)
		{
			"PLT" 	{$LicenseEditionType = "Platinum Edition"; Break}
			"ENT" 	{$LicenseEditionType = "Enterprise Edition"; Break}
			"APP" 	{$LicenseEditionType = "App Edition"; Break}
			"STD" 	{$LicenseEditionType = "VDI Edition"; Break}
			Default {$LicenseEditionType = "License edition could not be determined: $($Script:XDSite2.ProductEdition)"; Break}
		}
	}
	ElseIf($Script:XDSite2.ProductCode -eq "MPS")
	{
		Switch ($Script:XDSite2.ProductEdition)
		{
			"PLT" 	{$LicenseEditionType = "Platinum Edition"; Break}
			"ENT" 	{$LicenseEditionType = "Enterprise Edition"; Break}
			"ADV" 	{$LicenseEditionType = "Advanced Edition"; Break}
			Default {$LicenseEditionType = "License edition could not be determined: $($Script:XDSite2.ProductEdition)"; Break}
		}
	}

	If($Script:XDSite1.LicenseModel -eq "UserDevice")
	{
		$LicenseModelType = "User/Device"
	}
	Else
	{
		$LicenseModelType = $Script:XDSite1.LicenseModel.ToString()
	}
	$tmpdate = '{0:yyyy\.MMdd}' -f $Script:XDSite1.LicensingBurnInDate
	
	If($MSWord -or $PDF)
	{
		$Selection.InsertNewPage()
		WriteWordLine 1 0 "Licensing"
		WriteWordLine 2 0 "Licensing Overview"

		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "Site"; Value = $Script:XDSite1.Name; }) > $Null
		$ScriptInformation.Add(@{Data = "Server"; Value = $Script:XDSite1.LicenseServerName; }) > $Null
		$ScriptInformation.Add(@{Data = "IP Address"; Value = $LicenseServerIPAddress; }) > $Null
		$ScriptInformation.Add(@{Data = "Port"; Value = $Script:XDSite1.LicenseServerPort; }) > $Null
		$ScriptInformation.Add(@{Data = "Edition"; Value = $LicenseEditionType; }) > $Null
		$ScriptInformation.Add(@{Data = "License model"; Value = $LicenseModelType; }) > $Null
		$ScriptInformation.Add(@{Data = "Required SA date"; Value = $tmpdate; }) > $Null
		$ScriptInformation.Add(@{Data = "XenDesktop license use"; Value = $Script:XDSite1.LicensedSessionsActive; }) > $Null
		$ScriptInformation.Add(@{Data = "Version"; Value = $LicenseServerVersion; }) > $Null
		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 125;
		$Table.Columns.Item(2).Width = 125;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
	}
	ElseIf($Text)
	{
		Line 0 "Licensing"
		Line 0 "Licensing Overview"
		Line 0 ""
		Line 0 "Site`t`t`t: " $Script:XDSite1.Name
		Line 0 "Server`t`t`t: " $Script:XDSite1.LicenseServerName
		Line 0 "IP Address`t`t: " $LicenseServerIPAddress
		Line 0 "Port`t`t`t: " $Script:XDSite1.LicenseServerPort
		Line 0 "Edition`t`t`t: " $LicenseEditionType
		Line 0 "License model`t`t: " $LicenseModelType
		Line 0 "Required SA date`t: " $tmpdate
		Line 0 "XenDesktop license use`t: " $Script:XDSite1.LicensedSessionsActive
		Line 0 "Version`t`t`t: " $LicenseServerVersion
		Line 0 ""
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 1 0 "Licensing"
		WriteHTMLLine 2 0 "Licensing Overview"
		$rowdata = @()
		$columnHeaders = @("Site",($global:htmlsb),$Script:XDSite1.Name,$htmlwhite)
		$rowdata += @(,('Server',($global:htmlsb),$Script:XDSite1.LicenseServerName,$htmlwhite))
		$rowdata += @(,("IP Address",($global:htmlsb),$LicenseServerIPAddress,$htmlwhite))
		$rowdata += @(,('Port',($global:htmlsb),$Script:XDSite1.LicenseServerPort,$htmlwhite))
		$rowdata += @(,('Edition',($global:htmlsb),$LicenseEditionType,$htmlwhite))
		$rowdata += @(,('License model',($global:htmlsb),$LicenseModelType,$htmlwhite))
		$rowdata += @(,('Required SA date',($global:htmlsb),$tmpdate,$htmlwhite))
		$rowdata += @(,('XenDesktop license use',($global:htmlsb),$Script:XDSite1.LicensedSessionsActive.ToString(),$htmlwhite))
		$rowdata += @(,('Version',($global:htmlsb),$LicenseServerVersion,$htmlwhite))

		$msg = ""
		$columnWidths = @("150","125")
		FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "275"
	}
	
	If($Hardware)
	{
		GetComputerWMIInfo $Script:XDSite1.LicenseServerName
	}
}

Function OutputXenDesktopLicenses
{
	Param([object]$LSAdminAddress, [object]$LSCertificate, [object]$ProductLicenses)
	
	Write-Verbose "$(Get-Date -Format G): `tOutput Licenses"
	[int]$NumLicenses = 0
	
	ForEach($Product in $ProductLicenses)
	{
		$LicModel = ""
		If($Product.LicenseProductName -eq $Script:XDSite2.ProductCode)
		{
			If($Product.LicenseModel -eq "UD")
			{
				$LicModel = "U/D"
			}
			Else
			{
				$LicModel = $Product.LicenseModel
			}
			$obj = [PSCustomObject] @{
				LicenseProduct = $Product.LicenseProductName			
				LicenseType    = $Product.LicenseEdition			
				LicenseModel   = $LicModel			
				LicenseCount   = $Product.LicensesAvailable			
			}
			$null = $Script:Licenses.Add($obj)
			$NumLicenses++
		}
	}

	If($NumLicenses -eq 0)
	{
		If($MSWord -or $PDF)
		{
			WriteWordLine 3 0 "XenDesktop Licenses"
			WriteWordLine 0 0 "Citrix Virtual Desktops 7 Premium (30-day trial)"
		}
		If($Text)
		{
			Line 0 "XenDesktop Licenses"
			Line 0 "Citrix Virtual Desktops 7 Premium (30-day trial)"
		}
		If($HTML)
		{
			WriteHTMLLine 3 0 "XenDesktop Licenses"
			WriteHTMLLine 0 0 "Citrix Virtual Desktops 7 Premium (30-day trial)"
		}
	}
	Else
	{
		If($MSWord -or $PDF)
		{
			WriteWordLine 3 0 "XenDesktop Licenses"
			$LicensesWordTable = @()
			ForEach($Product in $ProductLicenses)
			{
				If($Product.LicenseProductName -eq $Script:XDSite2.ProductCode)
				{
					If($Null -ne $Product.LicenseExpirationDate)
					{
						$tmpdate1 = '{0:d}' -f $Product.LicenseExpirationDate
					}
					Else
					{
						$tmpdate1 = "Permanent"
					}
					$tmpdate2 = '{0:yyyy\.MMdd}' -f $Product.LicenseSubscriptionAdvantageDate

					$LicensesWordTable += @{ 
					Product = $Product.LocalizedLicenseProductName;
					Mode = $Product.LocalizedLicenseModel;
					ExpirationDate = $tmpdate1;
					SubscriptionAdvantageDate = $tmpdate2;
					Type = $Product.LocalizedLicenseType;
					Quantity = $Product.LicensesAvailable;
					}
				}
			}
			$Table = AddWordTable -Hashtable $LicensesWordTable `
			-Columns Product, Mode, ExpirationDate, SubscriptionAdvantageDate, Type, Quantity `
			-Headers "Product", "Mode", "Expiration Date", "Subscription Advantage Date", "Type", "Quantity" `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 140;
			$Table.Columns.Item(2).Width = 70;
			$Table.Columns.Item(3).Width = 65;
			$Table.Columns.Item(4).Width = 90;
			$Table.Columns.Item(5).Width = 80;
			$Table.Columns.Item(6).Width = 55;
			
			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
		}
		ElseIf($Text)
		{
			Line 0 "XenDesktop Licenses"
			Line 0 ""
			ForEach($Product in $ProductLicenses)
			{
				If($Product.LicenseProductName -eq "XDT")
				{
					If($Null -ne $Product.LicenseExpirationDate)
					{
						$tmpdate1 = '{0:d}' -f $Product.LicenseExpirationDate
					}
					Else
					{
						$tmpdate1 = "Permanent"
					}
					$tmpdate2 = '{0:yyyy\.MMdd}' -f $Product.LicenseSubscriptionAdvantageDate
					Line 0 "Product`t`t`t`t: " $Product.LocalizedLicenseProductName
					Line 0 "Mode`t`t`t`t: " $Product.LocalizedLicenseModel
					Line 0 "Expiration Date`t`t`t: " $tmpdate1
					Line 0 "Subscription Advantage Date`t: " $tmpdate2
					Line 0 "Type`t`t`t`t: " $Product.LocalizedLicenseType
					Line 0 "Quantity`t`t`t: " $Product.LicensesAvailable
					Line 0 ""
				}
			}
		}
		ElseIf($HTML)
		{
			WriteHTMLLine 3 0 "XenDesktop Licenses"
			$rowdata = @()
			ForEach($Product in $ProductLicenses)
			{
				If($Product.LicenseProductName -eq "XDT")
				{
					If($Null -ne $Product.LicenseExpirationDate)
					{
						$tmpdate1 = '{0:d}' -f $Product.LicenseExpirationDate
					}
					Else
					{
						$tmpdate1 = "Permanent"
					}
					$tmpdate2 = '{0:yyyy\.MMdd}' -f $Product.LicenseSubscriptionAdvantageDate
					$rowdata += @(,(
					$Product.LocalizedLicenseProductName,$htmlwhite,
					$Product.LocalizedLicenseModel,$htmlwhite,
					$tmpdate1,$htmlwhite,
					$tmpdate2,$htmlwhite,
					$Product.LocalizedLicenseType,$htmlwhite,
					$Product.LicensesAvailable.ToString(),$htmlwhite))
				}
			}
			$columnHeaders = @(
			'Product',($global:htmlsb),
			'Mode',($global:htmlsb),
			'Expiration Date',($global:htmlsb),
			'Subscription Advantage Date',($global:htmlsb),
			'Type',($global:htmlsb),
			'Quantity',($global:htmlsb))

			$msg = ""
			$columnWidths = @("185","125","65","90","80","55")
			FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "600"
		}
	}
}

Function OutputLicenseAdmins
{
	Param([object]$LicenseAdmins)
	
	Write-Verbose "$(Get-Date -Format G): `tProcessing License Administrators"

	$txt = "License Administrators"
	If($MSWord -or $PDF)
	{
		WriteWordLine 3 0 $txt
	}
	ElseIf($Text)
	{
		Line 0 $txt
		Line 0 ""
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 3 0 $txt
	}

	If($MSWord -or $PDF)
	{
		$AdminsWordTable = @()
	}
	ElseIf($HTML)
	{
		$rowdata = @()
	}

	ForEach($Admin in $LicenseAdmins)
	{
		Write-Verbose "$(Get-Date -Format G): `t`tAdding Administrator $($Admin.Account)"

		If($MSWord -or $PDF)
		{
			$AdminsWordTable += @{
			AdminName = $Admin.Account; 
			Permissions = $Admin.Permissions; 
			}
		}
		ElseIf($Text)
		{
			Line 1 "Name`t`t: " $Admin.Account
			Line 1 "Permissions`t: " $Admin.Permissions
			Line 0 ""
		}
		ElseIf($HTML)
		{
			$rowdata += @(,(
			$Admin.Account,$htmlwhite,
			$Admin.Permissions,$htmlwhite))
		}
	}

	If($MSWord -or $PDF)
	{
		If($AdminsWordTable.Count -eq 0)
		{
			$AdminsWordTable += @{ 
			AdminName = "No admins found";
			Permissions = "N/A";
			}
		}

		$Table = AddWordTable -Hashtable $AdminsWordTable `
		-Columns  AdminName,Permissions `
		-Headers  "Name","Permissions" `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitContent;

		SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	ElseIf($HTML)
	{
		$columnHeaders = @(
		'Name',($global:htmlsb),
		'Permissions',($global:htmlsb))

		$msg = ""
		$columnWidths = @("150","125")
		FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "275"
	}
}

#endregion

#region StoreFront functions
Function ProcessStoreFront
{
	Write-Verbose "$(Get-Date -Format G): Processing StoreFront"
	
	If($MSWord -or $PDF)
	{
		$Selection.InsertNewPage()
		WriteWordLine 1 0 "StoreFront"
	}
	ElseIf($Text)
	{
		Line 0 "StoreFront"
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 1 0 "StoreFront"
	}
	
	Write-Verbose "$(Get-Date -Format G): `tRetrieving StoreFront information"
	$SFInfos = Get-BrokerMachineConfiguration @XDParams1 -Name rs* -SortBy LeafName
	If($? -and ($Null -ne $SFInfos))
	{
		$First = $True
		ForEach($SFInfo in $SFInfos)
		{
			$Script:TotalStoreFrontServers++

			$SFByteArray = $SFInfo.Policy
			Write-Verbose "$(Get-Date -Format G): `t`tRetrieving StoreFront server information for $($SFInfo.LeafName)"
			## GRL ad Try/Catch
            Try
            {
			    $SFServer = Get-SFStoreFrontAddress -ByteArray $SFByteArray 4>$Null
            }
            Catch
            {
                $SFServer = $null
            }
			If($? -and ($Null -ne $SFServer))
			{
				If($MSWord -or $PDF)
				{
					If(!$First)
					{
						$Selection.InsertNewPage()
					}
					$First = $False
				}
				OutputStoreFront $SFServer $SFInfo
				If($StoreFront)
				{
					If($SFInfo.DesktopGroupUids.Count -gt 0)
					{
						OutputStoreFrontDeliveryGroups $SFInfo
					}
					
					Write-Verbose "$(Get-Date -Format G): `t`tProcessing administrators for StoreFront server $($SFServer.Name)"
					$Admins = GetAdmins "Storefront"
					
					If($? -and ($Null -ne $Admins))
					{
						OutputAdminsForDetails $Admins
					}
					ElseIf($? -and ($Null -eq $Admins))
					{
						$txt = "There are no administrators for StoreFront server $($SFServer.Name)"
						OutputNotice $txt
					}
					Else
					{
						$txt = "Unable to retrieve administrators for StoreFront server $($SFServer.Name)"
						OutputWarning $txt
					}
				}
			}
			ElseIf($? -and ($Null -eq $SFServer))
			{
				$txt = "There was no StoreFront Server found for $($SFInfo.LeafName)"
				OutputNotice $txt
			}
			Else
			{
				$txt = "Unable to retrieve StoreFront Server for $($SFInfo.LeafName)"
				OutputWarning $txt
			}
		}
	}
	ElseIf($? -and ($Null -eq $SFInfos))
	{
		$txt = "StoreFront is not configured for this Site"
		OutputNotice $txt
	}
	Else
	{
		$txt = "Unable to retrieve StoreFront configuration"
		OutputWarning $txt
	}
	
	Write-Verbose "$(Get-Date -Format G): "
}

Function OutputStoreFront
{
	Param([object]$SFServer, [object] $SFInfo)
	
	$DGCnt = $SFInfo.DesktopGroupUids.Count
	
	Write-Verbose "$(Get-Date -Format G): `t`t`tOutput StoreFront server $($SFServer.Name)"
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Server: " $SFServer.Name
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "StoreFront Server"; Value = $SFServer.Name; }) > $Null
		$ScriptInformation.Add(@{Data = "Used by # Delivery Groups"; Value = $DGCnt.ToString(); }) > $Null
		$ScriptInformation.Add(@{Data = "URL"; Value = $SFServer.Url; }) > $Null
		$ScriptInformation.Add(@{Data = "Description"; Value = $SFServer.Description; }) > $Null
		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 150;
		$Table.Columns.Item(2).Width = 250;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	ElseIf($Text)
	{
		Line 0 "Server"
		Line 0 "StoreFront Server`t`t: " $SFServer.Name
		Line 0 "Used by # Delivery Groups`t: " $DGCnt.ToString()
		Line 0 "URL`t`t`t`t: " $SFServer.Url
		Line 0 "Description`t`t`t: " $SFServer.Description
		Line 0 ""
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 2 0 "Server: " $SFServer.Name
		$rowdata = @()
		$columnHeaders = @("StoreFront Server",($global:htmlsb),$SFServer.Name,$htmlwhite)
		$rowdata += @(,('Used by # Delivery Groups',($global:htmlsb),$DGCnt.ToString(),$htmlwhite))
		$rowdata += @(,('URL',($global:htmlsb),$SFServer.Url,$htmlwhite))
		$rowdata += @(,('Description',($global:htmlsb),$SFServer.Description,$htmlwhite))

		$msg = ""
		$columnWidths = @("150","250")
		FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "400"
	}
}

Function OutputStoreFrontDeliveryGroups
{
	Param([object] $SFInfo)
	
	$DeliveryGroups = @()
	ForEach($DGUid in $SFInfo.DesktopGroupUids)
	{
		$Results = Get-BrokerDesktopGroup @XDParams1 -Uid $DGUid
		If($? -and $Null -ne $Results)
		{
			$DeliveryGroups += $Results.Name
		}
	}

	$DeliveryGroups = $DeliveryGroups | Sort-Object Name
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 4 0 "Delivery Groups"
		$DGWordTable = @()
		ForEach($Group in $DeliveryGroups)
		{
			$DGWordTable += @{DGName = $Group;}
		}
		$Table = AddWordTable -Hashtable $DGWordTable `
		-Columns DGName `
		-Headers "Delivery Group" `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitContent;

		SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
	}
	ElseIf($Text)
	{
		Line 0 "Delivery Groups"
		Line 0 ""
		$cnt = -1
		ForEach($Group in $DeliveryGroups)
		{
			$cnt++
			If($cnt -eq 0)
			{
				Line 1 "Delivery Group: " $Group
			}
			Else
			{
				Line 3 "" $Group
			}
		}
		Line 0 ""
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 4 0 "Delivery Groups"
		$rowdata = @()
		ForEach($Group in $DeliveryGroups)
		{
			$rowdata += @(,($Group,$htmlwhite))
		}

		$columnHeaders = @(
		'Delivery Group',($global:htmlsb))

		$msg = ""
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders
	}
}
#endregion

#region AppV functions
Function ProcessAppV
{
	Write-Verbose "$(Get-Date -Format G): Processing App-V"
	
	If($MSWord -or $PDF)
	{
		$Selection.InsertNewPage()
		WriteWordLine 1 0 "App-V Publishing"
	}
	ElseIf($Text)
	{
		Line 0 "App-V Publishing"
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 1 0 "App-V Publishing"
	}
	
	Write-Verbose "$(Get-Date -Format G): `tRetrieving App-V configuration"
	$AppVConfigs = Get-BrokerMachineConfiguration @XDParams1 -Name appv* 4>$Null
	
	If($? -and $Null -ne $AppVConfigs)
	{
		Write-Verbose "$(Get-Date -Format G): `t`tRetrieving App-V server information"
		
		$AppVs = New-Object System.Collections.ArrayList
		ForEach($AppVConfig in $AppVConfigs)
		{
			$AppV = Get-CtxAppVServer -ByteArray $AppVConfig.Policy -EA 0 4>$Null
			If($? -and ($Null -ne $AppV))
			{
				$obj = [PSCustomObject] @{
					MgmtServer = $AppV.ManagementServer				
					PubServer  = $AppV.PublishingServer				
				}
				$null = $AppVs.Add($obj)
			}
			ElseIf($? -and ($Null -eq $AppV))
			{
				$txt = "There was no App-V server information found for $($AppVConfig.Policy)"
				OutputNotice $txt
			}
			Else
			{
				$txt = "Unable to retrieve App-V information for $($AppVConfig.Policy)"
				OutputWarning $txt
			}
		}
		
		$AppVs = $AppVs | Sort-Object MgmtServer
		
		OutputAppV $AppVs
	}
	ElseIf($? -and $Null -eq $AppVConfigs)
	{
		$txt = "App-V is not configured for this Site"
		OutputNotice $txt
	}
	Else
	{
		$txt = "Unable to retrieve App-V configuration"
		OutputWarning $txt
	}
	Write-Verbose "$(Get-Date -Format G): "
}

Function OutputAppV
{
	Param([object]$AppVs)
	
	Write-Verbose "$(Get-Date -Format G): `t`t`tOutput App-V server information"
	If($MSWord -or $PDF)
	{
		$AppVWordTable = @()
	}
	ElseIf($HTML)
	{
		$rowdata = @()
	}
	
	ForEach($AppV in $AppVs)
	{
		Write-Verbose "$(Get-Date -Format G): `t`t`tAdding AppV Server $($AppV.MgmtServer)"

		If($MSWord -or $PDF)
		{
			$AppVWordTable += @{
			MgmtServer = $AppV.MgmtServer; 
			PubServer = $AppV.PubServer; 
			}
		}
		ElseIf($Text)
		{
			Line 1 "App-V management server`t: " $AppV.MgmtServer
			Line 1 "App-V publishing server`t: " $AppV.PubServer
			Line 0 ""
		}
		ElseIf($HTML)
		{
			$rowdata += @(,(
			$AppV.MgmtServer,$htmlwhite,
			$AppV.PubServer,$htmlwhite))
		}
	}

	If($MSWord -or $PDF)
	{
		$Table = AddWordTable -Hashtable $AppVWordTable `
		-Columns  MgmtServer,PubServer `
		-Headers  "App-V management server","App-V publishing server" `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 250;
		$Table.Columns.Item(2).Width = 250;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	ElseIf($HTML)
	{
		$columnHeaders = @(
		'App-V management server',($global:htmlsb),
		'App-V publishing server',($global:htmlsb))

		$msg = ""
		$columnWidths = @("250","250")
		FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "500"
	}
}
#endregion

#region AppDNA functions
Function ProcessAppDNA
{
	Write-Verbose "$(Get-Date -Format G): Processing AppDNA"
	
	If($MSWord -or $PDF)
	{
		$Selection.InsertNewPage()
		WriteWordLine 1 0 "AppDNA Connection Settings"
	}
	ElseIf($Text)
	{
		Line 0 "AppDNA Connection Settings"
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 1 0 "AppDNA Connection Settings"
	}
	
	Write-Verbose "$(Get-Date -Format G): `tRetrieving AppDNA connection settings"
	$AppDNAConfig = Get-AppLibAppDNAConnection @XDParams1
	
	If($? -and $Null -ne $AppDNAConfig)
	{
		Write-Verbose "$(Get-Date -Format G): `t`tTesting AppDNA connection. Please wait..."
		$AppDNAConnection = Test-AppLibAppDNAExistingConnection -EA 0
		If($? -and ($Null -ne $AppDNAConnection))
		{
			$AppDNATest = "Passed"
		}
		Else
		{
			$AppDNATest = "Failed"
		}
		OutputAppDNA $AppDNAConfig $AppDNATest
	}
	ElseIf($? -and $Null -eq $AppDNAConfig)
	{
		$txt = "AppDNA is not configured for this Site"
		OutputNotice $txt
	}
	Else
	{
		$txt = "Unable to retrieve AppDNA configuration"
		OutputWarning $txt
	}
	Write-Verbose "$(Get-Date -Format G): "
}

Function OutputAppDNA
{
	Param([object]$AppDNAConfig, [string]$AppDNATest)
	
	$AppDNAState = "Disabled"
	If($AppDNAConfig.Enabled)
	{
		$AppDNAState = "Enabled"
	}
	
	Write-Verbose "$(Get-Date -Format G): `t`t`tOutput AppDNA connection information"
	If($MSWord -or $PDF)
	{
		$ScriptInformation = New-Object System.Collections.ArrayList
		$ScriptInformation.Add(@{Data = "URL"; Value = $AppDNAConfig.Address; }) > $Null
		$ScriptInformation.Add(@{Data = "Database"; Value = $AppDNAConfig.Database; }) > $Null
		$ScriptInformation.Add(@{Data = "User name"; Value = $AppDNAConfig.UserName; }) > $Null
		$ScriptInformation.Add(@{Data = "State"; Value = $AppDNAState; }) > $Null
		$ScriptInformation.Add(@{Data = "Test connection"; Value = $AppDNATest; }) > $Null
		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 250;
		$Table.Columns.Item(2).Width = 250;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	ElseIf($Text)
	{
		Line 1 "URL`t`t: " $AppDNAConfig.Address
		Line 1 "Database`t: " $AppDNAConfig.Database
		Line 1 "User name`t: " $AppDNAConfig.UserName
		Line 1 "State`t`t: " $AppDNAState
		Line 1 "Test connection`t: " $AppDNATest
		Line 0 ""
	}
	ElseIf($HTML)
	{
		$rowdata = @()
		$columnHeaders = @("URL",($global:htmlsb),$AppDNAConfig.Address,$htmlwhite)
		$rowdata += @(,('Database',($global:htmlsb),$AppDNAConfig.Database,$htmlwhite))
		$rowdata += @(,('User name',($global:htmlsb),$AppDNAConfig.UserName,$htmlwhite))
		$rowdata += @(,('State',($global:htmlsb),$AppDNAState,$htmlwhite))
		$rowdata += @(,('Test connection',($global:htmlsb),$AppDNATest,$htmlwhite))

		$msg = ""
		$columnWidths = @("250","250")
		FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths
	}
}
#endregion

#region zones
Function ProcessZones
{
	Write-Verbose "$(Get-Date -Format G): Processing Zones"
	
	If($MSWord -or $PDF)
	{
		$Selection.InsertNewPage()
		WriteWordLine 1 0 "Zones"
	}
	ElseIf($Text)
	{
		Line 0 "Zones"
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 1 0 "Zones"
	}
	
	#get all zone names
	Write-Verbose "$(Get-Date -Format G): `tRetrieving All Zones"
	$Zones = Get-ConfigZone @XDParams1 -SortBy Name
	$ZoneMembers = New-Object System.Collections.ArrayList
	
	ForEach($Zone in $Zones)
	{
		$Script:TotalZones++
		Write-Verbose "$(Get-Date -Format G): `t`tRetrieving Machine Catalogs for Zone $($Zone.Name)"
		$ZoneCatalogs = Get-BrokerCatalog @XDParams2 -ZoneUid $Zone.Uid
		ForEach($ZoneCatalog in $ZoneCatalogs)
		{
			$obj = [PSCustomObject] @{
				MemName = $ZoneCatalog.Name			
				MemDesc = $ZoneCatalog.Description			
				MemType = "Machine Catalog"			
				MemZone = $Zone.Name			
			}
			$null = $ZoneMembers.Add($obj)
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`tRetrieving Delivery Controllers for Zone $($Zone.Name)"
		$ZoneControllers = $Zone.ControllerNames
		ForEach($ZoneController in $ZoneControllers)
		{
			$Results = Get-BrokerController -EA 0 | Where-Object{$_.MachineName -Like "*$($ZoneController)"}
			
			If($? -and $Null -ne $Results)
			{
				$obj = [PSCustomObject] @{
					MemName = $ZoneController			
					MemDesc = $Results.DNSName			
					MemType = "Delivery Controller"		
					MemZone = $Zone.Name			
				}
				$null = $ZoneMembers.Add($obj)
			}
		}

		Write-Verbose "$(Get-Date -Format G): `t`tRetrieving Host Connections for Zone $($Zone.Name)"
		$ZoneHosts = Get-ChildItem @XDParams1 -path 'xdhyp:\connections' 4>$Null | Where-Object{$_.ZoneUid -eq $Zone.Uid}
		ForEach($ZoneHost in $ZoneHosts)
		{
			$obj = [PSCustomObject] @{
				MemName = $ZoneHost.HypervisorConnectionName			
				MemDesc = ""			
				MemType = "Host Connection"		
				MemZone = $Zone.Name			
			}
			$null = $ZoneMembers.Add($obj)
		}
	}
	
	OutputZoneSiteView $ZoneMembers
	
	OutputPerZoneView $ZoneMembers $Zones
}

Function OutputZoneSiteView
{
	Param([array]$ZoneMembers)
	
	Write-Verbose "$(Get-Date -Format G): `tOutput Zone Site View"
	$ZoneMembers = $ZoneMembers | Sort-Object MemName
	
	If($MSWord -or $PDF)
	{
		WriteWordLine 2 0 "Site View"
		$ZoneWordTable = @()

		ForEach($ZoneMember in $ZoneMembers)
		{
			$ZoneWordTable += @{ 
			xName = $ZoneMember.MemName;
			xDesc = $ZoneMember.MemDesc;
			xType = $ZoneMember.MemType;
			xZone = $ZoneMember.MemZone;
			}
		}

		$Table = AddWordTable -Hashtable $ZoneWordTable `
		-Columns xName, xDesc, xType, xZone `
		-Headers "Name", "Description", "Type", "Zone" `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 125;
		$Table.Columns.Item(2).Width = 175;
		$Table.Columns.Item(3).Width = 100;
		$Table.Columns.Item(4).Width = 100;
		
		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
	}
	ElseIf($Text)
	{
		Line 0 "Site View"
		Line 0 ""
		ForEach($ZoneMember in $ZoneMembers)
		{
			Line 1 "Name`t`t: " $ZoneMember.MemName
			Line 1 "Description`t: " $ZoneMember.MemDesc
			Line 1 "Type`t`t: " $ZoneMember.MemType
			Line 1 "Zone`t`t: " $ZoneMember.MemZone
			Line 0 ""
		}
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 2 0 "Site View"
		$rowdata = @()
		ForEach($ZoneMember in $ZoneMembers)
		{
			$rowdata += @(,(
			$ZoneMember.MemName,$htmlwhite,
			$ZoneMember.MemDesc,$htmlwhite,
			$ZoneMember.MemType,$htmlwhite,
			$ZoneMember.MemZone,$htmlwhite))
		}
		
		$columnHeaders = @(
		'Name',($global:htmlsb),
		'Description',($global:htmlsb),
		'Type',($global:htmlsb),
		'Zone',($global:htmlsb))

		$msg = ""
		$columnWidths = @("150","200","150","150")
		FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "650"
	}
}

Function OutputPerZoneView
{
	Param([array]$ZoneMembers, [object]$Zones)
	
	Write-Verbose "$(Get-Date -Format G): `tOutput Per Zone View"
	$ZoneMembers = $ZoneMembers | Sort-Object MemZone, MemName

	ForEach($Zone in $Zones)
	{
		$TmpZoneMembers = $ZoneMembers | Where-Object{$_.MemZone -eq $Zone.Name}
		
		If($MSWord -or $PDF)
		{
			WriteWordLine 2 0 $Zone.Name
			If($TmpZoneMembers -is [array])
			{
				WriteWordLine 0 0 "There are no zone members for Zone " $Zone.Name
			}
			Else
			{
				$ZoneWordTable = @()

				ForEach($ZoneMember in $TmpZoneMembers)
				{
					$ZoneWordTable += @{ 
					xName = $ZoneMember.MemName;
					xDesc = $ZoneMember.MemDesc;
					xType = $ZoneMember.MemType;
					}
				}

				$Table = AddWordTable -Hashtable $ZoneWordTable `
				-Columns xName, xDesc, xType `
				-Headers "Name", "Description", "Type" `
				-Format $wdTableGrid `
				-AutoFit $wdAutoFitFixed;

				SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

				$Table.Columns.Item(1).Width = 175;
				$Table.Columns.Item(2).Width = 100;
				$Table.Columns.Item(3).Width = 125;
				
				$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

				FindWordDocumentEnd
				$Table = $Null
			}
			WriteWordLine 0 0 ""
		}
		If($Text)
		{
			Line 0 $Zone.Name
			Line 0 ""
			
			If($TmpZoneMembers -is [array])
			{
				Line 1 "There are no zone members for Zone " $Zone.Name
				Line 0 ""
			}
			Else
			{
				ForEach($ZoneMember in $TmpZoneMembers)
				{
					Line 1 "Name`t`t: " $ZoneMember.MemName
					Line 1 "Description`t: " $ZoneMember.MemDesc
					Line 1 "Type`t`t: " $ZoneMember.MemType
					Line 0 ""
				}
			}
		}
		If($HTML)
		{
			WriteHTMLLine 2 0 $Zone.Name
			If($TmpZoneMembers -is [array])
			{
				WriteHTMLLine 0 0 "There are no zone members for Zone " $Zone.Name
			}
			Else
			{
				$rowdata = @()
				ForEach($ZoneMember in $TmpZoneMembers)
				{
					$rowdata += @(,(
					$ZoneMember.MemName,$htmlwhite,
					$ZoneMember.MemDesc,$htmlwhite,
					$ZoneMember.MemType,$htmlwhite))
				}
				
				$columnHeaders = @(
				'Name',($global:htmlsb),
				'Description',($global:htmlsb),
				'Type',($global:htmlsb))

				$msg = ""
				$columnWidths = @("150","200","150")
				FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "500"
			}
		}
	}
	Write-Verbose "$(Get-Date -Format G): "
}
#endregion

#region summary page
Function OutputSummaryPage
{
	#summary page
	Write-Verbose "$(Get-Date -Format G): Create Summary Page"
	
	If($MSWord -or $PDF)
	{
		$selection.InsertNewPage()
		WriteWordLine 1 0 "XenDesktop $($XDSiteName) Summary Page"
	}
	ElseIf($Text)
	{
		Line 0 ""
		Line 0 "XenDesktop $($XDSiteName) Summary Page"
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 1 0 "XenDesktop $($XDSiteName) Summary Page"
	}

	If($MSWord -or $PDF)
	{
		$ScriptInformation = New-Object System.Collections.ArrayList
		WriteWordLine 4 0 "Machine Catalogs"
		#updated for CVAD 1909 in V2.28
		If($Script:XDSiteVersion -ge 7.23)
		{
			$ScriptInformation.Add(@{Data = "Total Multi-session OS Catalogs"; Value = $Script:TotalServerOSCatalogs.ToString(); }) > $Null
			$ScriptInformation.Add(@{Data = 'Total Single-session OS Catalogs'; Value = $Script:TotalDesktopOSCatalogs.ToString(); }) > $Null
		}
		Else
		{
			$ScriptInformation.Add(@{Data = "Total Server OS Catalogs"; Value = $Script:TotalServerOSCatalogs.ToString(); }) > $Null
			$ScriptInformation.Add(@{Data = 'Total Desktop OS Catalogs'; Value = $Script:TotalDesktopOSCatalogs.ToString(); }) > $Null
		}
		$ScriptInformation.Add(@{Data = 'Total RemotePC Catalogs'; Value = $Script:TotalRemotePCCatalogs.ToString(); }) > $Null
		$ScriptInformation.Add(@{Data = '     Total Machine Catalogs'; Value = ($Script:TotalServerOSCatalogs+$Script:TotalDesktopOSCatalogs+$Script:TotalRemotePCCatalogs).ToString(); }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 200;
		$Table.Columns.Item(2).Width = 50;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
		
		$ScriptInformation = New-Object System.Collections.ArrayList
		WriteWordLine 4 0 "AppDisks"
		$ScriptInformation.Add(@{Data = "     Total AppDisks"; Value = $Script:TotalAppDisks.ToString(); }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 200;
		$Table.Columns.Item(2).Width = 50;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""

		$ScriptInformation = New-Object System.Collections.ArrayList
		WriteWordLine 4 0 "Delivery Groups"
		$ScriptInformation.Add(@{Data = "Total Application Groups"; Value = $Script:TotalApplicationGroups.ToString(); }) > $Null
		$ScriptInformation.Add(@{Data = 'Total Desktop Groups'; Value = $Script:TotalDesktopGroups.ToString(); }) > $Null
		$ScriptInformation.Add(@{Data = 'Total Apps & Desktop Groups'; Value = $Script:TotalAppsAndDesktopGroups.ToString(); }) > $Null
		$ScriptInformation.Add(@{Data = '     Total Delivery Groups'; Value = ($Script:TotalApplicationGroups+$Script:TotalDesktopGroups+$Script:TotalAppsAndDesktopGroups).ToString(); }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 200;
		$Table.Columns.Item(2).Width = 50;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""

		$ScriptInformation = New-Object System.Collections.ArrayList
		WriteWordLine 4 0 "Applications"
		$ScriptInformation.Add(@{Data = "Total Published Applications"; Value = $Script:TotalPublishedApplications.ToString(); }) > $Null
		$ScriptInformation.Add(@{Data = 'Total App-V Applications'; Value = $Script:TotalAppvApplications.ToString(); }) > $Null
		$ScriptInformation.Add(@{Data = '     Total Applications'; Value = ($Script:TotalPublishedApplications + $Script:TotalAppvApplications).ToString(); }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 200;
		$Table.Columns.Item(2).Width = 50;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
		
		If($Policies -eq $True)
		{
			$ScriptInformation = New-Object System.Collections.ArrayList
			WriteWordLine 4 0 "Policies"
			$ScriptInformation.Add(@{Data = "Total Computer Policies"; Value = $Script:TotalComputerPolicies.ToString(); }) > $Null
			$ScriptInformation.Add(@{Data = 'Total User Policies'; Value = $Script:TotalUserPolicies.ToString(); }) > $Null
			$ScriptInformation.Add(@{Data = '     Total Policies'; Value = $Script:TotalPolicies.ToString(); }) > $Null
			$ScriptInformation.Add(@{Data = ''; Value = ""; }) > $Null
			$ScriptInformation.Add(@{Data = 'Site Policies'; Value = $Script:TotalSitePolicies.ToString(); }) > $Null
			If($NoADPolicies -eq $False)
			{
				#V2.10 add a space 
				$ScriptInformation.Add(@{Data = "Citrix AD Policies Processed"; Value = "$($Script:TotalADPolicies) *"; }) > $Null
				$ScriptInformation.Add(@{Data = 'Citrix AD Policies not Processed'; Value = $Script:TotalADPoliciesNotProcessed.ToString(); }) > $Null
			}

			$Table = AddWordTable -Hashtable $ScriptInformation `
			-Columns Data,Value `
			-List `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitFixed;

			SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Columns.Item(1).Width = 200;
			$Table.Columns.Item(2).Width = 50;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
			WriteWordLine 0 0 '* (AD Policies can contain multiple Citrix policies)' "" $Null 8 $False $True
			WriteWordLine 0 0 ""
		}
		
		$ScriptInformation = New-Object System.Collections.ArrayList
		WriteWordLine 4 0 "Administrators"
		$ScriptInformation.Add(@{Data = "Total Delivery Group Admins"; Value = $Script:TotalDeliveryGroupAdmins.ToString(); }) > $Null
		$ScriptInformation.Add(@{Data = 'Total Full Admins'; Value = $Script:TotalFullAdmins.ToString(); }) > $Null
		$ScriptInformation.Add(@{Data = 'Total Help Desk Admins'; Value = $Script:TotalHelpDeskAdmins.ToString(); }) > $Null
		$ScriptInformation.Add(@{Data = 'Total Host Admins'; Value = $Script:TotalHostAdmins.ToString(); }) > $Null
		$ScriptInformation.Add(@{Data = 'Total Machine Catalog Admins'; Value = $Script:TotalMachineCatalogAdmins.ToString(); }) > $Null
		$ScriptInformation.Add(@{Data = 'Total Read Only Admins'; Value = $Script:TotalReadOnlyAdmins.ToString(); }) > $Null
		$ScriptInformation.Add(@{Data = 'Total Custom Admins'; Value = $Script:TotalCustomAdmins.ToString(); }) > $Null
		$ScriptInformation.Add(@{Data = '     Total Administrators'; Value = ($Script:TotalDeliveryGroupAdmins+$Script:TotalFullAdmins+$Script:TotalHelpDeskAdmins+$Script:TotalHostAdmins+$Script:TotalMachineCatalogAdmins+$Script:TotalReadOnlyAdmins+$Script:TotalCustomAdmins).ToString(); }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 200;
		$Table.Columns.Item(2).Width = 50;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""

		$ScriptInformation = New-Object System.Collections.ArrayList
		WriteWordLine 4 0 "Controllers"
		$ScriptInformation.Add(@{Data = "     Total Controllers"; Value = $Script:TotalControllers.ToString(); }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 200;
		$Table.Columns.Item(2).Width = 50;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""

		$ScriptInformation = New-Object System.Collections.ArrayList
		WriteWordLine 4 0 "Hosting Connections"
		$ScriptInformation.Add(@{Data = "     Total Hosting Connections"; Value = $Script:TotalHostingConnections.ToString(); }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 200;
		$Table.Columns.Item(2).Width = 50;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""

		$ScriptInformation = New-Object System.Collections.ArrayList
		WriteWordLine 4 0 "Licensing"
		$TotalLicenses = 0
		$cnt = 0
		ForEach($License in $Script:Licenses)
		{
			$cnt++
			
			If($cnt -eq 1)
			{
				$ScriptInformation.Add(@{Data = "$($License.LicenseProduct) $($License.LicenseType) $($License.LicenseModel)"; Value = $License.LicenseCount.ToString(); }) > $Null
			}
			Else
			{
				$ScriptInformation.Add(@{Data = "$($License.LicenseProduct) $($License.LicenseType) $($License.LicenseModel)"; Value = $License.LicenseCount.ToString(); }) > $Null
			}
			$TotalLicenses += $License.LicenseCount
		}
		$ScriptInformation.Add(@{Data = '     Total Licenses'; Value = $TotalLicenses.ToString(); }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 200;
		$Table.Columns.Item(2).Width = 50;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""

		$ScriptInformation = New-Object System.Collections.ArrayList
		WriteWordLine 4 0 "StoreFront"
		$ScriptInformation.Add(@{Data = "     Total StoreFront Servers"; Value = $Script:TotalStoreFrontServers.ToString(); }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 200;
		$Table.Columns.Item(2).Width = 50;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""

		$ScriptInformation = New-Object System.Collections.ArrayList
		WriteWordLine 4 0 "Zones"
		$ScriptInformation.Add(@{Data = "     Total Zones"; Value = $Script:TotalZones.ToString(); }) > $Null

		$Table = AddWordTable -Hashtable $ScriptInformation `
		-Columns Data,Value `
		-List `
		-Format $wdTableGrid `
		-AutoFit $wdAutoFitFixed;

		SetWordCellFormat -Collection $Table.Columns.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

		$Table.Columns.Item(1).Width = 200;
		$Table.Columns.Item(2).Width = 50;

		$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

		FindWordDocumentEnd
		$Table = $Null
		WriteWordLine 0 0 ""
	}
	ElseIf($Text)
	{
		Line 0 "Machine Catalogs"
		#updated for CVAD 1909 in V2.28
		If($Script:XDSiteVersion -ge 7.23)
		{
			Line 1 "Total Multi-session OS Catalogs`t: " $Script:TotalServerOSCatalogs
			Line 1 "Total Single-session OS Catalogs: " $Script:TotalDesktopOSCatalogs
		}
		Else
		{
			Line 1 "Total Server OS Catalogs`t: " $Script:TotalServerOSCatalogs
			Line 1 "Total Desktop OS Catalogs`t: " $Script:TotalDesktopOSCatalogs
		}
		Line 1 "Total RemotePC Catalogs`t`t: " $Script:TotalRemotePCCatalogs
		Line 2 "Total Machine Catalogs`t: " ($Script:TotalServerOSCatalogs+$Script:TotalDesktopOSCatalogs+$Script:TotalRemotePCCatalogs)
		Line 0 ""
		Line 0 "AppDisks"
		Line 1 "Total AppDisks`t`t`t: " $Script:TotalAppDisks
		Line 0 ""
		Line 0 "Delivery Groups"
		Line 1 "Total Application Groups`t: " $Script:TotalApplicationGroups
		Line 1 "Total Desktop Groups`t`t: " $Script:TotalDesktopGroups
		Line 1 "Total Apps & Desktop Groups`t: " $Script:TotalAppsAndDesktopGroups
		Line 2 "Total Delivery Groups`t: " ($Script:TotalApplicationGroups+$Script:TotalDesktopGroups+$Script:TotalAppsAndDesktopGroups)
		Line 0 ""
		Line 0 "Applications"
		Line 1 "Total Published Applications`t: " $Script:TotalPublishedApplications
		Line 1 "Total App-V Applications`t: " $Script:TotalAppvApplications
		Line 2 "Total Applications`t: " ($Script:TotalPublishedApplications + $Script:TotalAppvApplications)
		Line 0 ""
		
		If($Policies -eq $True)
		{
			Line 0 "Policies"
			Line 1 "Total Computer Policies`t`t: " $Script:TotalComputerPolicies
			Line 1 "Total User Policies`t`t: " $Script:TotalUserPolicies
			Line 2 "Total Policies`t`t: " $Script:TotalPolicies
			Line 0 ""
			Line 1 "Site Policies`t`t`t: " $Script:TotalSitePolicies
			
			If($NoADPolicies -eq $False)
			{
				#V2.10 add a space 
				Line 1 "Citrix AD Policies Processed`t: $($Script:TotalADPolicies)`t (AD Policies can contain multiple Citrix policies)"
				Line 1 "Citrix AD Policies not Processed: " $Script:TotalADPoliciesNotProcessed
			}
			Line 0 ""
		}
		
		Line 0 "Administrators"
		Line 1 "Total Delivery Group Admins`t: " $Script:TotalDeliveryGroupAdmins
		Line 1 "Total Full Admins`t`t: " $Script:TotalFullAdmins
		Line 1 "Total Help Desk Admins`t`t: " $Script:TotalHelpDeskAdmins
		Line 1 "Total Host Admins`t`t: " $Script:TotalHostAdmins
		Line 1 "Total Machine Catalog Admins`t: " $Script:TotalMachineCatalogAdmins
		Line 1 "Total Read Only Admins`t`t: " $Script:TotalReadOnlyAdmins
		Line 1 "Total Custom Admins`t`t: " $Script:TotalCustomAdmins
		Line 2 "Total Administrators`t: " ($Script:TotalDeliveryGroupAdmins+$Script:TotalFullAdmins+$Script:TotalHelpDeskAdmins+$Script:TotalHostAdmins+$Script:TotalMachineCatalogAdmins+$Script:TotalReadOnlyAdmins+$Script:TotalCustomAdmins)
		Line 0 ""
		Line 0 "Controllers"
		Line 1 "Total Controllers`t`t: " $Script:TotalControllers
		Line 0 ""
		Line 0 "Hosting Connections"
		Line 1 "Total Hosting Connections`t: " $Script:TotalHostingConnections
		Line 0 ""
		Line 0 "Licensing"
		$TotalLicenses = 0
		ForEach($License in $Script:Licenses)
		{
			Line 1 "$($License.LicenseProduct) $($License.LicenseType) $($License.LicenseModel)`t`t`t: $($License.LicenseCount)"
			$TotalLicenses += $License.LicenseCount
		}
		Line 2 "Total Licenses`t`t: " $TotalLicenses
		Line 0 ""
		Line 0 "StoreFront"
		Line 1 "Total StoreFront Servers`t: " $Script:TotalStoreFrontServers
		Line 0 ""
		Line 0 "Zones"
		Line 1 "Total Zones`t`t`t: " $Script:TotalZones
		Line 0 ""
	}
	ElseIf($HTML)
	{
		$rowdata = @()
		#updated for CVAD 1909 in V2.28
		If($Script:XDSiteVersion -ge 7.23)
		{
			$columnHeaders = @("Total Multi-session OS Catalogs",($global:htmlsb),$Script:TotalServerOSCatalogs.ToString(),$htmlwhite)
			$rowdata += @(,('Total Single-session OS Catalogs',($global:htmlsb),$Script:TotalDesktopOSCatalogs.ToString(),$htmlwhite))
		}
		Else
		{
			$columnHeaders = @("Total Server OS Catalogs",($global:htmlsb),$Script:TotalServerOSCatalogs.ToString(),$htmlwhite)
			$rowdata += @(,('Total Desktop OS Catalogs',($global:htmlsb),$Script:TotalDesktopOSCatalogs.ToString(),$htmlwhite))
		}
		$rowdata += @(,('Total RemotePC Catalogs',($global:htmlsb),$Script:TotalRemotePCCatalogs.ToString(),$htmlwhite))
		$rowdata += @(,('     Total Machine Catalogs',($global:htmlsb),($Script:TotalServerOSCatalogs+$Script:TotalDesktopOSCatalogs+$Script:TotalRemotePCCatalogs).ToString(),$htmlwhite))

		$msg = "Machine Catalogs"
		$columnWidths = @("200","50")
		FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "250"
		
		$rowdata = @()
		$columnHeaders = @("     Total AppDisks",($global:htmlsb),$Script:TotalAppDisks.ToString(),$htmlwhite)

		$msg = "AppDisks"
		$columnWidths = @("200","50")
		FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "250"

		$rowdata = @()
		$columnHeaders = @("Total Application Groups",($global:htmlsb),$Script:TotalApplicationGroups.ToString(),$htmlwhite)
		$rowdata += @(,('Total Desktop Groups',($global:htmlsb),$Script:TotalDesktopGroups.ToString(),$htmlwhite))
		$rowdata += @(,('Total Apps & Desktop Groups',($global:htmlsb),$Script:TotalAppsAndDesktopGroups.ToString(),$htmlwhite))
		$rowdata += @(,('     Total Delivery Groups',($global:htmlsb),($Script:TotalApplicationGroups+$Script:TotalDesktopGroups+$Script:TotalAppsAndDesktopGroups).ToString(),$htmlwhite))

		$msg = "Delivery Groups"
		$columnWidths = @("200","50")
		FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "250"

		$rowdata = @()
		$columnHeaders = @("Total Published Applications",($global:htmlsb),$Script:TotalPublishedApplications.ToString(),$htmlwhite)
		$rowdata += @(,('Total App-V Applications',($global:htmlsb),$Script:TotalAppvApplications.ToString(),$htmlwhite))
		$rowdata += @(,('     Total Applications',($global:htmlsb),($Script:TotalPublishedApplications + $Script:TotalAppvApplications).ToString(),$htmlwhite))

		$msg = "Applications"
		$columnWidths = @("200","50")
		FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "250"
		
		If($Policies -eq $True)
		{
			$rowdata = @()
			$columnHeaders = @("Total Computer Policies",($global:htmlsb),$Script:TotalComputerPolicies.ToString(),$htmlwhite)
			$rowdata += @(,('Total User Policies',($global:htmlsb),$Script:TotalUserPolicies.ToString(),$htmlwhite))
			$rowdata += @(,('     Total Policies',($global:htmlsb),$Script:TotalPolicies.ToString(),$htmlwhite))
			$rowdata += @(,('',($global:htmlsb),"",$htmlwhite))
			$rowdata += @(,('Site Policies',($global:htmlsb),$Script:TotalSitePolicies.ToString(),$htmlwhite))
			If($NoADPolicies -eq $False)
			{
				#V2.10 add a space 
				$rowdata += @(,("Citrix AD Policies Processed",($global:htmlsb),"$($Script:TotalADPolicies) *",$htmlwhite))
				$rowdata += @(,('Citrix AD Policies not Processed',($global:htmlsb),$Script:TotalADPoliciesNotProcessed.ToString(),$htmlwhite))
			}

			$msg = "Policies"
			$columnWidths = @("200","50")
			FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "250"
			WriteHTMLLine 0 0 '* (AD Policies can contain multiple Citrix policies)' "" "Calibri" 1 $htmlbold
		}
		
		$rowdata = @()
		$columnHeaders = @("Total Delivery Group Admins",($global:htmlsb),$Script:TotalDeliveryGroupAdmins.ToString(),$htmlwhite)
		$rowdata += @(,('Total Full Admins',($global:htmlsb),$Script:TotalFullAdmins.ToString(),$htmlwhite))
		$rowdata += @(,('Total Help Desk Admins',($global:htmlsb),$Script:TotalHelpDeskAdmins.ToString(),$htmlwhite))
		$rowdata += @(,('Total Host Admins',($global:htmlsb),$Script:TotalHostAdmins.ToString(),$htmlwhite))
		$rowdata += @(,('Total Machine Catalog Admins',($global:htmlsb),$Script:TotalMachineCatalogAdmins.ToString(),$htmlwhite))
		$rowdata += @(,('Total Read Only Admins',($global:htmlsb),$Script:TotalReadOnlyAdmins.ToString(),$htmlwhite))
		$rowdata += @(,('Total Custom Admins',($global:htmlsb),$Script:TotalCustomAdmins.ToString(),$htmlwhite))
		$rowdata += @(,('     Total Administrators',($global:htmlsb),($Script:TotalDeliveryGroupAdmins+$Script:TotalFullAdmins+$Script:TotalHelpDeskAdmins+$Script:TotalHostAdmins+$Script:TotalMachineCatalogAdmins+$Script:TotalReadOnlyAdmins+$Script:TotalCustomAdmins).ToString(),$htmlwhite))

		$msg = "Administrators"
		$columnWidths = @("200","50")
		FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "250"

		$rowdata = @()
		$columnHeaders = @("     Total Controllers",($global:htmlsb),$Script:TotalControllers.ToString(),$htmlwhite)

		$msg = "Controllers"
		$columnWidths = @("200","50")
		FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "250"

		$rowdata = @()
		$columnHeaders = @("     Total Hosting Connections",($global:htmlsb),$Script:TotalHostingConnections.ToString(),$htmlwhite)

		$msg = "Hosting Connections"
		$columnWidths = @("200","50")
		FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "250"

		$rowdata = @()
		$TotalLicenses = 0
		$cnt = 0
		ForEach($License in $Script:Licenses)
		{
			$cnt++
			
			If($cnt -eq 1)
			{
				$columnHeaders = @("$($License.LicenseProduct) $($License.LicenseType) $($License.LicenseModel)",($global:htmlsb),$License.LicenseCount.ToString(),$htmlwhite)
			}
			Else
			{
				$rowdata += @(,("$($License.LicenseProduct) $($License.LicenseType) $($License.LicenseModel)",($global:htmlsb),$License.LicenseCount.ToString(),$htmlwhite))
			}
			$TotalLicenses += $License.LicenseCount
		}
		$rowdata += @(,('     Total Licenses',($global:htmlsb),$TotalLicenses.ToString(),$htmlwhite))

		$msg = "Licensing"
		$columnWidths = @("200","50")
		FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "250"

		$rowdata = @()
		$columnHeaders = @("     Total StoreFront Servers",($global:htmlsb),$Script:TotalStoreFrontServers.ToString(),$htmlwhite)

		$msg = "StoreFront"
		$columnWidths = @("200","50")
		FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "250"

		$rowdata = @()
		$columnHeaders = @("     Total Zones",($global:htmlsb),$Script:TotalZones.ToString(),$htmlwhite)

		$msg = "Zones"
		$columnWidths = @("200","50")
		FormatHTMLTable $msg -rowArray $rowdata -columnArray $columnHeaders -fixedWidth $columnWidths -tablewidth "250"
	}

	Write-Verbose "$(Get-Date -Format G): Finished Create Summary Page"
	Write-Verbose "$(Get-Date -Format G): "
}
#endregion

#region script setup function
Function ProcessScriptSetup
{
	$script:startTime = Get-Date

	If(!(Check-NeededPSSnapins "Citrix.AdIdentity.Admin.V2",
	"Citrix.Analytics.Admin.V1",
	"Citrix.AppLibrary.Admin.V1",
	"Citrix.AppV.Admin.V1",
	"Citrix.Broker.Admin.V2",
	"Citrix.Common.GroupPolicy",
	"Citrix.Configuration.Admin.V2",
	"Citrix.ConfigurationLogging.Admin.V1",
	"Citrix.DelegatedAdmin.Admin.V1",
	"Citrix.Host.Admin.V2",
	"Citrix.Licensing.Admin.V1",
	"Citrix.MachineCreation.Admin.V2",
	"Citrix.Monitor.Admin.V1",
	"Citrix.Storefront.Admin.V1"))

	# removed "Citrix.Common.Commands" as is it not used and removed in 7.13
	{
		#We're missing Citrix Snapins that we need
		$ErrorActionPreference = $SaveEAPreference
		If(Get-Command Get-ConfigSite -EA 0)
		{
			$XDSite2 = Get-ConfigSite -AdminAddress $AdminAddress -EA 0

			[version]$CVADSiteVersion = $XDSite2.ProductVersion
			$CVADSiteVersionReal = "Unknown"
			Switch ($CVADSiteVersion)
			{
				"7.37"	{$CVADSiteVersionReal = "CVAD 2303"; Break}
				"7.36"	{$CVADSiteVersionReal = "CVAD 2212"; Break}
				"7.35"	{$CVADSiteVersionReal = "CVAD 2209"; Break}
				"7.34"	{$CVADSiteVersionReal = "CVAD 2206"; Break}
				"7.33"	{$CVADSiteVersionReal = "CVAD 2203"; Break}
				"7.32"	{$CVADSiteVersionReal = "CVAD 2112"; Break}
				"7.31"	{$CVADSiteVersionReal = "CVAD 2109"; Break}
				"7.30"	{$CVADSiteVersionReal = "CVAD 2106"; Break}
				"7.29"	{$CVADSiteVersionReal = "CVAD 2103"; Break}
				"7.28"	{$CVADSiteVersionReal = "CVAD 2012"; Break}
				"7.27"	{$CVADSiteVersionReal = "CVAD 2009"; Break}
				"7.26"	{$CVADSiteVersionReal = "CVAD 2006"; Break}
				"7.25"	{$CVADSiteVersionReal = "CVAD 2003"; Break}
				"7.24"	{$CVADSiteVersionReal = "CVAD 1912"; Break}
				"7.23"	{$CVADSiteVersionReal = "CVAD 1909"; Break}
				"7.22"	{$CVADSiteVersionReal = "CVAD 1906"; Break}
				"7.21"	{$CVADSiteVersionReal = "CVAD 1903"; Break}
				"7.20"	{$CVADSiteVersionReal = "CVAD 1811"; Break}
				"7.19"	{$CVADSiteVersionReal = "CVAD 1808"; Break}
				"7.18"	{$CVADSiteVersionReal = "XA/XD 7.18"; Break}
				"7.17"	{$CVADSiteVersionReal = "XA/XD 7.17"; Break}
				"7.16"	{$CVADSiteVersionReal = "XA/XD 7.16"; Break}
				"7.15"	{$CVADSiteVersionReal = "XA/XD 7.15"; Break}
				"7.14"	{$CVADSiteVersionReal = "XA/XD 7.14"; Break}
				"7.13"	{$CVADSiteVersionReal = "XA/XD 7.13"; Break}
				"7.12"	{$CVADSiteVersionReal = "XA/XD 7.12"; Break}
				"7.11"	{$CVADSiteVersionReal = "XA/XD 7.11"; Break}
				"7.9"	{$CVADSiteVersionReal = "XA/XD 7.9"; Break}
				"7.8"	{$CVADSiteVersionReal = "XA/XD 7.8"; Break}
				"7.7"	{$CVADSiteVersionReal = "XA/XD 7.7"; Break}
				"7.6"	{$CVADSiteVersionReal = "XA/XD 7.6"; Break}
				"7.5"	{$CVADSiteVersionReal = "XA/XD 7.5"; Break}
				"7.1"	{$CVADSiteVersionReal = "XD 7.1"; Break}
				"7.0"	{$CVADSiteVersionReal = "XD 7.0"; Break}
				Default	{$CVADSiteVersionReal = "Unknown"; Break}
			}
			Write-Verbose "$(Get-Date -Format G): You are running version $CVADSiteVersion ($CVADSiteVersionReal)"
	
			If($CVADSiteVersion.Major -eq 0 -and $CVADSiteVersion.Minor -eq 0)
			{
				#something is wrong, we shouldn't be here
				Write-Error "
	`n`n
Something bad happened. We shouldn't be here. Could not find the version information.
	`n`n
Script cannot continue
	`n`n
		"
				AbortScript
			}
			ElseIf($CVADSiteVersion.Major -eq 7 -and ($CVADSiteVersion.Minor -lt 8 -or $CVADSiteVersion.Minor -gt 26))
			{
				Write-Host "You are running version $CVADSiteVersion ($CVADSiteVersionReal)" -ForegroundColor White
				Write-Error "
	`n`n
	Missing Citrix PowerShell Snap-ins Detected, check the console above for more information. 
	`n`n
	This script is designed for XenApp/XenDesktop 7.8 through CVAD 2006 and should not be run on $CVADSiteVersionReal.
	`n`n
	If you are running XA/XD 7.0 through 7.7, please use: 
	https://carlwebster.com/downloads/download-info/xenappxendesktop-7-x-documentation-script/
	`n`n
	If you are running CVAD 2006 and later, please use:
	https://carlwebster.com/downloads/download-info/citrix-virtual-apps-and-desktops-v3-script/
	`n`n
	If you are running Citrix Cloud, please use:
	https://carlwebster.com/downloads/download-info/citrix-cloud-citrix-virtual-apps-and-desktops-service/
	`n`n
	Script cannot continue.
	`n`n
		"
				AbortScript
			}
			Else
			{
				Write-Error "
	`n`n
	Missing Citrix PowerShell Snap-ins Detected, check the console above for more information. 
	`n`n
	This script is designed for XenApp/XenDesktop 7.8 through CVAD 2006 and should not be run on any other version.
	`n`n
	If you are running XA/XD 7.0 through 7.7, please use: 
	https://carlwebster.com/downloads/download-info/xenappxendesktop-7-x-documentation-script/
	`n`n
	If you are running CVAD 2006 and later, please use:
	https://carlwebster.com/downloads/download-info/citrix-virtual-apps-and-desktops-v3-script/
	`n`n
	If you are running Citrix Cloud, please use:
	https://carlwebster.com/downloads/download-info/citrix-cloud-citrix-virtual-apps-and-desktops-service/
	`n`n
	If you are running the script remotely, did you install Studio or the PowerShell snapins on $($env:computername)?
	`n`n
	Please see the Prerequisites section in the ReadMe file https://carlwebster.sharefile.com/d-s4b07f1b891548ddb
	`n`n
	Script cannot continue.
	`n`n
		"
				AbortScript
			}
		}
		Else
		{
			Write-Error "
	`n`n
	Missing Citrix PowerShell Snap-ins Detected, check the console above for more information. 
	`n`n
	This script is designed for XenApp/XenDesktop 7.8 through CVAD 2006 and should not be run on any other version.
	`n`n
	If you are running XA/XD 7.0 through 7.7, please use: 
	https://carlwebster.com/downloads/download-info/xenappxendesktop-7-x-documentation-script/
	`n`n
	If you are running CVAD 2006 and later, please use:
	https://carlwebster.com/downloads/download-info/citrix-virtual-apps-and-desktops-v3-script/
	`n`n
	If you are running Citrix Cloud, please use:
	https://carlwebster.com/downloads/download-info/citrix-cloud-citrix-virtual-apps-and-desktops-service/
	`n`n
	If you are running the script remotely, did you install Studio or the PowerShell snapins on $($env:computername)?
	`n`n
	Please see the Prerequisites section in the ReadMe file https://carlwebster.sharefile.com/d-s4b07f1b891548ddb
	`n`n
	Script cannot continue.
	`n`n
		"
			AbortScript
		}
	}

	$Script:DoPolicies = $False
	
	If($Policies -eq $True)
	{
		$Script:DoPolicies = $True

		#Create the LocalFarmGPO PSDrive only once
		Write-Verbose "$(Get-Date -Format G): `tDoes LocalFarmGPO PSDrive already exist?"
		If(Test-Path LocalFarmGPO: 4>$Null)
		{
			Write-Verbose "$(Get-Date -Format G): `t`tRemoving the current LocalFarmGPO PSDrive"
			Remove-PSDrive -Name LocalFarmGPO -EA 0 4>$Null
		}
		
		Write-Verbose "$(Get-Date -Format G): `t`tCreating LocalFarmGPO PSDrive for Studio-based policies"
		New-PSDrive -Name LocalFarmGPO `
		-psprovider citrixgrouppolicy `
		-root \ `
		-controller $AdminAddress `
		-Scope Global *>$Null

		#using Citrix policy stuff and new-psdrive breaks transcript logging so restart transcript logging
		TranscriptLogging

		If(Test-Path LocalFarmGPO: 4>$Null)
		{
			Write-Verbose "$(Get-Date -Format G): `t`t`tLocalFarmGPO PSDrive is ready for use"
		}
		Else
		{
			$ErrorActionPreference = $SaveEAPreference
			Write-Error "
	`n`n
LocalFarmGPO PSDrive does not exist (0). Try immediately rerunning the script.
	`n`n
New-PSDrive failed: $($error[ 0 ].ToString())
	`n`n
Script cannot continue
	`n`n
		"
			AbortScript
		}
	}

	If($Policies -eq $False -and $NoPolicies -eq $False -and $NoADPolicies -eq $False)
	{
		#script defaults, so don't process policies
		$Script:DoPolicies = $False
	}
	If($NoPolicies -eq $True)
	{
		#don't process policies
		$Script:DoPolicies = $False
	}
	
	#set value for MaxRecordCount
	$Script:MaxRecordCount = [int]::MaxValue 

	If([String]::IsNullOrEmpty($AdminAddress))
	{
		$AdminAddress = "Localhost"
	}

	$Script:XDParams1 = @{
	adminaddress = $AdminAddress; 
	EA = 0;
	}

	$Script:XDParams2 = @{
	adminaddress = $AdminAddress; 
	EA = 0;
	MaxRecordCount = $Script:MaxRecordCount;
	}

	# Get Site information
	Write-Verbose "$(Get-Date -Format G): Gathering initial Site data"

	$Script:XDSite1 = Get-BrokerSite @XDParams1

	If( !($?) -or $Null -eq $Script:XDSite1)
	{
		$ErrorActionPreference = $SaveEAPreference
		Write-Warning "XenDesktop Site1 information could not be retrieved. Script cannot continue"
		Write-Error "
		`n`n
		`t`t
		cmdlet failed $($error[ 0 ].ToString())
		`n`n
		"
		AbortScript
	}

	$Script:XDSite2 = Get-ConfigSite @XDParams1

	If( !($?) -or $Null -eq $Script:XDSite2)
	{
		$ErrorActionPreference = $SaveEAPreference
		Write-Warning "XenDesktop Site2 information could not be retrieved. Script cannot continue"
		Write-Error "
		`n`n
		`t`t
		cmdlet failed $($error[ 0 ].ToString())
		`n`n
		"
		AbortScript
	}

	#new for 2.28
	[version]$Script:XDSiteVersion = $Script:XDSite2.ProductVersion
	$Script:XDSiteVersionReal = "Unknown"
	Switch ($Script:XDSiteVersion)
	{
		"7.37"	{$Script:XDSiteVersionReal = "CVAD 2303"; Break}
		"7.36"	{$Script:XDSiteVersionReal = "CVAD 2212"; Break}
		"7.35"	{$Script:XDSiteVersionReal = "CVAD 2209"; Break}
		"7.34"	{$Script:XDSiteVersionReal = "CVAD 2206"; Break}
		"7.33"	{$Script:XDSiteVersionReal = "CVAD 2203"; Break}
		"7.32"	{$Script:XDSiteVersionReal = "CVAD 2112"; Break}
		"7.31"	{$Script:XDSiteVersionReal = "CVAD 2109"; Break}
		"7.30"	{$Script:XDSiteVersionReal = "CVAD 2106"; Break}
		"7.29"	{$Script:XDSiteVersionReal = "CVAD 2103"; Break}
		"7.28"	{$Script:XDSiteVersionReal = "CVAD 2012"; Break}
		"7.27"	{$Script:XDSiteVersionReal = "CVAD 2009"; Break}
		"7.26"	{$Script:XDSiteVersionReal = "CVAD 2006"; Break}
		"7.25"	{$Script:XDSiteVersionReal = "CVAD 2003"; Break}
		"7.24"	{$Script:XDSiteVersionReal = "CVAD 1912"; Break}
		"7.23"	{$Script:XDSiteVersionReal = "CVAD 1909"; Break}
		"7.22"	{$Script:XDSiteVersionReal = "CVAD 1906"; Break}
		"7.21"	{$Script:XDSiteVersionReal = "CVAD 1903"; Break}
		"7.20"	{$Script:XDSiteVersionReal = "CVAD 1811"; Break}
		"7.19"	{$Script:XDSiteVersionReal = "CVAD 1808"; Break}
		"7.18"	{$Script:XDSiteVersionReal = "XA/XD 7.18"; Break}
		"7.17"	{$Script:XDSiteVersionReal = "XA/XD 7.17"; Break}
		"7.16"	{$Script:XDSiteVersionReal = "XA/XD 7.16"; Break}
		"7.15"	{$Script:XDSiteVersionReal = "XA/XD 7.15"; Break}
		"7.14"	{$Script:XDSiteVersionReal = "XA/XD 7.14"; Break}
		"7.13"	{$Script:XDSiteVersionReal = "XA/XD 7.13"; Break}
		"7.12"	{$Script:XDSiteVersionReal = "XA/XD 7.12"; Break}
		"7.11"	{$Script:XDSiteVersionReal = "XA/XD 7.11"; Break}
		"7.9"	{$Script:XDSiteVersionReal = "XA/XD 7.9"; Break}
		"7.8"	{$Script:XDSiteVersionReal = "XA/XD 7.8"; Break}
		"7.7"	{$Script:XDSiteVersionReal = "XA/XD 7.7"; Break}
		"7.6"	{$Script:XDSiteVersionReal = "XA/XD 7.6"; Break}
		"7.5"	{$Script:XDSiteVersionReal = "XA/XD 7.5"; Break}
		"7.1"	{$Script:XDSiteVersionReal = "XD 7.1"; Break}
		"7.0"	{$Script:XDSiteVersionReal = "XD 7.0"; Break}
		Default	{$Script:XDSiteVersionReal = "Unknown"; Break}
	}
	Write-Verbose "$(Get-Date -Format G): You are running version $Script:XDSiteVersion ($Script:XDSiteVersionReal)"

	If($Script:XDSiteVersion.Major -eq 0 -and $Script:XDSiteVersion.Minor -eq 0)
	{
		#something is wrong, we shouldn't be here
		Write-Error "
	`n`n
	Something bad happened. We shouldn't be here. Could not find the version information.
	`n`n
	Script cannot continue
	`n`n
		"
		AbortScript
	}
	ElseIf($Script:XDSiteVersion.Major -eq 7 -and ($Script:XDSiteVersion.Minor -lt 8 -or $Script:XDSiteVersion.Minor -gt 26))
	{
		#this is not a XenDesktop 7.x Site, script cannot proceed
		Write-Host "You are running version $Script:XDSiteVersion ($Script:XDSiteVersionReal)" -ForegroundColor White
		Write-Error "
	`n`n
	This script is designed for XenApp/XenDesktop 7.8 through CVAD 2006 and should not be run on $Script:XDSiteVersionReal.
	`n`n
	If you are running XA/XD 7.0 through 7.7, please use: 
	https://carlwebster.com/downloads/download-info/xenappxendesktop-7-x-documentation-script/
	`n`n
	If you are running CVAD 2006 and later, please use:
	https://carlwebster.com/downloads/download-info/citrix-virtual-apps-and-desktops-v3-script/
	`n`n
	If you are running Citrix Cloud, please use:
	https://carlwebster.com/downloads/download-info/citrix-cloud-citrix-virtual-apps-and-desktops-service/
	`n`n
	Script cannot continue
	`n`n
		"
		AbortScript
	}
	
	[string]$Script:XDSiteName = $Script:XDSite2.SiteName
	
	#2.50 update to support multiple section items
	If($Section.Count -eq 1 -and $Section -eq "All")
	{
		[string]$Script:Title = "Inventory Report for the $($Script:XDSiteName) Site"
	}
	ElseIf($Section.Count -eq 1)
	{
		Switch ($Section)
		{
			"Admins"		{[string]$Script:Title = "Inventory Report for the $($Script:XDSiteName) Site (Administrators Only)"; Break}
			"AppDisks"		{[string]$Script:Title = "Inventory Report for the $($Script:XDSiteName) Site (AppDisks Only)"; Break}
			"AppDNA"		{[string]$Script:Title = "Inventory Report for the $($Script:XDSiteName) Site (AppDNA Only)"; Break}
			"Apps"			{[string]$Script:Title = "Inventory Report for the $($Script:XDSiteName) Site (Applications Only)"; Break}
			"AppV"			{[string]$Script:Title = "Inventory Report for the $($Script:XDSiteName) Site (App-V Only"; Break}
			"Catalogs"		{[string]$Script:Title = "Inventory Report for the $($Script:XDSiteName) Site (Machine Catalogs Only)"; Break}
			"Config"		{[string]$Script:Title = "Inventory Report for the $($Script:XDSiteName) Site (Configuration Only)"; Break}
			"Controllers"	{[string]$Script:Title = "Inventory Report for the $($Script:XDSiteName) Site (Controllers Only)"; Break}
			"Groups" 		{[string]$Script:Title = "Inventory Report for the $($Script:XDSiteName) Site (Delivery Groups Only)"; Break}
			"Hosting"		{[string]$Script:Title = "Inventory Report for the $($Script:XDSiteName) Site (Hosting Only)"; Break}
			"Licensing"		{[string]$Script:Title = "Inventory Report for the $($Script:XDSiteName) Site (Licensing Only)"; Break}
			"Logging"		{[string]$Script:Title = "Inventory Report for the $($Script:XDSiteName) Site (Configuration Logging Only"; Break}
			"Policies"		{[string]$Script:Title = "Inventory Report for the $($Script:XDSiteName) Site (Policies Only)"; Break}
			"StoreFront"	{[string]$Script:Title = "Inventory Report for the $($Script:XDSiteName) Site (StoreFront Only)"; Break}
			"Zones"			{[string]$Script:Title = "Inventory Report for the $($Script:XDSiteName) Site (Zones Only)"; Break}
			Default			{[string]$Script:Title = "Inventory Report for the $($Script:CCSiteName) Site (Missing a section title for $Section"; Break}
		}
	}
	ElseIf($Section.Count -gt 1)
	{
		[string]$Script:Title = "Inventory Report for the $($Script:XDSiteName) Site ("
		Switch ($Section)
		{
			"Admins"		{[string]$Script:Title += "Administrators "}
			"AppDisks"		{[string]$Script:Title += "AppDisks "}
			"AppDNA"		{[string]$Script:Title += "AppDNA "}
			"Apps"			{[string]$Script:Title += "Applications "}
			"AppV"			{[string]$Script:Title += "App-V "}
			"Catalogs"		{[string]$Script:Title += "Machine Catalogs "}
			"Config"		{[string]$Script:Title += "Configuration "}
			"Controllers"	{[string]$Script:Title += "Controllers "}
			"Groups" 		{[string]$Script:Title += "Delivery Groups "}
			"Hosting"		{[string]$Script:Title += "Hosting "}
			"Licensing"		{[string]$Script:Title += "Licensing "}
			"Logging"		{[string]$Script:Title += "Configuration Logging "}
			"Policies"		{[string]$Script:Title += "Policies "}
			"StoreFront"	{[string]$Script:Title += "StoreFront "}
			"Zones"			{[string]$Script:Title += "Zones "}
			Default			{[string]$Script:Title += "Missing a section title for $Section"}
		}
		[string]$Script:Title = $Script:Title.Substring(0,$Script:Title.LastIndexOf(" ")-1)+")"
	}
	
	Write-Verbose "$(Get-Date -Format G): Initial Site data has been gathered"
	
	#added 25-Jun-2017 with a lot of help from Michael B. Smith
	#make sure the SQL Server assembly is loaded, if not, later on don't bother calculating the various database sizes
	Write-Verbose "$(Get-Date -Format G): Loading SQL Server Assembly"
	[bool]$Script:SQLServerLoaded = $False
	
	$SQLLocation = $Null
	$SQLLocation = ([reflection.assembly]::loadwithpartialname('microsoft.sqlserver.smo')).Location
	If($null -ne $SQLLocation)
	{
		$asm = [System.Reflection.Assembly]::LoadFrom($SQLLocation)
		If( $null –eq $asm )
		{
			Write-Warning "
			`n`n
	The SQL Server Assembly could not be loaded 
			`n`n
	Please see the Prerequisites section in the ReadMe file (https://carlwebster.sharefile.com/d-s4b07f1b891548ddb). 
			`n`n
	No SQL Server details are in the output.
			`n`n
			"
			$Script:SQLServerLoaded = $False
		}
		Else
		{
			Write-Verbose "$(Get-Date -Format G): `tSQL Server Assembly successfully loaded"
			$Script:SQLServerLoaded = $True
		}
	}
	Else
	{
		Write-Warning "
		`n`n
	Unable to find the SQL Server Assembly dll 
		`n`n
	Please see the Prerequisites section in the ReadMe file (https://carlwebster.sharefile.com/d-s4b07f1b891548ddb). 
		`n`n
	No SQL Server details are in the output.
		`n`n
		"
		$Script:SQLServerLoaded = $False
	}
}
#endregion

#region script end
Function ProcessScriptEnd
{
	Write-Verbose "$(Get-Date -Format G): Script has completed"
	Write-Verbose "$(Get-Date -Format G): "

	#http://poshtips.com/measuring-elapsed-time-in-powershell/
	Write-Verbose "$(Get-Date -Format G): Script started: $($Script:StartTime)"
	Write-Verbose "$(Get-Date -Format G): Script ended: $(Get-Date)"
	$runtime = $(Get-Date) - $Script:StartTime
	$Str = [string]::format("{0} days, {1} hours, {2} minutes, {3}.{4} seconds",
		$runtime.Days,
		$runtime.Hours,
		$runtime.Minutes,
		$runtime.Seconds,
		$runtime.Milliseconds)
	Write-Verbose "$(Get-Date -Format G): Elapsed time: $($Str)"

	If($Dev)
	{
		If($SmtpServer -eq "")
		{
			Out-File -FilePath $Script:DevErrorFile -InputObject $error 4>$Null
		}
		Else
		{
			Out-File -FilePath $Script:DevErrorFile -InputObject $error -Append 4>$Null
		}
	}

	If($ScriptInfo)
	{
		$SIFile = "$Script:pwdpath\XAXDV2InventoryScriptInfo_$(Get-Date -f yyyy-MM-dd_HHmm).txt"
		Out-File -FilePath $SIFile -InputObject "" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Add DateTime       : $($AddDateTime)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "AdminAddress       : $($AdminAddress)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Administrators     : $($Administrators)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Applications       : $($Applications)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "BrokerRegistryKeys : $($BrokerRegistryKeys)" 4>$Null
		If($MSWORD -or $PDF)
		{
			Out-File -FilePath $SIFile -Append -InputObject "Company Name       : $($Script:CoName)" 4>$Null		
			Out-File -FilePath $SIFile -Append -InputObject "Company Address    : $($CompanyAddress)" 4>$Null		
			Out-File -FilePath $SIFile -Append -InputObject "Company Email      : $($CompanyEmail)" 4>$Null		
			Out-File -FilePath $SIFile -Append -InputObject "Company Fax        : $($CompanyFax)" 4>$Null		
			Out-File -FilePath $SIFile -Append -InputObject "Company Phone      : $($CompanyPhone)" 4>$Null		
			Out-File -FilePath $SIFile -Append -InputObject "Cover Page         : $($CoverPage)" 4>$Null
		}
		Out-File -FilePath $SIFile -Append -InputObject "Controllers        : $($Controllers)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "CSV                : $($CSV)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "DeliveryGroups     : $($DeliveryGroups)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Dev                : $($Dev)" 4>$Null
		If($Dev)
		{
			Out-File -FilePath $SIFile -Append -InputObject "DevErrorFile       : $($Script:DevErrorFile)" 4>$Null
		}
		Out-File -FilePath $SIFile -Append -InputObject "DGUtilization      : $($DeliveryGroupsUtilization)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Filename1          : $($Script:FileName1)" 4>$Null
		If($PDF)
		{
			Out-File -FilePath $SIFile -Append -InputObject "Filename2          : $($Script:FileName2)" 4>$Null
		}
		Out-File -FilePath $SIFile -Append -InputObject "Folder             : $($Folder)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "From               : $($From)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Hosting            : $($Hosting)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "HW Inventory       : $($Hardware)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Log                : $($Log)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Logging            : $($Logging)" 4>$Null
		If($Logging)
		{
			Out-File -FilePath $SIFile -Append -InputObject "   Start Date      : $($StartDate)" 4>$Null
			Out-File -FilePath $SIFile -Append -InputObject "   End Date        : $($EndDate)" 4>$Null
		}
		Out-File -FilePath $SIFile -Append -InputObject "MachineCatalogs    : $($MachineCatalogs)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "MaxDetails         : $($MaxDetails)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "NoADPolicies       : $($NoADPolicies)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "NoPolicies         : $($NoPolicies)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Policies           : $($Policies)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Report Footer      : $ReportFooter" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Save As HTML       : $($HTML)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Save As PDF        : $($PDF)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Save As TEXT       : $($TEXT)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Save As WORD       : $($MSWORD)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Script Info        : $($ScriptInfo)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Section            : $($Section)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Site Name          : $($XDSiteName)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Smtp Port          : $($SmtpPort)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Smtp Server        : $($SmtpServer)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Title              : $($Script:Title)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "To                 : $($To)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Use SSL            : $($UseSSL)" 4>$Null
		If($MSWORD -or $PDF)
		{
			Out-File -FilePath $SIFile -Append -InputObject "Username           : $($UserName)" 4>$Null
		}
		Out-File -FilePath $SIFile -Append -InputObject "VDA Registry Keys  : $($VDARegistryKeys)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "XA/XD Version      : $($Script:XDSiteVersion)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "OS Detected        : $($Script:RunningOS)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "PoSH version       : $($Host.Version)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "PSCulture          : $($PSCulture)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "PSUICulture        : $($PSUICulture)" 4>$Null
		If($MSWORD -or $PDF)
		{
			Out-File -FilePath $SIFile -Append -InputObject "Word language      : $($Script:WordLanguageValue)" 4>$Null
			Out-File -FilePath $SIFile -Append -InputObject "Word version       : $($Script:WordProduct)" 4>$Null
		}
		Out-File -FilePath $SIFile -Append -InputObject "" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Script start       : $($Script:StartTime)" 4>$Null
		Out-File -FilePath $SIFile -Append -InputObject "Elapsed time       : $($Str)" 4>$Null
	}

	#V2.10 added
	#stop transcript logging
	If($Log -eq $True) 
	{
		If($Script:StartLog -eq $true) 
		{
			try 
			{
				Stop-Transcript | Out-Null
				Write-Verbose "$(Get-Date -Format G): $Script:LogPath is ready for use"
			} 
			catch 
			{
				Write-Verbose "$(Get-Date -Format G): Transcript/log stop failed"
			}
		}
	}
	$ErrorActionPreference = $SaveEAPreference
}
#endregion

#region AppendixA
Function OutputAppendixA
{
	Write-Verbose "$(Get-Date -Format G): Create Appendix A VDA Registry Items"

	#sort the array by regkey, regvalue and servername
	$Script:ALLVDARegistryItems = $Script:ALLVDARegistryItems | Sort-Object RegKey, RegValue, VDAType, ComputerName
	
	If($CSV)
	{
		$File = "$($Script:pwdpath)\$($XDSiteName)_Documentation_AppendixA_VDARegistryItems.csv"
		$Script:ALLVDARegistryItems | Export-CSV -Force -Encoding ASCII -NoTypeInformation -Path $File *> $Null
	}
	
	If($MSWord -or $PDF)
	{
		$selection.InsertNewPage()
		WriteWordLine 1 0 "Appendix A - VDA Registry Items"
		WriteWordLine 0 0 "Miscellaneous Registry Items That May or May Not Exist on VDAs"
		WriteWordLine 0 0 "Linux VDAs are excluded"
		WriteWordLine 0 0 "These items may or may not be needed"
		WriteWordLine 0 0 "This Appendix is for VDA comparison only"
		WriteWordLine 0 0 ""
		
		$Save = ""
		$First = $True
		If($Script:AllVDARegistryItems)
		{
			$AppendixWordTable = @()
			ForEach($Item in $Script:ALLVDARegistryItems)
			{
				If(!$First -and $Save -ne "$($Item.RegKey.ToString())$($Item.RegValue.ToString())$($Item.VDAType)")
				{
					$AppendixWordTable += @{ 
					RegKey = "";
					RegValue = "";
					RegData = "";
					VDAType = "";
					ComputerName = "";
					}
				}

				$AppendixWordTable += @{ 
				RegKey = $Item.RegKey;
				RegValue = $Item.RegValue;
				RegData = $Item.Value;
				VDAType = $Item.VDAType.Substring(0,1);
				ComputerName = $Item.ComputerName;
				}
				$Save = "$($Item.RegKey.ToString())$($Item.RegValue.ToString())$($Item.VDAType)"
				If($First)
				{
					$First = $False
				}
			}
			$Table = AddWordTable -Hashtable $AppendixWordTable `
			-Columns RegKey, RegValue, RegData, VDAType, ComputerName `
			-Headers "Registry Key", "Registry Value", "Data", "VDA", "Computer Name" `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitContent;

			SetWordCellFormat -Collection $Table -Size 9 -BackgroundColor $wdColorWhite
			SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
		}
	}
	ElseIf($Text)
	{
		Line 0 "Appendix A - VDA Registry Items"
		Line 0 "Miscellaneous Registry Items That May or May Not Exist on VDAs"
		Line 0 "Linux VDAs are excluded"
		Line 0 "These items may or may not be needed"
		Line 0 "This Appendix is for VDA comparison only"
		Line 0 ""
		Line 1 "Registry Key                                                                                    Registry Value                                     Data                                                                                       VDA Type Computer Name                 " 
		Line 1 "====================================================================================================================================================================================================================================================================================="
		#       12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345S12345678901234567890123456789012345678901234567890S123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890S12345678S123456789012345678901234567890
		
		$Save = ""
		$First = $True
		If($Script:AllVDARegistryItems)
		{
			ForEach($Item in $Script:ALLVDARegistryItems)
			{
				If(!$First -and $Save -ne "$($Item.RegKey.ToString())$($Item.RegValue.ToString())$($Item.VDAType)")
				{
					Line 0 ""
				}

				Line 1 ( "{0,-95} {1,-50} {2,-90} {3,-8} {4,-30}" -f `
				$Item.RegKey, $Item.RegValue, $Item.Value, $Item.VDAType, $Item.ComputerName )
				
				$Save = "$($Item.RegKey.ToString())$($Item.RegValue.ToString())$($Item.VDAType)"
				If($First)
				{
					$First = $False
				}
			}
		}
		Else
		{
			Line 1 "<None found>"
		}
		Line 0 ""
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 1 0 "Appendix A - VDA Registry Items"
		WriteHTMLLine 0 0 "Miscellaneous Registry Items That May or May Not Exist on VDAs"
		WriteHTMLLine 0 0 "Linux VDAs are excluded"
		WriteHTMLLine 0 0 "These items may or may not be needed"
		WriteHTMLLine 0 0 "This Appendix is for VDA comparison only"
		
		$Save = ""
		$First = $True
		If($Script:AllVDARegistryItems)
		{
			$rowdata = @()
			ForEach($Item in $Script:AllVDARegistryItems)
			{
				If(!$First -and $Save -ne "$($Item.RegKey.ToString())$($Item.RegValue.ToString())$($Item.VDAType)")
				{
					$rowdata += @(,(
					"",$htmlwhite))
				}

				$rowdata += @(,(
				$Item.RegKey,$htmlwhite,
				$Item.RegValue,$htmlwhite,
				$Item.Value,$htmlwhite,
				$Item.VDAType,$htmlwhite,
				$Item.ComputerName,$htmlwhite))
				$Save = "$($Item.RegKey.ToString())$($Item.RegValue.ToString())$($Item.VDAType)"
				If($First)
				{
					$First = $False
				}
			}
			$columnHeaders = @(
			'Registry Key',($global:htmlsb),
			'Registry Key',($global:htmlsb),
			'Data',($global:htmlsb),
			'VDA Type',($global:htmlsb),
			'Computer Name',($global:htmlsb))

			$msg = ""
			FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders
		}
		Else
		{
			WriteHTMLLine 0 0 "None found"
		}
		WriteHTMLLine 0 0 ""
	}

	Write-Verbose "$(Get-Date -Format G): Finished Creating Appendix A VDA Registry Items"
	Write-Verbose "$(Get-Date -Format G): "
}
#endregion

#region AppendixB
Function OutputAppendixB
{
	Write-Verbose "$(Get-Date -Format G): Create Appendix B Controller Registry Items"

	#sort the array by regkey, regvalue and servername
	#Fix V2.20.1
	$Script:AllControllerRegistryItems = $Script:AllControllerRegistryItems | Sort-Object RegKey, RegValue, ComputerName
	
	If($CSV)
	{
		$File = "$($Script:pwdpath)\$($XDSiteName)_Documentation_AppendixB_ControllerRegistryItems.csv"
		$Script:AllControllerRegistryItems | Export-CSV -Force -Encoding ASCII -NoTypeInformation -Path $File *> $Null
	}
	
	If($MSWord -or $PDF)
	{
		$selection.InsertNewPage()
		WriteWordLine 1 0 "Appendix B - Controller Registry Items"
		WriteWordLine 0 0 "Miscellaneous Registry Items That May or May Not Exist on Controllers"
		WriteWordLine 0 0 "These items may or may not be needed"
		WriteWordLine 0 0 "This Appendix is for Controller comparison only"
		WriteWordLine 0 0 ""
		
		$Save = ""
		$First = $True
		If($Script:AllControllerRegistryItems)
		{
			$AppendixWordTable = @()
			ForEach($Item in $Script:AllControllerRegistryItems)
			{
				If(!$First -and $Save -ne "$($Item.RegKey.ToString())$($Item.RegValue.ToString())")
				{
					$AppendixWordTable += @{ 
					RegKey = "";
					RegValue = "";
					RegData = "";
					ComputerName = "";
					}
				}

				$AppendixWordTable += @{ 
				RegKey = $Item.RegKey;
				RegValue = $Item.RegValue;
				RegData = $Item.Value;
				ComputerName = $Item.ComputerName;
				}
				$Save = "$($Item.RegKey.ToString())$($Item.RegValue.ToString())"
				If($First)
				{
					$First = $False
				}
			}
			$Table = AddWordTable -Hashtable $AppendixWordTable `
			-Columns RegKey, RegValue, RegData, ComputerName `
			-Headers "Registry Key", "Registry Value", "Data", "DDC Name" `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitContent;

			SetWordCellFormat -Collection $Table -Size 9 -BackgroundColor $wdColorWhite
			SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
		}
	}
	ElseIf($Text)
	{
		Line 0 "Appendix B - Controller Registry Items"
		Line 0 "Miscellaneous Registry Items That May or May Not Exist on Controllers"
		Line 0 "These items may or may not be needed"
		Line 0 "This Appendix is for Controller comparison only"
		Line 0 ""
		Line 1 "Registry Key                                                                                    Registry Value                                     Data                                                                                       DDC Name                      " 
		Line 1 "============================================================================================================================================================================================================================================================================"
		#       12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345S12345678901234567890123456789012345678901234567890S123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890S123456789012345678901234567890
		
		$Save = ""
		$First = $True
		If($Script:AllControllerRegistryItems)
		{
			ForEach($Item in $Script:AllControllerRegistryItems)
			{
				If(!$First -and $Save -ne "$($Item.RegKey.ToString())$($Item.RegValue.ToString())")
				{
					Line 0 ""
				}

				Line 1 ( "{0,-95} {1,-50} {2,-90} {3,-30}" -f `
				$Item.RegKey, $Item.RegValue, $Item.Value, $Item.ComputerName )
				
				$Save = "$($Item.RegKey.ToString())$($Item.RegValue.ToString())"
				If($First)
				{
					$First = $False
				}
			}
		}
		Else
		{
			Line 1 "<None found>"
		}
		Line 0 ""
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 1 0 "Appendix B - Controller Registry Items"
		WriteHTMLLine 0 0 "Miscellaneous Registry Items That May or May Not Exist on Controllers"
		WriteHTMLLine 0 0 "These items may or may not be needed"
		WriteHTMLLine 0 0 "This Appendix is for Controller comparison only"
		$rowdata = @()
		
		$Save = ""
		$First = $True
		If($Script:AllControllerRegistryItems)
		{
			ForEach($Item in $Script:AllControllerRegistryItems)
			{
				If(!$First -and $Save -ne "$($Item.RegKey.ToString())$($Item.RegValue.ToString())")
				{
					$rowdata += @(,("",$htmlwhite))
				}

				$rowdata += @(,(
				$Item.RegKey,$htmlwhite,
				$Item.RegValue,$htmlwhite,
				$Item.Value,$htmlwhite,
				$Item.ComputerName,$htmlwhite))
				$Save = "$($Item.RegKey.ToString())$($Item.RegValue.ToString())"
				If($First)
				{
					$First = $False
				}
			}
			$columnHeaders = @(
			'Registry Key',($global:htmlsb),
			'Registry Value',($global:htmlsb),
			'Data',($global:htmlsb),
			'DDC Name',($global:htmlsb))

			$msg = ""
			FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders
		}
		Else
		{
			WriteHTMLLine 1 "None found"
		}
		WriteHTMLLine 0 ""
	}

	Write-Verbose "$(Get-Date -Format G): Finished Creating Appendix B Controller Registry Items"
	Write-Verbose "$(Get-Date -Format G): "
}
#endregion

#region AppendixC
Function OutputAppendixC
{
	#added in V2.22
	Write-Verbose "$(Get-Date -Format G): Create Appendix C Microsoft Hotfixes and Updates"

	#sort the array by hotfixid and servername
	$Script:MSHotfixes = $Script:MSHotfixes | Sort-Object HotFixID, CSName
	
	If($CSV)
	{
		$File = "$($Script:pwdpath)\$($XDSiteName)_Documentation_AppendixC_MicrosoftHotfixesandUpdates.csv"
		$Script:MSHotfixes | Export-CSV -Force -Encoding ASCII -NoTypeInformation -Path $File *> $Null
	}
	
	If($MSWord -or $PDF)
	{
		$selection.InsertNewPage()
		WriteWordLine 1 0 "Appendix C - Microsoft Hotfixes and Updates"
		WriteWordLine 0 0 "This Appendix is for Controller comparison only"
		WriteWordLine 0 0 ""
		
		$Save = ""
		$First = $True
		If($Script:MSHotfixes)
		{
			$AppendixWordTable = @()
			ForEach($Item in $Script:MSHotfixes)
			{
				If(!$First -and $Save -ne "$($Item.HotFixID)")
				{
					$AppendixWordTable += @{ 
					HotFixID = "";
					CSName = "";
					Caption = "";
					Description = "";
					InstalledBy = "";
					InstalledOn = ""
					}
				}

				$AppendixWordTable += @{ 
				HotFixID = $Item.HotFixID;
				CSName = $Item.CSName;
				Caption = $Item.Caption;
				Description = $Item.Description;
				InstalledBy = $Item.InstalledBy;
				InstalledOn = $Item.InstalledOn
				}
				$Save = "$($Item.HotFixID)"
				If($First)
				{
					$First = $False
				}
			}
			$Table = AddWordTable -Hashtable $AppendixWordTable `
			-Columns HotFixID, CSName, Caption, Description, InstalledBy, InstalledOn `
			-Headers "Hotfix ID", "DDC Name", "Caption", "Description", "Installed By", "Installed On" `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitContent;

			SetWordCellFormat -Collection $Table -Size 9 -BackgroundColor $wdColorWhite
			SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
		}
	}
	ElseIf($Text)
	{
		Line 0 "Appendix C - Microsoft Hotfixes and Updates"
		Line 0 "This Appendix is for Controller comparison only"
		Line 0 ""
		Line 1 "Hotfix ID                 Server Name     Caption                                       Description          Installed By                        Installed On Date     "
		Line 1 "======================================================================================================================================================================="
		#       1234567890123456789012345S123456789012345S123456789012345678901234567890123456789012345S12345678901234567890S12345678901234567890123456789012345S1234567890123456789012
		#                                                 http://support.microsoft.com/?kbid=2727528    Security Update      XXX-XX-XDDC01\xxxx.xxxxxx           00/00/0000 00:00:00 PM
		#		25                        15              45                                            20                   35                                  22
		
		$Save = ""
		$First = $True
		If($Script:MSHotfixes)
		{
			ForEach($Item in $Script:MSHotfixes)
			{
				If(!$First -and $Save -ne "$($Item.HotFixID)")
				{
					Line 0 ""
				}

				Line 1 ( "{0,-25} {1,-15} {2,-45} {3,-20} {4,-35} {5,-22}" -f `
				$Item.HotFixID, $Item.CSName, $Item.Caption, $Item.Description, $Item.InstalledBy, $Item.InstalledOn)
				
				$Save = "$($Item.HotFixID)"
				If($First)
				{
					$First = $False
				}
			}
		}
		Else
		{
			Line 1 "<None found>"
		}
		Line 0 ""
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 1 0 "Appendix C - Microsoft Hotfixes and Updates"
		WriteHTMLLine 0 0 "This Appendix is for Controller comparison only"
		$rowdata = @()
		
		$Save = ""
		$First = $True
		If($Script:MSHotfixes)
		{
			ForEach($Item in $Script:MSHotfixes)
			{
				If(!$First -and $Save -ne "$($Item.HotFixID)")
				{
					$rowdata += @(,("",$htmlwhite))
				}

				$rowdata += @(,(
				$Item.HotFixID,$htmlwhite,
				$Item.CSName,$htmlwhite,
				$Item.Caption,$htmlwhite,
				$Item.Description,$htmlwhite,
				$Item.InstalledBy,$htmlwhite,
				$Item.InstalledOn,$htmlwhite))
				$Save = "$($Item.HotFixID)"
				If($First)
				{
					$First = $False
				}
			}
			$columnHeaders = @(
			'Hotfix ID',($global:htmlsb),
			'DDC Name',($global:htmlsb),
			'Caption',($global:htmlsb),
			'Description',($global:htmlsb),
			'Installed By',($global:htmlsb),
			'Installed On',($global:htmlsb))

			$msg = ""
			FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders
		}
		Else
		{
			WriteHTMLLine 1 "None found"
		}
		WriteHTMLLine 0 ""
	}

	Write-Verbose "$(Get-Date -Format G): Finished Creating Appendix C Microsoft Hotfixes and Updates"
	Write-Verbose "$(Get-Date -Format G): "
}
#endregion

#region AppendixD
Function OutputAppendixD
{
	#added in V2.22
	Write-Verbose "$(Get-Date -Format G): Create Appendix D Citrix Installed Components"

	$Script:CtxInstalledComponents = $Script:CtxInstalledComponents | Sort-Object DisplayName, DDCName
	
	If($CSV)
	{
		$File = "$($Script:pwdpath)\$($XDSiteName)_Documentation_AppendixD_CitrixInstalledComponents.csv"
		$Script:CtxInstalledComponents | Export-CSV -Force -Encoding ASCII -NoTypeInformation -Path $File *> $Null
	}
	
	If($MSWord -or $PDF)
	{
		$selection.InsertNewPage()
		WriteWordLine 1 0 "Appendix D - Citrix Installed Components"
		WriteWordLine 0 0 "This Appendix is for Controller comparison only"
		WriteWordLine 0 0 ""
		
		$Save = ""
		$First = $True
		If($Script:CtxInstalledComponents)
		{
			$AppendixWordTable = @()
			ForEach($Item in $Script:CtxInstalledComponents)
			{
				If(!$First -and $Save -ne "$($Item.DisplayName)$($Item.DisplayVersion)")
				{
					$AppendixWordTable += @{ 
					DisplayName = "";
					DisplayVersion = "";
					DDCName = "";
					}
				}

				$AppendixWordTable += @{ 
				DisplayName = $Item.DisplayName;
				DisplayVersion = $Item.DisplayVersion;
				DDCName = $Item.DDCName;
				}
				$Save = "$($Item.DisplayName)$($Item.DisplayVersion)"
				If($First)
				{
					$First = $False
				}
			}
			$Table = AddWordTable -Hashtable $AppendixWordTable `
			-Columns DisplayName, DisplayVersion, DDCName `
			-Headers "Display Name", "Display Version", "DDC Name" `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitContent;

			SetWordCellFormat -Collection $Table -Size 9 -BackgroundColor $wdColorWhite
			SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
		}
	}
	ElseIf($Text)
	{
		Line 0 "Appendix D - Citrix Installed Components"
		Line 0 "This Appendix is for Controller comparison only"
		Line 0 ""
		Line 1 "Display Name                                                      Display Version           DDC Name                                "
		Line 1 "===================================================================================================================================="
		#       12345678901234567890123456789012345678901234567890123456789012345S1234567890123456789012345S1234567890123456789012345678901234567890
		#       Citrix Delegated Administration Service PowerShell snap-in - x64  11.16.6.0 build 33000     DDC123456789012.123456789012345.local 
		#       65                                                                25                        40
		
		$Save = ""
		$First = $True
		If($Script:CtxInstalledComponents)
		{
			ForEach($Item in $Script:CtxInstalledComponents)
			{
				If(!$First -and $Save -ne "$($Item.DisplayName)$($Item.DisplayVersion)")
				{
					Line 0 ""
				}

				Line 1 ( "{0,-65} {1,-25} {2,-40}" -f `
				$Item.DisplayName, $Item.DisplayVersion, $Item.DDCName)
				
				$Save = "$($Item.DisplayName)$($Item.DisplayVersion)"
				If($First)
				{
					$First = $False
				}
			}
		}
		Else
		{
			Line 1 "<None found>"
		}
		Line 0 ""
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 1 0 "Appendix D - Citrix Installed Components"
		WriteHTMLLine 0 0 "This Appendix is for Controller comparison only"
		$rowdata = @()
		
		$Save = ""
		$First = $True
		If($Script:CtxInstalledComponents)
		{
			ForEach($Item in $Script:CtxInstalledComponents)
			{
				If(!$First -and $Save -ne "$($Item.DisplayName)$($Item.DisplayVersion)")
				{
					$rowdata += @(,("",$htmlwhite))
				}

				$rowdata += @(,(
				$Item.DisplayName,$htmlwhite,
				$Item.DisplayVersion,$htmlwhite,
				$Item.DDCName,$htmlwhite))
				$Save = "$($Item.DisplayName)$($Item.DisplayVersion)"
				If($First)
				{
					$First = $False
				}
			}
			$columnHeaders = @(
			'Display Name',($global:htmlsb),
			'Display Version',($global:htmlsb),
			'DDC Name',($global:htmlsb))

			$msg = ""
			FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders
		}
		Else
		{
			WriteHTMLLine 0 1 "None found"
		}
		WriteHTMLLine 0 0 ""
	}

	Write-Verbose "$(Get-Date -Format G): Finished Creating Appendix D Citrix Installed Components"
	Write-Verbose "$(Get-Date -Format G): "
}
#endregion

#region AppendixE
Function OutputAppendixE
{
	#added in V2.22
	Write-Verbose "$(Get-Date -Format G): Create Appendix E Windows Installed Components"

	#V2.23 add sorting by Name.
	#ASP.NET 4.5 has two different Names but the same Display Name
	$Script:WinInstalledComponents = $Script:WinInstalledComponents | Sort-Object DisplayName, Name, DDCName
	
	If($CSV)
	{
		$File = "$($Script:pwdpath)\$($XDSiteName)_Documentation_AppendixE_WindowsInstalledComponents.csv"
		$Script:WinInstalledComponents | Export-CSV -Force -Encoding ASCII -NoTypeInformation -Path $File *> $Null
	}
	
	If($MSWord -or $PDF)
	{
		$selection.InsertNewPage()
		WriteWordLine 1 0 "Appendix E - Windows Installed Components"
		WriteWordLine 0 0 "This Appendix is for Controller comparison only"
		WriteWordLine 0 0 ""
		
		$Save = ""
		$First = $True
		If($Script:WinInstalledComponents)
		{
			$AppendixWordTable = @()
			ForEach($Item in $Script:WinInstalledComponents)
			{
				If(!$First -and $Save -ne "$($Item.DisplayName)$($Item.Name)")
				{
					$AppendixWordTable += @{ 
					DisplayName = "";
					Name = "";
					DDCName = "";
					FeatureType = "";
					}
				}

				$AppendixWordTable += @{ 
				DisplayName = $Item.DisplayName;
				Name = $Item.Name;
				DDCName = $Item.DDCName;
				FeatureType = $Item.FeatureType;
				}
				$Save = "$($Item.DisplayName)$($Item.Name)"
				If($First)
				{
					$First = $False
				}
			}
			$Table = AddWordTable -Hashtable $AppendixWordTable `
			-Columns DisplayName, Name, DDCName, FeatureType `
			-Headers "Display Name", "Name", "DDC Name", "Feature Type"  `
			-Format $wdTableGrid `
			-AutoFit $wdAutoFitContent;

			SetWordCellFormat -Collection $Table -Size 9 -BackgroundColor $wdColorWhite
			SetWordCellFormat -Collection $Table.Rows.Item(1).Cells -Bold -BackgroundColor $wdColorGray15;

			$Table.Rows.SetLeftIndent($Indent0TabStops,$wdAdjustProportional)

			FindWordDocumentEnd
			$Table = $Null
		}
	}
	ElseIf($Text)
	{
		Line 0 "Appendix E - Windows Installed Components"
		Line 0 "This Appendix is for Controller comparison only"
		Line 0 ""
		Line 1 "Display Name                                       Name                           DDC Name                       Feature Type    "
		Line 1 "================================================================================================================================="
		#       12345678901234567890123456789012345678901234567890S123456789012345678901234567890S123456789012345678901234567890S123456789012345
		#       Graphical Management Tools and Infrastructure      NET-Framework-45-Features     XXXXXXXXXXXXXXX                 Role Service
		#       50                                                 30                            30                              15
		
		$Save = ""
		$First = $True
		If($Script:WinInstalledComponents)
		{
			ForEach($Item in $Script:WinInstalledComponents)
			{
				If(!$First -and $Save -ne "$($Item.DisplayName)$($Item.Name)")
				{
					Line 0 ""
				}

				Line 1 ( "{0,-50} {1,-30} {2,-30} {3,-15}" -f `
				$Item.DisplayName, $Item.Name, $Item.DDCName, $Item.FeatureType)
				$Save = "$($Item.DisplayName)$($Item.Name)"
				If($First)
				{
					$First = $False
				}
			}
		}
		Else
		{
			Line 1 "<None found>"
		}
		Line 0 ""
	}
	ElseIf($HTML)
	{
		WriteHTMLLine 1 0 "Appendix E - Windows Installed Components"
		WriteHTMLLine 0 0 "This Appendix is for Controller comparison only"
		$rowdata = @()
		
		$Save = ""
		$First = $True
		If($Script:WinInstalledComponents)
		{
			ForEach($Item in $Script:WinInstalledComponents)
			{
				If(!$First -and $Save -ne "$($Item.DisplayName)$($Item.Name)")
				{
					$rowdata += @(,("",$htmlwhite))
				}

				$rowdata += @(,(
				$Item.DisplayName,$htmlwhite,
				$Item.Name,$htmlwhite,
				$Item.DDCName,$htmlwhite,
				$Item.FeatureType,$htmlwhite))
				$Save = "$($Item.DisplayName)$($Item.Name)"
				If($First)
				{
					$First = $False
				}
			}
			$columnHeaders = @(
			'Display Name',($global:htmlsb),
			'Name',($global:htmlsb),
			'DDC Name',($global:htmlsb),
			'Feature Type',($global:htmlsb))

			$msg = ""
			FormatHTMLTable $msg "auto" -rowArray $rowdata -columnArray $columnHeaders
		}
		Else
		{
			WriteHTMLLine 1 "None found"
		}
		WriteHTMLLine 0 ""
	}

	Write-Verbose "$(Get-Date -Format G): Finished Creating Appendix E Windows Installed Components"
	Write-Verbose "$(Get-Date -Format G): "
}
#endregion

#region script core
#Script begins

ProcessScriptSetup

SetFileName1andFileName2 "$($Script:XDSiteName)"

If($Section -eq "All" -or $Section -eq "Catalogs")
{
	ProcessMachineCatalogs
}

If($Section -eq "All" -or $Section -eq "AppDisks")
{
	ProcessAppDisks
}

If($Section -eq "All" -or $Section -eq "Groups")
{
	ProcessDeliveryGroups
}

If($Section -eq "All" -or $Section -eq "Apps")
{
	ProcessApplications
	ProcessApplicationGroupDetails
}

If($Section -eq "All" -or $Section -eq "Policies")
{
	If($NoPolicies -or $Script:DoPolicies -eq $False)
	{
		#don't process policies
	}
	Else
	{
		ProcessPolicies
	}
}

If($Section -eq "All" -or $Section -eq "Logging")
{
	ProcessConfigLogging
}

If($Section -eq "All" -or $Section -eq "Config")
{
	ProcessConfiguration
}

If($Section -eq "All" -or $Section -eq "Admins")
{
	ProcessAdministrators
	ProcessScopes
	ProcessRoles
}

If($Section -eq "All" -or $Section -eq "Controllers")
{
	ProcessControllers
}

If($Section -eq "All" -or $Section -eq "Hosting")
{
	ProcessHosting
}

If($Section -eq "All" -or $Section -eq "Licensing")
{
	ProcessLicensing
}

If($Section -eq "All" -or $Section -eq "StoreFront")
{
	ProcessStoreFront
}

If($Section -eq "All" -or $Section -eq "AppV")
{
	ProcessAppV
}

If($Section -eq "All" -or $Section -eq "AppDNA")
{
	ProcessAppDNA
}

If($Section -eq "All" -or $Section -eq "Zones")
{
	If((Get-ConfigServiceAddedCapability @XDParams1) -contains "ZonesSupport")
	{
		ProcessZones
	}
}

If($Section -eq "All")
{
	OutputSummaryPage
}

If($VDARegistryKeys)
{
	OutputAppendixA #V2.20
}

If($BrokerRegistryKeys)
{
	OutputAppendixB	#V2.20
}

#added in V2.22
If($Controllers)
{
	OutputAppendixC #ms hotfixes
	OutputAppendixD #ctx components
	OutputAppendixE #win features
}

#endregion

#region finish script
Write-Verbose "$(Get-Date -Format G): Finishing up document"
#end of document processing

$AbstractTitle = "Citrix XenDesktop $($Script:XDSiteVersion) Inventory"
$SubjectTitle = "XenDesktop $($Script:XDSiteVersion) Site Inventory"
UpdateDocumentProperties $AbstractTitle $SubjectTitle

If($ReportFooter)
{
	OutputReportFooter
}

ProcessDocumentOutput

ProcessScriptEnd
#endregionnn
# SIG # Begin signature block
# MIItUQYJKoZIhvcNAQcCoIItQjCCLT4CAQExCzAJBgUrDgMCGgUAMGkGCisGAQQB
# gjcCAQSgWzBZMDQGCisGAQQBgjcCAR4wJgIDAQAABBAfzDtgWUsITrck0sYpfvNR
# AgEAAgEAAgEAAgEAAgEAMCEwCQYFKw4DAhoFAAQUo8I/Vvr9OV0Wmqg7EwB1Jpt2
# FAKggiaxMIIFjTCCBHWgAwIBAgIQDpsYjvnQLefv21DiCEAYWjANBgkqhkiG9w0B
# AQwFADBlMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYD
# VQQLExB3d3cuZGlnaWNlcnQuY29tMSQwIgYDVQQDExtEaWdpQ2VydCBBc3N1cmVk
# IElEIFJvb3QgQ0EwHhcNMjIwODAxMDAwMDAwWhcNMzExMTA5MjM1OTU5WjBiMQsw
# CQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cu
# ZGlnaWNlcnQuY29tMSEwHwYDVQQDExhEaWdpQ2VydCBUcnVzdGVkIFJvb3QgRzQw
# ggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQC/5pBzaN675F1KPDAiMGkz
# 7MKnJS7JIT3yithZwuEppz1Yq3aaza57G4QNxDAf8xukOBbrVsaXbR2rsnnyyhHS
# 5F/WBTxSD1Ifxp4VpX6+n6lXFllVcq9ok3DCsrp1mWpzMpTREEQQLt+C8weE5nQ7
# bXHiLQwb7iDVySAdYyktzuxeTsiT+CFhmzTrBcZe7FsavOvJz82sNEBfsXpm7nfI
# SKhmV1efVFiODCu3T6cw2Vbuyntd463JT17lNecxy9qTXtyOj4DatpGYQJB5w3jH
# trHEtWoYOAMQjdjUN6QuBX2I9YI+EJFwq1WCQTLX2wRzKm6RAXwhTNS8rhsDdV14
# Ztk6MUSaM0C/CNdaSaTC5qmgZ92kJ7yhTzm1EVgX9yRcRo9k98FpiHaYdj1ZXUJ2
# h4mXaXpI8OCiEhtmmnTK3kse5w5jrubU75KSOp493ADkRSWJtppEGSt+wJS00mFt
# 6zPZxd9LBADMfRyVw4/3IbKyEbe7f/LVjHAsQWCqsWMYRJUadmJ+9oCw++hkpjPR
# iQfhvbfmQ6QYuKZ3AeEPlAwhHbJUKSWJbOUOUlFHdL4mrLZBdd56rF+NP8m800ER
# ElvlEFDrMcXKchYiCd98THU/Y+whX8QgUWtvsauGi0/C1kVfnSD8oR7FwI+isX4K
# Jpn15GkvmB0t9dmpsh3lGwIDAQABo4IBOjCCATYwDwYDVR0TAQH/BAUwAwEB/zAd
# BgNVHQ4EFgQU7NfjgtJxXWRM3y5nP+e6mK4cD08wHwYDVR0jBBgwFoAUReuir/SS
# y4IxLVGLp6chnfNtyA8wDgYDVR0PAQH/BAQDAgGGMHkGCCsGAQUFBwEBBG0wazAk
# BggrBgEFBQcwAYYYaHR0cDovL29jc3AuZGlnaWNlcnQuY29tMEMGCCsGAQUFBzAC
# hjdodHRwOi8vY2FjZXJ0cy5kaWdpY2VydC5jb20vRGlnaUNlcnRBc3N1cmVkSURS
# b290Q0EuY3J0MEUGA1UdHwQ+MDwwOqA4oDaGNGh0dHA6Ly9jcmwzLmRpZ2ljZXJ0
# LmNvbS9EaWdpQ2VydEFzc3VyZWRJRFJvb3RDQS5jcmwwEQYDVR0gBAowCDAGBgRV
# HSAAMA0GCSqGSIb3DQEBDAUAA4IBAQBwoL9DXFXnOF+go3QbPbYW1/e/Vwe9mqyh
# hyzshV6pGrsi+IcaaVQi7aSId229GhT0E0p6Ly23OO/0/4C5+KH38nLeJLxSA8hO
# 0Cre+i1Wz/n096wwepqLsl7Uz9FDRJtDIeuWcqFItJnLnU+nBgMTdydE1Od/6Fmo
# 8L8vC6bp8jQ87PcDx4eo0kxAGTVGamlUsLihVo7spNU96LHc/RzY9HdaXFSMb++h
# UD38dglohJ9vytsgjTVgHAIDyyCwrFigDkBjxZgiwbJZ9VVrzyerbHbObyMt9H5x
# aiNrIv8SuFQtJ37YOtnwtoeW/VvRXKwYw02fc7cBqZ9Xql4o4rmUMIIFkDCCA3ig
# AwIBAgIQBZsbV56OITLiOQe9p3d1XDANBgkqhkiG9w0BAQwFADBiMQswCQYDVQQG
# EwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGlnaWNl
# cnQuY29tMSEwHwYDVQQDExhEaWdpQ2VydCBUcnVzdGVkIFJvb3QgRzQwHhcNMTMw
# ODAxMTIwMDAwWhcNMzgwMTE1MTIwMDAwWjBiMQswCQYDVQQGEwJVUzEVMBMGA1UE
# ChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGlnaWNlcnQuY29tMSEwHwYD
# VQQDExhEaWdpQ2VydCBUcnVzdGVkIFJvb3QgRzQwggIiMA0GCSqGSIb3DQEBAQUA
# A4ICDwAwggIKAoICAQC/5pBzaN675F1KPDAiMGkz7MKnJS7JIT3yithZwuEppz1Y
# q3aaza57G4QNxDAf8xukOBbrVsaXbR2rsnnyyhHS5F/WBTxSD1Ifxp4VpX6+n6lX
# FllVcq9ok3DCsrp1mWpzMpTREEQQLt+C8weE5nQ7bXHiLQwb7iDVySAdYyktzuxe
# TsiT+CFhmzTrBcZe7FsavOvJz82sNEBfsXpm7nfISKhmV1efVFiODCu3T6cw2Vbu
# yntd463JT17lNecxy9qTXtyOj4DatpGYQJB5w3jHtrHEtWoYOAMQjdjUN6QuBX2I
# 9YI+EJFwq1WCQTLX2wRzKm6RAXwhTNS8rhsDdV14Ztk6MUSaM0C/CNdaSaTC5qmg
# Z92kJ7yhTzm1EVgX9yRcRo9k98FpiHaYdj1ZXUJ2h4mXaXpI8OCiEhtmmnTK3kse
# 5w5jrubU75KSOp493ADkRSWJtppEGSt+wJS00mFt6zPZxd9LBADMfRyVw4/3IbKy
# Ebe7f/LVjHAsQWCqsWMYRJUadmJ+9oCw++hkpjPRiQfhvbfmQ6QYuKZ3AeEPlAwh
# HbJUKSWJbOUOUlFHdL4mrLZBdd56rF+NP8m800ERElvlEFDrMcXKchYiCd98THU/
# Y+whX8QgUWtvsauGi0/C1kVfnSD8oR7FwI+isX4KJpn15GkvmB0t9dmpsh3lGwID
# AQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBhjAdBgNVHQ4E
# FgQU7NfjgtJxXWRM3y5nP+e6mK4cD08wDQYJKoZIhvcNAQEMBQADggIBALth2X2p
# bL4XxJEbw6GiAI3jZGgPVs93rnD5/ZpKmbnJeFwMDF/k5hQpVgs2SV1EY+CtnJYY
# ZhsjDT156W1r1lT40jzBQ0CuHVD1UvyQO7uYmWlrx8GnqGikJ9yd+SeuMIW59mdN
# Oj6PWTkiU0TryF0Dyu1Qen1iIQqAyHNm0aAFYF/opbSnr6j3bTWcfFqK1qI4mfN4
# i/RN0iAL3gTujJtHgXINwBQy7zBZLq7gcfJW5GqXb5JQbZaNaHqasjYUegbyJLkJ
# EVDXCLG4iXqEI2FCKeWjzaIgQdfRnGTZ6iahixTXTBmyUEFxPT9NcCOGDErcgdLM
# MpSEDQgJlxxPwO5rIHQw0uA5NBCFIRUBCOhVMt5xSdkoF1BN5r5N0XWs0Mr7QbhD
# parTwwVETyw2m+L64kW4I1NsBm9nVX9GtUw/bihaeSbSpKhil9Ie4u1Ki7wb/UdK
# Dd9nZn6yW0HQO+T0O/QEY+nvwlQAUaCKKsnOeMzV6ocEGLPOr0mIr/OSmbaz5mEP
# 0oUA51Aa5BuVnRmhuZyxm7EAHu/QD09CbMkKvO5D+jpxpchNJqU1/YldvIViHTLS
# oCtU7ZpXwdv6EM8Zt4tKG48BtieVU+i2iW1bvGjUI+iLUaJW+fCmgKDWHrO8Dw9T
# dSmq6hN35N6MgSGtBxBHEa2HPQfRdbzP82Z+MIIGrjCCBJagAwIBAgIQBzY3tyRU
# fNhHrP0oZipeWzANBgkqhkiG9w0BAQsFADBiMQswCQYDVQQGEwJVUzEVMBMGA1UE
# ChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGlnaWNlcnQuY29tMSEwHwYD
# VQQDExhEaWdpQ2VydCBUcnVzdGVkIFJvb3QgRzQwHhcNMjIwMzIzMDAwMDAwWhcN
# MzcwMzIyMjM1OTU5WjBjMQswCQYDVQQGEwJVUzEXMBUGA1UEChMORGlnaUNlcnQs
# IEluYy4xOzA5BgNVBAMTMkRpZ2lDZXJ0IFRydXN0ZWQgRzQgUlNBNDA5NiBTSEEy
# NTYgVGltZVN0YW1waW5nIENBMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKC
# AgEAxoY1BkmzwT1ySVFVxyUDxPKRN6mXUaHW0oPRnkyibaCwzIP5WvYRoUQVQl+k
# iPNo+n3znIkLf50fng8zH1ATCyZzlm34V6gCff1DtITaEfFzsbPuK4CEiiIY3+va
# PcQXf6sZKz5C3GeO6lE98NZW1OcoLevTsbV15x8GZY2UKdPZ7Gnf2ZCHRgB720RB
# idx8ald68Dd5n12sy+iEZLRS8nZH92GDGd1ftFQLIWhuNyG7QKxfst5Kfc71ORJn
# 7w6lY2zkpsUdzTYNXNXmG6jBZHRAp8ByxbpOH7G1WE15/tePc5OsLDnipUjW8LAx
# E6lXKZYnLvWHpo9OdhVVJnCYJn+gGkcgQ+NDY4B7dW4nJZCYOjgRs/b2nuY7W+yB
# 3iIU2YIqx5K/oN7jPqJz+ucfWmyU8lKVEStYdEAoq3NDzt9KoRxrOMUp88qqlnNC
# aJ+2RrOdOqPVA+C/8KI8ykLcGEh/FDTP0kyr75s9/g64ZCr6dSgkQe1CvwWcZklS
# UPRR8zZJTYsg0ixXNXkrqPNFYLwjjVj33GHek/45wPmyMKVM1+mYSlg+0wOI/rOP
# 015LdhJRk8mMDDtbiiKowSYI+RQQEgN9XyO7ZONj4KbhPvbCdLI/Hgl27KtdRnXi
# YKNYCQEoAA6EVO7O6V3IXjASvUaetdN2udIOa5kM0jO0zbECAwEAAaOCAV0wggFZ
# MBIGA1UdEwEB/wQIMAYBAf8CAQAwHQYDVR0OBBYEFLoW2W1NhS9zKXaaL3WMaiCP
# nshvMB8GA1UdIwQYMBaAFOzX44LScV1kTN8uZz/nupiuHA9PMA4GA1UdDwEB/wQE
# AwIBhjATBgNVHSUEDDAKBggrBgEFBQcDCDB3BggrBgEFBQcBAQRrMGkwJAYIKwYB
# BQUHMAGGGGh0dHA6Ly9vY3NwLmRpZ2ljZXJ0LmNvbTBBBggrBgEFBQcwAoY1aHR0
# cDovL2NhY2VydHMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0VHJ1c3RlZFJvb3RHNC5j
# cnQwQwYDVR0fBDwwOjA4oDagNIYyaHR0cDovL2NybDMuZGlnaWNlcnQuY29tL0Rp
# Z2lDZXJ0VHJ1c3RlZFJvb3RHNC5jcmwwIAYDVR0gBBkwFzAIBgZngQwBBAIwCwYJ
# YIZIAYb9bAcBMA0GCSqGSIb3DQEBCwUAA4ICAQB9WY7Ak7ZvmKlEIgF+ZtbYIULh
# sBguEE0TzzBTzr8Y+8dQXeJLKftwig2qKWn8acHPHQfpPmDI2AvlXFvXbYf6hCAl
# NDFnzbYSlm/EUExiHQwIgqgWvalWzxVzjQEiJc6VaT9Hd/tydBTX/6tPiix6q4XN
# Q1/tYLaqT5Fmniye4Iqs5f2MvGQmh2ySvZ180HAKfO+ovHVPulr3qRCyXen/KFSJ
# 8NWKcXZl2szwcqMj+sAngkSumScbqyQeJsG33irr9p6xeZmBo1aGqwpFyd/EjaDn
# mPv7pp1yr8THwcFqcdnGE4AJxLafzYeHJLtPo0m5d2aR8XKc6UsCUqc3fpNTrDsd
# CEkPlM05et3/JWOZJyw9P2un8WbDQc1PtkCbISFA0LcTJM3cHXg65J6t5TRxktcm
# a+Q4c6umAU+9Pzt4rUyt+8SVe+0KXzM5h0F4ejjpnOHdI/0dKNPH+ejxmF/7K9h+
# 8kaddSweJywm228Vex4Ziza4k9Tm8heZWcpw8De/mADfIBZPJ/tgZxahZrrdVcA6
# KYawmKAr7ZVBtzrVFZgxtGIJDwq9gdkT/r+k0fNX2bwE+oLeMt8EifAAzV3C+dAj
# fwAL5HYCJtnwZXZCpimHCUcr5n8apIUP/JiW9lVUKx+A+sDyDivl1vupL0QVSucT
# Dh3bNzgaoSv27dZ8/DCCBrAwggSYoAMCAQICEAitQLJg0pxMn17Nqb2TrtkwDQYJ
# KoZIhvcNAQEMBQAwYjELMAkGA1UEBhMCVVMxFTATBgNVBAoTDERpZ2lDZXJ0IElu
# YzEZMBcGA1UECxMQd3d3LmRpZ2ljZXJ0LmNvbTEhMB8GA1UEAxMYRGlnaUNlcnQg
# VHJ1c3RlZCBSb290IEc0MB4XDTIxMDQyOTAwMDAwMFoXDTM2MDQyODIzNTk1OVow
# aTELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDkRpZ2lDZXJ0LCBJbmMuMUEwPwYDVQQD
# EzhEaWdpQ2VydCBUcnVzdGVkIEc0IENvZGUgU2lnbmluZyBSU0E0MDk2IFNIQTM4
# NCAyMDIxIENBMTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBANW0L0LQ
# KK14t13VOVkbsYhC9TOM6z2Bl3DFu8SFJjCfpI5o2Fz16zQkB+FLT9N4Q/QX1x7a
# +dLVZxpSTw6hV/yImcGRzIEDPk1wJGSzjeIIfTR9TIBXEmtDmpnyxTsf8u/LR1oT
# pkyzASAl8xDTi7L7CPCK4J0JwGWn+piASTWHPVEZ6JAheEUuoZ8s4RjCGszF7pNJ
# cEIyj/vG6hzzZWiRok1MghFIUmjeEL0UV13oGBNlxX+yT4UsSKRWhDXW+S6cqgAV
# 0Tf+GgaUwnzI6hsy5srC9KejAw50pa85tqtgEuPo1rn3MeHcreQYoNjBI0dHs6EP
# bqOrbZgGgxu3amct0r1EGpIQgY+wOwnXx5syWsL/amBUi0nBk+3htFzgb+sm+YzV
# svk4EObqzpH1vtP7b5NhNFy8k0UogzYqZihfsHPOiyYlBrKD1Fz2FRlM7WLgXjPy
# 6OjsCqewAyuRsjZ5vvetCB51pmXMu+NIUPN3kRr+21CiRshhWJj1fAIWPIMorTmG
# 7NS3DVPQ+EfmdTCN7DCTdhSmW0tddGFNPxKRdt6/WMtyEClB8NXFbSZ2aBFBE1ia
# 3CYrAfSJTVnbeM+BSj5AR1/JgVBzhRAjIVlgimRUwcwhGug4GXxmHM14OEUwmU//
# Y09Mu6oNCFNBfFg9R7P6tuyMMgkCzGw8DFYRAgMBAAGjggFZMIIBVTASBgNVHRMB
# Af8ECDAGAQH/AgEAMB0GA1UdDgQWBBRoN+Drtjv4XxGG+/5hewiIZfROQjAfBgNV
# HSMEGDAWgBTs1+OC0nFdZEzfLmc/57qYrhwPTzAOBgNVHQ8BAf8EBAMCAYYwEwYD
# VR0lBAwwCgYIKwYBBQUHAwMwdwYIKwYBBQUHAQEEazBpMCQGCCsGAQUFBzABhhho
# dHRwOi8vb2NzcC5kaWdpY2VydC5jb20wQQYIKwYBBQUHMAKGNWh0dHA6Ly9jYWNl
# cnRzLmRpZ2ljZXJ0LmNvbS9EaWdpQ2VydFRydXN0ZWRSb290RzQuY3J0MEMGA1Ud
# HwQ8MDowOKA2oDSGMmh0dHA6Ly9jcmwzLmRpZ2ljZXJ0LmNvbS9EaWdpQ2VydFRy
# dXN0ZWRSb290RzQuY3JsMBwGA1UdIAQVMBMwBwYFZ4EMAQMwCAYGZ4EMAQQBMA0G
# CSqGSIb3DQEBDAUAA4ICAQA6I0Q9jQh27o+8OpnTVuACGqX4SDTzLLbmdGb3lHKx
# AMqvbDAnExKekESfS/2eo3wm1Te8Ol1IbZXVP0n0J7sWgUVQ/Zy9toXgdn43ccsi
# 91qqkM/1k2rj6yDR1VB5iJqKisG2vaFIGH7c2IAaERkYzWGZgVb2yeN258TkG19D
# +D6U/3Y5PZ7Umc9K3SjrXyahlVhI1Rr+1yc//ZDRdobdHLBgXPMNqO7giaG9OeE4
# Ttpuuzad++UhU1rDyulq8aI+20O4M8hPOBSSmfXdzlRt2V0CFB9AM3wD4pWywiF1
# c1LLRtjENByipUuNzW92NyyFPxrOJukYvpAHsEN/lYgggnDwzMrv/Sk1XB+JOFX3
# N4qLCaHLC+kxGv8uGVw5ceG+nKcKBtYmZ7eS5k5f3nqsSc8upHSSrds8pJyGH+PB
# VhsrI/+PteqIe3Br5qC6/To/RabE6BaRUotBwEiES5ZNq0RA443wFSjO7fEYVgcq
# LxDEDAhkPDOPriiMPMuPiAsNvzv0zh57ju+168u38HcT5ucoP6wSrqUvImxB+YJc
# FWbMbA7KxYbD9iYzDAdLoNMHAmpqQDBISzSoUSC7rRuFCOJZDW3KBVAr6kocnqX9
# oKcfBnTn8tZSkP2vhUgh+Vc7tJwD7YZF9LRhbr9o4iZghurIr6n+lB3nYxs6hlZ4
# TjCCBsAwggSooAMCAQICEAxNaXJLlPo8Kko9KQeAPVowDQYJKoZIhvcNAQELBQAw
# YzELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDkRpZ2lDZXJ0LCBJbmMuMTswOQYDVQQD
# EzJEaWdpQ2VydCBUcnVzdGVkIEc0IFJTQTQwOTYgU0hBMjU2IFRpbWVTdGFtcGlu
# ZyBDQTAeFw0yMjA5MjEwMDAwMDBaFw0zMzExMjEyMzU5NTlaMEYxCzAJBgNVBAYT
# AlVTMREwDwYDVQQKEwhEaWdpQ2VydDEkMCIGA1UEAxMbRGlnaUNlcnQgVGltZXN0
# YW1wIDIwMjIgLSAyMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAz+yl
# JjrGqfJru43BDZrboegUhXQzGias0BxVHh42bbySVQxh9J0Jdz0Vlggva2Sk/QaD
# FteRkjgcMQKW+3KxlzpVrzPsYYrppijbkGNcvYlT4DotjIdCriak5Lt4eLl6FuFW
# xsC6ZFO7KhbnUEi7iGkMiMbxvuAvfTuxylONQIMe58tySSgeTIAehVbnhe3yYbyq
# Ogd99qtu5Wbd4lz1L+2N1E2VhGjjgMtqedHSEJFGKes+JvK0jM1MuWbIu6pQOA3l
# jJRdGVq/9XtAbm8WqJqclUeGhXk+DF5mjBoKJL6cqtKctvdPbnjEKD+jHA9QBje6
# CNk1prUe2nhYHTno+EyREJZ+TeHdwq2lfvgtGx/sK0YYoxn2Off1wU9xLokDEaJL
# u5i/+k/kezbvBkTkVf826uV8MefzwlLE5hZ7Wn6lJXPbwGqZIS1j5Vn1TS+QHye3
# 0qsU5Thmh1EIa/tTQznQZPpWz+D0CuYUbWR4u5j9lMNzIfMvwi4g14Gs0/EH1OG9
# 2V1LbjGUKYvmQaRllMBY5eUuKZCmt2Fk+tkgbBhRYLqmgQ8JJVPxvzvpqwcOagc5
# YhnJ1oV/E9mNec9ixezhe7nMZxMHmsF47caIyLBuMnnHC1mDjcbu9Sx8e47LZInx
# scS451NeX1XSfRkpWQNO+l3qRXMchH7XzuLUOncCAwEAAaOCAYswggGHMA4GA1Ud
# DwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMI
# MCAGA1UdIAQZMBcwCAYGZ4EMAQQCMAsGCWCGSAGG/WwHATAfBgNVHSMEGDAWgBS6
# FtltTYUvcyl2mi91jGogj57IbzAdBgNVHQ4EFgQUYore0GH8jzEU7ZcLzT0qlBTf
# UpwwWgYDVR0fBFMwUTBPoE2gS4ZJaHR0cDovL2NybDMuZGlnaWNlcnQuY29tL0Rp
# Z2lDZXJ0VHJ1c3RlZEc0UlNBNDA5NlNIQTI1NlRpbWVTdGFtcGluZ0NBLmNybDCB
# kAYIKwYBBQUHAQEEgYMwgYAwJAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLmRpZ2lj
# ZXJ0LmNvbTBYBggrBgEFBQcwAoZMaHR0cDovL2NhY2VydHMuZGlnaWNlcnQuY29t
# L0RpZ2lDZXJ0VHJ1c3RlZEc0UlNBNDA5NlNIQTI1NlRpbWVTdGFtcGluZ0NBLmNy
# dDANBgkqhkiG9w0BAQsFAAOCAgEAVaoqGvNG83hXNzD8deNP1oUj8fz5lTmbJeb3
# coqYw3fUZPwV+zbCSVEseIhjVQlGOQD8adTKmyn7oz/AyQCbEx2wmIncePLNfIXN
# U52vYuJhZqMUKkWHSphCK1D8G7WeCDAJ+uQt1wmJefkJ5ojOfRu4aqKbwVNgCeij
# uJ3XrR8cuOyYQfD2DoD75P/fnRCn6wC6X0qPGjpStOq/CUkVNTZZmg9U0rIbf35e
# Ca12VIp0bcrSBWcrduv/mLImlTgZiEQU5QpZomvnIj5EIdI/HMCb7XxIstiSDJFP
# PGaUr10CU+ue4p7k0x+GAWScAMLpWnR1DT3heYi/HAGXyRkjgNc2Wl+WFrFjDMZG
# QDvOXTXUWT5Dmhiuw8nLw/ubE19qtcfg8wXDWd8nYiveQclTuf80EGf2JjKYe/5c
# QpSBlIKdrAqLxksVStOYkEVgM4DgI974A6T2RUflzrgDQkfoQTZxd639ouiXdE4u
# 2h4djFrIHprVwvDGIqhPm73YHJpRxC+a9l+nJ5e6li6FV8Bg53hWf2rvwpWaSxEC
# yIKcyRoFfLpxtU56mWz06J7UWpjIn7+NuxhcQ/XQKujiYu54BNu90ftbCqhwfvCX
# hHjjCANdRyxjqCU4lwHSPzra5eX25pvcfizM/xdMTQCi2NYBDriL7ubgclWJLCcZ
# YfZ3AYwwggdeMIIFRqADAgECAhAFulYuS3p29y1ilWIrK5dmMA0GCSqGSIb3DQEB
# CwUAMGkxCzAJBgNVBAYTAlVTMRcwFQYDVQQKEw5EaWdpQ2VydCwgSW5jLjFBMD8G
# A1UEAxM4RGlnaUNlcnQgVHJ1c3RlZCBHNCBDb2RlIFNpZ25pbmcgUlNBNDA5NiBT
# SEEzODQgMjAyMSBDQTEwHhcNMjExMjAxMDAwMDAwWhcNMjMxMjA3MjM1OTU5WjBj
# MQswCQYDVQQGEwJVUzESMBAGA1UECBMJVGVubmVzc2VlMRIwEAYDVQQHEwlUdWxs
# YWhvbWExFTATBgNVBAoTDENhcmwgV2Vic3RlcjEVMBMGA1UEAxMMQ2FybCBXZWJz
# dGVyMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA98Xfb+rSvcKK6oXU
# 0jjumwlQCG2EltgTWqBp3yIWVJvPgbbryZB0JNT3vWbZUOnqZxENFG/YxDdR88By
# ukOAeveRE1oeYNva7kbEpQ7vH9sTNiVFsglOQRtSyBch3353BZ51gIESO1sxW9dw
# 41rMdUw6AhxoMxwhX0RTV25mUVAadNzDEuZzTP3zXpWuoAeYpppe8yptyw8OR79A
# d83ttDPLr6o/SwXYH2EeaQu195FFq7Fn6Yp/kLYAgOrpJFJpRxd+b2kWxnOaF5RI
# /EcbLH+/20xTDOho3V7VGWTiRs18QNLb1u14wiBTUnHvLsLBT1g5fli4RhL7rknp
# 8DHksuISIIQVMWVfgFmgCsV9of4ymf4EmyzIJexXcdFHDw2x/bWFqXti/TPV8wYK
# lEaLa2MrSMH1Jrnqt/vcP/DP2IUJa4FayoY2l8wvGOLNjYvfQ6c6RThd1ju7d62r
# 9EJI8aPXPvcrlyZ3y6UH9tiuuPzsyNVnXKyDphJm5I57tLsN8LSBNVo+I227VZfX
# q3MUuhz0oyErzFeKnLsPB1afLLfBzCSeYWOMjWpLo+PufKgh0X8OCRSfq6Iigpj9
# q5KzjQ29L9BVnOJuWt49fwWFfmBOrcaR9QaN4gAHSY9+K7Tj3kUo0AHl66QaGWet
# R7XYTel+ydst/fzYBq6SafVOt1kCAwEAAaOCAgYwggICMB8GA1UdIwQYMBaAFGg3
# 4Ou2O/hfEYb7/mF7CIhl9E5CMB0GA1UdDgQWBBQ5WnsIlilu682kqvRMmUxb5DHu
# gTAOBgNVHQ8BAf8EBAMCB4AwEwYDVR0lBAwwCgYIKwYBBQUHAwMwgbUGA1UdHwSB
# rTCBqjBToFGgT4ZNaHR0cDovL2NybDMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0VHJ1
# c3RlZEc0Q29kZVNpZ25pbmdSU0E0MDk2U0hBMzg0MjAyMUNBMS5jcmwwU6BRoE+G
# TWh0dHA6Ly9jcmw0LmRpZ2ljZXJ0LmNvbS9EaWdpQ2VydFRydXN0ZWRHNENvZGVT
# aWduaW5nUlNBNDA5NlNIQTM4NDIwMjFDQTEuY3JsMD4GA1UdIAQ3MDUwMwYGZ4EM
# AQQBMCkwJwYIKwYBBQUHAgEWG2h0dHA6Ly93d3cuZGlnaWNlcnQuY29tL0NQUzCB
# lAYIKwYBBQUHAQEEgYcwgYQwJAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLmRpZ2lj
# ZXJ0LmNvbTBcBggrBgEFBQcwAoZQaHR0cDovL2NhY2VydHMuZGlnaWNlcnQuY29t
# L0RpZ2lDZXJ0VHJ1c3RlZEc0Q29kZVNpZ25pbmdSU0E0MDk2U0hBMzg0MjAyMUNB
# MS5jcnQwDAYDVR0TAQH/BAIwADANBgkqhkiG9w0BAQsFAAOCAgEAGcm1xuESCj6Y
# VIf55C/gtmnsRJWtf7zEyqUtXhYU+PMciHnjnUbOmuF1+jKTA6j9FN0Ktv33fVxt
# WQ+ZisNssZbfwaUd3goBQatFF2TmUc1KVsRUj/VU+uVPcL++tzaYkDydowhiP+9D
# IEOXOYxunjlwFppOGrk3edKRj8p7puv9sZZTdPiUHmJ1GvideoXTAJ1Db6Jmn6ee
# tnl4m6zx9CCDJF9z8KexKS1bSpJBbdKz71H1PlgI7Tu4ntLyyaRVOpan8XYWmu9k
# 35TOfHHl8Cvbg6itg0fIJgvqnLJ4Huc+y6o/zrvj6HrFSOK6XowdQLQshrMZ2ceT
# u8gVkZsKZtu0JeMpkbVKmKi/7RXIZdh9bn0NhzslioXEX+s70d60kntMsBAQX0Ar
# OpKmrqZZJuxNMGAIXpEwSTeyqu0ujZI9eE1AU7EcZsYkZawdyLmilZdw1qwEQlAv
# EqyjbjY81qtpkORAeJSpnPelUlyyQelJPLWFR0syKsUyROqg5OFXINxkHaJcuWLW
# RPFJOEooSWPEid4rHMftaG2gOPg35o7yPzzHd8Y9pCX2v55NYjLrjUkz9JCjQ/g0
# LiOo3a+yvot+7izsaJEs8SAdhG7RZ/fdsyv+SyyoEzsd1iO/mZ2DQ0rKaU/fiCXJ
# pvrNmEwg+pbeIOCOgS0x5pQ0dyMlBZoxggYKMIIGBgIBATB9MGkxCzAJBgNVBAYT
# AlVTMRcwFQYDVQQKEw5EaWdpQ2VydCwgSW5jLjFBMD8GA1UEAxM4RGlnaUNlcnQg
# VHJ1c3RlZCBHNCBDb2RlIFNpZ25pbmcgUlNBNDA5NiBTSEEzODQgMjAyMSBDQTEC
# EAW6Vi5Lenb3LWKVYisrl2YwCQYFKw4DAhoFAKBAMBkGCSqGSIb3DQEJAzEMBgor
# BgEEAYI3AgEEMCMGCSqGSIb3DQEJBDEWBBSZnTDf2f9lXCeOJpljFHCIPJCuJDAN
# BgkqhkiG9w0BAQEFAASCAgAWqLhhrb2XifSc00acjA1EGPJIrjLsUGw/DBqTwJSd
# mwKEmUtpJKk9m2xhdAUsaBc6QBPnrYjYAFxIF4K2B1GMQ8xNrkOreaq0pPMenxcE
# YfdkkcuGbvGubSFahiw4aUp7or67bxVBJ9O7mEIhLc505HFHM69uOBjyw6H1pRxu
# wuwjQTEFYppn3KI7BoE5qc1oKORqVtRBpqG6P0ajLyRiOwaDPhOre3WGOV3dZRMF
# 1gV9kT5XzADxDSYh1fQGQdZZdj/llJ0IZD6lituhhwpvFjcUmLDohyAfqSy89al6
# ef6G9BR5wpR/5q6/Z7N8vPb9gUpOCd5nzObRkVyB2UntHXt4IkExz6MWGWP7drYs
# /7a8xcBzmkUGuZGzyB90g5CBsLvYvhPE2XkMJ7nWbjj2kVW/MTdNl32i5SyzdHW1
# TEgEFQRKYyZ9JJjl+aMnKJdk8jGy4Ndpqxkujxu/oJ9jeQhoVsh4IGVcdLoRLLgL
# cKR+aLkuRjjfq2Am2PKR/V2CY1LrzCk90iAWVJ4dGqrsUKKn8eVXhWeiw7GL2ESO
# 6iGo8QO6tN06qUAEFvO9X0c8kVkp03sCBA4ss+QxNF+2iKBU4Musceg1hVElfyrs
# JqkBa7F5myMvRF/1MH28OH8Josxg4ldhMHIrE57/pSEAxNuLbNv3Gwq/gYnX/2h7
# u6GCAyAwggMcBgkqhkiG9w0BCQYxggMNMIIDCQIBATB3MGMxCzAJBgNVBAYTAlVT
# MRcwFQYDVQQKEw5EaWdpQ2VydCwgSW5jLjE7MDkGA1UEAxMyRGlnaUNlcnQgVHJ1
# c3RlZCBHNCBSU0E0MDk2IFNIQTI1NiBUaW1lU3RhbXBpbmcgQ0ECEAxNaXJLlPo8
# Kko9KQeAPVowDQYJYIZIAWUDBAIBBQCgaTAYBgkqhkiG9w0BCQMxCwYJKoZIhvcN
# AQcBMBwGCSqGSIb3DQEJBTEPFw0yMzAzMjQyMzAyMTFaMC8GCSqGSIb3DQEJBDEi
# BCCSZ6n7mD/dN0vYG9LQyoLt5wa74bBdyrcHjQJHIBSL1zANBgkqhkiG9w0BAQEF
# AASCAgBYjxl05AwdJ+Renh5kl+lJ+VgwMNAOilxeGK4za7MElySrH4qCStM05zLT
# Gn72BPQ1Kxyq1iefdp3J3WSkl67GD1+4s/9hEj6b3M352iXhgnxL0ZF4nwaujWvJ
# OwhHPotlJTVMqQxe4M6tMz3KHhIO1IkYR+xA4TG7YhBFp7FkLLMnTv1yEndj6OsW
# ISUbw7xBAcbH/8A2bHCeYkzy0SYPf8RhU2kuMepspcd5jXeOxXkSsTx3rPZe7I+H
# 67mtPm0l+3C2lCRGIhXk075h5XMY33hqokDdL2jaRI2rXTp6LKwVpmjTljs3ajiR
# ctbZbW6VqXAg7HxhbG6hifTkbdJ3w2sKYMlT47TBmxG5GKCKR8eXukYLwSEdrBLm
# A09CUTBOZ0zwlqOTiAmznoLPbSM2kgRJe785mW05rmoDCNFr5rlGNDSwLNazzr5o
# ReJWO3Fcx5lqdgMbkdrXb+mPtpiWTCK9woAzygrpzrjqFRiFPiz1CDImXN8Wnkha
# 8xyB83VDu0t9l5t/Bsl+gzd65+KeAOfRQF1k0KlfGGMxAKOOnJ56NDU2Ncl9rFFQ
# bROVStOZFSn2AcV3od1Tfc1kXKuwfHeNWZ3BfzFxfF1D9kcR+/gG+nhQLcVP6q1p
# yaY3n2QrZjXY8st7Vk6hMqp4HaCVia3BrENaTIjKUq3Wf1WA1g==
# SIG # End signature block
